
Avalon_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08019a88  08019a88  0001aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a868  0801a868  0001c1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a868  0801a868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a870  0801a870  0001c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801a870  0801a870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  0801a87c  0801a87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0801a888  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010a10  200001fc  0801aa84  0001c1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010c0c  0801aa84  0001cc0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00074986  00000000  00000000  0001c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b31d  00000000  00000000  00090bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005620  00000000  00000000  0009bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000041be  00000000  00000000  000a14f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b0f8  00000000  00000000  000a56ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005248e  00000000  00000000  000e07a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197450  00000000  00000000  00132c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000fb  00000000  00000000  002ca084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00019ba4  00000000  00000000  002ca180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  002e3d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  002e3d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019a6c 	.word	0x08019a6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08019a6c 	.word	0x08019a6c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f016 fee6 	bl	8017cf2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f30:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f50:	2208      	movs	r2, #8
 8000f52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f70:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	481e      	ldr	r0, [pc, #120]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000f96:	f002 fa8b 	bl	80034b0 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f001 f9f8 	bl	8002394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000fb0:	f003 ff20 	bl	8004df4 <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fba:	f001 f9eb 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_ADC1_Init+0x10c>)
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000fdc:	f003 f85a 	bl	8004094 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe6:	f001 f9d5 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_ADC1_Init+0x110>)
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <MX_ADC1_Init+0x108>)
 8000ff8:	f003 f84c 	bl	8004094 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001002:	f001 f9c7 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	@ 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000218 	.word	0x20000218
 8001014:	04300002 	.word	0x04300002
 8001018:	08600004 	.word	0x08600004

0800101c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f016 fe62 	bl	8017cf2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800102e:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001030:	4a3a      	ldr	r2, [pc, #232]	@ (800111c <MX_ADC2_Init+0x100>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001034:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001036:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800103a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001042:	4b35      	ldr	r3, [pc, #212]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001048:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001054:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001056:	2208      	movs	r2, #8
 8001058:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800105c:	2200      	movs	r2, #0
 800105e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001060:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001062:	2200      	movs	r2, #0
 8001064:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8001066:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001068:	2203      	movs	r2, #3
 800106a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG3;
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001076:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800107c:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800107e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800109a:	481f      	ldr	r0, [pc, #124]	@ (8001118 <MX_ADC2_Init+0xfc>)
 800109c:	f002 fa08 	bl	80034b0 <HAL_ADC_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010a6:	f001 f975 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <MX_ADC2_Init+0x104>)
 80010ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	2306      	movs	r3, #6
 80010b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b6:	237f      	movs	r3, #127	@ 0x7f
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ba:	2304      	movs	r3, #4
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <MX_ADC2_Init+0xfc>)
 80010c8:	f002 ffe4 	bl	8004094 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010d2:	f001 f95f 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_ADC2_Init+0x108>)
 80010d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010da:	230c      	movs	r3, #12
 80010dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC2_Init+0xfc>)
 80010e4:	f002 ffd6 	bl	8004094 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80010ee:	f001 f951 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <MX_ADC2_Init+0x10c>)
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010f6:	2312      	movs	r3, #18
 80010f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC2_Init+0xfc>)
 8001100:	f002 ffc8 	bl	8004094 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 800110a:	f001 f943 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000284 	.word	0x20000284
 800111c:	50000100 	.word	0x50000100
 8001120:	1d500080 	.word	0x1d500080
 8001124:	21800100 	.word	0x21800100
 8001128:	25b00200 	.word	0x25b00200

0800112c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f016 fdd4 	bl	8017cf2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800114c:	4a31      	ldr	r2, [pc, #196]	@ (8001214 <MX_ADC3_Init+0xe8>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001152:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001172:	2204      	movs	r2, #4
 8001174:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800117e:	2201      	movs	r2, #1
 8001180:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_ADC3_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_ADC3_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_ADC3_Init+0xe4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_ADC3_Init+0xe4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b2:	4817      	ldr	r0, [pc, #92]	@ (8001210 <MX_ADC3_Init+0xe4>)
 80011b4:	f002 f97c 	bl	80034b0 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011be:	f001 f8e9 	bl	8002394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	@ (8001210 <MX_ADC3_Init+0xe4>)
 80011ce:	f003 fe11 	bl	8004df4 <HAL_ADCEx_MultiModeConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011d8:	f001 f8dc 	bl	8002394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_ADC3_Init+0xec>)
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e0:	2306      	movs	r3, #6
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e8:	237f      	movs	r3, #127	@ 0x7f
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ec:	2304      	movs	r3, #4
 80011ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_ADC3_Init+0xe4>)
 80011fa:	f002 ff4b 	bl	8004094 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001204:	f001 f8c6 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3730      	adds	r7, #48	@ 0x30
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002f0 	.word	0x200002f0
 8001214:	50000400 	.word	0x50000400
 8001218:	04300002 	.word	0x04300002

0800121c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0a2      	sub	sp, #136	@ 0x88
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	2254      	movs	r2, #84	@ 0x54
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f016 fd58 	bl	8017cf2 <memset>
  if(adcHandle->Instance==ADC1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800124a:	d172      	bne.n	8001332 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800124c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001250:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001252:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001256:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fc51 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001268:	f001 f894 	bl	8002394 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800126c:	4b8b      	ldr	r3, [pc, #556]	@ (800149c <HAL_ADC_MspInit+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a8a      	ldr	r2, [pc, #552]	@ (800149c <HAL_ADC_MspInit+0x280>)
 8001274:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001276:	4b89      	ldr	r3, [pc, #548]	@ (800149c <HAL_ADC_MspInit+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d10b      	bne.n	8001296 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800127e:	4b88      	ldr	r3, [pc, #544]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a87      	ldr	r2, [pc, #540]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001284:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b85      	ldr	r3, [pc, #532]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b82      	ldr	r3, [pc, #520]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a81      	ldr	r2, [pc, #516]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b7f      	ldr	r3, [pc, #508]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = I_CAP_Pin|V_CAP_Pin;
 80012ae:	2303      	movs	r3, #3
 80012b0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f005 fb14 	bl	80068f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c8:	4b76      	ldr	r3, [pc, #472]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012ca:	4a77      	ldr	r2, [pc, #476]	@ (80014a8 <HAL_ADC_MspInit+0x28c>)
 80012cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ce:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d4:	4b73      	ldr	r3, [pc, #460]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b70      	ldr	r3, [pc, #448]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e6:	4b6f      	ldr	r3, [pc, #444]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ee:	4b6d      	ldr	r3, [pc, #436]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012f6:	4b6b      	ldr	r3, [pc, #428]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012f8:	2220      	movs	r2, #32
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012fc:	4b69      	ldr	r3, [pc, #420]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 80012fe:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001302:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001304:	4867      	ldr	r0, [pc, #412]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 8001306:	f004 f963 	bl	80055d0 <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001310:	f001 f840 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a63      	ldr	r2, [pc, #396]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54
 800131a:	4a62      	ldr	r2, [pc, #392]	@ (80014a4 <HAL_ADC_MspInit+0x288>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	2012      	movs	r0, #18
 8001326:	f003 ff25 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800132a:	2012      	movs	r0, #18
 800132c:	f003 ff3c 	bl	80051a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001330:	e0af      	b.n	8001492 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a5d      	ldr	r2, [pc, #372]	@ (80014ac <HAL_ADC_MspInit+0x290>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d171      	bne.n	8001420 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800133c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001340:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001342:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f008 fbd9 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001358:	f001 f81c 	bl	8002394 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <HAL_ADC_MspInit+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a4e      	ldr	r2, [pc, #312]	@ (800149c <HAL_ADC_MspInit+0x280>)
 8001364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001366:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_ADC_MspInit+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10b      	bne.n	8001386 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b46      	ldr	r3, [pc, #280]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a45      	ldr	r2, [pc, #276]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = V_CHASSIS_Pin|I_SOURCE_Pin|I_CHASSIS_Pin;
 800139e:	230e      	movs	r3, #14
 80013a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013ae:	4619      	mov	r1, r3
 80013b0:	483f      	ldr	r0, [pc, #252]	@ (80014b0 <HAL_ADC_MspInit+0x294>)
 80013b2:	f005 fa9d 	bl	80068f0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013b8:	4a3f      	ldr	r2, [pc, #252]	@ (80014b8 <HAL_ADC_MspInit+0x29c>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013be:	2224      	movs	r2, #36	@ 0x24
 80013c0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013da:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013e6:	2220      	movs	r2, #32
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013ec:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013f2:	4830      	ldr	r0, [pc, #192]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 80013f4:	f004 f8ec 	bl	80055d0 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 80013fe:	f000 ffc9 	bl	8002394 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a2b      	ldr	r2, [pc, #172]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
 8001408:	4a2a      	ldr	r2, [pc, #168]	@ (80014b4 <HAL_ADC_MspInit+0x298>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	2012      	movs	r0, #18
 8001414:	f003 feae 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001418:	2012      	movs	r0, #18
 800141a:	f003 fec5 	bl	80051a8 <HAL_NVIC_EnableIRQ>
}
 800141e:	e038      	b.n	8001492 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a25      	ldr	r2, [pc, #148]	@ (80014bc <HAL_ADC_MspInit+0x2a0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d133      	bne.n	8001492 <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800142a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001430:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001434:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4618      	mov	r0, r3
 800143c:	f008 fb62 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001446:	f000 ffa5 	bl	8002394 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_ADC_MspInit+0x284>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 800147a:	2302      	movs	r3, #2
 800147c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <HAL_ADC_MspInit+0x2a4>)
 800148e:	f005 fa2f 	bl	80068f0 <HAL_GPIO_Init>
}
 8001492:	bf00      	nop
 8001494:	3788      	adds	r7, #136	@ 0x88
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000041c 	.word	0x2000041c
 80014a0:	40021000 	.word	0x40021000
 80014a4:	2000035c 	.word	0x2000035c
 80014a8:	40020008 	.word	0x40020008
 80014ac:	50000100 	.word	0x50000100
 80014b0:	48000800 	.word	0x48000800
 80014b4:	200003bc 	.word	0x200003bc
 80014b8:	40020408 	.word	0x40020408
 80014bc:	50000400 	.word	0x50000400
 80014c0:	48000400 	.word	0x48000400

080014c4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  Telemetry::setup();
 80014c8:	f013 fabc 	bl	8014a44 <_ZN9Telemetry5setupEv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <_Z16MX_FREERTOS_Initv+0x1c>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <_Z16MX_FREERTOS_Initv+0x20>)
 80014d2:	f00a fad9 	bl	800ba88 <osThreadNew>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <_Z16MX_FREERTOS_Initv+0x24>)
 80014da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08019af4 	.word	0x08019af4
 80014e4:	08002051 	.word	0x08002051
 80014e8:	20000420 	.word	0x20000420

080014ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_CRC_Init+0x3c>)
 80014f2:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <MX_CRC_Init+0x40>)
 80014f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_CRC_Init+0x3c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_CRC_Init+0x3c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_CRC_Init+0x3c>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_CRC_Init+0x3c>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_CRC_Init+0x3c>)
 8001510:	2201      	movs	r2, #1
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_CRC_Init+0x3c>)
 8001516:	f003 fe55 	bl	80051c4 <HAL_CRC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001520:	f000 ff38 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000424 	.word	0x20000424
 800152c:	40023000 	.word	0x40023000

08001530 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_CRC_MspInit+0x38>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10b      	bne.n	800155a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_CRC_MspInit+0x3c>)
 8001544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_CRC_MspInit+0x3c>)
 8001548:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800154c:	6493      	str	r3, [r2, #72]	@ 0x48
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_CRC_MspInit+0x3c>)
 8001550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023000 	.word	0x40023000
 800156c:	40021000 	.word	0x40021000

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <MX_DMA_Init+0x78>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <MX_DMA_Init+0x78>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6493      	str	r3, [r2, #72]	@ 0x48
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <MX_DMA_Init+0x78>)
 8001584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <MX_DMA_Init+0x78>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	4a15      	ldr	r2, [pc, #84]	@ (80015e8 <MX_DMA_Init+0x78>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6493      	str	r3, [r2, #72]	@ 0x48
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <MX_DMA_Init+0x78>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_DMA_Init+0x78>)
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <MX_DMA_Init+0x78>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <MX_DMA_Init+0x78>)
 80015b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	200b      	movs	r0, #11
 80015c4:	f003 fdd6 	bl	8005174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015c8:	200b      	movs	r0, #11
 80015ca:	f003 fded 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	2038      	movs	r0, #56	@ 0x38
 80015d4:	f003 fdce 	bl	8005174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80015d8:	2038      	movs	r0, #56	@ 0x38
 80015da:	f003 fde5 	bl	80051a8 <HAL_NVIC_EnableIRQ>

}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <MX_FDCAN2_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 80015f2:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <MX_FDCAN2_Init+0x88>)
 80015f4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800160a:	2200      	movs	r2, #0
 800160c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001610:	2200      	movs	r2, #0
 8001612:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001616:	2200      	movs	r2, #0
 8001618:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800161c:	2210      	movs	r2, #16
 800161e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001622:	2201      	movs	r2, #1
 8001624:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001628:	2202      	movs	r2, #2
 800162a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800162e:	2202      	movs	r2, #2
 8001630:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001634:	2201      	movs	r2, #1
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800163a:	2201      	movs	r2, #1
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001640:	2201      	movs	r2, #1
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001646:	2201      	movs	r2, #1
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_FDCAN2_Init+0x84>)
 800165e:	f004 fa29 	bl	8005ab4 <HAL_FDCAN_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001668:	f000 fe94 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000448 	.word	0x20000448
 8001674:	40006800 	.word	0x40006800

08001678 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 800167e:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <MX_FDCAN3_Init+0x88>)
 8001680:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 8001696:	2201      	movs	r2, #1
 8001698:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 800169c:	2201      	movs	r2, #1
 800169e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016b4:	22a7      	movs	r2, #167	@ 0xa7
 80016b6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016ba:	2202      	movs	r2, #2
 80016bc:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 5;
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016c0:	2205      	movs	r2, #5
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 8;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016c6:	2208      	movs	r2, #8
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 8;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016cc:	2208      	movs	r2, #8
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 8;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 28;
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016d8:	221c      	movs	r2, #28
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 8;
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016de:	2208      	movs	r2, #8
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_FDCAN3_Init+0x84>)
 80016ea:	f004 f9e3 	bl	8005ab4 <HAL_FDCAN_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 80016f4:	f000 fe4e 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200004ac 	.word	0x200004ac
 8001700:	40006c00 	.word	0x40006c00

08001704 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0a0      	sub	sp, #128	@ 0x80
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	2254      	movs	r2, #84	@ 0x54
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f016 fae4 	bl	8017cf2 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a4b      	ldr	r2, [pc, #300]	@ (800185c <HAL_FDCAN_MspInit+0x158>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d141      	bne.n	80017b8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800173a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800173e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f008 f9dd 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001750:	f000 fe20 	bl	8002394 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001754:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	4a41      	ldr	r2, [pc, #260]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 800175c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10b      	bne.n	800177e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001766:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a3e      	ldr	r2, [pc, #248]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 800176c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b3c      	ldr	r3, [pc, #240]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a38      	ldr	r2, [pc, #224]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001796:	2360      	movs	r3, #96	@ 0x60
 8001798:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80017a6:	2309      	movs	r3, #9
 80017a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017ae:	4619      	mov	r1, r3
 80017b0:	482d      	ldr	r0, [pc, #180]	@ (8001868 <HAL_FDCAN_MspInit+0x164>)
 80017b2:	f005 f89d 	bl	80068f0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 80017b6:	e04d      	b.n	8001854 <HAL_FDCAN_MspInit+0x150>
  else if(fdcanHandle->Instance==FDCAN3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_FDCAN_MspInit+0x168>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d148      	bne.n	8001854 <HAL_FDCAN_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80017c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017cc:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 f996 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_FDCAN_MspInit+0xde>
      Error_Handler();
 80017de:	f000 fdd9 	bl	8002394 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 80017ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_FDCAN_MspInit+0x15c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10b      	bne.n	800180c <HAL_FDCAN_MspInit+0x108>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_FDCAN_MspInit+0x160>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001824:	2318      	movs	r3, #24
 8001826:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001834:	230b      	movs	r3, #11
 8001836:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800183c:	4619      	mov	r1, r3
 800183e:	480a      	ldr	r0, [pc, #40]	@ (8001868 <HAL_FDCAN_MspInit+0x164>)
 8001840:	f005 f856 	bl	80068f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 5, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2105      	movs	r1, #5
 8001848:	2058      	movs	r0, #88	@ 0x58
 800184a:	f003 fc93 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 800184e:	2058      	movs	r0, #88	@ 0x58
 8001850:	f003 fcaa 	bl	80051a8 <HAL_NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3780      	adds	r7, #128	@ 0x80
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40006800 	.word	0x40006800
 8001860:	20000510 	.word	0x20000510
 8001864:	40021000 	.word	0x40021000
 8001868:	48000400 	.word	0x48000400
 800186c:	40006c00 	.word	0x40006c00

08001870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001886:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <MX_GPIO_Init+0xe8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a33      	ldr	r2, [pc, #204]	@ (8001958 <MX_GPIO_Init+0xe8>)
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <MX_GPIO_Init+0xe8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_GPIO_Init+0xe8>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2140      	movs	r1, #64	@ 0x40
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <MX_GPIO_Init+0xec>)
 8001904:	f005 f976 	bl	8006bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800190e:	4814      	ldr	r0, [pc, #80]	@ (8001960 <MX_GPIO_Init+0xf0>)
 8001910:	f005 f970 	bl	8006bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001914:	2340      	movs	r3, #64	@ 0x40
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <MX_GPIO_Init+0xec>)
 800192c:	f004 ffe0 	bl	80068f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_GPIO_Init+0xf0>)
 800194a:	f004 ffd1 	bl	80068f0 <HAL_GPIO_Init>

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	48000800 	.word	0x48000800
 8001960:	48000400 	.word	0x48000400

08001964 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ba      	sub	sp, #232	@ 0xe8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800196a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001974:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001982:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001986:	2260      	movs	r2, #96	@ 0x60
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f016 f9b1 	bl	8017cf2 <memset>
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001990:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80019a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80019b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b4:	2224      	movs	r2, #36	@ 0x24
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f016 f99a 	bl	8017cf2 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2220      	movs	r2, #32
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f016 f994 	bl	8017cf2 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80019ca:	4bcc      	ldr	r3, [pc, #816]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 80019cc:	4acc      	ldr	r2, [pc, #816]	@ (8001d00 <MX_HRTIM1_Init+0x39c>)
 80019ce:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80019d0:	4bca      	ldr	r3, [pc, #808]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80019d6:	4bc9      	ldr	r3, [pc, #804]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80019dc:	48c7      	ldr	r0, [pc, #796]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 80019de:	f005 f921 	bl	8006c24 <HAL_HRTIM_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80019e8:	f000 fcd4 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80019ec:	210c      	movs	r1, #12
 80019ee:	48c3      	ldr	r0, [pc, #780]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 80019f0:	f005 f9e8 	bl	8006dc4 <HAL_HRTIM_DLLCalibrationStart>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 80019fa:	f000 fccb 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80019fe:	210a      	movs	r1, #10
 8001a00:	48be      	ldr	r0, [pc, #760]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001a02:	f005 fa37 	bl	8006e74 <HAL_HRTIM_PollForDLLCalibration>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001a0c:	f000 fcc2 	bl	8002394 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 8001a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERA_CMP3;
 8001a18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001a20:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a24:	461a      	mov	r2, r3
 8001a26:	2101      	movs	r1, #1
 8001a28:	48b4      	ldr	r0, [pc, #720]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001a2a:	f005 fa7f 	bl	8006f2c <HAL_HRTIM_ADCTriggerConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8001a34:	f000 fcae 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	48af      	ldr	r0, [pc, #700]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001a3e:	f005 fc61 	bl	8007304 <HAL_HRTIM_ADCPostScalerConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001a48:	f000 fca4 	bl	8002394 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 8001a4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001a54:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 8001a5c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a60:	461a      	mov	r2, r3
 8001a62:	2104      	movs	r1, #4
 8001a64:	48a5      	ldr	r0, [pc, #660]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001a66:	f005 fa61 	bl	8006f2c <HAL_HRTIM_ADCTriggerConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_HRTIM1_Init+0x110>
  {
    Error_Handler();
 8001a70:	f000 fc90 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8001a74:	2200      	movs	r2, #0
 8001a76:	2104      	movs	r1, #4
 8001a78:	48a0      	ldr	r0, [pc, #640]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001a7a:	f005 fc43 	bl	8007304 <HAL_HRTIM_ADCPostScalerConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_HRTIM1_Init+0x124>
  {
    Error_Handler();
 8001a84:	f000 fc86 	bl	8002394 <Error_Handler>
  }
  pTimeBaseCfg.Period = 34000;
 8001a88:	f248 43d0 	movw	r3, #34000	@ 0x84d0
 8001a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 16;
 8001a90:	2310      	movs	r3, #16
 8001a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8001aa2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2106      	movs	r1, #6
 8001aaa:	4894      	ldr	r0, [pc, #592]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001aac:	f005 fa16 	bl	8006edc <HAL_HRTIM_TimeBaseConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_HRTIM1_Init+0x156>
  {
    Error_Handler();
 8001ab6:	f000 fc6d 	bl	8002394 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 8001aba:	2310      	movs	r3, #16
 8001abc:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DMASrcAddress = 0x0000;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.DMADstAddress = 0x0000;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.DMASize = 0x1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001b0c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b10:	461a      	mov	r2, r3
 8001b12:	2106      	movs	r1, #6
 8001b14:	4879      	ldr	r0, [pc, #484]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001b16:	f005 fd3f 	bl	8007598 <HAL_HRTIM_WaveformTimerConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001b20:	f000 fc38 	bl	8002394 <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001b30:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001b34:	461a      	mov	r2, r3
 8001b36:	2100      	movs	r1, #0
 8001b38:	4870      	ldr	r0, [pc, #448]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001b3a:	f005 f9cf 	bl	8006edc <HAL_HRTIM_TimeBaseConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_HRTIM1_Init+0x1e4>
  {
    Error_Handler();
 8001b44:	f000 fc26 	bl	8002394 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	4865      	ldr	r0, [pc, #404]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001b66:	f005 fda4 	bl	80076b2 <HAL_HRTIM_WaveformTimerControl>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 8001b70:	f000 fc10 	bl	8002394 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001b7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 8001ba4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8001bb2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001bba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	484e      	ldr	r0, [pc, #312]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001bc4:	f005 fce8 	bl	8007598 <HAL_HRTIM_WaveformTimerConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_HRTIM1_Init+0x26e>
  {
    Error_Handler();
 8001bce:	f000 fbe1 	bl	8002394 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_E;
 8001bd8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001be0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001be4:	461a      	mov	r2, r3
 8001be6:	2104      	movs	r1, #4
 8001be8:	4844      	ldr	r0, [pc, #272]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001bea:	f005 fcd5 	bl	8007598 <HAL_HRTIM_WaveformTimerConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8001bf4:	f000 fbce 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8001bf8:	f646 2340 	movw	r3, #27200	@ 0x6a40
 8001bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001bfe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c02:	2201      	movs	r2, #1
 8001c04:	2100      	movs	r1, #0
 8001c06:	483d      	ldr	r0, [pc, #244]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001c08:	f005 fe06 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8001c12:	f000 fbbf 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001c16:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001c20:	2300      	movs	r3, #0
 8001c22:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001c24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c28:	2202      	movs	r2, #2
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4833      	ldr	r0, [pc, #204]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001c2e:	f005 fdf3 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_HRTIM1_Init+0x2d8>
  {
    Error_Handler();
 8001c38:	f000 fbac 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001c3c:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001c42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c46:	2204      	movs	r2, #4
 8001c48:	2100      	movs	r1, #0
 8001c4a:	482c      	ldr	r0, [pc, #176]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001c4c:	f005 fde4 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_HRTIM1_Init+0x2f6>
  {
    Error_Handler();
 8001c56:	f000 fb9d 	bl	8002394 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 220;
 8001c5e:	23dc      	movs	r3, #220	@ 0xdc
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 220;
 8001c6e:	23dc      	movs	r3, #220	@ 0xdc
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c82:	461a      	mov	r2, r3
 8001c84:	2100      	movs	r1, #0
 8001c86:	481d      	ldr	r0, [pc, #116]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001c88:	f005 fd46 	bl	8007718 <HAL_HRTIM_DeadTimeConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8001c92:	f000 fb7f 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4817      	ldr	r0, [pc, #92]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001ca0:	f005 fd3a 	bl	8007718 <HAL_HRTIM_DeadTimeConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_HRTIM1_Init+0x34a>
  {
    Error_Handler();
 8001caa:	f000 fb73 	bl	8002394 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4809      	ldr	r0, [pc, #36]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001cd6:	f005 ff0d 	bl	8007af4 <HAL_HRTIM_WaveformOutputConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_HRTIM1_Init+0x380>
  {
    Error_Handler();
 8001ce0:	f000 fb58 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cea:	2104      	movs	r1, #4
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <MX_HRTIM1_Init+0x398>)
 8001cee:	f005 ff01 	bl	8007af4 <HAL_HRTIM_WaveformOutputConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <MX_HRTIM1_Init+0x3a4>
 8001cf8:	e004      	b.n	8001d04 <MX_HRTIM1_Init+0x3a0>
 8001cfa:	bf00      	nop
 8001cfc:	20000514 	.word	0x20000514
 8001d00:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8001d04:	f000 fb46 	bl	8002394 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2202      	movs	r2, #2
 8001d14:	2100      	movs	r1, #0
 8001d16:	4831      	ldr	r0, [pc, #196]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001d18:	f005 feec 	bl	8007af4 <HAL_HRTIM_WaveformOutputConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_HRTIM1_Init+0x3c2>
  {
    Error_Handler();
 8001d22:	f000 fb37 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	482b      	ldr	r0, [pc, #172]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001d30:	f005 fee0 	bl	8007af4 <HAL_HRTIM_WaveformOutputConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_HRTIM1_Init+0x3da>
  {
    Error_Handler();
 8001d3a:	f000 fb2b 	bl	8002394 <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001d44:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4823      	ldr	r0, [pc, #140]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001d4e:	f005 f8c5 	bl	8006edc <HAL_HRTIM_TimeBaseConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_HRTIM1_Init+0x3f8>
  {
    Error_Handler();
 8001d58:	f000 fb1c 	bl	8002394 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8001d5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d60:	461a      	mov	r2, r3
 8001d62:	2104      	movs	r1, #4
 8001d64:	481d      	ldr	r0, [pc, #116]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001d66:	f005 fca4 	bl	80076b2 <HAL_HRTIM_WaveformTimerControl>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_HRTIM1_Init+0x410>
  {
    Error_Handler();
 8001d70:	f000 fb10 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3400;
 8001d74:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001d78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2104      	movs	r1, #4
 8001d82:	4816      	ldr	r0, [pc, #88]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001d84:	f005 fd48 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_HRTIM1_Init+0x42e>
  {
    Error_Handler();
 8001d8e:	f000 fb01 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001d92:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	2104      	movs	r1, #4
 8001da0:	480e      	ldr	r0, [pc, #56]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001da2:	f005 fd39 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_HRTIM1_Init+0x44c>
  {
    Error_Handler();
 8001dac:	f000 faf2 	bl	8002394 <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001db0:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001db6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dba:	2204      	movs	r2, #4
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001dc0:	f005 fd2a 	bl	8007818 <HAL_HRTIM_WaveformCompareConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_HRTIM1_Init+0x46a>
  {
    Error_Handler();
 8001dca:	f000 fae3 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001dce:	4803      	ldr	r0, [pc, #12]	@ (8001ddc <MX_HRTIM1_Init+0x478>)
 8001dd0:	f000 f82c 	bl	8001e2c <HAL_HRTIM_MspPostInit>

}
 8001dd4:	bf00      	nop
 8001dd6:	37e8      	adds	r7, #232	@ 0xe8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000514 	.word	0x20000514

08001de0 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_HRTIM_MspInit+0x44>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d113      	bne.n	8001e1a <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_HRTIM_MspInit+0x48>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <HAL_HRTIM_MspInit+0x48>)
 8001df8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_HRTIM_MspInit+0x48>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	2043      	movs	r0, #67	@ 0x43
 8001e10:	f003 f9b0 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001e14:	2043      	movs	r0, #67	@ 0x43
 8001e16:	f003 f9c7 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40016800 	.word	0x40016800
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a20      	ldr	r2, [pc, #128]	@ (8001ecc <HAL_HRTIM_MspPostInit+0xa0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d13a      	bne.n	8001ec4 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = BAT_MOS_LOW_Pin|BAT_MOS_HIGH_Pin;
 8001e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001e90:	2303      	movs	r3, #3
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480e      	ldr	r0, [pc, #56]	@ (8001ed4 <HAL_HRTIM_MspPostInit+0xa8>)
 8001e9c:	f004 fd28 	bl	80068f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAP_MOS_LOW_Pin|CAP_MOS_HIGH_Pin;
 8001ea0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001eb2:	230d      	movs	r3, #13
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec0:	f004 fd16 	bl	80068f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40016800 	.word	0x40016800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000800 	.word	0x48000800

08001ed8 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>:



class adc_manager {
public :
	adc_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp) :
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
		adc_cap_(adc_cap), adc_bat_(adc_bat), adc_temp_(adc_temp) {};
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	751a      	strb	r2, [r3, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	61da      	str	r2, [r3, #28]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>:
Mode_ModeTypedef;

class supercap_control_manager : public adc_manager{
public:

	supercap_control_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp) :
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
		adc_manager(adc_cap, adc_bat, adc_temp){};
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	f7ff ffd9 	bl	8001ed8 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 234e 	strb.w	r2, [r3, #846]	@ 0x34e
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8a3 2350 	strh.w	r2, [r3, #848]	@ 0x350
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f8a3 2352 	strh.w	r2, [r3, #850]	@ 0x352
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f8a3 2356 	strh.w	r2, [r3, #854]	@ 0x356
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8a3 235a 	strh.w	r2, [r3, #858]	@ 0x35a
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8a3 235c 	strh.w	r2, [r3, #860]	@ 0x35c
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2364 	strb.w	r2, [r3, #868]	@ 0x364
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2365 	strb.w	r2, [r3, #869]	@ 0x365
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f8a3 2368 	strh.w	r2, [r3, #872]	@ 0x368
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f8a3 236a 	strh.w	r2, [r3, #874]	@ 0x36a
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_+0xcc>)
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2478 	strb.w	r2, [r3, #1144]	@ 0x478
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	42700000 	.word	0x42700000

08001fdc <_ZN24supercap_control_managerD1Ev>:

	~supercap_control_manager(){};
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f000 ffd0 	bl	8002f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 f841 	bl	8002080 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffe:	f7ff fc37 	bl	8001870 <MX_GPIO_Init>
  MX_DMA_Init();
 8002002:	f7ff fab5 	bl	8001570 <MX_DMA_Init>
  MX_ADC1_Init();
 8002006:	f7fe ff7f 	bl	8000f08 <MX_ADC1_Init>
//  MX_FDCAN1_Init();
  MX_FDCAN2_Init();
 800200a:	f7ff faef 	bl	80015ec <MX_FDCAN2_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 800200e:	f000 fd59 	bl	8002ac4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002012:	f000 ff3d 	bl	8002e90 <MX_USB_PCD_Init>
  MX_FDCAN3_Init();
 8002016:	f7ff fb2f 	bl	8001678 <MX_FDCAN3_Init>
  MX_TIM8_Init();
 800201a:	f000 fc47 	bl	80028ac <MX_TIM8_Init>
  MX_ADC2_Init();
 800201e:	f7fe fffd 	bl	800101c <MX_ADC2_Init>
  MX_SPI2_Init();
 8002022:	f000 f9f7 	bl	8002414 <MX_SPI2_Init>
  MX_UART4_Init();
 8002026:	f000 fcb5 	bl	8002994 <MX_UART4_Init>
  MX_UART5_Init();
 800202a:	f000 fcff 	bl	8002a2c <MX_UART5_Init>
  MX_USART3_UART_Init();
 800202e:	f000 fd95 	bl	8002b5c <MX_USART3_UART_Init>
  MX_HRTIM1_Init();
 8002032:	f7ff fc97 	bl	8001964 <MX_HRTIM1_Init>
  MX_ADC3_Init();
 8002036:	f7ff f879 	bl	800112c <MX_ADC3_Init>
  MX_CRC_Init();
 800203a:	f7ff fa57 	bl	80014ec <MX_CRC_Init>
//  MX_IWDG_Init();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800203e:	f009 fcd9 	bl	800b9f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002042:	f7ff fa3f 	bl	80014c4 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002046:	f009 fcf9 	bl	800ba3c <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800204a:	bf00      	nop
 800204c:	e7fd      	b.n	800204a <main+0x58>
	...

08002050 <StartDefaultTask>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void StartDefaultTask(void *argument)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  supercap_controller.adc_init(filter_lengths);
 8002058:	4906      	ldr	r1, [pc, #24]	@ (8002074 <StartDefaultTask+0x24>)
 800205a:	4807      	ldr	r0, [pc, #28]	@ (8002078 <StartDefaultTask+0x28>)
 800205c:	f013 f99c 	bl	8015398 <_ZN11adc_manager8adc_initEPh>
//  HAL_Delay(100);
  HAL_HRTIM_WaveformCountStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER|HRTIM_TIMERID_TIMER_A|HRTIM_TIMERID_TIMER_E);
 8002060:	f44f 110c 	mov.w	r1, #2293760	@ 0x230000
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <StartDefaultTask+0x2c>)
 8002066:	f005 fdd1 	bl	8007c0c <HAL_HRTIM_WaveformCountStart_IT>
////  HAL_Delay(100);
  supercap_controller.init_loop();
 800206a:	4803      	ldr	r0, [pc, #12]	@ (8002078 <StartDefaultTask+0x28>)
 800206c:	f013 fbb5 	bl	80157da <_ZN24supercap_control_manager9init_loopEv>
  for(;;)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <StartDefaultTask+0x20>
 8002074:	20000000 	.word	0x20000000
 8002078:	20000610 	.word	0x20000610
 800207c:	20000514 	.word	0x20000514

08002080 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	@ 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	2238      	movs	r2, #56	@ 0x38
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f015 fe2f 	bl	8017cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f006 ff1a 	bl	8008edc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80020a8:	2329      	movs	r3, #41	@ 0x29
 80020aa:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020b2:	2301      	movs	r3, #1
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020b6:	2301      	movs	r3, #1
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020be:	2303      	movs	r3, #3
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 80020c2:	230c      	movs	r3, #12
 80020c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020c6:	2355      	movs	r3, #85	@ 0x55
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	4618      	mov	r0, r3
 80020dc:	f006 ffb2 	bl	8009044 <HAL_RCC_OscConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80020f0:	f000 f950 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f4:	230f      	movs	r3, #15
 80020f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f8:	2303      	movs	r3, #3
 80020fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2104      	movs	r1, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f007 faab 	bl	8009668 <HAL_RCC_ClockConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002122:	f000 f937 	bl	8002394 <Error_Handler>
  }
}
 8002126:	bf00      	nop
 8002128:	3750      	adds	r7, #80	@ 0x50
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_Z27AnalogSignal_ADCDMA_OVRStopP17ADC_HandleTypeDef>:
/* USER CODE BEGIN 4 */

 void AnalogSignal_ADCDMA_OVRStop(ADC_HandleTypeDef *hadc)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	hadc->Instance->CR |= 0x00000010;//ADC->CR->ADSTP write 1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0210 	orr.w	r2, r2, #16
 8002144:	609a      	str	r2, [r3, #8]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>:

 void AnalogSignal_ADCDMA_OVRRecovery(ADC_HandleTypeDef *hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	601a      	str	r2, [r3, #0]
	hadc->Instance->CFGR |= 0x00000001;//ADC->CFGR->DMAEN write 1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	60da      	str	r2, [r3, #12]

	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x88>)
 800217e:	429a      	cmp	r2, r3
 8002180:	d903      	bls.n	800218a <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x36>
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x8c>)
 8002184:	2208      	movs	r2, #8
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	e002      	b.n	8002190 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x3c>
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x90>)
 800218c:	2208      	movs	r2, #8
 800218e:	605a      	str	r2, [r3, #4]
	hadc->DMA_Handle->Instance->CCR |= 0x00000001;//DMA->CCRx->EN write 1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

	while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a4:	bf00      	nop
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f3      	bne.n	80021a6 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x52>
	{
		;
	}
	hadc->Instance->CR |= 0x00000004;//ADC->CR->ADSTART write 1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0204 	orr.w	r2, r2, #4
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40020094 	.word	0x40020094
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_ADC_ErrorCallback>:
//
//
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	AnalogSignal_ADCDMA_OVRStop(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff9c 	bl	800212e <_Z27AnalogSignal_ADCDMA_OVRStopP17ADC_HandleTypeDef>
//	HAL_Delay(100);
//	Safety_DMAden_ItemCheck();
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 8002200:	b580      	push	{r7, lr}
 8002202:	ed2d 8b04 	vpush	{d8-d9}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	uint8_t ADC_OVR_Flag=0;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
	if(__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR)==1UL)
 8002212:	4b58      	ldr	r3, [pc, #352]	@ (8002374 <HAL_HRTIM_RepetitionEventCallback+0x174>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b10      	cmp	r3, #16
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_HRTIM_RepetitionEventCallback+0x3e>
	{
		AnalogSignal_ADCDMA_OVRRecovery(&hadc1);
 8002234:	484f      	ldr	r0, [pc, #316]	@ (8002374 <HAL_HRTIM_RepetitionEventCallback+0x174>)
 8002236:	f7ff ff8d 	bl	8002154 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag=1;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
	}
	if(__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR)==1UL)
 800223e:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_HRTIM_RepetitionEventCallback+0x178>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b10      	cmp	r3, #16
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_HRTIM_RepetitionEventCallback+0x6a>
	{
		AnalogSignal_ADCDMA_OVRRecovery(&hadc2);
 8002260:	4845      	ldr	r0, [pc, #276]	@ (8002378 <HAL_HRTIM_RepetitionEventCallback+0x178>)
 8002262:	f7ff ff77 	bl	8002154 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag=1;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
//	int i = 0;
//	while (i < 100000) {
//		++i;
//		// Wait until the target tick count is reached
//	}
	if(ADC_OVR_Flag==0)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d17b      	bne.n	8002368 <HAL_HRTIM_RepetitionEventCallback+0x168>
		{
			supercap_controller.sample_adc();
 8002270:	4842      	ldr	r0, [pc, #264]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002272:	f013 f90b 	bl	801548c <_ZN11adc_manager10sample_adcEv>
			supercap_controller.all_safety_checks();
 8002276:	4841      	ldr	r0, [pc, #260]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002278:	f013 ff14 	bl	80160a4 <_ZN24supercap_control_manager17all_safety_checksEv>
			cap_voltage = supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 800227c:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 800227e:	899b      	ldrh	r3, [r3, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	4619      	mov	r1, r3
 8002284:	483d      	ldr	r0, [pc, #244]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002286:	f013 fa81 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <HAL_HRTIM_RepetitionEventCallback+0x180>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
			chassis_voltage = supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8002294:	4b39      	ldr	r3, [pc, #228]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002296:	89db      	ldrh	r3, [r3, #14]
 8002298:	2202      	movs	r2, #2
 800229a:	4619      	mov	r1, r3
 800229c:	4837      	ldr	r0, [pc, #220]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 800229e:	f013 fa75 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_HRTIM_RepetitionEventCallback+0x184>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
			cap_current = supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022ae:	895b      	ldrh	r3, [r3, #10]
 80022b0:	2200      	movs	r2, #0
 80022b2:	4619      	mov	r1, r3
 80022b4:	4831      	ldr	r0, [pc, #196]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022b6:	f013 fa69 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_HRTIM_RepetitionEventCallback+0x188>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
			battery_current = supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022c6:	8a5b      	ldrh	r3, [r3, #18]
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	482b      	ldr	r0, [pc, #172]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022ce:	f013 fa5d 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 80022d2:	eef0 7a40 	vmov.f32	s15, s0
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <HAL_HRTIM_RepetitionEventCallback+0x18c>)
 80022d8:	edc3 7a00 	vstr	s15, [r3]
			source_current = supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 80022dc:	4b27      	ldr	r3, [pc, #156]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022de:	8a1b      	ldrh	r3, [r3, #16]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4619      	mov	r1, r3
 80022e4:	4825      	ldr	r0, [pc, #148]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022e6:	f013 fa51 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 80022ea:	eef0 7a40 	vmov.f32	s15, s0
 80022ee:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_HRTIM_RepetitionEventCallback+0x190>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
			supercap_controller.loop_update(
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022f6:	895b      	ldrh	r3, [r3, #10]
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	481f      	ldr	r0, [pc, #124]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 80022fe:	f013 fa45 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8002302:	eeb0 8a40 	vmov.f32	s16, s0
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002308:	8a5b      	ldrh	r3, [r3, #18]
 800230a:	2204      	movs	r2, #4
 800230c:	4619      	mov	r1, r3
 800230e:	481b      	ldr	r0, [pc, #108]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002310:	f013 fa3c 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8002314:	eef0 8a40 	vmov.f32	s17, s0
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 800231a:	899b      	ldrh	r3, [r3, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	4619      	mov	r1, r3
 8002320:	4816      	ldr	r0, [pc, #88]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002322:	f013 fa33 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8002326:	eeb0 9a40 	vmov.f32	s18, s0
 800232a:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 800232c:	8a1b      	ldrh	r3, [r3, #16]
 800232e:	2203      	movs	r2, #3
 8002330:	4619      	mov	r1, r3
 8002332:	4812      	ldr	r0, [pc, #72]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002334:	f013 fa2a 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8002338:	eef0 9a40 	vmov.f32	s19, s0
 800233c:	4b0f      	ldr	r3, [pc, #60]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 800233e:	89db      	ldrh	r3, [r3, #14]
 8002340:	2202      	movs	r2, #2
 8002342:	4619      	mov	r1, r3
 8002344:	480d      	ldr	r0, [pc, #52]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002346:	f013 fa21 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 800234a:	eef0 7a40 	vmov.f32	s15, s0
 800234e:	eeb0 2a67 	vmov.f32	s4, s15
 8002352:	eef0 1a69 	vmov.f32	s3, s19
 8002356:	eeb0 1a49 	vmov.f32	s2, s18
 800235a:	eef0 0a68 	vmov.f32	s1, s17
 800235e:	eeb0 0a48 	vmov.f32	s0, s16
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <HAL_HRTIM_RepetitionEventCallback+0x17c>)
 8002364:	f013 fba6 	bl	8015ab4 <_ZN24supercap_control_manager11loop_updateEfffff>
				  supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis),
				  supercap_controller.get_compensated_adc(supercap_controller.ADC_filtered_data[adc_names::V_bat], adc_names::V_bat)
			);

	}
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	ecbd 8b04 	vpop	{d8-d9}
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000218 	.word	0x20000218
 8002378:	20000284 	.word	0x20000284
 800237c:	20000610 	.word	0x20000610
 8002380:	20000a8c 	.word	0x20000a8c
 8002384:	20000a90 	.word	0x20000a90
 8002388:	20000a94 	.word	0x20000a94
 800238c:	20000a98 	.word	0x20000a98
 8002390:	20000a9c 	.word	0x20000a9c

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <Error_Handler+0x8>

080023a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10a      	bne.n	80023c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d105      	bne.n	80023c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
supercap_control_manager supercap_controller(&hadc1, &hadc2, &hadc3);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80023bc:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80023be:	490b      	ldr	r1, [pc, #44]	@ (80023ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80023c0:	480b      	ldr	r0, [pc, #44]	@ (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023c2:	f7ff fda3 	bl	8001f0c <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d102      	bne.n	80023dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80023d6:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80023d8:	f7ff fe00 	bl	8001fdc <_ZN24supercap_control_managerD1Ev>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200002f0 	.word	0x200002f0
 80023e8:	20000284 	.word	0x20000284
 80023ec:	20000218 	.word	0x20000218
 80023f0:	20000610 	.word	0x20000610

080023f4 <_GLOBAL__sub_I_supercap_controller>:
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7ff ffcf 	bl	80023a0 <_Z41__static_initialization_and_destruction_0ii>
 8002402:	bd80      	pop	{r7, pc}

08002404 <_GLOBAL__sub_D_supercap_controller>:
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
 8002408:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff ffc7 	bl	80023a0 <_Z41__static_initialization_and_destruction_0ii>
 8002412:	bd80      	pop	{r7, pc}

08002414 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <MX_SPI2_Init+0x74>)
 800241a:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <MX_SPI2_Init+0x78>)
 800241c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002424:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_SPI2_Init+0x74>)
 800242e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002432:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800243a:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <MX_SPI2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002442:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002446:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <MX_SPI2_Init+0x74>)
 800244a:	2208      	movs	r2, #8
 800244c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <MX_SPI2_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002462:	2207      	movs	r2, #7
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <MX_SPI2_Init+0x74>)
 800246e:	2208      	movs	r2, #8
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_SPI2_Init+0x74>)
 8002474:	f007 fd94 	bl	8009fa0 <HAL_SPI_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800247e:	f7ff ff89 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000aa0 	.word	0x20000aa0
 800248c:	40003800 	.word	0x40003800

08002490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_SPI_MspInit+0x7c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d128      	bne.n	8002504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024e2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f4:	2305      	movs	r3, #5
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	@ (8002514 <HAL_SPI_MspInit+0x84>)
 8002500:	f004 f9f6 	bl	80068f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40003800 	.word	0x40003800
 8002510:	40021000 	.word	0x40021000
 8002514:	48000400 	.word	0x48000400

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_MspInit+0x50>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002522:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_MspInit+0x50>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6613      	str	r3, [r2, #96]	@ 0x60
 800252a:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <HAL_MspInit+0x50>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_MspInit+0x50>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a0b      	ldr	r2, [pc, #44]	@ (8002568 <HAL_MspInit+0x50>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_MspInit+0x50>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	210f      	movs	r1, #15
 8002552:	f06f 0001 	mvn.w	r0, #1
 8002556:	f002 fe0d 	bl	8005174 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800255a:	f006 fd63 	bl	8009024 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	@ 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800257c:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <HAL_InitTick+0xc8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	4a2c      	ldr	r2, [pc, #176]	@ (8002634 <HAL_InitTick+0xc8>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6593      	str	r3, [r2, #88]	@ 0x58
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_InitTick+0xc8>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f007 fa38 	bl	8009a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025a4:	f007 fa0a 	bl	80099bc <HAL_RCC_GetPCLK1Freq>
 80025a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ac:	4a22      	ldr	r2, [pc, #136]	@ (8002638 <HAL_InitTick+0xcc>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	3b01      	subs	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80025b8:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_InitTick+0xd0>)
 80025ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <HAL_InitTick+0xd0>)
 80025c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025c6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_InitTick+0xd0>)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80025ce:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_InitTick+0xd0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_InitTick+0xd0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80025da:	4818      	ldr	r0, [pc, #96]	@ (800263c <HAL_InitTick+0xd0>)
 80025dc:	f007 fd8b 	bl	800a0f6 <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11b      	bne.n	8002626 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80025ee:	4813      	ldr	r0, [pc, #76]	@ (800263c <HAL_InitTick+0xd0>)
 80025f0:	f007 fdd8 	bl	800a1a4 <HAL_TIM_Base_Start_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d111      	bne.n	8002626 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002602:	201c      	movs	r0, #28
 8002604:	f002 fdd0 	bl	80051a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	d808      	bhi.n	8002620 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800260e:	2200      	movs	r2, #0
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	201c      	movs	r0, #28
 8002614:	f002 fdae 	bl	8005174 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002618:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_InitTick+0xd4>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e002      	b.n	8002626 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800262a:	4618      	mov	r0, r3
 800262c:	3730      	adds	r7, #48	@ 0x30
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	431bde83 	.word	0x431bde83
 800263c:	20000b04 	.word	0x20000b04
 8002640:	2000000c 	.word	0x2000000c

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <NMI_Handler+0x4>

0800264c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <MemManage_Handler+0x4>

0800265c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <UsageFault_Handler+0x4>

0800266c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <DMA1_Channel1_IRQHandler+0x10>)
 8002682:	f003 f8c8 	bl	8005816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000035c 	.word	0x2000035c

08002690 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002694:	4803      	ldr	r0, [pc, #12]	@ (80026a4 <ADC1_2_IRQHandler+0x14>)
 8002696:	f001 fa7f 	bl	8003b98 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800269a:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <ADC1_2_IRQHandler+0x18>)
 800269c:	f001 fa7c 	bl	8003b98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000218 	.word	0x20000218
 80026a8:	20000284 	.word	0x20000284

080026ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <TIM2_IRQHandler+0x10>)
 80026b2:	f007 fdef 	bl	800a294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000b04 	.word	0x20000b04

080026c0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <DMA2_Channel1_IRQHandler+0x10>)
 80026c6:	f003 f8a6 	bl	8005816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200003bc 	.word	0x200003bc

080026d4 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 80026d8:	2106      	movs	r1, #6
 80026da:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <HRTIM1_Master_IRQHandler+0x10>)
 80026dc:	f005 fb06 	bl	8007cec <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000514 	.word	0x20000514

080026e8 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <FDCAN3_IT0_IRQHandler+0x10>)
 80026ee:	f003 fe93 	bl	8006418 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200004ac 	.word	0x200004ac

080026fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_kill>:

int _kill(int pid, int sig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002716:	f015 fbe9 	bl	8017eec <__errno>
 800271a:	4603      	mov	r3, r0
 800271c:	2216      	movs	r2, #22
 800271e:	601a      	str	r2, [r3, #0]
  return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_exit>:

void _exit (int status)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ffe7 	bl	800270c <_kill>
  while (1) {}    /* Make sure we hang here */
 800273e:	bf00      	nop
 8002740:	e7fd      	b.n	800273e <_exit+0x12>

08002742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e00a      	b.n	800276a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002754:	f3af 8000 	nop.w
 8002758:	4601      	mov	r1, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf0      	blt.n	8002754 <_read+0x12>
  }

  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e009      	b.n	80027a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	60ba      	str	r2, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dbf1      	blt.n	800278e <_write+0x12>
  }
  return len;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_close>:

int _close(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027dc:	605a      	str	r2, [r3, #4]
  return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_isatty>:

int _isatty(int file)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	@ (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f015 fb4e 	bl	8017eec <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	220c      	movs	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20020000 	.word	0x20020000
 800287c:	00000400 	.word	0x00000400
 8002880:	20000b50 	.word	0x20000b50
 8002884:	20010c10 	.word	0x20010c10

08002888 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <SystemInit+0x20>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <SystemInit+0x20>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b2:	f107 0310 	add.w	r3, r7, #16
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028cc:	4a20      	ldr	r2, [pc, #128]	@ (8002950 <MX_TIM8_Init+0xa4>)
 80028ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80028f6:	4815      	ldr	r0, [pc, #84]	@ (800294c <MX_TIM8_Init+0xa0>)
 80028f8:	f007 fbfd 	bl	800a0f6 <HAL_TIM_Base_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002902:	f7ff fd47 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800290a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4619      	mov	r1, r3
 8002912:	480e      	ldr	r0, [pc, #56]	@ (800294c <MX_TIM8_Init+0xa0>)
 8002914:	f007 fe0e 	bl	800a534 <HAL_TIM_ConfigClockSource>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800291e:	f7ff fd39 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002922:	2320      	movs	r3, #32
 8002924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4806      	ldr	r0, [pc, #24]	@ (800294c <MX_TIM8_Init+0xa0>)
 8002934:	f008 f896 	bl	800aa64 <HAL_TIMEx_MasterConfigSynchronization>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800293e:	f7ff fd29 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000b54 	.word	0x20000b54
 8002950:	40013400 	.word	0x40013400

08002954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <HAL_TIM_Base_MspInit+0x38>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10b      	bne.n	800297e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	4a09      	ldr	r2, [pc, #36]	@ (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 800296c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002970:	6613      	str	r3, [r2, #96]	@ 0x60
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <HAL_TIM_Base_MspInit+0x3c>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40013400 	.word	0x40013400
 8002990:	40021000 	.word	0x40021000

08002994 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002998:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <MX_UART4_Init+0x90>)
 800299a:	4a23      	ldr	r2, [pc, #140]	@ (8002a28 <MX_UART4_Init+0x94>)
 800299c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800299e:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029ba:	220c      	movs	r2, #12
 80029bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029dc:	4811      	ldr	r0, [pc, #68]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029de:	f008 f91d 	bl	800ac1c <HAL_UART_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80029e8:	f7ff fcd4 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ec:	2100      	movs	r1, #0
 80029ee:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <MX_UART4_Init+0x90>)
 80029f0:	f008 feb8 	bl	800b764 <HAL_UARTEx_SetTxFifoThreshold>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80029fa:	f7ff fccb 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fe:	2100      	movs	r1, #0
 8002a00:	4808      	ldr	r0, [pc, #32]	@ (8002a24 <MX_UART4_Init+0x90>)
 8002a02:	f008 feed 	bl	800b7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002a0c:	f7ff fcc2 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002a10:	4804      	ldr	r0, [pc, #16]	@ (8002a24 <MX_UART4_Init+0x90>)
 8002a12:	f008 fe6e 	bl	800b6f2 <HAL_UARTEx_DisableFifoMode>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002a1c:	f7ff fcba 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000ba0 	.word	0x20000ba0
 8002a28:	40004c00 	.word	0x40004c00

08002a2c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a30:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a32:	4a23      	ldr	r2, [pc, #140]	@ (8002ac0 <MX_UART5_Init+0x94>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a3c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a74:	4811      	ldr	r0, [pc, #68]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a76:	f008 f8d1 	bl	800ac1c <HAL_UART_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002a80:	f7ff fc88 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a84:	2100      	movs	r1, #0
 8002a86:	480d      	ldr	r0, [pc, #52]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a88:	f008 fe6c 	bl	800b764 <HAL_UARTEx_SetTxFifoThreshold>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002a92:	f7ff fc7f 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a96:	2100      	movs	r1, #0
 8002a98:	4808      	ldr	r0, [pc, #32]	@ (8002abc <MX_UART5_Init+0x90>)
 8002a9a:	f008 fea1 	bl	800b7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002aa4:	f7ff fc76 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002aa8:	4804      	ldr	r0, [pc, #16]	@ (8002abc <MX_UART5_Init+0x90>)
 8002aaa:	f008 fe22 	bl	800b6f2 <HAL_UARTEx_DisableFifoMode>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002ab4:	f7ff fc6e 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000c34 	.word	0x20000c34
 8002ac0:	40005000 	.word	0x40005000

08002ac4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002aca:	4a23      	ldr	r2, [pc, #140]	@ (8002b58 <MX_USART1_UART_Init+0x94>)
 8002acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ace:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002aea:	220c      	movs	r2, #12
 8002aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aee:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002afa:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b0c:	4811      	ldr	r0, [pc, #68]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b0e:	f008 f885 	bl	800ac1c <HAL_UART_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b18:	f7ff fc3c 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	480d      	ldr	r0, [pc, #52]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b20:	f008 fe20 	bl	800b764 <HAL_UARTEx_SetTxFifoThreshold>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b2a:	f7ff fc33 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4808      	ldr	r0, [pc, #32]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b32:	f008 fe55 	bl	800b7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b3c:	f7ff fc2a 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b40:	4804      	ldr	r0, [pc, #16]	@ (8002b54 <MX_USART1_UART_Init+0x90>)
 8002b42:	f008 fdd6 	bl	800b6f2 <HAL_UARTEx_DisableFifoMode>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b4c:	f7ff fc22 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000cc8 	.word	0x20000cc8
 8002b58:	40013800 	.word	0x40013800

08002b5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b60:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b62:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <MX_USART3_UART_Init+0x94>)
 8002b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b66:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b98:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ba4:	4811      	ldr	r0, [pc, #68]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002ba6:	f008 f839 	bl	800ac1c <HAL_UART_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bb0:	f7ff fbf0 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	480d      	ldr	r0, [pc, #52]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002bb8:	f008 fdd4 	bl	800b764 <HAL_UARTEx_SetTxFifoThreshold>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002bc2:	f7ff fbe7 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4808      	ldr	r0, [pc, #32]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002bca:	f008 fe09 	bl	800b7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002bd4:	f7ff fbde 	bl	8002394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bd8:	4804      	ldr	r0, [pc, #16]	@ (8002bec <MX_USART3_UART_Init+0x90>)
 8002bda:	f008 fd8a 	bl	800b6f2 <HAL_UARTEx_DisableFifoMode>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002be4:	f7ff fbd6 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000d5c 	.word	0x20000d5c
 8002bf0:	40004800 	.word	0x40004800

08002bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0a6      	sub	sp, #152	@ 0x98
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c10:	2254      	movs	r2, #84	@ 0x54
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f015 f86c 	bl	8017cf2 <memset>
  if(uartHandle->Instance==UART4)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a94      	ldr	r2, [pc, #592]	@ (8002e70 <HAL_UART_MspInit+0x27c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d13c      	bne.n	8002c9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c24:	2308      	movs	r3, #8
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c30:	4618      	mov	r0, r3
 8002c32:	f006 ff67 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c3c:	f7ff fbaa 	bl	8002394 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c40:	4b8c      	ldr	r3, [pc, #560]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	4a8b      	ldr	r2, [pc, #556]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4c:	4b89      	ldr	r3, [pc, #548]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	4b86      	ldr	r3, [pc, #536]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5c:	4a85      	ldr	r2, [pc, #532]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c64:	4b83      	ldr	r3, [pc, #524]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002c94:	4619      	mov	r1, r3
 8002c96:	4878      	ldr	r0, [pc, #480]	@ (8002e78 <HAL_UART_MspInit+0x284>)
 8002c98:	f003 fe2a 	bl	80068f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c9c:	e0e4      	b.n	8002e68 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==UART5)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a76      	ldr	r2, [pc, #472]	@ (8002e7c <HAL_UART_MspInit+0x288>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d15d      	bne.n	8002d64 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002ca8:	2310      	movs	r3, #16
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f006 ff25 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002cc0:	f7ff fb68 	bl	8002394 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cd0:	4b68      	ldr	r3, [pc, #416]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cdc:	4b65      	ldr	r3, [pc, #404]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce0:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce8:	4b62      	ldr	r3, [pc, #392]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d00:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002d26:	2305      	movs	r3, #5
 8002d28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d30:	4619      	mov	r1, r3
 8002d32:	4851      	ldr	r0, [pc, #324]	@ (8002e78 <HAL_UART_MspInit+0x284>)
 8002d34:	f003 fddc 	bl	80068f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002d50:	2305      	movs	r3, #5
 8002d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d56:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4848      	ldr	r0, [pc, #288]	@ (8002e80 <HAL_UART_MspInit+0x28c>)
 8002d5e:	f003 fdc7 	bl	80068f0 <HAL_GPIO_Init>
}
 8002d62:	e081      	b.n	8002e68 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a46      	ldr	r2, [pc, #280]	@ (8002e84 <HAL_UART_MspInit+0x290>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d13b      	bne.n	8002de6 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d72:	2300      	movs	r3, #0
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f006 fec2 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002d86:	f7ff fb05 	bl	8002394 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	4a39      	ldr	r2, [pc, #228]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d96:	4b37      	ldr	r3, [pc, #220]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b34      	ldr	r3, [pc, #208]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	4a33      	ldr	r2, [pc, #204]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dae:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002dba:	2330      	movs	r3, #48	@ 0x30
 8002dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4826      	ldr	r0, [pc, #152]	@ (8002e78 <HAL_UART_MspInit+0x284>)
 8002de0:	f003 fd86 	bl	80068f0 <HAL_GPIO_Init>
}
 8002de4:	e040      	b.n	8002e68 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a27      	ldr	r2, [pc, #156]	@ (8002e88 <HAL_UART_MspInit+0x294>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d13b      	bne.n	8002e68 <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002df0:	2304      	movs	r3, #4
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f006 fe81 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002e08:	f7ff fac4 	bl	8002394 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e18:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e28:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
 8002e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e30:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <HAL_UART_MspInit+0x280>)
 8002e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e3c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e56:	2307      	movs	r3, #7
 8002e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002e60:	4619      	mov	r1, r3
 8002e62:	480a      	ldr	r0, [pc, #40]	@ (8002e8c <HAL_UART_MspInit+0x298>)
 8002e64:	f003 fd44 	bl	80068f0 <HAL_GPIO_Init>
}
 8002e68:	bf00      	nop
 8002e6a:	3798      	adds	r7, #152	@ 0x98
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40004c00 	.word	0x40004c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	48000800 	.word	0x48000800
 8002e7c:	40005000 	.word	0x40005000
 8002e80:	48000c00 	.word	0x48000c00
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	48000400 	.word	0x48000400

08002e90 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002e96:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <MX_USB_PCD_Init+0x4c>)
 8002e98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ec4:	4804      	ldr	r0, [pc, #16]	@ (8002ed8 <MX_USB_PCD_Init+0x48>)
 8002ec6:	f005 ff11 	bl	8008cec <HAL_PCD_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ed0:	f7ff fa60 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000df0 	.word	0x20000df0
 8002edc:	40005c00 	.word	0x40005c00

08002ee0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b098      	sub	sp, #96	@ 0x60
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	2254      	movs	r2, #84	@ 0x54
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f014 fefe 	bl	8017cf2 <memset>
  if(pcdHandle->Instance==USB)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <HAL_PCD_MspInit+0x60>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d11a      	bne.n	8002f36 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002f06:	2300      	movs	r3, #0
 8002f08:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f006 fdf8 	bl	8009b04 <HAL_RCCEx_PeriphCLKConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002f1a:	f7ff fa3b 	bl	8002394 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_PCD_MspInit+0x64>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_PCD_MspInit+0x64>)
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_PCD_MspInit+0x64>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002f36:	bf00      	nop
 8002f38:	3760      	adds	r7, #96	@ 0x60
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40005c00 	.word	0x40005c00
 8002f44:	40021000 	.word	0x40021000

08002f48 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002f48:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f4c:	f7ff fc9c 	bl	8002888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f50:	480c      	ldr	r0, [pc, #48]	@ (8002f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f52:	490d      	ldr	r1, [pc, #52]	@ (8002f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f54:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <LoopForever+0xe>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f68:	4c0a      	ldr	r4, [pc, #40]	@ (8002f94 <LoopForever+0x16>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f76:	f014 ffbf 	bl	8017ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f7a:	f7ff f83a 	bl	8001ff2 <main>

08002f7e <LoopForever>:

LoopForever:
    b LoopForever
 8002f7e:	e7fe      	b.n	8002f7e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8002f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002f8c:	0801a888 	.word	0x0801a888
  ldr r2, =_sbss
 8002f90:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002f94:	20010c0c 	.word	0x20010c0c

08002f98 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <ADC3_IRQHandler>

08002f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f002 f8da 	bl	800515e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002faa:	200f      	movs	r0, #15
 8002fac:	f7ff fade 	bl	800256c <HAL_InitTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	71fb      	strb	r3, [r7, #7]
 8002fba:	e001      	b.n	8002fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fbc:	f7ff faac 	bl	8002518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fc0:	79fb      	ldrb	r3, [r7, #7]

}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200010cc 	.word	0x200010cc

08002fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3360      	adds	r3, #96	@ 0x60
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <LL_ADC_SetOffset+0x44>)
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	03fff000 	.word	0x03fff000

08003094 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3360      	adds	r3, #96	@ 0x60
 80030a2:	461a      	mov	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3360      	adds	r3, #96	@ 0x60
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3360      	adds	r3, #96	@ 0x60
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	431a      	orrs	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3360      	adds	r3, #96	@ 0x60
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	431a      	orrs	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3330      	adds	r3, #48	@ 0x30
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	211f      	movs	r1, #31
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	401a      	ands	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 011f 	and.w	r1, r3, #31
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3314      	adds	r3, #20
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	0e5b      	lsrs	r3, r3, #25
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0d1b      	lsrs	r3, r3, #20
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2107      	movs	r1, #7
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	401a      	ands	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0d1b      	lsrs	r3, r3, #20
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	431a      	orrs	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0318 	and.w	r3, r3, #24
 80032a6:	4908      	ldr	r1, [pc, #32]	@ (80032c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032a8:	40d9      	lsrs	r1, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	400b      	ands	r3, r1
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	0007ffff 	.word	0x0007ffff

080032cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 031f 	and.w	r3, r3, #31
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6093      	str	r3, [r2, #8]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800333c:	d101      	bne.n	8003342 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003364:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800338c:	d101      	bne.n	8003392 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033dc:	f043 0202 	orr.w	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <LL_ADC_IsEnabled+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <LL_ADC_IsEnabled+0x1a>
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d101      	bne.n	800342e <LL_ADC_IsDisableOngoing+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsDisableOngoing+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800344c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d101      	bne.n	800347c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b08      	cmp	r3, #8
 800349c:	d101      	bne.n	80034a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b089      	sub	sp, #36	@ 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1a9      	b.n	800381e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd fe9f 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff19 	bl	8003328 <LL_ADC_IsDeepPowerDownEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff feff 	bl	8003304 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff34 	bl	8003378 <LL_ADC_IsInternalRegulatorEnabled>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d115      	bne.n	8003542 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff18 	bl	8003350 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003520:	4b9c      	ldr	r3, [pc, #624]	@ (8003794 <HAL_ADC_Init+0x2e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	4a9c      	ldr	r2, [pc, #624]	@ (8003798 <HAL_ADC_Init+0x2e8>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003534:	e002      	b.n	800353c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff16 	bl	8003378 <LL_ADC_IsInternalRegulatorEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff76 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 8003578:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 8142 	bne.w	800380c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 813e 	bne.w	800380c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003598:	f043 0202 	orr.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff23 	bl	80033f0 <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d141      	bne.n	8003634 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b8:	d004      	beq.n	80035c4 <HAL_ADC_Init+0x114>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a77      	ldr	r2, [pc, #476]	@ (800379c <HAL_ADC_Init+0x2ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10f      	bne.n	80035e4 <HAL_ADC_Init+0x134>
 80035c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035c8:	f7ff ff12 	bl	80033f0 <LL_ADC_IsEnabled>
 80035cc:	4604      	mov	r4, r0
 80035ce:	4873      	ldr	r0, [pc, #460]	@ (800379c <HAL_ADC_Init+0x2ec>)
 80035d0:	f7ff ff0e 	bl	80033f0 <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4323      	orrs	r3, r4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <HAL_ADC_Init+0x15a>
 80035e4:	486e      	ldr	r0, [pc, #440]	@ (80037a0 <HAL_ADC_Init+0x2f0>)
 80035e6:	f7ff ff03 	bl	80033f0 <LL_ADC_IsEnabled>
 80035ea:	4604      	mov	r4, r0
 80035ec:	486d      	ldr	r0, [pc, #436]	@ (80037a4 <HAL_ADC_Init+0x2f4>)
 80035ee:	f7ff feff 	bl	80033f0 <LL_ADC_IsEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	431c      	orrs	r4, r3
 80035f6:	486c      	ldr	r0, [pc, #432]	@ (80037a8 <HAL_ADC_Init+0x2f8>)
 80035f8:	f7ff fefa 	bl	80033f0 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4323      	orrs	r3, r4
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003616:	d004      	beq.n	8003622 <HAL_ADC_Init+0x172>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5f      	ldr	r2, [pc, #380]	@ (800379c <HAL_ADC_Init+0x2ec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_ADC_Init+0x176>
 8003622:	4a62      	ldr	r2, [pc, #392]	@ (80037ac <HAL_ADC_Init+0x2fc>)
 8003624:	e000      	b.n	8003628 <HAL_ADC_Init+0x178>
 8003626:	4a62      	ldr	r2, [pc, #392]	@ (80037b0 <HAL_ADC_Init+0x300>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7ff fcd8 	bl	8002fe4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7f5b      	ldrb	r3, [r3, #29]
 8003638:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800363e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003644:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800364a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003652:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800365e:	2b01      	cmp	r3, #1
 8003660:	d106      	bne.n	8003670 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	045b      	lsls	r3, r3, #17
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	4b48      	ldr	r3, [pc, #288]	@ (80037b4 <HAL_ADC_Init+0x304>)
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	430b      	orrs	r3, r1
 800369e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fee5 	bl	800348a <LL_ADC_INJ_IsConversionOngoing>
 80036c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d17f      	bne.n	80037c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d17c      	bne.n	80037c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ea:	f023 0302 	bic.w	r3, r3, #2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800370e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003718:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800371c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6911      	ldr	r1, [r2, #16]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800372e:	e013      	b.n	8003758 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800373e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003754:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375e:	2b01      	cmp	r3, #1
 8003760:	d12a      	bne.n	80037b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003784:	430a      	orrs	r2, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e019      	b.n	80037c8 <HAL_ADC_Init+0x318>
 8003794:	20000008 	.word	0x20000008
 8003798:	053e2d63 	.word	0x053e2d63
 800379c:	50000100 	.word	0x50000100
 80037a0:	50000400 	.word	0x50000400
 80037a4:	50000500 	.word	0x50000500
 80037a8:	50000600 	.word	0x50000600
 80037ac:	50000300 	.word	0x50000300
 80037b0:	50000700 	.word	0x50000700
 80037b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10c      	bne.n	80037ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f023 010f 	bic.w	r1, r3, #15
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80037e8:	e007      	b.n	80037fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 020f 	bic.w	r2, r2, #15
 80037f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	65da      	str	r2, [r3, #92]	@ 0x5c
 800380a:	e007      	b.n	800381c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f043 0210 	orr.w	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800381c:	7ffb      	ldrb	r3, [r7, #31]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop

08003828 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003838:	d004      	beq.n	8003844 <HAL_ADC_Start+0x1c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a67      	ldr	r2, [pc, #412]	@ (80039dc <HAL_ADC_Start+0x1b4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_ADC_Start+0x20>
 8003844:	4b66      	ldr	r3, [pc, #408]	@ (80039e0 <HAL_ADC_Start+0x1b8>)
 8003846:	e000      	b.n	800384a <HAL_ADC_Start+0x22>
 8003848:	4b66      	ldr	r3, [pc, #408]	@ (80039e4 <HAL_ADC_Start+0x1bc>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fd3e 	bl	80032cc <LL_ADC_GetMultimode>
 8003850:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fe04 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 80b4 	bne.w	80039cc <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Start+0x4a>
 800386e:	2302      	movs	r3, #2
 8003870:	e0af      	b.n	80039d2 <HAL_ADC_Start+0x1aa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f001 f84a 	bl	8004914 <ADC_Enable>
 8003880:	4603      	mov	r3, r0
 8003882:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f040 809b 	bne.w	80039c2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a4d      	ldr	r2, [pc, #308]	@ (80039dc <HAL_ADC_Start+0x1b4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_ADC_Start+0x96>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a4e      	ldr	r2, [pc, #312]	@ (80039e8 <HAL_ADC_Start+0x1c0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_Start+0x92>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e003      	b.n	80038c2 <HAL_ADC_Start+0x9a>
 80038ba:	4b4c      	ldr	r3, [pc, #304]	@ (80039ec <HAL_ADC_Start+0x1c4>)
 80038bc:	e001      	b.n	80038c2 <HAL_ADC_Start+0x9a>
 80038be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d002      	beq.n	80038d0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e8:	d106      	bne.n	80038f8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	f023 0206 	bic.w	r2, r3, #6
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80038f6:	e002      	b.n	80038fe <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	221c      	movs	r2, #28
 8003904:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a32      	ldr	r2, [pc, #200]	@ (80039dc <HAL_ADC_Start+0x1b4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_ADC_Start+0x104>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <HAL_ADC_Start+0x1c0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d002      	beq.n	8003928 <HAL_ADC_Start+0x100>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e003      	b.n	8003930 <HAL_ADC_Start+0x108>
 8003928:	4b30      	ldr	r3, [pc, #192]	@ (80039ec <HAL_ADC_Start+0x1c4>)
 800392a:	e001      	b.n	8003930 <HAL_ADC_Start+0x108>
 800392c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	4293      	cmp	r3, r2
 8003936:	d008      	beq.n	800394a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d002      	beq.n	800394a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b09      	cmp	r3, #9
 8003948:	d114      	bne.n	8003974 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003960:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fd65 	bl	800343c <LL_ADC_REG_StartConversion>
 8003972:	e02d      	b.n	80039d0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a15      	ldr	r2, [pc, #84]	@ (80039dc <HAL_ADC_Start+0x1b4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_ADC_Start+0x176>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a16      	ldr	r2, [pc, #88]	@ (80039e8 <HAL_ADC_Start+0x1c0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d002      	beq.n	800399a <HAL_ADC_Start+0x172>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	e003      	b.n	80039a2 <HAL_ADC_Start+0x17a>
 800399a:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <HAL_ADC_Start+0x1c4>)
 800399c:	e001      	b.n	80039a2 <HAL_ADC_Start+0x17a>
 800399e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039c0:	e006      	b.n	80039d0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039ca:	e001      	b.n	80039d0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
 80039ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	50000100 	.word	0x50000100
 80039e0:	50000300 	.word	0x50000300
 80039e4:	50000700 	.word	0x50000700
 80039e8:	50000500 	.word	0x50000500
 80039ec:	50000400 	.word	0x50000400

080039f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a04:	d004      	beq.n	8003a10 <HAL_ADC_Start_DMA+0x20>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b74 <HAL_ADC_Start_DMA+0x184>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_Start_DMA+0x24>
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_ADC_Start_DMA+0x188>)
 8003a12:	e000      	b.n	8003a16 <HAL_ADC_Start_DMA+0x26>
 8003a14:	4b59      	ldr	r3, [pc, #356]	@ (8003b7c <HAL_ADC_Start_DMA+0x18c>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fc58 	bl	80032cc <LL_ADC_GetMultimode>
 8003a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fd1e 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 809b 	bne.w	8003b66 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x4e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e096      	b.n	8003b6c <HAL_ADC_Start_DMA+0x17c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <HAL_ADC_Start_DMA+0x190>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d008      	beq.n	8003a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	d17a      	bne.n	8003b58 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 ff56 	bl	8004914 <ADC_Enable>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d16d      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b74 <HAL_ADC_Start_DMA+0x184>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_ADC_Start_DMA+0xb4>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a3b      	ldr	r2, [pc, #236]	@ (8003b84 <HAL_ADC_Start_DMA+0x194>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d002      	beq.n	8003aa0 <HAL_ADC_Start_DMA+0xb0>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_Start_DMA+0xb8>
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <HAL_ADC_Start_DMA+0x198>)
 8003aa2:	e001      	b.n	8003aa8 <HAL_ADC_Start_DMA+0xb8>
 8003aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d002      	beq.n	8003ab6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f023 0206 	bic.w	r2, r3, #6
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ada:	e002      	b.n	8003ae2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae6:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <HAL_ADC_Start_DMA+0x19c>)
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aee:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_ADC_Start_DMA+0x1a0>)
 8003af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_ADC_Start_DMA+0x1a4>)
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	221c      	movs	r2, #28
 8003b00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0210 	orr.w	r2, r2, #16
 8003b18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3340      	adds	r3, #64	@ 0x40
 8003b34:	4619      	mov	r1, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f001 fdf1 	bl	8005720 <HAL_DMA_Start_IT>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fc78 	bl	800343c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b4c:	e00d      	b.n	8003b6a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003b56:	e008      	b.n	8003b6a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b64:	e001      	b.n	8003b6a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	50000100 	.word	0x50000100
 8003b78:	50000300 	.word	0x50000300
 8003b7c:	50000700 	.word	0x50000700
 8003b80:	50000600 	.word	0x50000600
 8003b84:	50000500 	.word	0x50000500
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	08004aff 	.word	0x08004aff
 8003b90:	08004bd7 	.word	0x08004bd7
 8003b94:	08004bf3 	.word	0x08004bf3

08003b98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbc:	d004      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x30>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8e      	ldr	r2, [pc, #568]	@ (8003dfc <HAL_ADC_IRQHandler+0x264>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_IRQHandler+0x34>
 8003bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8003e00 <HAL_ADC_IRQHandler+0x268>)
 8003bca:	e000      	b.n	8003bce <HAL_ADC_IRQHandler+0x36>
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <HAL_ADC_IRQHandler+0x26c>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fb7c 	bl	80032cc <LL_ADC_GetMultimode>
 8003bd4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x78>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f001 f8ec 	bl	8004de0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x8c>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8094 	beq.w	8003d58 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 808e 	beq.w	8003d58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fa95 	bl	8003188 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d072      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a64      	ldr	r2, [pc, #400]	@ (8003dfc <HAL_ADC_IRQHandler+0x264>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_ADC_IRQHandler+0xea>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_ADC_IRQHandler+0x270>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d002      	beq.n	8003c7e <HAL_ADC_IRQHandler+0xe6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	e003      	b.n	8003c86 <HAL_ADC_IRQHandler+0xee>
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_ADC_IRQHandler+0x274>)
 8003c80:	e001      	b.n	8003c86 <HAL_ADC_IRQHandler+0xee>
 8003c82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d008      	beq.n	8003ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d002      	beq.n	8003ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d104      	bne.n	8003caa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	623b      	str	r3, [r7, #32]
 8003ca8:	e014      	b.n	8003cd4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a53      	ldr	r2, [pc, #332]	@ (8003dfc <HAL_ADC_IRQHandler+0x264>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x130>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a53      	ldr	r2, [pc, #332]	@ (8003e08 <HAL_ADC_IRQHandler+0x270>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d002      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x12c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e003      	b.n	8003ccc <HAL_ADC_IRQHandler+0x134>
 8003cc4:	4b51      	ldr	r3, [pc, #324]	@ (8003e0c <HAL_ADC_IRQHandler+0x274>)
 8003cc6:	e001      	b.n	8003ccc <HAL_ADC_IRQHandler+0x134>
 8003cc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ccc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d135      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d12e      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fbb7 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11a      	bne.n	8003d32 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020c 	bic.w	r2, r2, #12
 8003d0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d112      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d30:	e00b      	b.n	8003d4a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f984 	bl	8004058 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	220c      	movs	r2, #12
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_ADC_IRQHandler+0x1d4>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80b3 	beq.w	8003ede <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80ad 	beq.w	8003ede <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fa30 	bl	8003206 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003da6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff f9eb 	bl	8003188 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003db2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a10      	ldr	r2, [pc, #64]	@ (8003dfc <HAL_ADC_IRQHandler+0x264>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_ADC_IRQHandler+0x23a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_ADC_IRQHandler+0x270>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d002      	beq.n	8003dce <HAL_ADC_IRQHandler+0x236>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	e003      	b.n	8003dd6 <HAL_ADC_IRQHandler+0x23e>
 8003dce:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <HAL_ADC_IRQHandler+0x274>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_ADC_IRQHandler+0x23e>
 8003dd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d008      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d002      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b07      	cmp	r3, #7
 8003dee:	d10f      	bne.n	8003e10 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	e01f      	b.n	8003e3a <HAL_ADC_IRQHandler+0x2a2>
 8003dfa:	bf00      	nop
 8003dfc:	50000100 	.word	0x50000100
 8003e00:	50000300 	.word	0x50000300
 8003e04:	50000700 	.word	0x50000700
 8003e08:	50000500 	.word	0x50000500
 8003e0c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a8b      	ldr	r2, [pc, #556]	@ (8004044 <HAL_ADC_IRQHandler+0x4ac>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_ADC_IRQHandler+0x296>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a8a      	ldr	r2, [pc, #552]	@ (8004048 <HAL_ADC_IRQHandler+0x4b0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d002      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x292>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	e003      	b.n	8003e32 <HAL_ADC_IRQHandler+0x29a>
 8003e2a:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_ADC_IRQHandler+0x4b4>)
 8003e2c:	e001      	b.n	8003e32 <HAL_ADC_IRQHandler+0x29a>
 8003e2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d047      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_ADC_IRQHandler+0x2c2>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03f      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d13a      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d133      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d12e      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fb07 	bl	800348a <LL_ADC_INJ_IsConversionOngoing>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11a      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d112      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eb6:	e00b      	b.n	8003ed0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f043 0210 	orr.w	r2, r3, #16
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 ff5d 	bl	8004d90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2260      	movs	r2, #96	@ 0x60
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x374>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8be 	bl	8004080 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2280      	movs	r2, #128	@ 0x80
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d012      	beq.n	8003f3c <HAL_ADC_IRQHandler+0x3a4>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 ff43 	bl	8004db8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x3d4>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 ff35 	bl	8004dcc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d043      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x466>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03e      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	e021      	b.n	8003fd2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f9c:	d004      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x410>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a28      	ldr	r2, [pc, #160]	@ (8004044 <HAL_ADC_IRQHandler+0x4ac>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_IRQHandler+0x414>
 8003fa8:	4b29      	ldr	r3, [pc, #164]	@ (8004050 <HAL_ADC_IRQHandler+0x4b8>)
 8003faa:	e000      	b.n	8003fae <HAL_ADC_IRQHandler+0x416>
 8003fac:	4b29      	ldr	r3, [pc, #164]	@ (8004054 <HAL_ADC_IRQHandler+0x4bc>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f99a 	bl	80032e8 <LL_ADC_GetMultiDMATransfer>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fbe:	e008      	b.n	8003fd2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe8:	f043 0202 	orr.w	r2, r3, #2
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe f8f9 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d018      	beq.n	800403a <HAL_ADC_IRQHandler+0x4a2>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d013      	beq.n	800403a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004016:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f043 0208 	orr.w	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004032:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 feb5 	bl	8004da4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800403a:	bf00      	nop
 800403c:	3728      	adds	r7, #40	@ 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	50000100 	.word	0x50000100
 8004048:	50000500 	.word	0x50000500
 800404c:	50000400 	.word	0x50000400
 8004050:	50000300 	.word	0x50000300
 8004054:	50000700 	.word	0x50000700

08004058 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b0b6      	sub	sp, #216	@ 0xd8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d102      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x24>
 80040b2:	2302      	movs	r3, #2
 80040b4:	f000 bc13 	b.w	80048de <HAL_ADC_ConfigChannel+0x84a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff f9cd 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 83f3 	bne.w	80048b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7ff f865 	bl	80031ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f9bb 	bl	8003464 <LL_ADC_REG_IsConversionOngoing>
 80040ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f9c7 	bl	800348a <LL_ADC_INJ_IsConversionOngoing>
 80040fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004100:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 81d9 	bne.w	80044bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800410a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 81d4 	bne.w	80044bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800411c:	d10f      	bne.n	800413e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	4619      	mov	r1, r3
 800412a:	f7ff f87f 	bl	800322c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff f813 	bl	8003162 <LL_ADC_SetSamplingTimeCommonConfig>
 800413c:	e00e      	b.n	800415c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	461a      	mov	r2, r3
 800414c:	f7ff f86e 	bl	800322c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f803 	bl	8003162 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	08db      	lsrs	r3, r3, #3
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d022      	beq.n	80041c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6919      	ldr	r1, [r3, #16]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800418e:	f7fe ff5d 	bl	800304c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6919      	ldr	r1, [r3, #16]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fe ffa9 	bl	80030f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x126>
 80041b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041b8:	e000      	b.n	80041bc <HAL_ADC_ConfigChannel+0x128>
 80041ba:	2300      	movs	r3, #0
 80041bc:	461a      	mov	r2, r3
 80041be:	f7fe ffb5 	bl	800312c <LL_ADC_SetOffsetSaturation>
 80041c2:	e17b      	b.n	80044bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe ff62 	bl	8003094 <LL_ADC_GetOffsetChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x15c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe ff57 	bl	8003094 <LL_ADC_GetOffsetChannel>
 80041e6:	4603      	mov	r3, r0
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	f003 021f 	and.w	r2, r3, #31
 80041ee:	e01e      	b.n	800422e <HAL_ADC_ConfigChannel+0x19a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe ff4c 	bl	8003094 <LL_ADC_GetOffsetChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800420e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e004      	b.n	800422c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x1b2>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0e9b      	lsrs	r3, r3, #26
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	e018      	b.n	8004278 <HAL_ADC_ConfigChannel+0x1e4>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800425a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e004      	b.n	8004278 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800426e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004278:	429a      	cmp	r2, r3
 800427a:	d106      	bne.n	800428a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe ff1b 	bl	80030c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe feff 	bl	8003094 <LL_ADC_GetOffsetChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x222>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fef4 	bl	8003094 <LL_ADC_GetOffsetChannel>
 80042ac:	4603      	mov	r3, r0
 80042ae:	0e9b      	lsrs	r3, r3, #26
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	e01e      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x260>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fee9 	bl	8003094 <LL_ADC_GetOffsetChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80042d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80042dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e004      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80042e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <HAL_ADC_ConfigChannel+0x278>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	e018      	b.n	800433e <HAL_ADC_ConfigChannel+0x2aa>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004330:	2320      	movs	r3, #32
 8004332:	e004      	b.n	800433e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800433e:	429a      	cmp	r2, r3
 8004340:	d106      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe feb8 	bl	80030c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2102      	movs	r1, #2
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fe9c 	bl	8003094 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x2e8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fe91 	bl	8003094 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e01e      	b.n	80043ba <HAL_ADC_ConfigChannel+0x326>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fe86 	bl	8003094 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800439a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800439e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80043a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e004      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x33e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	e016      	b.n	8004400 <HAL_ADC_ConfigChannel+0x36c>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80043e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80043ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e004      	b.n	8004400 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80043f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004400:	429a      	cmp	r2, r3
 8004402:	d106      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	2102      	movs	r1, #2
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fe57 	bl	80030c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2103      	movs	r1, #3
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fe3b 	bl	8003094 <LL_ADC_GetOffsetChannel>
 800441e:	4603      	mov	r3, r0
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_ADC_ConfigChannel+0x3aa>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2103      	movs	r1, #3
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fe30 	bl	8003094 <LL_ADC_GetOffsetChannel>
 8004434:	4603      	mov	r3, r0
 8004436:	0e9b      	lsrs	r3, r3, #26
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	e017      	b.n	800446e <HAL_ADC_ConfigChannel+0x3da>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2103      	movs	r1, #3
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fe25 	bl	8003094 <LL_ADC_GetOffsetChannel>
 800444a:	4603      	mov	r3, r0
 800444c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004450:	fa93 f3a3 	rbit	r3, r3
 8004454:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004458:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800445a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004460:	2320      	movs	r3, #32
 8004462:	e003      	b.n	800446c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x3f2>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	e011      	b.n	80044aa <HAL_ADC_ConfigChannel+0x416>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004496:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800449e:	2320      	movs	r3, #32
 80044a0:	e003      	b.n	80044aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d106      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2103      	movs	r1, #3
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fe02 	bl	80030c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe ff95 	bl	80033f0 <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 813d 	bne.w	8004748 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fe fed2 	bl	8003284 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4aa2      	ldr	r2, [pc, #648]	@ (8004770 <HAL_ADC_ConfigChannel+0x6dc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f040 812e 	bne.w	8004748 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x480>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	3301      	adds	r3, #1
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2b09      	cmp	r3, #9
 800450a:	bf94      	ite	ls
 800450c:	2301      	movls	r3, #1
 800450e:	2300      	movhi	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e019      	b.n	8004548 <HAL_ADC_ConfigChannel+0x4b4>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004524:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e003      	b.n	8004538 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	3301      	adds	r3, #1
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2b09      	cmp	r3, #9
 8004540:	bf94      	ite	ls
 8004542:	2301      	movls	r3, #1
 8004544:	2300      	movhi	r3, #0
 8004546:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004548:	2b00      	cmp	r3, #0
 800454a:	d079      	beq.n	8004640 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x4d4>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	3301      	adds	r3, #1
 8004560:	069b      	lsls	r3, r3, #26
 8004562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004566:	e015      	b.n	8004594 <HAL_ADC_ConfigChannel+0x500>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004578:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800457a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004580:	2320      	movs	r3, #32
 8004582:	e003      	b.n	800458c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	069b      	lsls	r3, r3, #26
 8004590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x520>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	e017      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x550>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80045c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80045c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80045d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	ea42 0103 	orr.w	r1, r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_ADC_ConfigChannel+0x576>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	051b      	lsls	r3, r3, #20
 8004608:	e018      	b.n	800463c <HAL_ADC_ConfigChannel+0x5a8>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800461c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004622:	2320      	movs	r3, #32
 8004624:	e003      	b.n	800462e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800463c:	430b      	orrs	r3, r1
 800463e:	e07e      	b.n	800473e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_ADC_ConfigChannel+0x5c8>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	3301      	adds	r3, #1
 8004654:	069b      	lsls	r3, r3, #26
 8004656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800465a:	e015      	b.n	8004688 <HAL_ADC_ConfigChannel+0x5f4>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	069b      	lsls	r3, r3, #26
 8004684:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x614>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0e9b      	lsrs	r3, r3, #26
 800469a:	3301      	adds	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	e017      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x644>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	61fb      	str	r3, [r7, #28]
  return result;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	ea42 0103 	orr.w	r1, r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10d      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x670>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	3b1e      	subs	r3, #30
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004702:	e01b      	b.n	800473c <HAL_ADC_ConfigChannel+0x6a8>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	613b      	str	r3, [r7, #16]
  return result;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3301      	adds	r3, #1
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	3b1e      	subs	r3, #30
 8004736:	051b      	lsls	r3, r3, #20
 8004738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800473c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004742:	4619      	mov	r1, r3
 8004744:	f7fe fd72 	bl	800322c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <HAL_ADC_ConfigChannel+0x6e0>)
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80be 	beq.w	80048d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475e:	d004      	beq.n	800476a <HAL_ADC_ConfigChannel+0x6d6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a04      	ldr	r2, [pc, #16]	@ (8004778 <HAL_ADC_ConfigChannel+0x6e4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10a      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x6ec>
 800476a:	4b04      	ldr	r3, [pc, #16]	@ (800477c <HAL_ADC_ConfigChannel+0x6e8>)
 800476c:	e009      	b.n	8004782 <HAL_ADC_ConfigChannel+0x6ee>
 800476e:	bf00      	nop
 8004770:	407f0000 	.word	0x407f0000
 8004774:	80080000 	.word	0x80080000
 8004778:	50000100 	.word	0x50000100
 800477c:	50000300 	.word	0x50000300
 8004780:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_ADC_ConfigChannel+0x854>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe fc54 	bl	8003030 <LL_ADC_GetCommonPathInternalCh>
 8004788:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a56      	ldr	r2, [pc, #344]	@ (80048ec <HAL_ADC_ConfigChannel+0x858>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_ADC_ConfigChannel+0x70c>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a55      	ldr	r2, [pc, #340]	@ (80048f0 <HAL_ADC_ConfigChannel+0x85c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d13a      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d134      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b4:	d005      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x72e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a4e      	ldr	r2, [pc, #312]	@ (80048f4 <HAL_ADC_ConfigChannel+0x860>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	f040 8085 	bne.w	80048cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_ConfigChannel+0x742>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a49      	ldr	r2, [pc, #292]	@ (80048f8 <HAL_ADC_ConfigChannel+0x864>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_ADC_ConfigChannel+0x746>
 80047d6:	4a49      	ldr	r2, [pc, #292]	@ (80048fc <HAL_ADC_ConfigChannel+0x868>)
 80047d8:	e000      	b.n	80047dc <HAL_ADC_ConfigChannel+0x748>
 80047da:	4a43      	ldr	r2, [pc, #268]	@ (80048e8 <HAL_ADC_ConfigChannel+0x854>)
 80047dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe fc0f 	bl	800300a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047ec:	4b44      	ldr	r3, [pc, #272]	@ (8004900 <HAL_ADC_ConfigChannel+0x86c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	4a44      	ldr	r2, [pc, #272]	@ (8004904 <HAL_ADC_ConfigChannel+0x870>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004806:	e002      	b.n	800480e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3b01      	subs	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f9      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004814:	e05a      	b.n	80048cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3b      	ldr	r2, [pc, #236]	@ (8004908 <HAL_ADC_ConfigChannel+0x874>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d125      	bne.n	800486c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11f      	bne.n	800486c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a31      	ldr	r2, [pc, #196]	@ (80048f8 <HAL_ADC_ConfigChannel+0x864>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d104      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x7ac>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a34      	ldr	r2, [pc, #208]	@ (800490c <HAL_ADC_ConfigChannel+0x878>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d047      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004848:	d004      	beq.n	8004854 <HAL_ADC_ConfigChannel+0x7c0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2a      	ldr	r2, [pc, #168]	@ (80048f8 <HAL_ADC_ConfigChannel+0x864>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x7c4>
 8004854:	4a29      	ldr	r2, [pc, #164]	@ (80048fc <HAL_ADC_ConfigChannel+0x868>)
 8004856:	e000      	b.n	800485a <HAL_ADC_ConfigChannel+0x7c6>
 8004858:	4a23      	ldr	r2, [pc, #140]	@ (80048e8 <HAL_ADC_ConfigChannel+0x854>)
 800485a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7fe fbd0 	bl	800300a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800486a:	e031      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <HAL_ADC_ConfigChannel+0x87c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d12d      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d127      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <HAL_ADC_ConfigChannel+0x864>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d022      	beq.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x80c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_ADC_ConfigChannel+0x864>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x810>
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <HAL_ADC_ConfigChannel+0x868>)
 80048a2:	e000      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x812>
 80048a4:	4a10      	ldr	r2, [pc, #64]	@ (80048e8 <HAL_ADC_ConfigChannel+0x854>)
 80048a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fe fbaa 	bl	800300a <LL_ADC_SetCommonPathInternalCh>
 80048b6:	e00c      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048ca:	e002      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048de:	4618      	mov	r0, r3
 80048e0:	37d8      	adds	r7, #216	@ 0xd8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	50000700 	.word	0x50000700
 80048ec:	c3210000 	.word	0xc3210000
 80048f0:	90c00010 	.word	0x90c00010
 80048f4:	50000600 	.word	0x50000600
 80048f8:	50000100 	.word	0x50000100
 80048fc:	50000300 	.word	0x50000300
 8004900:	20000008 	.word	0x20000008
 8004904:	053e2d63 	.word	0x053e2d63
 8004908:	c7520000 	.word	0xc7520000
 800490c:	50000500 	.word	0x50000500
 8004910:	cb840000 	.word	0xcb840000

08004914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fd63 	bl	80033f0 <LL_ADC_IsEnabled>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d176      	bne.n	8004a1e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	4b3c      	ldr	r3, [pc, #240]	@ (8004a28 <ADC_Enable+0x114>)
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e062      	b.n	8004a20 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fd1e 	bl	80033a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800496c:	d004      	beq.n	8004978 <ADC_Enable+0x64>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2e      	ldr	r2, [pc, #184]	@ (8004a2c <ADC_Enable+0x118>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <ADC_Enable+0x68>
 8004978:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <ADC_Enable+0x11c>)
 800497a:	e000      	b.n	800497e <ADC_Enable+0x6a>
 800497c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a34 <ADC_Enable+0x120>)
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fb56 	bl	8003030 <LL_ADC_GetCommonPathInternalCh>
 8004984:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800498e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a38 <ADC_Enable+0x124>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	4a29      	ldr	r2, [pc, #164]	@ (8004a3c <ADC_Enable+0x128>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049a8:	e002      	b.n	80049b0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f9      	bne.n	80049aa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049b6:	f7fe fb09 	bl	8002fcc <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049bc:	e028      	b.n	8004a10 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fd14 	bl	80033f0 <LL_ADC_IsEnabled>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fce4 	bl	80033a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049d8:	f7fe faf8 	bl	8002fcc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d914      	bls.n	8004a10 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d00d      	beq.n	8004a10 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f043 0210 	orr.w	r2, r3, #16
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a04:	f043 0201 	orr.w	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d1cf      	bne.n	80049be <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	8000003f 	.word	0x8000003f
 8004a2c:	50000100 	.word	0x50000100
 8004a30:	50000300 	.word	0x50000300
 8004a34:	50000700 	.word	0x50000700
 8004a38:	20000008 	.word	0x20000008
 8004a3c:	053e2d63 	.word	0x053e2d63

08004a40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fce2 	bl	8003416 <LL_ADC_IsDisableOngoing>
 8004a52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fcc9 	bl	80033f0 <LL_ADC_IsEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d047      	beq.n	8004af4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d144      	bne.n	8004af4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030d 	and.w	r3, r3, #13
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10c      	bne.n	8004a92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fca3 	bl	80033c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2203      	movs	r2, #3
 8004a88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a8a:	f7fe fa9f 	bl	8002fcc <HAL_GetTick>
 8004a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a90:	e029      	b.n	8004ae6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a96:	f043 0210 	orr.w	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e023      	b.n	8004af6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004aae:	f7fe fa8d 	bl	8002fcc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d914      	bls.n	8004ae6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	f043 0210 	orr.w	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e007      	b.n	8004af6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1dc      	bne.n	8004aae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d14b      	bne.n	8004bb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d021      	beq.n	8004b76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fb26 	bl	8003188 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d032      	beq.n	8004ba8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d12b      	bne.n	8004ba8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11f      	bne.n	8004ba8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b74:	e018      	b.n	8004ba8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fa55 	bl	8004058 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bae:	e00e      	b.n	8004bce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fd fb13 	bl	80021e8 <HAL_ADC_ErrorCallback>
}
 8004bc2:	e004      	b.n	8004bce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fa41 	bl	800406c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7fd fae5 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <LL_ADC_IsEnabled>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <LL_ADC_IsEnabled+0x18>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_ADC_IsEnabled+0x1a>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_ADC_StartCalibration>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004c5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_ADC_IsCalibrationOnGoing>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c92:	d101      	bne.n	8004c98 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d101      	bne.n	8004cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e04d      	b.n	8004d84 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fea5 	bl	8004a40 <ADC_Disable>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d136      	bne.n	8004d6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d08:	f023 0302 	bic.w	r3, r3, #2
 8004d0c:	f043 0202 	orr.w	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff96 	bl	8004c4c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d20:	e014      	b.n	8004d4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	@ (8004d8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d90d      	bls.n	8004d4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	f023 0312 	bic.w	r3, r3, #18
 8004d38:	f043 0210 	orr.w	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01b      	b.n	8004d84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff94 	bl	8004c7e <LL_ADC_IsCalibrationOnGoing>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e2      	bne.n	8004d22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	f023 0303 	bic.w	r3, r3, #3
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d6c:	e005      	b.n	8004d7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	f043 0210 	orr.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	0004de01 	.word	0x0004de01

08004d90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b0a1      	sub	sp, #132	@ 0x84
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0e7      	b.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2a:	d102      	bne.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	e009      	b.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d102      	bne.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	e001      	b.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0be      	b.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff1d 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8004e6c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ff17 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80a0 	bne.w	8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 809c 	bne.w	8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e90:	d004      	beq.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a55      	ldr	r2, [pc, #340]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e9c:	4b56      	ldr	r3, [pc, #344]	@ (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004e9e:	e000      	b.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ea0:	4b56      	ldr	r3, [pc, #344]	@ (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004ea2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d04b      	beq.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ebe:	035b      	lsls	r3, r3, #13
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ed0:	d004      	beq.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a45      	ldr	r2, [pc, #276]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10f      	bne.n	8004efc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004edc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ee0:	f7ff fea1 	bl	8004c26 <LL_ADC_IsEnabled>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4841      	ldr	r0, [pc, #260]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ee8:	f7ff fe9d 	bl	8004c26 <LL_ADC_IsEnabled>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4323      	orrs	r3, r4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e012      	b.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004efc:	483c      	ldr	r0, [pc, #240]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004efe:	f7ff fe92 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f02:	4604      	mov	r4, r0
 8004f04:	483b      	ldr	r0, [pc, #236]	@ (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f06:	f7ff fe8e 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	431c      	orrs	r4, r3
 8004f0e:	483c      	ldr	r0, [pc, #240]	@ (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f10:	f7ff fe89 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4323      	orrs	r3, r4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d056      	beq.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f2e:	f023 030f 	bic.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f42:	e047      	b.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f58:	d004      	beq.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10f      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004f64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f68:	f7ff fe5d 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	481f      	ldr	r0, [pc, #124]	@ (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f70:	f7ff fe59 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4323      	orrs	r3, r4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e012      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004f84:	481a      	ldr	r0, [pc, #104]	@ (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f86:	f7ff fe4e 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4819      	ldr	r0, [pc, #100]	@ (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f8e:	f7ff fe4a 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	431c      	orrs	r4, r3
 8004f96:	481a      	ldr	r0, [pc, #104]	@ (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f98:	f7ff fe45 	bl	8004c26 <LL_ADC_IsEnabled>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4323      	orrs	r3, r4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d012      	beq.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fb6:	f023 030f 	bic.w	r3, r3, #15
 8004fba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fbc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fbe:	e009      	b.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004fd2:	e000      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3784      	adds	r7, #132	@ 0x84
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	50000100 	.word	0x50000100
 8004ff0:	50000400 	.word	0x50000400
 8004ff4:	50000500 	.word	0x50000500
 8004ff8:	50000300 	.word	0x50000300
 8004ffc:	50000700 	.word	0x50000700
 8005000:	50000600 	.word	0x50000600

08005004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <__NVIC_SetPriorityGrouping+0x44>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800502c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005036:	4a04      	ldr	r2, [pc, #16]	@ (8005048 <__NVIC_SetPriorityGrouping+0x44>)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	60d3      	str	r3, [r2, #12]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005050:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <__NVIC_GetPriorityGrouping+0x18>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 0307 	and.w	r3, r3, #7
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	2b00      	cmp	r3, #0
 8005078:	db0b      	blt.n	8005092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	f003 021f 	and.w	r2, r3, #31
 8005080:	4907      	ldr	r1, [pc, #28]	@ (80050a0 <__NVIC_EnableIRQ+0x38>)
 8005082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2001      	movs	r0, #1
 800508a:	fa00 f202 	lsl.w	r2, r0, r2
 800508e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e100 	.word	0xe000e100

080050a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	db0a      	blt.n	80050ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	490c      	ldr	r1, [pc, #48]	@ (80050f0 <__NVIC_SetPriority+0x4c>)
 80050be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	440b      	add	r3, r1
 80050c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050cc:	e00a      	b.n	80050e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4908      	ldr	r1, [pc, #32]	@ (80050f4 <__NVIC_SetPriority+0x50>)
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3b04      	subs	r3, #4
 80050dc:	0112      	lsls	r2, r2, #4
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	440b      	add	r3, r1
 80050e2:	761a      	strb	r2, [r3, #24]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000e100 	.word	0xe000e100
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	@ 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	bf28      	it	cs
 8005116:	2304      	movcs	r3, #4
 8005118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3304      	adds	r3, #4
 800511e:	2b06      	cmp	r3, #6
 8005120:	d902      	bls.n	8005128 <NVIC_EncodePriority+0x30>
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3b03      	subs	r3, #3
 8005126:	e000      	b.n	800512a <NVIC_EncodePriority+0x32>
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	401a      	ands	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005140:	f04f 31ff 	mov.w	r1, #4294967295
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	43d9      	mvns	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005150:	4313      	orrs	r3, r2
         );
}
 8005152:	4618      	mov	r0, r3
 8005154:	3724      	adds	r7, #36	@ 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ff4c 	bl	8005004 <__NVIC_SetPriorityGrouping>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005182:	f7ff ff63 	bl	800504c <__NVIC_GetPriorityGrouping>
 8005186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7ff ffb3 	bl	80050f8 <NVIC_EncodePriority>
 8005192:	4602      	mov	r2, r0
 8005194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff82 	bl	80050a4 <__NVIC_SetPriority>
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff56 	bl	8005068 <__NVIC_EnableIRQ>
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e054      	b.n	8005280 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7f5b      	ldrb	r3, [r3, #29]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc f9a2 	bl	8001530 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	791b      	ldrb	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a22      	ldr	r2, [pc, #136]	@ (8005288 <HAL_CRC_Init+0xc4>)
 8005200:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0218 	bic.w	r2, r2, #24
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	e00c      	b.n	800522e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6899      	ldr	r1, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	461a      	mov	r2, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f948 	bl	80054b4 <HAL_CRCEx_Polynomial_Set>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e028      	b.n	8005280 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	795b      	ldrb	r3, [r3, #5]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	611a      	str	r2, [r3, #16]
 8005240:	e004      	b.n	800524c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	04c11db7 	.word	0x04c11db7

0800528c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2202      	movs	r2, #2
 80052a0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d006      	beq.n	80052c8 <HAL_CRC_Calculate+0x3c>
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d829      	bhi.n	8005312 <HAL_CRC_Calculate+0x86>
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d019      	beq.n	80052f6 <HAL_CRC_Calculate+0x6a>
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d01e      	beq.n	8005304 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80052c6:	e024      	b.n	8005312 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e00a      	b.n	80052e4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	441a      	add	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	3301      	adds	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3f0      	bcc.n	80052ce <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	613b      	str	r3, [r7, #16]
      break;
 80052f4:	e00e      	b.n	8005314 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f812 	bl	8005324 <CRC_Handle_8>
 8005300:	6138      	str	r0, [r7, #16]
      break;
 8005302:	e007      	b.n	8005314 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f899 	bl	8005440 <CRC_Handle_16>
 800530e:	6138      	str	r0, [r7, #16]
      break;
 8005310:	e000      	b.n	8005314 <HAL_CRC_Calculate+0x88>
      break;
 8005312:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800531a:	693b      	ldr	r3, [r7, #16]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	@ 0x24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e023      	b.n	800537e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	3301      	adds	r3, #1
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	440b      	add	r3, r1
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005350:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	3302      	adds	r3, #2
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	440b      	add	r3, r1
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005360:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	3303      	adds	r3, #3
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	440b      	add	r3, r1
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005374:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d3d6      	bcc.n	8005336 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04d      	beq.n	800542e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	4413      	add	r3, r2
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d116      	bne.n	80053e4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	3301      	adds	r3, #1
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	440b      	add	r3, r1
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	8b7a      	ldrh	r2, [r7, #26]
 80053e2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d11f      	bne.n	800542e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	3301      	adds	r3, #1
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	440b      	add	r3, r1
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	b21b      	sxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b21b      	sxth	r3, r3
 800540e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	8b7a      	ldrh	r2, [r7, #26]
 800541a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	3302      	adds	r3, #2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4413      	add	r3, r2
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3724      	adds	r7, #36	@ 0x24
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e013      	b.n	800547a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	041a      	lsls	r2, r3, #16
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3302      	adds	r3, #2
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	440b      	add	r3, r1
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3301      	adds	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3e6      	bcc.n	8005452 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	4413      	add	r3, r2
 800549c:	881a      	ldrh	r2, [r3, #0]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80054c4:	231f      	movs	r3, #31
 80054c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
 80054d6:	e063      	b.n	80055a0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80054d8:	bf00      	nop
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	613a      	str	r2, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <HAL_CRCEx_Polynomial_Set+0x44>
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b18      	cmp	r3, #24
 80054fc:	d846      	bhi.n	800558c <HAL_CRCEx_Polynomial_Set+0xd8>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005593 	.word	0x08005593
 8005508:	0800558d 	.word	0x0800558d
 800550c:	0800558d 	.word	0x0800558d
 8005510:	0800558d 	.word	0x0800558d
 8005514:	0800558d 	.word	0x0800558d
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	0800558d 	.word	0x0800558d
 8005524:	08005581 	.word	0x08005581
 8005528:	0800558d 	.word	0x0800558d
 800552c:	0800558d 	.word	0x0800558d
 8005530:	0800558d 	.word	0x0800558d
 8005534:	0800558d 	.word	0x0800558d
 8005538:	0800558d 	.word	0x0800558d
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800558d 	.word	0x0800558d
 8005544:	08005575 	.word	0x08005575
 8005548:	0800558d 	.word	0x0800558d
 800554c:	0800558d 	.word	0x0800558d
 8005550:	0800558d 	.word	0x0800558d
 8005554:	0800558d 	.word	0x0800558d
 8005558:	0800558d 	.word	0x0800558d
 800555c:	0800558d 	.word	0x0800558d
 8005560:	0800558d 	.word	0x0800558d
 8005564:	08005569 	.word	0x08005569
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b06      	cmp	r3, #6
 800556c:	d913      	bls.n	8005596 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005572:	e010      	b.n	8005596 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b07      	cmp	r3, #7
 8005578:	d90f      	bls.n	800559a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800557e:	e00c      	b.n	800559a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d90b      	bls.n	800559e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800558a:	e008      	b.n	800559e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
        break;
 8005590:	e006      	b.n	80055a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005592:	bf00      	nop
 8005594:	e004      	b.n	80055a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005596:	bf00      	nop
 8005598:	e002      	b.n	80055a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800559e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 0118 	bic.w	r1, r3, #24
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e08d      	b.n	80056fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <HAL_DMA_Init+0x138>)
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d80f      	bhi.n	800560e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b45      	ldr	r3, [pc, #276]	@ (800570c <HAL_DMA_Init+0x13c>)
 80055f6:	4413      	add	r3, r2
 80055f8:	4a45      	ldr	r2, [pc, #276]	@ (8005710 <HAL_DMA_Init+0x140>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	009a      	lsls	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a42      	ldr	r2, [pc, #264]	@ (8005714 <HAL_DMA_Init+0x144>)
 800560a:	641a      	str	r2, [r3, #64]	@ 0x40
 800560c:	e00e      	b.n	800562c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	4b40      	ldr	r3, [pc, #256]	@ (8005718 <HAL_DMA_Init+0x148>)
 8005616:	4413      	add	r3, r2
 8005618:	4a3d      	ldr	r2, [pc, #244]	@ (8005710 <HAL_DMA_Init+0x140>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	009a      	lsls	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <HAL_DMA_Init+0x14c>)
 800562a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005646:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9b6 	bl	80059f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800568c:	d102      	bne.n	8005694 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_DMA_Init+0x104>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d80c      	bhi.n	80056d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9d6 	bl	8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	e008      	b.n	80056e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40020407 	.word	0x40020407
 800570c:	bffdfff8 	.word	0xbffdfff8
 8005710:	cccccccd 	.word	0xcccccccd
 8005714:	40020000 	.word	0x40020000
 8005718:	bffdfbf8 	.word	0xbffdfbf8
 800571c:	40020400 	.word	0x40020400

08005720 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_DMA_Start_IT+0x20>
 800573c:	2302      	movs	r3, #2
 800573e:	e066      	b.n	800580e <HAL_DMA_Start_IT+0xee>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d155      	bne.n	8005800 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f8fb 	bl	8005974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 020e 	orr.w	r2, r2, #14
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e00f      	b.n	80057b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0204 	bic.w	r2, r2, #4
 80057a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 020a 	orr.w	r2, r2, #10
 80057b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e005      	b.n	800580c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005808:	2302      	movs	r3, #2
 800580a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2204      	movs	r2, #4
 8005838:	409a      	lsls	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d026      	beq.n	8005890 <HAL_DMA_IRQHandler+0x7a>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d021      	beq.n	8005890 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0204 	bic.w	r2, r2, #4
 8005868:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	f003 021f 	and.w	r2, r3, #31
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	2104      	movs	r1, #4
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d071      	beq.n	800596a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800588e:	e06c      	b.n	800596a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2202      	movs	r2, #2
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02e      	beq.n	8005902 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d029      	beq.n	8005902 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 020a 	bic.w	r2, r2, #10
 80058ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	f003 021f 	and.w	r2, r3, #31
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	2102      	movs	r1, #2
 80058e2:	fa01 f202 	lsl.w	r2, r1, r2
 80058e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005900:	e033      	b.n	800596a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2208      	movs	r2, #8
 800590c:	409a      	lsls	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d025      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 020e 	bic.w	r2, r2, #14
 800592e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	f003 021f 	and.w	r2, r3, #31
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f202 	lsl.w	r2, r1, r2
 8005942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800596a:	bf00      	nop
 800596c:	bf00      	nop
}
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800598a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f003 021f 	and.w	r2, r3, #31
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f202 	lsl.w	r2, r1, r2
 80059b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d108      	bne.n	80059d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059d2:	e007      	b.n	80059e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d802      	bhi.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005a04:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e001      	b.n	8005a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3b08      	subs	r3, #8
 8005a1a:	4a12      	ldr	r2, [pc, #72]	@ (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a0b      	ldr	r2, [pc, #44]	@ (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40020407 	.word	0x40020407
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	40020820 	.word	0x40020820
 8005a64:	cccccccd 	.word	0xcccccccd
 8005a68:	40020880 	.word	0x40020880

08005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	@ (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2201      	movs	r2, #1
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	1000823f 	.word	0x1000823f
 8005ab0:	40020940 	.word	0x40020940

08005ab4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e147      	b.n	8005d56 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fb fe12 	bl	8001704 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0210 	bic.w	r2, r2, #16
 8005aee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af0:	f7fd fa6c 	bl	8002fcc <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005af6:	e012      	b.n	8005b1e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005af8:	f7fd fa68 	bl	8002fcc <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d90b      	bls.n	8005b1e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e11b      	b.n	8005d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d0e5      	beq.n	8005af8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b3c:	f7fd fa46 	bl	8002fcc <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b42:	e012      	b.n	8005b6a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b44:	f7fd fa42 	bl	8002fcc <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b0a      	cmp	r3, #10
 8005b50:	d90b      	bls.n	8005b6a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2203      	movs	r2, #3
 8005b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0f5      	b.n	8005d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0e5      	beq.n	8005b44 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0202 	orr.w	r2, r2, #2
 8005b86:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a74      	ldr	r2, [pc, #464]	@ (8005d60 <HAL_FDCAN_Init+0x2ac>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d103      	bne.n	8005b9a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005b92:	4a74      	ldr	r2, [pc, #464]	@ (8005d64 <HAL_FDCAN_Init+0x2b0>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	7c1b      	ldrb	r3, [r3, #16]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d108      	bne.n	8005bb4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	e007      	b.n	8005bc4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7c5b      	ldrb	r3, [r3, #17]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d108      	bne.n	8005bde <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bda:	619a      	str	r2, [r3, #24]
 8005bdc:	e007      	b.n	8005bee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7c9b      	ldrb	r3, [r3, #18]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d108      	bne.n	8005c08 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c04:	619a      	str	r2, [r3, #24]
 8005c06:	e007      	b.n	8005c18 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c16:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005c3c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0210 	bic.w	r2, r2, #16
 8005c4c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d108      	bne.n	8005c68 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0204 	orr.w	r2, r2, #4
 8005c64:	619a      	str	r2, [r3, #24]
 8005c66:	e02c      	b.n	8005cc2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d028      	beq.n	8005cc2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d01c      	beq.n	8005cb2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c86:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0210 	orr.w	r2, r2, #16
 8005c96:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d110      	bne.n	8005cc2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0220 	orr.w	r2, r2, #32
 8005cae:	619a      	str	r2, [r3, #24]
 8005cb0:	e007      	b.n	8005cc2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0220 	orr.w	r2, r2, #32
 8005cc0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cd2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005cea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005cec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cf6:	d115      	bne.n	8005d24 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	3b01      	subs	r3, #1
 8005d04:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d06:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d10:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005d20:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d22:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fcf0 	bl	8006720 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40006400 	.word	0x40006400
 8005d64:	40006500 	.word	0x40006500

08005d68 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d78:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d002      	beq.n	8005d86 <HAL_FDCAN_ConfigFilter+0x1e>
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d13d      	bne.n	8005e02 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d119      	bne.n	8005dc2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005d9a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005da2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e01d      	b.n	8005dfe <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	075a      	lsls	r2, r3, #29
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	079a      	lsls	r2, r3, #30
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	3304      	adds	r3, #4
 8005df6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e006      	b.n	8005e10 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d116      	bne.n	8005e64 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e3e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	011a      	lsls	r2, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	431a      	orrs	r2, r3
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e006      	b.n	8005e72 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e68:	f043 0204 	orr.w	r2, r3, #4
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d108      	bne.n	8005ea8 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	0219      	lsls	r1, r3, #8
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e006      	b.n	8005eb6 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eac:	f043 0204 	orr.w	r2, r3, #4
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d109      	bne.n	8005eea <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005ee4:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e006      	b.n	8005ef8 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d110      	bne.n	8005f3a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e006      	b.n	8005f48 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3e:	f043 0204 	orr.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d12c      	bne.n	8005fc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e023      	b.n	8005fd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fc28 	bl	80067f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2101      	movs	r1, #1
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005fb8:	2201      	movs	r2, #1
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	409a      	lsls	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e006      	b.n	8005fd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fca:	f043 0208 	orr.w	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
  }
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b08b      	sub	sp, #44	@ 0x2c
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ff4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005ff6:	7efb      	ldrb	r3, [r7, #27]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	f040 80e8 	bne.w	80061ce <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d137      	bne.n	8006074 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006018:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0db      	b.n	80061dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602c:	0e1b      	lsrs	r3, r3, #24
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b01      	cmp	r3, #1
 8006034:	d10a      	bne.n	800604c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800603e:	0a5b      	lsrs	r3, r3, #9
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006048:	2301      	movs	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	440b      	add	r3, r1
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
 8006072:	e036      	b.n	80060e2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	2b00      	cmp	r3, #0
 8006082:	d107      	bne.n	8006094 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006088:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0a3      	b.n	80061dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800609c:	0e1b      	lsrs	r3, r3, #24
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10a      	bne.n	80060bc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	440b      	add	r3, r1
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	0c9b      	lsrs	r3, r3, #18
 80060fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e005      	b.n	8006112 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	3304      	adds	r3, #4
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	0fda      	lsrs	r2, r3, #31
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	3304      	adds	r3, #4
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006182:	2300      	movs	r3, #0
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	e00a      	b.n	800619e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	441a      	add	r2, r3
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	440b      	add	r3, r1
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	3301      	adds	r3, #1
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4a11      	ldr	r2, [pc, #68]	@ (80061e8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80061a4:	5cd3      	ldrb	r3, [r2, r3]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d3ec      	bcc.n	8006188 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b40      	cmp	r3, #64	@ 0x40
 80061b2:	d105      	bne.n	80061c0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80061be:	e004      	b.n	80061ca <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e006      	b.n	80061dc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d2:	f043 0208 	orr.w	r2, r3, #8
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	372c      	adds	r7, #44	@ 0x2c
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	08019b30 	.word	0x08019b30

080061ec <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b40      	cmp	r3, #64	@ 0x40
 80061fa:	d107      	bne.n	800620c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e006      	b.n	800621a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800625e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d003      	beq.n	800626e <HAL_FDCAN_ActivateNotification+0x22>
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b02      	cmp	r3, #2
 800626a:	f040 80c8 	bne.w	80063fe <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03b      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d031      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d027      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01d      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d13b      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d131      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d127      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11d      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d113      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0202 	orr.w	r2, r2, #2
 80063ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e006      	b.n	800640c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	@ 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006426:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006434:	4013      	ands	r3, r2
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800644c:	4013      	ands	r3, r2
 800644e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006464:	4013      	ands	r3, r2
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006472:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	4013      	ands	r3, r2
 800647e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006486:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800648a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	4013      	ands	r3, r2
 8006496:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2240      	movs	r2, #64	@ 0x40
 80064c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f916 	bl	80066f6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d019      	beq.n	8006508 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d014      	beq.n	8006508 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064e6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4013      	ands	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006500:	6939      	ldr	r1, [r7, #16]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8d8 	bl	80066b8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006514:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f8a2 	bl	8006662 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800652c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f00c fec5 	bl	80132be <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f897 	bl	8006678 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006566:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f890 	bl	800668e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800658a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4013      	ands	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2280      	movs	r2, #128	@ 0x80
 80065a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f87c 	bl	80066a2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80065c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f880 	bl	80066ce <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80065ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f878 	bl	80066e2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800660e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006614:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f00c fe5b 	bl	80132e8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f858 	bl	800670a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800665a:	bf00      	nop
 800665c:	3730      	adds	r7, #48	@ 0x30
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006728:	4b30      	ldr	r3, [pc, #192]	@ (80067ec <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800672a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2f      	ldr	r2, [pc, #188]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d103      	bne.n	800673e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800673c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a2c      	ldr	r2, [pc, #176]	@ (80067f4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d103      	bne.n	8006750 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800674e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006766:	041a      	lsls	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006784:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678c:	061a      	lsls	r2, r3, #24
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e005      	b.n	80067d2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3304      	adds	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3f3      	bcc.n	80067c6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	4000a400 	.word	0x4000a400
 80067f0:	40006800 	.word	0x40006800
 80067f4:	40006c00 	.word	0x40006c00

080067f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b089      	sub	sp, #36	@ 0x24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006816:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800681e:	4313      	orrs	r3, r2
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e00a      	b.n	800683a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800682c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006832:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006834:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006838:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006844:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800684a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006850:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	3304      	adds	r3, #4
 8006878:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	3304      	adds	r3, #4
 8006884:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	e020      	b.n	80068ce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3303      	adds	r3, #3
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3302      	adds	r3, #2
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	440b      	add	r3, r1
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	3301      	adds	r3, #1
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	440b      	add	r3, r1
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80068b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	440a      	add	r2, r1
 80068ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	3304      	adds	r3, #4
 80068c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3304      	adds	r3, #4
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	4a06      	ldr	r2, [pc, #24]	@ (80068ec <FDCAN_CopyMessageToRAM+0xf4>)
 80068d4:	5cd3      	ldrb	r3, [r2, r3]
 80068d6:	461a      	mov	r2, r3
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4293      	cmp	r3, r2
 80068dc:	d3d6      	bcc.n	800688c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	3724      	adds	r7, #36	@ 0x24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	08019b30 	.word	0x08019b30

080068f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068fe:	e15a      	b.n	8006bb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	2101      	movs	r1, #1
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 814c 	beq.w	8006bb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b01      	cmp	r3, #1
 8006922:	d005      	beq.n	8006930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800692c:	2b02      	cmp	r3, #2
 800692e:	d130      	bne.n	8006992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	2203      	movs	r2, #3
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4013      	ands	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006966:	2201      	movs	r2, #1
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4013      	ands	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0201 	and.w	r2, r3, #1
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b03      	cmp	r3, #3
 800699c:	d017      	beq.n	80069ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	2203      	movs	r2, #3
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4013      	ands	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d123      	bne.n	8006a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	08da      	lsrs	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3208      	adds	r2, #8
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	220f      	movs	r2, #15
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4013      	ands	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	08da      	lsrs	r2, r3, #3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3208      	adds	r2, #8
 8006a1c:	6939      	ldr	r1, [r7, #16]
 8006a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4013      	ands	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f003 0203 	and.w	r2, r3, #3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80a6 	beq.w	8006bb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a64:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd4 <HAL_GPIO_Init+0x2e4>)
 8006a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a68:	4a5a      	ldr	r2, [pc, #360]	@ (8006bd4 <HAL_GPIO_Init+0x2e4>)
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a70:	4b58      	ldr	r3, [pc, #352]	@ (8006bd4 <HAL_GPIO_Init+0x2e4>)
 8006a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a7c:	4a56      	ldr	r2, [pc, #344]	@ (8006bd8 <HAL_GPIO_Init+0x2e8>)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	089b      	lsrs	r3, r3, #2
 8006a82:	3302      	adds	r3, #2
 8006a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	220f      	movs	r2, #15
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006aa6:	d01f      	beq.n	8006ae8 <HAL_GPIO_Init+0x1f8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8006bdc <HAL_GPIO_Init+0x2ec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d019      	beq.n	8006ae4 <HAL_GPIO_Init+0x1f4>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8006be0 <HAL_GPIO_Init+0x2f0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d013      	beq.n	8006ae0 <HAL_GPIO_Init+0x1f0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a4a      	ldr	r2, [pc, #296]	@ (8006be4 <HAL_GPIO_Init+0x2f4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00d      	beq.n	8006adc <HAL_GPIO_Init+0x1ec>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a49      	ldr	r2, [pc, #292]	@ (8006be8 <HAL_GPIO_Init+0x2f8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d007      	beq.n	8006ad8 <HAL_GPIO_Init+0x1e8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a48      	ldr	r2, [pc, #288]	@ (8006bec <HAL_GPIO_Init+0x2fc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_GPIO_Init+0x1e4>
 8006ad0:	2305      	movs	r3, #5
 8006ad2:	e00a      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006ad4:	2306      	movs	r3, #6
 8006ad6:	e008      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	e006      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006adc:	2303      	movs	r3, #3
 8006ade:	e004      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e002      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <HAL_GPIO_Init+0x1fa>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	f002 0203 	and.w	r2, r2, #3
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4093      	lsls	r3, r2
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006afa:	4937      	ldr	r1, [pc, #220]	@ (8006bd8 <HAL_GPIO_Init+0x2e8>)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	3302      	adds	r3, #2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b08:	4b39      	ldr	r3, [pc, #228]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4013      	ands	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b2c:	4a30      	ldr	r2, [pc, #192]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b32:	4b2f      	ldr	r3, [pc, #188]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b56:	4a26      	ldr	r2, [pc, #152]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b5c:	4b24      	ldr	r3, [pc, #144]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	43db      	mvns	r3, r3
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b80:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b86:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006baa:	4a11      	ldr	r2, [pc, #68]	@ (8006bf0 <HAL_GPIO_Init+0x300>)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f ae9d 	bne.w	8006900 <HAL_GPIO_Init+0x10>
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	48000400 	.word	0x48000400
 8006be0:	48000800 	.word	0x48000800
 8006be4:	48000c00 	.word	0x48000c00
 8006be8:	48001000 	.word	0x48001000
 8006bec:	48001400 	.word	0x48001400
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	807b      	strh	r3, [r7, #2]
 8006c00:	4613      	mov	r3, r2
 8006c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c04:	787b      	ldrb	r3, [r7, #1]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c0a:	887a      	ldrh	r2, [r7, #2]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c10:	e002      	b.n	8006c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c12:	887a      	ldrh	r2, [r7, #2]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e0be      	b.n	8006db4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d02e      	beq.n	8006ce0 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a4d      	ldr	r2, [pc, #308]	@ (8006dbc <HAL_HRTIM_Init+0x198>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc0 <HAL_HRTIM_Init+0x19c>)
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c90:	4a4b      	ldr	r2, [pc, #300]	@ (8006dc0 <HAL_HRTIM_Init+0x19c>)
 8006c92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c96:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c98:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <HAL_HRTIM_Init+0x19c>)
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006cb2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006cc8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fb f87d 	bl	8001de0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d012      	beq.n	8006d18 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d00:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	75fb      	strb	r3, [r7, #23]
 8006d2c:	e03e      	b.n	8006dac <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006d2e:	7dfa      	ldrb	r2, [r7, #23]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006d42:	7dfa      	ldrb	r2, [r7, #23]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	331c      	adds	r3, #28
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006d56:	7dfa      	ldrb	r2, [r7, #23]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3320      	adds	r3, #32
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8006d6a:	7dfa      	ldrb	r2, [r7, #23]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3324      	adds	r3, #36	@ 0x24
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006d7e:	7dfa      	ldrb	r2, [r7, #23]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3328      	adds	r3, #40	@ 0x28
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006d92:	7dfa      	ldrb	r2, [r7, #23]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3330      	adds	r3, #48	@ 0x30
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	3301      	adds	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d9bd      	bls.n	8006d2e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40016800 	.word	0x40016800
 8006dc0:	40021000 	.word	0x40021000

08006dc4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_HRTIM_DLLCalibrationStart+0x18>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e045      	b.n	8006e68 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d114      	bne.n	8006e1e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0202 	bic.w	r2, r2, #2
 8006e04:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8006e1c:	e01f      	b.n	8006e5e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0202 	orr.w	r2, r2, #2
 8006e2e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8006e3a:	f023 010c 	bic.w	r1, r3, #12
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006e7e:	f7fc f8a5 	bl	8002fcc <HAL_GetTick>
 8006e82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006e84:	e014      	b.n	8006eb0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d010      	beq.n	8006eb0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fc f89d 	bl	8002fcc <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e011      	b.n	8006ed4 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec0:	d1e1      	bne.n	8006e86 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d101      	bne.n	8006ef8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e015      	b.n	8006f24 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d104      	bne.n	8006f10 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fffd 	bl	8007f08 <HRTIM_MasterBase_Config>
 8006f0e:	e004      	b.n	8006f1a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 f826 	bl	8007f66 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d101      	bne.n	8006f48 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
 8006f46:	e1d7      	b.n	80072f8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e1d0      	b.n	80072f8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f6e:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006f78:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f80:	f000 816d 	beq.w	800725e <HAL_HRTIM_ADCTriggerConfig+0x332>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8a:	f200 818d 	bhi.w	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f94:	f000 813f 	beq.w	8007216 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9e:	f200 8183 	bhi.w	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b80      	cmp	r3, #128	@ 0x80
 8006fa6:	f000 8111 	beq.w	80071cc <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b80      	cmp	r3, #128	@ 0x80
 8006fae:	f200 817b 	bhi.w	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d84b      	bhi.n	8007050 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8174 	beq.w	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b1f      	cmp	r3, #31
 8006fc6:	f200 816f 	bhi.w	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	0800705b 	.word	0x0800705b
 8006fd4:	0800707f 	.word	0x0800707f
 8006fd8:	080072a9 	.word	0x080072a9
 8006fdc:	080070a5 	.word	0x080070a5
 8006fe0:	080072a9 	.word	0x080072a9
 8006fe4:	080072a9 	.word	0x080072a9
 8006fe8:	080072a9 	.word	0x080072a9
 8006fec:	080070cb 	.word	0x080070cb
 8006ff0:	080072a9 	.word	0x080072a9
 8006ff4:	080072a9 	.word	0x080072a9
 8006ff8:	080072a9 	.word	0x080072a9
 8006ffc:	080072a9 	.word	0x080072a9
 8007000:	080072a9 	.word	0x080072a9
 8007004:	080072a9 	.word	0x080072a9
 8007008:	080072a9 	.word	0x080072a9
 800700c:	080070f1 	.word	0x080070f1
 8007010:	080072a9 	.word	0x080072a9
 8007014:	080072a9 	.word	0x080072a9
 8007018:	080072a9 	.word	0x080072a9
 800701c:	080072a9 	.word	0x080072a9
 8007020:	080072a9 	.word	0x080072a9
 8007024:	080072a9 	.word	0x080072a9
 8007028:	080072a9 	.word	0x080072a9
 800702c:	080072a9 	.word	0x080072a9
 8007030:	080072a9 	.word	0x080072a9
 8007034:	080072a9 	.word	0x080072a9
 8007038:	080072a9 	.word	0x080072a9
 800703c:	080072a9 	.word	0x080072a9
 8007040:	080072a9 	.word	0x080072a9
 8007044:	080072a9 	.word	0x080072a9
 8007048:	080072a9 	.word	0x080072a9
 800704c:	08007139 	.word	0x08007139
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	f000 8095 	beq.w	8007182 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8007058:	e126      	b.n	80072a8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007060:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6852      	ldr	r2, [r2, #4]
 8007078:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 800707c:	e11d      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8007084:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6852      	ldr	r2, [r2, #4]
 800709e:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 80070a2:	e10a      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80070aa:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	019b      	lsls	r3, r3, #6
 80070b2:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6852      	ldr	r2, [r2, #4]
 80070c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 80070c8:	e0f7      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80070d0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	025b      	lsls	r3, r3, #9
 80070d8:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6852      	ldr	r2, [r2, #4]
 80070ea:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 80070ee:	e0e4      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	0c1b      	lsrs	r3, r3, #16
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 021f 	bic.w	r2, r2, #31
 8007118:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 021f 	and.w	r2, r3, #31
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8007136:	e0c0      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0b1b      	lsrs	r3, r3, #12
 8007146:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8007160:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	015b      	lsls	r3, r3, #5
 8007172:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8007180:	e09b      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007188:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80071aa:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	029b      	lsls	r3, r3, #10
 80071bc:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80071ca:	e076      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d2:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80071f4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8007214:	e051      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800721c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 800723c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	055b      	lsls	r3, r3, #21
 800724e:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800725c:	e02d      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007264:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8007286:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	069b      	lsls	r3, r3, #26
 8007298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80072a6:	e008      	b.n	80072ba <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2207      	movs	r2, #7
 80072ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 80072b8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b07      	cmp	r3, #7
 80072c4:	d101      	bne.n	80072ca <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e016      	b.n	80072f8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b0f      	cmp	r3, #15
 80072ce:	d805      	bhi.n	80072dc <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 80072da:	e004      	b.n	80072e6 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d101      	bne.n	8007320 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
 800731e:	e135      	b.n	800758c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 800732a:	2302      	movs	r3, #2
 800732c:	e12e      	b.n	800758c <HAL_HRTIM_ADCPostScalerConfig+0x288>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007344:	f000 80f8 	beq.w	8007538 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800734e:	f200 8103 	bhi.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007358:	f000 80de 	beq.w	8007518 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007362:	f200 80f9 	bhi.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b80      	cmp	r3, #128	@ 0x80
 800736a:	f000 80c5 	beq.w	80074f8 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b80      	cmp	r3, #128	@ 0x80
 8007372:	f200 80f1 	bhi.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b20      	cmp	r3, #32
 800737a:	d84b      	bhi.n	8007414 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 80ea 	beq.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	2b1f      	cmp	r3, #31
 800738a:	f200 80e5 	bhi.w	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800743b 	.word	0x0800743b
 800739c:	08007559 	.word	0x08007559
 80073a0:	0800745b 	.word	0x0800745b
 80073a4:	08007559 	.word	0x08007559
 80073a8:	08007559 	.word	0x08007559
 80073ac:	08007559 	.word	0x08007559
 80073b0:	0800747b 	.word	0x0800747b
 80073b4:	08007559 	.word	0x08007559
 80073b8:	08007559 	.word	0x08007559
 80073bc:	08007559 	.word	0x08007559
 80073c0:	08007559 	.word	0x08007559
 80073c4:	08007559 	.word	0x08007559
 80073c8:	08007559 	.word	0x08007559
 80073cc:	08007559 	.word	0x08007559
 80073d0:	0800749b 	.word	0x0800749b
 80073d4:	08007559 	.word	0x08007559
 80073d8:	08007559 	.word	0x08007559
 80073dc:	08007559 	.word	0x08007559
 80073e0:	08007559 	.word	0x08007559
 80073e4:	08007559 	.word	0x08007559
 80073e8:	08007559 	.word	0x08007559
 80073ec:	08007559 	.word	0x08007559
 80073f0:	08007559 	.word	0x08007559
 80073f4:	08007559 	.word	0x08007559
 80073f8:	08007559 	.word	0x08007559
 80073fc:	08007559 	.word	0x08007559
 8007400:	08007559 	.word	0x08007559
 8007404:	08007559 	.word	0x08007559
 8007408:	08007559 	.word	0x08007559
 800740c:	08007559 	.word	0x08007559
 8007410:	080074bb 	.word	0x080074bb
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b40      	cmp	r3, #64	@ 0x40
 8007418:	d05e      	beq.n	80074d8 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 800741a:	e09d      	b.n	8007558 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007424:	f023 011f 	bic.w	r1, r3, #31
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f003 021f 	and.w	r2, r3, #31
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007438:	e097      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007442:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	019b      	lsls	r3, r3, #6
 800744a:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007458:	e087      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007462:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007478:	e077      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007482:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	049b      	lsls	r3, r3, #18
 800748a:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007498:	e067      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074a2:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	061b      	lsls	r3, r3, #24
 80074aa:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80074b8:	e057      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80074c2:	f023 011f 	bic.w	r1, r3, #31
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80074d6:	e048      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80074e0:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	019b      	lsls	r3, r3, #6
 80074e8:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80074f6:	e038      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007500:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	031b      	lsls	r3, r3, #12
 8007508:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007516:	e028      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007520:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	049b      	lsls	r3, r3, #18
 8007528:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007536:	e018      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007540:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	061b      	lsls	r3, r3, #24
 8007548:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007556:	e008      	b.n	800756a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2207      	movs	r2, #7
 800755c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8007568:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b07      	cmp	r3, #7
 8007574:	d101      	bne.n	800757a <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e008      	b.n	800758c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d101      	bne.n	80075b4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
 80075b2:	e07a      	b.n	80076aa <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80075be:	2302      	movs	r3, #2
 80075c0:	e073      	b.n	80076aa <HAL_HRTIM_WaveformTimerConfig+0x112>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d104      	bne.n	80075e2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fd03 	bl	8007fe6 <HRTIM_MasterWaveform_Config>
 80075e0:	e004      	b.n	80075ec <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fd9a 	bl	8008120 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4403      	add	r3, r0
 80075fe:	3320      	adds	r3, #32
 8007600:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4403      	add	r3, r0
 8007614:	3324      	adds	r3, #36	@ 0x24
 8007616:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6899      	ldr	r1, [r3, #8]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4403      	add	r3, r0
 800762a:	3328      	adds	r3, #40	@ 0x28
 800762c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68d9      	ldr	r1, [r3, #12]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4403      	add	r3, r0
 8007640:	332c      	adds	r3, #44	@ 0x2c
 8007642:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6919      	ldr	r1, [r3, #16]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4403      	add	r3, r0
 8007656:	3330      	adds	r3, #48	@ 0x30
 8007658:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f001 f82d 	bl	80086bc <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b06      	cmp	r3, #6
 8007666:	d017      	beq.n	8007698 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d113      	bne.n	8007698 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	3301      	adds	r3, #1
 8007678:	01db      	lsls	r3, r3, #7
 800767a:	4413      	add	r3, r2
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007686:	025b      	lsls	r3, r3, #9
 8007688:	68f9      	ldr	r1, [r7, #12]
 800768a:	6809      	ldr	r1, [r1, #0]
 800768c:	431a      	orrs	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3301      	adds	r3, #1
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	440b      	add	r3, r1
 8007696:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d101      	bne.n	80076ce <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80076ca:	2302      	movs	r3, #2
 80076cc:	e020      	b.n	8007710 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_HRTIM_WaveformTimerControl+0x2a>
 80076d8:	2302      	movs	r3, #2
 80076da:	e019      	b.n	8007710 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fe9b 	bl	800842c <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 ffdf 	bl	80086bc <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d101      	bne.n	8007734 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
 8007732:	e067      	b.n	8007804 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_HRTIM_DeadTimeConfig+0x2a>
 800773e:	2302      	movs	r3, #2
 8007740:	e060      	b.n	8007804 <HAL_HRTIM_DeadTimeConfig+0xec>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800775a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	041a      	lsls	r2, r3, #16
 800779a:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 800779c:	4013      	ands	r3, r2
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	01db      	lsls	r3, r3, #7
 80077d6:	4413      	add	r3, r2
 80077d8:	33b8      	adds	r3, #184	@ 0xb8
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80077de:	4013      	ands	r3, r2
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	6811      	ldr	r1, [r2, #0]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	01db      	lsls	r3, r3, #7
 80077ec:	440b      	add	r3, r1
 80077ee:	33b8      	adds	r3, #184	@ 0xb8
 80077f0:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	01ff0000 	.word	0x01ff0000
 8007814:	3c002000 	.word	0x3c002000

08007818 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d101      	bne.n	8007836 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	e157      	b.n	8007ae6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007840:	2302      	movs	r3, #2
 8007842:	e150      	b.n	8007ae6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b06      	cmp	r3, #6
 8007858:	d140      	bne.n	80078dc <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	2b07      	cmp	r3, #7
 8007860:	d82a      	bhi.n	80078b8 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007889 	.word	0x08007889
 800786c:	08007895 	.word	0x08007895
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078a1 	.word	0x080078a1
 8007878:	080078b9 	.word	0x080078b9
 800787c:	080078b9 	.word	0x080078b9
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078ad 	.word	0x080078ad
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	61da      	str	r2, [r3, #28]
        break;
 8007892:	e01a      	b.n	80078ca <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 800789e:	e014      	b.n	80078ca <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80078aa:	e00e      	b.n	80078ca <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80078b6:	e008      	b.n	80078ca <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2207      	movs	r2, #7
 80078bc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 80078c8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b07      	cmp	r3, #7
 80078d4:	f040 80fe 	bne.w	8007ad4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e104      	b.n	8007ae6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b07      	cmp	r3, #7
 80078e2:	f200 80e3 	bhi.w	8007aac <HAL_HRTIM_WaveformCompareConfig+0x294>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	08007921 	.word	0x08007921
 80078f4:	08007aad 	.word	0x08007aad
 80078f8:	080079dd 	.word	0x080079dd
 80078fc:	08007aad 	.word	0x08007aad
 8007900:	08007aad 	.word	0x08007aad
 8007904:	08007aad 	.word	0x08007aad
 8007908:	080079f1 	.word	0x080079f1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	440b      	add	r3, r1
 800791a:	339c      	adds	r3, #156	@ 0x9c
 800791c:	601a      	str	r2, [r3, #0]
        break;
 800791e:	e0d1      	b.n	8007ac4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	01db      	lsls	r3, r3, #7
 800792c:	440b      	add	r3, r1
 800792e:	33a4      	adds	r3, #164	@ 0xa4
 8007930:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d03f      	beq.n	80079ba <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3301      	adds	r3, #1
 8007942:	01db      	lsls	r3, r3, #7
 8007944:	4413      	add	r3, r2
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	6811      	ldr	r1, [r2, #0]
 800794c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3301      	adds	r3, #1
 8007954:	01db      	lsls	r3, r3, #7
 8007956:	440b      	add	r3, r1
 8007958:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	3301      	adds	r3, #1
 8007962:	01db      	lsls	r3, r3, #7
 8007964:	4413      	add	r3, r2
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	68f9      	ldr	r1, [r7, #12]
 800796e:	6809      	ldr	r1, [r1, #0]
 8007970:	431a      	orrs	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	440b      	add	r3, r1
 800797a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007984:	d109      	bne.n	800799a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	01db      	lsls	r3, r3, #7
 8007992:	440b      	add	r3, r1
 8007994:	339c      	adds	r3, #156	@ 0x9c
 8007996:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007998:	e091      	b.n	8007abe <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079a2:	f040 808c 	bne.w	8007abe <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6819      	ldr	r1, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	01db      	lsls	r3, r3, #7
 80079b2:	440b      	add	r3, r1
 80079b4:	33a8      	adds	r3, #168	@ 0xa8
 80079b6:	601a      	str	r2, [r3, #0]
         break;
 80079b8:	e081      	b.n	8007abe <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3301      	adds	r3, #1
 80079c2:	01db      	lsls	r3, r3, #7
 80079c4:	4413      	add	r3, r2
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	6811      	ldr	r1, [r2, #0]
 80079cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3301      	adds	r3, #1
 80079d4:	01db      	lsls	r3, r3, #7
 80079d6:	440b      	add	r3, r1
 80079d8:	601a      	str	r2, [r3, #0]
         break;
 80079da:	e070      	b.n	8007abe <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	01db      	lsls	r3, r3, #7
 80079e8:	440b      	add	r3, r1
 80079ea:	33a8      	adds	r3, #168	@ 0xa8
 80079ec:	601a      	str	r2, [r3, #0]
        break;
 80079ee:	e069      	b.n	8007ac4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	01db      	lsls	r3, r3, #7
 80079fc:	440b      	add	r3, r1
 80079fe:	33ac      	adds	r3, #172	@ 0xac
 8007a00:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d03f      	beq.n	8007a8a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3301      	adds	r3, #1
 8007a12:	01db      	lsls	r3, r3, #7
 8007a14:	4413      	add	r3, r2
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	6811      	ldr	r1, [r2, #0]
 8007a1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3301      	adds	r3, #1
 8007a24:	01db      	lsls	r3, r3, #7
 8007a26:	440b      	add	r3, r1
 8007a28:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	3301      	adds	r3, #1
 8007a32:	01db      	lsls	r3, r3, #7
 8007a34:	4413      	add	r3, r2
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	6809      	ldr	r1, [r1, #0]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	3301      	adds	r3, #1
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	440b      	add	r3, r1
 8007a4c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a56:	d109      	bne.n	8007a6c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6819      	ldr	r1, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	01db      	lsls	r3, r3, #7
 8007a64:	440b      	add	r3, r1
 8007a66:	339c      	adds	r3, #156	@ 0x9c
 8007a68:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007a6a:	e02a      	b.n	8007ac2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a74:	d125      	bne.n	8007ac2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	01db      	lsls	r3, r3, #7
 8007a82:	440b      	add	r3, r1
 8007a84:	33a8      	adds	r3, #168	@ 0xa8
 8007a86:	601a      	str	r2, [r3, #0]
         break;
 8007a88:	e01b      	b.n	8007ac2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	3301      	adds	r3, #1
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	4413      	add	r3, r2
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	6811      	ldr	r1, [r2, #0]
 8007a9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	01db      	lsls	r3, r3, #7
 8007aa6:	440b      	add	r3, r1
 8007aa8:	601a      	str	r2, [r3, #0]
         break;
 8007aaa:	e00a      	b.n	8007ac2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2207      	movs	r2, #7
 8007ab0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8007abc:	e002      	b.n	8007ac4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007ac2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	d101      	bne.n	8007ad4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e008      	b.n	8007ae6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop

08007af4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d101      	bne.n	8007b12 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e01d      	b.n	8007b4e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e016      	b.n	8007b4e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fcd8 	bl	80084ec <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_HRTIM_WaveformOutputStart+0x18>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e01a      	b.n	8007ba4 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e01a      	b.n	8007bfe <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f8d3 1398 	ldr.w	r1, [r3, #920]	@ 0x398
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	f8c3 2398 	str.w	r2, [r3, #920]	@ 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
	...

08007c0c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e05b      	b.n	8007cdc <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8d3 1390 	ldr.w	r1, [r3, #912]	@ 0x390
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68d9      	ldr	r1, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
 8007c6c:	e022      	b.n	8007cb4 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce8 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	01db      	lsls	r3, r3, #7
 8007c86:	4413      	add	r3, r2
 8007c88:	338c      	adds	r3, #140	@ 0x8c
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	3320      	adds	r3, #32
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	4302      	orrs	r2, r0
 8007ca6:	01db      	lsls	r3, r3, #7
 8007ca8:	440b      	add	r3, r1
 8007caa:	338c      	adds	r3, #140	@ 0x8c
 8007cac:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b05      	cmp	r3, #5
 8007cb8:	d9d9      	bls.n	8007c6e <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;}
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20000010 	.word	0x20000010

08007cec <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2bff      	cmp	r3, #255	@ 0xff
 8007cfa:	d103      	bne.n	8007d04 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd4b 	bl	8008798 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8007d02:	e00a      	b.n	8007d1a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b06      	cmp	r3, #6
 8007d08:	d103      	bne.n	8007d12 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fdd4 	bl	80088b8 <HRTIM_Master_ISR>
}
 8007d10:	e003      	b.n	8007d1a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fe94 	bl	8008a42 <HRTIM_Timer_ISR>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0318 	bic.w	r3, r3, #24
 8007f32:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	6852      	ldr	r2, [r2, #4]
 8007f58:	619a      	str	r2, [r3, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	01db      	lsls	r3, r3, #7
 8007f7c:	4413      	add	r3, r2
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f023 0318 	bic.w	r3, r3, #24
 8007f9a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3301      	adds	r3, #1
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	4413      	add	r3, r2
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	01db      	lsls	r3, r3, #7
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3394      	adds	r3, #148	@ 0x94
 8007fc6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6819      	ldr	r1, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	01db      	lsls	r3, r3, #7
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3398      	adds	r3, #152	@ 0x98
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008000:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f023 0320 	bic.w	r3, r3, #32
 8008008:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800801a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	2b20      	cmp	r3, #32
 8008022:	d003      	beq.n	800802c <HRTIM_MasterWaveform_Config+0x46>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d108      	bne.n	800803e <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008032:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f043 0320 	orr.w	r3, r3, #32
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e021      	b.n	8008082 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d108      	bne.n	8008058 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e014      	b.n	8008082 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	2b04      	cmp	r3, #4
 800805e:	d108      	bne.n	8008072 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e007      	b.n	8008082 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 0320 	bic.w	r3, r3, #32
 8008078:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008080:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008088:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800809a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80080ac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80080be:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80080d0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080e4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f6:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008120:	b480      	push	{r7}
 8008122:	b08b      	sub	sp, #44	@ 0x2c
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3301      	adds	r3, #1
 8008134:	01db      	lsls	r3, r3, #7
 8008136:	4413      	add	r3, r2
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	3301      	adds	r3, #1
 8008146:	01db      	lsls	r3, r3, #7
 8008148:	440b      	add	r3, r1
 800814a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3301      	adds	r3, #1
 8008154:	01db      	lsls	r3, r3, #7
 8008156:	4413      	add	r3, r2
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	01db      	lsls	r3, r3, #7
 8008164:	4413      	add	r3, r2
 8008166:	33e8      	adds	r3, #232	@ 0xe8
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	01db      	lsls	r3, r3, #7
 8008174:	4413      	add	r3, r2
 8008176:	33e4      	adds	r3, #228	@ 0xe4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008184:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	f023 0320 	bic.w	r3, r3, #32
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008194:	4313      	orrs	r3, r2
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	2b20      	cmp	r3, #32
 800819e:	d003      	beq.n	80081a8 <HRTIM_TimingUnitWaveform_Config+0x88>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d108      	bne.n	80081ba <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b8:	e021      	b.n	80081fe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d108      	bne.n	80081d4 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d2:	e014      	b.n	80081fe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d108      	bne.n	80081ee <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ec:	e007      	b.n	80081fe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	f023 0320 	bic.w	r3, r3, #32
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	4313      	orrs	r3, r2
 800820e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800821e:	4313      	orrs	r3, r2
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008230:	4313      	orrs	r3, r2
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008242:	4313      	orrs	r3, r2
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008254:	4313      	orrs	r3, r2
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008268:	d103      	bne.n	8008272 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800826a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008270:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008280:	4313      	orrs	r3, r2
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008292:	4313      	orrs	r3, r2
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800829c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a8:	4313      	orrs	r3, r2
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80082b2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	4313      	orrs	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082c8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082da:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e0:	6a3a      	ldr	r2, [r7, #32]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ea:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80082ee:	d004      	beq.n	80082fa <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f4:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80082f8:	d103      	bne.n	8008302 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	2b40      	cmp	r3, #64	@ 0x40
 8008300:	d108      	bne.n	8008314 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8008308:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	4313      	orrs	r3, r2
 8008312:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800831a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	4313      	orrs	r3, r2
 8008324:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b05      	cmp	r3, #5
 8008330:	d850      	bhi.n	80083d4 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008332:	a201      	add	r2, pc, #4	@ (adr r2, 8008338 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008351 	.word	0x08008351
 800833c:	08008367 	.word	0x08008367
 8008340:	0800837d 	.word	0x0800837d
 8008344:	08008393 	.word	0x08008393
 8008348:	080083a9 	.word	0x080083a9
 800834c:	080083bf 	.word	0x080083bf
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008356:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	4313      	orrs	r3, r2
 8008362:	61fb      	str	r3, [r7, #28]
      break;
 8008364:	e037      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800836c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	4313      	orrs	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
      break;
 800837a:	e02c      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008382:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	4313      	orrs	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
      break;
 8008390:	e021      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008398:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	61fb      	str	r3, [r7, #28]
      break;
 80083a6:	e016      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083ae:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	015b      	lsls	r3, r3, #5
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61fb      	str	r3, [r7, #28]
      break;
 80083bc:	e00b      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80083c4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	019b      	lsls	r3, r3, #6
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	61fb      	str	r3, [r7, #28]
      break;
 80083d2:	e000      	b.n	80083d6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 80083d4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	3301      	adds	r3, #1
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	4413      	add	r3, r2
 80083e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	01db      	lsls	r3, r3, #7
 80083ee:	4413      	add	r3, r2
 80083f0:	33e8      	adds	r3, #232	@ 0xe8
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	01db      	lsls	r3, r3, #7
 80083fe:	4413      	add	r3, r2
 8008400:	33e4      	adds	r3, #228	@ 0xe4
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	01db      	lsls	r3, r3, #7
 800840e:	4413      	add	r3, r2
 8008410:	33d4      	adds	r3, #212	@ 0xd4
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008420:	bf00      	nop
 8008422:	372c      	adds	r7, #44	@ 0x2c
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	01db      	lsls	r3, r3, #7
 8008440:	4413      	add	r3, r2
 8008442:	33ec      	adds	r3, #236	@ 0xec
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0310 	bic.w	r3, r3, #16
 800844e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008462:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008474:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008486:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d11a      	bne.n	80084d0 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f023 0304 	bic.w	r3, r3, #4
 80084a0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f023 0302 	bic.w	r3, r3, #2
 80084b2:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	01db      	lsls	r3, r3, #7
 80084d8:	4413      	add	r3, r2
 80084da:	33ec      	adds	r3, #236	@ 0xec
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	601a      	str	r2, [r3, #0]

}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b089      	sub	sp, #36	@ 0x24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	01db      	lsls	r3, r3, #7
 8008506:	4413      	add	r3, r2
 8008508:	33e4      	adds	r3, #228	@ 0xe4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	01db      	lsls	r3, r3, #7
 8008516:	4413      	add	r3, r2
 8008518:	33b8      	adds	r3, #184	@ 0xb8
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008524:	d05d      	beq.n	80085e2 <HRTIM_OutputConfig+0xf6>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800852c:	d86e      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008534:	d042      	beq.n	80085bc <HRTIM_OutputConfig+0xd0>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853c:	d866      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008544:	d04d      	beq.n	80085e2 <HRTIM_OutputConfig+0xf6>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854c:	d85e      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008554:	d032      	beq.n	80085bc <HRTIM_OutputConfig+0xd0>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855c:	d856      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b80      	cmp	r3, #128	@ 0x80
 8008562:	d03e      	beq.n	80085e2 <HRTIM_OutputConfig+0xf6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b80      	cmp	r3, #128	@ 0x80
 8008568:	d850      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d025      	beq.n	80085bc <HRTIM_OutputConfig+0xd0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	d84a      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d01f      	beq.n	80085bc <HRTIM_OutputConfig+0xd0>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d044      	beq.n	800860c <HRTIM_OutputConfig+0x120>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b20      	cmp	r3, #32
 8008586:	d841      	bhi.n	800860c <HRTIM_OutputConfig+0x120>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d33e      	bcc.n	800860c <HRTIM_OutputConfig+0x120>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3b02      	subs	r3, #2
 8008592:	2201      	movs	r2, #1
 8008594:	409a      	lsls	r2, r3
 8008596:	4b48      	ldr	r3, [pc, #288]	@ (80086b8 <HRTIM_OutputConfig+0x1cc>)
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	bf14      	ite	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	2300      	moveq	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11c      	bne.n	80085e2 <HRTIM_OutputConfig+0xf6>
 80085a8:	f244 0304 	movw	r3, #16388	@ 0x4004
 80085ac:	4013      	ands	r3, r2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf14      	ite	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	2300      	moveq	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d027      	beq.n	800860c <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	440b      	add	r3, r1
 80085ca:	33bc      	adds	r3, #188	@ 0xbc
 80085cc:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6819      	ldr	r1, [r3, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	01db      	lsls	r3, r3, #7
 80085da:	440b      	add	r3, r1
 80085dc:	33c0      	adds	r3, #192	@ 0xc0
 80085de:	601a      	str	r2, [r3, #0]
      break;
 80085e0:	e015      	b.n	800860e <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6819      	ldr	r1, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	01db      	lsls	r3, r3, #7
 80085ee:	440b      	add	r3, r1
 80085f0:	33c4      	adds	r3, #196	@ 0xc4
 80085f2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6819      	ldr	r1, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	01db      	lsls	r3, r3, #7
 8008600:	440b      	add	r3, r1
 8008602:	33c8      	adds	r3, #200	@ 0xc8
 8008604:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008606:	2310      	movs	r3, #16
 8008608:	61bb      	str	r3, [r7, #24]
      break;
 800860a:	e000      	b.n	800860e <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 800860c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800860e:	22fe      	movs	r2, #254	@ 0xfe
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008616:	43db      	mvns	r3, r3
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	4013      	ands	r3, r2
 800861c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	4313      	orrs	r3, r2
 800862c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	4313      	orrs	r3, r2
 800863c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	691a      	ldr	r2, [r3, #16]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	fa02 f303 	lsl.w	r3, r2, r3
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	4313      	orrs	r3, r2
 800864c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	4313      	orrs	r3, r2
 800865c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	4313      	orrs	r3, r2
 800866c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b08      	cmp	r3, #8
 8008674:	d111      	bne.n	800869a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10c      	bne.n	800869a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008686:	2b00      	cmp	r3, #0
 8008688:	d107      	bne.n	800869a <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	69da      	ldr	r2, [r3, #28]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	4313      	orrs	r3, r2
 8008698:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	01db      	lsls	r3, r3, #7
 80086a2:	4413      	add	r3, r2
 80086a4:	33e4      	adds	r3, #228	@ 0xe4
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	601a      	str	r2, [r3, #0]
}
 80086aa:	bf00      	nop
 80086ac:	3724      	adds	r7, #36	@ 0x24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40000041 	.word	0x40000041

080086bc <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b06      	cmp	r3, #6
 80086ca:	d85e      	bhi.n	800878a <HRTIM_ForceRegistersUpdate+0xce>
 80086cc:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <HRTIM_ForceRegistersUpdate+0x18>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	08008707 	.word	0x08008707
 80086d8:	0800871d 	.word	0x0800871d
 80086dc:	08008733 	.word	0x08008733
 80086e0:	08008749 	.word	0x08008749
 80086e4:	0800875f 	.word	0x0800875f
 80086e8:	08008775 	.word	0x08008775
 80086ec:	080086f1 	.word	0x080086f1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0201 	orr.w	r2, r2, #1
 8008700:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008704:	e042      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0202 	orr.w	r2, r2, #2
 8008716:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800871a:	e037      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0204 	orr.w	r2, r2, #4
 800872c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008730:	e02c      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0208 	orr.w	r2, r2, #8
 8008742:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008746:	e021      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0210 	orr.w	r2, r2, #16
 8008758:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800875c:	e016      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0220 	orr.w	r2, r2, #32
 800876e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008772:	e00b      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008784:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008788:	e000      	b.n	800878c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800878a:	bf00      	nop
  }
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80087a8:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80087b2:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d007      	beq.n	80087d8 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff faa5 	bl	8007d22 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00c      	beq.n	80087fc <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff fa9d 	bl	8007d36 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2204      	movs	r2, #4
 8008816:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fa95 	bl	8007d4a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00c      	beq.n	8008844 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d007      	beq.n	8008844 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2208      	movs	r2, #8
 800883a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fa8d 	bl	8007d5e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00c      	beq.n	8008868 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b00      	cmp	r3, #0
 8008856:	d007      	beq.n	8008868 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2210      	movs	r2, #16
 800885e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fa85 	bl	8007d72 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00c      	beq.n	800888c <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2240      	movs	r2, #64	@ 0x40
 8008882:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff fa7d 	bl	8007d86 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00c      	beq.n	80088b0 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d007      	beq.n	80088b0 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fa75 	bl	8007d9a <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80088c8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80088d2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d015      	beq.n	800891a <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008900:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fa4a 	bl	8007dae <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00d      	beq.n	8008940 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d008      	beq.n	8008940 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008936:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fa41 	bl	8007dc2 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d007      	beq.n	8008964 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2201      	movs	r2, #1
 800895a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800895c:	2106      	movs	r1, #6
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fa4e 	bl	8007e00 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2202      	movs	r2, #2
 800897e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008980:	2106      	movs	r1, #6
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fa47 	bl	8007e16 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00c      	beq.n	80089ac <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2204      	movs	r2, #4
 80089a2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80089a4:	2106      	movs	r1, #6
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff fa40 	bl	8007e2c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00c      	beq.n	80089d0 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2208      	movs	r2, #8
 80089c6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80089c8:	2106      	movs	r1, #6
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fa39 	bl	8007e42 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2210      	movs	r2, #16
 80089ea:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80089ec:	2106      	movs	r1, #6
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f9 fc06 	bl	8002200 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d006      	beq.n	8008a16 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff f9e0 	bl	8007dd6 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00c      	beq.n	8008a3a <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2240      	movs	r2, #64	@ 0x40
 8008a30:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a32:	2106      	movs	r1, #6
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff f9d8 	bl	8007dea <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	01db      	lsls	r3, r3, #7
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	01db      	lsls	r3, r3, #7
 8008a66:	4413      	add	r3, r2
 8008a68:	338c      	adds	r3, #140	@ 0x8c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	01db      	lsls	r3, r3, #7
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3388      	adds	r3, #136	@ 0x88
 8008a8e:	2201      	movs	r2, #1
 8008a90:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff f9b3 	bl	8007e00 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d010      	beq.n	8008ac6 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	01db      	lsls	r3, r3, #7
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3388      	adds	r3, #136	@ 0x88
 8008aba:	2202      	movs	r2, #2
 8008abc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff f9a8 	bl	8007e16 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d010      	beq.n	8008af2 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	01db      	lsls	r3, r3, #7
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3388      	adds	r3, #136	@ 0x88
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff f99d 	bl	8007e2c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d010      	beq.n	8008b1e <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	01db      	lsls	r3, r3, #7
 8008b0e:	4413      	add	r3, r2
 8008b10:	3388      	adds	r3, #136	@ 0x88
 8008b12:	2208      	movs	r2, #8
 8008b14:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff f992 	bl	8007e42 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	01db      	lsls	r3, r3, #7
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3388      	adds	r3, #136	@ 0x88
 8008b3e:	2210      	movs	r2, #16
 8008b40:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7f9 fb5b 	bl	8002200 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d010      	beq.n	8008b76 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	01db      	lsls	r3, r3, #7
 8008b66:	4413      	add	r3, r2
 8008b68:	3388      	adds	r3, #136	@ 0x88
 8008b6a:	2240      	movs	r2, #64	@ 0x40
 8008b6c:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff f93a 	bl	8007dea <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d010      	beq.n	8008ba2 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	01db      	lsls	r3, r3, #7
 8008b92:	4413      	add	r3, r2
 8008b94:	3388      	adds	r3, #136	@ 0x88
 8008b96:	2280      	movs	r2, #128	@ 0x80
 8008b98:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff f95b 	bl	8007e58 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d011      	beq.n	8008bd0 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00c      	beq.n	8008bd0 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	01db      	lsls	r3, r3, #7
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3388      	adds	r3, #136	@ 0x88
 8008bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bc6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff f94f 	bl	8007e6e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d011      	beq.n	8008bfe <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00c      	beq.n	8008bfe <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	01db      	lsls	r3, r3, #7
 8008bec:	4413      	add	r3, r2
 8008bee:	3388      	adds	r3, #136	@ 0x88
 8008bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bf4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff f959 	bl	8007eb0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d011      	beq.n	8008c2c <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00c      	beq.n	8008c2c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	01db      	lsls	r3, r3, #7
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3388      	adds	r3, #136	@ 0x88
 8008c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008c22:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff f94d 	bl	8007ec6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d011      	beq.n	8008c5a <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00c      	beq.n	8008c5a <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	01db      	lsls	r3, r3, #7
 8008c48:	4413      	add	r3, r2
 8008c4a:	3388      	adds	r3, #136	@ 0x88
 8008c4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c50:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff f941 	bl	8007edc <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	01db      	lsls	r3, r3, #7
 8008c76:	4413      	add	r3, r2
 8008c78:	3388      	adds	r3, #136	@ 0x88
 8008c7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008c7e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff f935 	bl	8007ef2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d011      	beq.n	8008cb6 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	01db      	lsls	r3, r3, #7
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3388      	adds	r3, #136	@ 0x88
 8008ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008cac:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f8f2 	bl	8007e9a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d011      	beq.n	8008ce4 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	01db      	lsls	r3, r3, #7
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3388      	adds	r3, #136	@ 0x88
 8008cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008cda:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f8d0 	bl	8007e84 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e0c0      	b.n	8008e80 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fa f8e4 	bl	8002ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f002 fde7 	bl	800b8f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
 8008d2e:	e03e      	b.n	8008dae <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d30:	7bfa      	ldrb	r2, [r7, #15]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3311      	adds	r3, #17
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d44:	7bfa      	ldrb	r2, [r7, #15]
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	440b      	add	r3, r1
 8008d52:	3310      	adds	r3, #16
 8008d54:	7bfa      	ldrb	r2, [r7, #15]
 8008d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d58:	7bfa      	ldrb	r2, [r7, #15]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	440b      	add	r3, r1
 8008d66:	3313      	adds	r3, #19
 8008d68:	2200      	movs	r2, #0
 8008d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d6c:	7bfa      	ldrb	r2, [r7, #15]
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	440b      	add	r3, r1
 8008d7a:	3320      	adds	r3, #32
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d80:	7bfa      	ldrb	r2, [r7, #15]
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3324      	adds	r3, #36	@ 0x24
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	440b      	add	r3, r1
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	3301      	adds	r3, #1
 8008dac:	73fb      	strb	r3, [r7, #15]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	7bfa      	ldrb	r2, [r7, #15]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d3bb      	bcc.n	8008d30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
 8008dbc:	e044      	b.n	8008e48 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008dbe:	7bfa      	ldrb	r2, [r7, #15]
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	440b      	add	r3, r1
 8008dcc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008dd4:	7bfa      	ldrb	r2, [r7, #15]
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	440b      	add	r3, r1
 8008de2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de6:	7bfa      	ldrb	r2, [r7, #15]
 8008de8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	440b      	add	r3, r1
 8008df8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e00:	7bfa      	ldrb	r2, [r7, #15]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	440b      	add	r3, r1
 8008e0e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e16:	7bfa      	ldrb	r2, [r7, #15]
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	440b      	add	r3, r1
 8008e24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e2c:	7bfa      	ldrb	r2, [r7, #15]
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	440b      	add	r3, r1
 8008e3a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	3301      	adds	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	791b      	ldrb	r3, [r3, #4]
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3b5      	bcc.n	8008dbe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008e5e:	f002 fd66 	bl	800b92e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7a9b      	ldrb	r3, [r3, #10]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d102      	bne.n	8008e7e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f805 	bl	8008e88 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d141      	bne.n	8008f6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eea:	4b4b      	ldr	r3, [pc, #300]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ef6:	d131      	bne.n	8008f5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ef8:	4b47      	ldr	r3, [pc, #284]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efe:	4a46      	ldr	r2, [pc, #280]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f08:	4b43      	ldr	r3, [pc, #268]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f10:	4a41      	ldr	r2, [pc, #260]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f18:	4b40      	ldr	r3, [pc, #256]	@ (800901c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2232      	movs	r2, #50	@ 0x32
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
 8008f22:	4a3f      	ldr	r2, [pc, #252]	@ (8009020 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f24:	fba2 2303 	umull	r2, r3, r2, r3
 8008f28:	0c9b      	lsrs	r3, r3, #18
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f2e:	e002      	b.n	8008f36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f36:	4b38      	ldr	r3, [pc, #224]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f42:	d102      	bne.n	8008f4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f2      	bne.n	8008f30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f4a:	4b33      	ldr	r3, [pc, #204]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f56:	d158      	bne.n	800900a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e057      	b.n	800900c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f62:	4a2d      	ldr	r2, [pc, #180]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f6c:	e04d      	b.n	800900a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f74:	d141      	bne.n	8008ffa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f76:	4b28      	ldr	r3, [pc, #160]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f82:	d131      	bne.n	8008fe8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f84:	4b24      	ldr	r3, [pc, #144]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8a:	4a23      	ldr	r2, [pc, #140]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f94:	4b20      	ldr	r3, [pc, #128]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800901c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2232      	movs	r2, #50	@ 0x32
 8008faa:	fb02 f303 	mul.w	r3, r2, r3
 8008fae:	4a1c      	ldr	r2, [pc, #112]	@ (8009020 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb4:	0c9b      	lsrs	r3, r3, #18
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fba:	e002      	b.n	8008fc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fc2:	4b15      	ldr	r3, [pc, #84]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fce:	d102      	bne.n	8008fd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f2      	bne.n	8008fbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fd6:	4b10      	ldr	r3, [pc, #64]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fe2:	d112      	bne.n	800900a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e011      	b.n	800900c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fee:	4a0a      	ldr	r2, [pc, #40]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ff8:	e007      	b.n	800900a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ffa:	4b07      	ldr	r3, [pc, #28]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009002:	4a05      	ldr	r2, [pc, #20]	@ (8009018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009004:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009008:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40007000 	.word	0x40007000
 800901c:	20000008 	.word	0x20000008
 8009020:	431bde83 	.word	0x431bde83

08009024 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800902e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009032:	6093      	str	r3, [r2, #8]
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	40007000 	.word	0x40007000

08009044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e2fe      	b.n	8009654 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d075      	beq.n	800914e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009062:	4b97      	ldr	r3, [pc, #604]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800906c:	4b94      	ldr	r3, [pc, #592]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b0c      	cmp	r3, #12
 800907a:	d102      	bne.n	8009082 <HAL_RCC_OscConfig+0x3e>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b03      	cmp	r3, #3
 8009080:	d002      	beq.n	8009088 <HAL_RCC_OscConfig+0x44>
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d10b      	bne.n	80090a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009088:	4b8d      	ldr	r3, [pc, #564]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d05b      	beq.n	800914c <HAL_RCC_OscConfig+0x108>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d157      	bne.n	800914c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e2d9      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a8:	d106      	bne.n	80090b8 <HAL_RCC_OscConfig+0x74>
 80090aa:	4b85      	ldr	r3, [pc, #532]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a84      	ldr	r2, [pc, #528]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e01d      	b.n	80090f4 <HAL_RCC_OscConfig+0xb0>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090c0:	d10c      	bne.n	80090dc <HAL_RCC_OscConfig+0x98>
 80090c2:	4b7f      	ldr	r3, [pc, #508]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a7e      	ldr	r2, [pc, #504]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	4b7c      	ldr	r3, [pc, #496]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a7b      	ldr	r2, [pc, #492]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	e00b      	b.n	80090f4 <HAL_RCC_OscConfig+0xb0>
 80090dc:	4b78      	ldr	r3, [pc, #480]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a77      	ldr	r2, [pc, #476]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	4b75      	ldr	r3, [pc, #468]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a74      	ldr	r2, [pc, #464]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80090ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d013      	beq.n	8009124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fc:	f7f9 ff66 	bl	8002fcc <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009104:	f7f9 ff62 	bl	8002fcc <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	@ 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e29e      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009116:	4b6a      	ldr	r3, [pc, #424]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f0      	beq.n	8009104 <HAL_RCC_OscConfig+0xc0>
 8009122:	e014      	b.n	800914e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7f9 ff52 	bl	8002fcc <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800912c:	f7f9 ff4e 	bl	8002fcc <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b64      	cmp	r3, #100	@ 0x64
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e28a      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800913e:	4b60      	ldr	r3, [pc, #384]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f0      	bne.n	800912c <HAL_RCC_OscConfig+0xe8>
 800914a:	e000      	b.n	800914e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800914c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d075      	beq.n	8009246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800915a:	4b59      	ldr	r3, [pc, #356]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 030c 	and.w	r3, r3, #12
 8009162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009164:	4b56      	ldr	r3, [pc, #344]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0303 	and.w	r3, r3, #3
 800916c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b0c      	cmp	r3, #12
 8009172:	d102      	bne.n	800917a <HAL_RCC_OscConfig+0x136>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d002      	beq.n	8009180 <HAL_RCC_OscConfig+0x13c>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b04      	cmp	r3, #4
 800917e:	d11f      	bne.n	80091c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009180:	4b4f      	ldr	r3, [pc, #316]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_RCC_OscConfig+0x154>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e25d      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009198:	4b49      	ldr	r3, [pc, #292]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	061b      	lsls	r3, r3, #24
 80091a6:	4946      	ldr	r1, [pc, #280]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091ac:	4b45      	ldr	r3, [pc, #276]	@ (80092c4 <HAL_RCC_OscConfig+0x280>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7f9 f9db 	bl	800256c <HAL_InitTick>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d043      	beq.n	8009244 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e249      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d023      	beq.n	8009210 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091c8:	4b3d      	ldr	r3, [pc, #244]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a3c      	ldr	r2, [pc, #240]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80091ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d4:	f7f9 fefa 	bl	8002fcc <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091dc:	f7f9 fef6 	bl	8002fcc <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e232      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091ee:	4b34      	ldr	r3, [pc, #208]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091fa:	4b31      	ldr	r3, [pc, #196]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	061b      	lsls	r3, r3, #24
 8009208:	492d      	ldr	r1, [pc, #180]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800920a:	4313      	orrs	r3, r2
 800920c:	604b      	str	r3, [r1, #4]
 800920e:	e01a      	b.n	8009246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009210:	4b2b      	ldr	r3, [pc, #172]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a2a      	ldr	r2, [pc, #168]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800921a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921c:	f7f9 fed6 	bl	8002fcc <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009224:	f7f9 fed2 	bl	8002fcc <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e20e      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009236:	4b22      	ldr	r3, [pc, #136]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f0      	bne.n	8009224 <HAL_RCC_OscConfig+0x1e0>
 8009242:	e000      	b.n	8009246 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009244:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d041      	beq.n	80092d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01c      	beq.n	8009294 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800925a:	4b19      	ldr	r3, [pc, #100]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800925c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009260:	4a17      	ldr	r2, [pc, #92]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926a:	f7f9 feaf 	bl	8002fcc <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009270:	e008      	b.n	8009284 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009272:	f7f9 feab 	bl	8002fcc <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e1e7      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009284:	4b0e      	ldr	r3, [pc, #56]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0ef      	beq.n	8009272 <HAL_RCC_OscConfig+0x22e>
 8009292:	e020      	b.n	80092d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009294:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 8009296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800929a:	4a09      	ldr	r2, [pc, #36]	@ (80092c0 <HAL_RCC_OscConfig+0x27c>)
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a4:	f7f9 fe92 	bl	8002fcc <HAL_GetTick>
 80092a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092aa:	e00d      	b.n	80092c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092ac:	f7f9 fe8e 	bl	8002fcc <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d906      	bls.n	80092c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e1ca      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
 80092be:	bf00      	nop
 80092c0:	40021000 	.word	0x40021000
 80092c4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092c8:	4b8c      	ldr	r3, [pc, #560]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80092ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ea      	bne.n	80092ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80a6 	beq.w	8009430 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092e4:	2300      	movs	r3, #0
 80092e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092e8:	4b84      	ldr	r3, [pc, #528]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80092ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_RCC_OscConfig+0x2b4>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <HAL_RCC_OscConfig+0x2b6>
 80092f8:	2300      	movs	r3, #0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00d      	beq.n	800931a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092fe:	4b7f      	ldr	r3, [pc, #508]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009302:	4a7e      	ldr	r2, [pc, #504]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009308:	6593      	str	r3, [r2, #88]	@ 0x58
 800930a:	4b7c      	ldr	r3, [pc, #496]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800930c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009316:	2301      	movs	r3, #1
 8009318:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800931a:	4b79      	ldr	r3, [pc, #484]	@ (8009500 <HAL_RCC_OscConfig+0x4bc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d118      	bne.n	8009358 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009326:	4b76      	ldr	r3, [pc, #472]	@ (8009500 <HAL_RCC_OscConfig+0x4bc>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a75      	ldr	r2, [pc, #468]	@ (8009500 <HAL_RCC_OscConfig+0x4bc>)
 800932c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009332:	f7f9 fe4b 	bl	8002fcc <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009338:	e008      	b.n	800934c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800933a:	f7f9 fe47 	bl	8002fcc <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e183      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800934c:	4b6c      	ldr	r3, [pc, #432]	@ (8009500 <HAL_RCC_OscConfig+0x4bc>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0f0      	beq.n	800933a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d108      	bne.n	8009372 <HAL_RCC_OscConfig+0x32e>
 8009360:	4b66      	ldr	r3, [pc, #408]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009366:	4a65      	ldr	r2, [pc, #404]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009370:	e024      	b.n	80093bc <HAL_RCC_OscConfig+0x378>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	2b05      	cmp	r3, #5
 8009378:	d110      	bne.n	800939c <HAL_RCC_OscConfig+0x358>
 800937a:	4b60      	ldr	r3, [pc, #384]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800937c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009380:	4a5e      	ldr	r2, [pc, #376]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009382:	f043 0304 	orr.w	r3, r3, #4
 8009386:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800938a:	4b5c      	ldr	r3, [pc, #368]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	4a5a      	ldr	r2, [pc, #360]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800939a:	e00f      	b.n	80093bc <HAL_RCC_OscConfig+0x378>
 800939c:	4b57      	ldr	r3, [pc, #348]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a2:	4a56      	ldr	r2, [pc, #344]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80093a4:	f023 0301 	bic.w	r3, r3, #1
 80093a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80093ac:	4b53      	ldr	r3, [pc, #332]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b2:	4a52      	ldr	r2, [pc, #328]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80093b4:	f023 0304 	bic.w	r3, r3, #4
 80093b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d016      	beq.n	80093f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093c4:	f7f9 fe02 	bl	8002fcc <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093ca:	e00a      	b.n	80093e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093cc:	f7f9 fdfe 	bl	8002fcc <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093da:	4293      	cmp	r3, r2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e138      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093e2:	4b46      	ldr	r3, [pc, #280]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0ed      	beq.n	80093cc <HAL_RCC_OscConfig+0x388>
 80093f0:	e015      	b.n	800941e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f2:	f7f9 fdeb 	bl	8002fcc <HAL_GetTick>
 80093f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093f8:	e00a      	b.n	8009410 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093fa:	f7f9 fde7 	bl	8002fcc <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009408:	4293      	cmp	r3, r2
 800940a:	d901      	bls.n	8009410 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e121      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009410:	4b3a      	ldr	r3, [pc, #232]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1ed      	bne.n	80093fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800941e:	7ffb      	ldrb	r3, [r7, #31]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d105      	bne.n	8009430 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009424:	4b35      	ldr	r3, [pc, #212]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009428:	4a34      	ldr	r2, [pc, #208]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800942a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800942e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b00      	cmp	r3, #0
 800943a:	d03c      	beq.n	80094b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01c      	beq.n	800947e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009444:	4b2d      	ldr	r3, [pc, #180]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009446:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800944a:	4a2c      	ldr	r2, [pc, #176]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009454:	f7f9 fdba 	bl	8002fcc <HAL_GetTick>
 8009458:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800945a:	e008      	b.n	800946e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800945c:	f7f9 fdb6 	bl	8002fcc <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d901      	bls.n	800946e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e0f2      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800946e:	4b23      	ldr	r3, [pc, #140]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009470:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009474:	f003 0302 	and.w	r3, r3, #2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0ef      	beq.n	800945c <HAL_RCC_OscConfig+0x418>
 800947c:	e01b      	b.n	80094b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800947e:	4b1f      	ldr	r3, [pc, #124]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009480:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009484:	4a1d      	ldr	r2, [pc, #116]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 8009486:	f023 0301 	bic.w	r3, r3, #1
 800948a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948e:	f7f9 fd9d 	bl	8002fcc <HAL_GetTick>
 8009492:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009494:	e008      	b.n	80094a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009496:	f7f9 fd99 	bl	8002fcc <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d901      	bls.n	80094a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e0d5      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094a8:	4b14      	ldr	r3, [pc, #80]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80094aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1ef      	bne.n	8009496 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 80c9 	beq.w	8009652 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094c0:	4b0e      	ldr	r3, [pc, #56]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f003 030c 	and.w	r3, r3, #12
 80094c8:	2b0c      	cmp	r3, #12
 80094ca:	f000 8083 	beq.w	80095d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d15e      	bne.n	8009594 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a08      	ldr	r2, [pc, #32]	@ (80094fc <HAL_RCC_OscConfig+0x4b8>)
 80094dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e2:	f7f9 fd73 	bl	8002fcc <HAL_GetTick>
 80094e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094e8:	e00c      	b.n	8009504 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ea:	f7f9 fd6f 	bl	8002fcc <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d905      	bls.n	8009504 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e0ab      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
 80094fc:	40021000 	.word	0x40021000
 8009500:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009504:	4b55      	ldr	r3, [pc, #340]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ec      	bne.n	80094ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009510:	4b52      	ldr	r3, [pc, #328]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	4b52      	ldr	r3, [pc, #328]	@ (8009660 <HAL_RCC_OscConfig+0x61c>)
 8009516:	4013      	ands	r3, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6a11      	ldr	r1, [r2, #32]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009520:	3a01      	subs	r2, #1
 8009522:	0112      	lsls	r2, r2, #4
 8009524:	4311      	orrs	r1, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800952a:	0212      	lsls	r2, r2, #8
 800952c:	4311      	orrs	r1, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009532:	0852      	lsrs	r2, r2, #1
 8009534:	3a01      	subs	r2, #1
 8009536:	0552      	lsls	r2, r2, #21
 8009538:	4311      	orrs	r1, r2
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800953e:	0852      	lsrs	r2, r2, #1
 8009540:	3a01      	subs	r2, #1
 8009542:	0652      	lsls	r2, r2, #25
 8009544:	4311      	orrs	r1, r2
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800954a:	06d2      	lsls	r2, r2, #27
 800954c:	430a      	orrs	r2, r1
 800954e:	4943      	ldr	r1, [pc, #268]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009550:	4313      	orrs	r3, r2
 8009552:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009554:	4b41      	ldr	r3, [pc, #260]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a40      	ldr	r2, [pc, #256]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 800955a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800955e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009560:	4b3e      	ldr	r3, [pc, #248]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4a3d      	ldr	r2, [pc, #244]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800956a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7f9 fd2e 	bl	8002fcc <HAL_GetTick>
 8009570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009574:	f7f9 fd2a 	bl	8002fcc <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e066      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009586:	4b35      	ldr	r3, [pc, #212]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0f0      	beq.n	8009574 <HAL_RCC_OscConfig+0x530>
 8009592:	e05e      	b.n	8009652 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009594:	4b31      	ldr	r3, [pc, #196]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a30      	ldr	r2, [pc, #192]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 800959a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800959e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a0:	f7f9 fd14 	bl	8002fcc <HAL_GetTick>
 80095a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095a6:	e008      	b.n	80095ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095a8:	f7f9 fd10 	bl	8002fcc <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d901      	bls.n	80095ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e04c      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095ba:	4b28      	ldr	r3, [pc, #160]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1f0      	bne.n	80095a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095c6:	4b25      	ldr	r3, [pc, #148]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	4924      	ldr	r1, [pc, #144]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 80095cc:	4b25      	ldr	r3, [pc, #148]	@ (8009664 <HAL_RCC_OscConfig+0x620>)
 80095ce:	4013      	ands	r3, r2
 80095d0:	60cb      	str	r3, [r1, #12]
 80095d2:	e03e      	b.n	8009652 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e039      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80095e0:	4b1e      	ldr	r3, [pc, #120]	@ (800965c <HAL_RCC_OscConfig+0x618>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f003 0203 	and.w	r2, r3, #3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d12c      	bne.n	800964e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fe:	3b01      	subs	r3, #1
 8009600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009602:	429a      	cmp	r2, r3
 8009604:	d123      	bne.n	800964e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009612:	429a      	cmp	r2, r3
 8009614:	d11b      	bne.n	800964e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009622:	429a      	cmp	r2, r3
 8009624:	d113      	bne.n	800964e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	3b01      	subs	r3, #1
 8009634:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d109      	bne.n	800964e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	3b01      	subs	r3, #1
 8009648:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800964a:	429a      	cmp	r2, r3
 800964c:	d001      	beq.n	8009652 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e000      	b.n	8009654 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40021000 	.word	0x40021000
 8009660:	019f800c 	.word	0x019f800c
 8009664:	feeefffc 	.word	0xfeeefffc

08009668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e11e      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009680:	4b91      	ldr	r3, [pc, #580]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d910      	bls.n	80096b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800968e:	4b8e      	ldr	r3, [pc, #568]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f023 020f 	bic.w	r2, r3, #15
 8009696:	498c      	ldr	r1, [pc, #560]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	4313      	orrs	r3, r2
 800969c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800969e:	4b8a      	ldr	r3, [pc, #552]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d001      	beq.n	80096b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e106      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d073      	beq.n	80097a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d129      	bne.n	8009718 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096c4:	4b81      	ldr	r3, [pc, #516]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e0f4      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80096d4:	f000 f9d0 	bl	8009a78 <RCC_GetSysClockFreqFromPLLSource>
 80096d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4a7c      	ldr	r2, [pc, #496]	@ (80098d0 <HAL_RCC_ClockConfig+0x268>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d93f      	bls.n	8009762 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096e2:	4b7a      	ldr	r3, [pc, #488]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d033      	beq.n	8009762 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d12f      	bne.n	8009762 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009702:	4b72      	ldr	r3, [pc, #456]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800970a:	4a70      	ldr	r2, [pc, #448]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 800970c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009710:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009712:	2380      	movs	r3, #128	@ 0x80
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e024      	b.n	8009762 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d107      	bne.n	8009730 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009720:	4b6a      	ldr	r3, [pc, #424]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e0c6      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009730:	4b66      	ldr	r3, [pc, #408]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e0be      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009740:	f000 f8ce 	bl	80098e0 <HAL_RCC_GetSysClockFreq>
 8009744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4a61      	ldr	r2, [pc, #388]	@ (80098d0 <HAL_RCC_ClockConfig+0x268>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d909      	bls.n	8009762 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800974e:	4b5f      	ldr	r3, [pc, #380]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009756:	4a5d      	ldr	r2, [pc, #372]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800975c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800975e:	2380      	movs	r3, #128	@ 0x80
 8009760:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009762:	4b5a      	ldr	r3, [pc, #360]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f023 0203 	bic.w	r2, r3, #3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	4957      	ldr	r1, [pc, #348]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009770:	4313      	orrs	r3, r2
 8009772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009774:	f7f9 fc2a 	bl	8002fcc <HAL_GetTick>
 8009778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800977a:	e00a      	b.n	8009792 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800977c:	f7f9 fc26 	bl	8002fcc <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800978a:	4293      	cmp	r3, r2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e095      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009792:	4b4e      	ldr	r3, [pc, #312]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 020c 	and.w	r2, r3, #12
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d1eb      	bne.n	800977c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d023      	beq.n	80097f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097bc:	4b43      	ldr	r3, [pc, #268]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	4a42      	ldr	r2, [pc, #264]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80097c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80097d4:	4b3d      	ldr	r3, [pc, #244]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097dc:	4a3b      	ldr	r2, [pc, #236]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80097e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097e4:	4b39      	ldr	r3, [pc, #228]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	4936      	ldr	r1, [pc, #216]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	608b      	str	r3, [r1, #8]
 80097f6:	e008      	b.n	800980a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b80      	cmp	r3, #128	@ 0x80
 80097fc:	d105      	bne.n	800980a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80097fe:	4b33      	ldr	r3, [pc, #204]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	4a32      	ldr	r2, [pc, #200]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009804:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009808:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d21d      	bcs.n	8009854 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009818:	4b2b      	ldr	r3, [pc, #172]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f023 020f 	bic.w	r2, r3, #15
 8009820:	4929      	ldr	r1, [pc, #164]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4313      	orrs	r3, r2
 8009826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009828:	f7f9 fbd0 	bl	8002fcc <HAL_GetTick>
 800982c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800982e:	e00a      	b.n	8009846 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009830:	f7f9 fbcc 	bl	8002fcc <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800983e:	4293      	cmp	r3, r2
 8009840:	d901      	bls.n	8009846 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e03b      	b.n	80098be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009846:	4b20      	ldr	r3, [pc, #128]	@ (80098c8 <HAL_RCC_ClockConfig+0x260>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d1ed      	bne.n	8009830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009860:	4b1a      	ldr	r3, [pc, #104]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	4917      	ldr	r1, [pc, #92]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 800986e:	4313      	orrs	r3, r2
 8009870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800987e:	4b13      	ldr	r3, [pc, #76]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	490f      	ldr	r1, [pc, #60]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 800988e:	4313      	orrs	r3, r2
 8009890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009892:	f000 f825 	bl	80098e0 <HAL_RCC_GetSysClockFreq>
 8009896:	4602      	mov	r2, r0
 8009898:	4b0c      	ldr	r3, [pc, #48]	@ (80098cc <HAL_RCC_ClockConfig+0x264>)
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	091b      	lsrs	r3, r3, #4
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	490c      	ldr	r1, [pc, #48]	@ (80098d4 <HAL_RCC_ClockConfig+0x26c>)
 80098a4:	5ccb      	ldrb	r3, [r1, r3]
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	fa22 f303 	lsr.w	r3, r2, r3
 80098ae:	4a0a      	ldr	r2, [pc, #40]	@ (80098d8 <HAL_RCC_ClockConfig+0x270>)
 80098b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80098b2:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <HAL_RCC_ClockConfig+0x274>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f8 fe58 	bl	800256c <HAL_InitTick>
 80098bc:	4603      	mov	r3, r0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40022000 	.word	0x40022000
 80098cc:	40021000 	.word	0x40021000
 80098d0:	04c4b400 	.word	0x04c4b400
 80098d4:	08019b18 	.word	0x08019b18
 80098d8:	20000008 	.word	0x20000008
 80098dc:	2000000c 	.word	0x2000000c

080098e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80098e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f003 030c 	and.w	r3, r3, #12
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d102      	bne.n	80098f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80098f2:	4b2a      	ldr	r3, [pc, #168]	@ (800999c <HAL_RCC_GetSysClockFreq+0xbc>)
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	e047      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80098f8:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f003 030c 	and.w	r3, r3, #12
 8009900:	2b08      	cmp	r3, #8
 8009902:	d102      	bne.n	800990a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009904:	4b26      	ldr	r3, [pc, #152]	@ (80099a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	e03e      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800990a:	4b23      	ldr	r3, [pc, #140]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 030c 	and.w	r3, r3, #12
 8009912:	2b0c      	cmp	r3, #12
 8009914:	d136      	bne.n	8009984 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009916:	4b20      	ldr	r3, [pc, #128]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009920:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	091b      	lsrs	r3, r3, #4
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	3301      	adds	r3, #1
 800992c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d10c      	bne.n	800994e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009934:	4a1a      	ldr	r2, [pc, #104]	@ (80099a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	fbb2 f3f3 	udiv	r3, r2, r3
 800993c:	4a16      	ldr	r2, [pc, #88]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800993e:	68d2      	ldr	r2, [r2, #12]
 8009940:	0a12      	lsrs	r2, r2, #8
 8009942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	617b      	str	r3, [r7, #20]
      break;
 800994c:	e00c      	b.n	8009968 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800994e:	4a13      	ldr	r2, [pc, #76]	@ (800999c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	4a10      	ldr	r2, [pc, #64]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009958:	68d2      	ldr	r2, [r2, #12]
 800995a:	0a12      	lsrs	r2, r2, #8
 800995c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009960:	fb02 f303 	mul.w	r3, r2, r3
 8009964:	617b      	str	r3, [r7, #20]
      break;
 8009966:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009968:	4b0b      	ldr	r3, [pc, #44]	@ (8009998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	0e5b      	lsrs	r3, r3, #25
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	3301      	adds	r3, #1
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	e001      	b.n	8009988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009988:	693b      	ldr	r3, [r7, #16]
}
 800998a:	4618      	mov	r0, r3
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	40021000 	.word	0x40021000
 800999c:	00f42400 	.word	0x00f42400
 80099a0:	02dc6c00 	.word	0x02dc6c00

080099a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099a8:	4b03      	ldr	r3, [pc, #12]	@ (80099b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80099aa:	681b      	ldr	r3, [r3, #0]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000008 	.word	0x20000008

080099bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099c0:	f7ff fff0 	bl	80099a4 <HAL_RCC_GetHCLKFreq>
 80099c4:	4602      	mov	r2, r0
 80099c6:	4b06      	ldr	r3, [pc, #24]	@ (80099e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	4904      	ldr	r1, [pc, #16]	@ (80099e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80099d2:	5ccb      	ldrb	r3, [r1, r3]
 80099d4:	f003 031f 	and.w	r3, r3, #31
 80099d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099dc:	4618      	mov	r0, r3
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	40021000 	.word	0x40021000
 80099e4:	08019b28 	.word	0x08019b28

080099e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80099ec:	f7ff ffda 	bl	80099a4 <HAL_RCC_GetHCLKFreq>
 80099f0:	4602      	mov	r2, r0
 80099f2:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	0adb      	lsrs	r3, r3, #11
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	4904      	ldr	r1, [pc, #16]	@ (8009a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80099fe:	5ccb      	ldrb	r3, [r1, r3]
 8009a00:	f003 031f 	and.w	r3, r3, #31
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	40021000 	.word	0x40021000
 8009a10:	08019b28 	.word	0x08019b28

08009a14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	220f      	movs	r2, #15
 8009a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009a24:	4b12      	ldr	r3, [pc, #72]	@ (8009a70 <HAL_RCC_GetClockConfig+0x5c>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0203 	and.w	r2, r3, #3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009a30:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <HAL_RCC_GetClockConfig+0x5c>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a70 <HAL_RCC_GetClockConfig+0x5c>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009a48:	4b09      	ldr	r3, [pc, #36]	@ (8009a70 <HAL_RCC_GetClockConfig+0x5c>)
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	08db      	lsrs	r3, r3, #3
 8009a4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009a56:	4b07      	ldr	r3, [pc, #28]	@ (8009a74 <HAL_RCC_GetClockConfig+0x60>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 020f 	and.w	r2, r3, #15
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	601a      	str	r2, [r3, #0]
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	40021000 	.word	0x40021000
 8009a74:	40022000 	.word	0x40022000

08009a78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a88:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	091b      	lsrs	r3, r3, #4
 8009a8e:	f003 030f 	and.w	r3, r3, #15
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d10c      	bne.n	8009ab6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a9c:	4a17      	ldr	r2, [pc, #92]	@ (8009afc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa4:	4a14      	ldr	r2, [pc, #80]	@ (8009af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009aa6:	68d2      	ldr	r2, [r2, #12]
 8009aa8:	0a12      	lsrs	r2, r2, #8
 8009aaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	617b      	str	r3, [r7, #20]
    break;
 8009ab4:	e00c      	b.n	8009ad0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ab6:	4a12      	ldr	r2, [pc, #72]	@ (8009b00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	4a0e      	ldr	r2, [pc, #56]	@ (8009af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ac0:	68d2      	ldr	r2, [r2, #12]
 8009ac2:	0a12      	lsrs	r2, r2, #8
 8009ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	617b      	str	r3, [r7, #20]
    break;
 8009ace:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ad0:	4b09      	ldr	r3, [pc, #36]	@ (8009af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	0e5b      	lsrs	r3, r3, #25
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	3301      	adds	r3, #1
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009aea:	687b      	ldr	r3, [r7, #4]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	40021000 	.word	0x40021000
 8009afc:	02dc6c00 	.word	0x02dc6c00
 8009b00:	00f42400 	.word	0x00f42400

08009b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b10:	2300      	movs	r3, #0
 8009b12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 8098 	beq.w	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b22:	2300      	movs	r3, #0
 8009b24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b26:	4b43      	ldr	r3, [pc, #268]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b32:	4b40      	ldr	r3, [pc, #256]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b36:	4a3f      	ldr	r2, [pc, #252]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b46:	60bb      	str	r3, [r7, #8]
 8009b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a39      	ldr	r2, [pc, #228]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b5a:	f7f9 fa37 	bl	8002fcc <HAL_GetTick>
 8009b5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b60:	e009      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b62:	f7f9 fa33 	bl	8002fcc <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d902      	bls.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	74fb      	strb	r3, [r7, #19]
        break;
 8009b74:	e005      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b76:	4b30      	ldr	r3, [pc, #192]	@ (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0ef      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009b82:	7cfb      	ldrb	r3, [r7, #19]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d159      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b88:	4b2a      	ldr	r3, [pc, #168]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01e      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d019      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ba4:	4b23      	ldr	r3, [pc, #140]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bb0:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009bd0:	4a18      	ldr	r2, [pc, #96]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d016      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be2:	f7f9 f9f3 	bl	8002fcc <HAL_GetTick>
 8009be6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009be8:	e00b      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bea:	f7f9 f9ef 	bl	8002fcc <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d902      	bls.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	74fb      	strb	r3, [r7, #19]
            break;
 8009c00:	e006      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c02:	4b0c      	ldr	r3, [pc, #48]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0ec      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009c10:	7cfb      	ldrb	r3, [r7, #19]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c16:	4b07      	ldr	r3, [pc, #28]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c24:	4903      	ldr	r1, [pc, #12]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009c2c:	e008      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c2e:	7cfb      	ldrb	r3, [r7, #19]
 8009c30:	74bb      	strb	r3, [r7, #18]
 8009c32:	e005      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009c34:	40021000 	.word	0x40021000
 8009c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3c:	7cfb      	ldrb	r3, [r7, #19]
 8009c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c40:	7c7b      	ldrb	r3, [r7, #17]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d105      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c46:	4ba7      	ldr	r3, [pc, #668]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4a:	4aa6      	ldr	r2, [pc, #664]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c64:	f023 0203 	bic.w	r2, r3, #3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	499d      	ldr	r1, [pc, #628]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c80:	4b98      	ldr	r3, [pc, #608]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c86:	f023 020c 	bic.w	r2, r3, #12
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4995      	ldr	r1, [pc, #596]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ca2:	4b90      	ldr	r3, [pc, #576]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	498c      	ldr	r1, [pc, #560]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009cc4:	4b87      	ldr	r3, [pc, #540]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	4984      	ldr	r1, [pc, #528]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0310 	and.w	r3, r3, #16
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	497b      	ldr	r1, [pc, #492]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d08:	4b76      	ldr	r3, [pc, #472]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	4973      	ldr	r1, [pc, #460]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	496a      	ldr	r1, [pc, #424]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d4c:	4b65      	ldr	r3, [pc, #404]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	4962      	ldr	r1, [pc, #392]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7c:	4959      	ldr	r1, [pc, #356]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00a      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d90:	4b54      	ldr	r3, [pc, #336]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d96:	f023 0203 	bic.w	r2, r3, #3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	4951      	ldr	r1, [pc, #324]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009db2:	4b4c      	ldr	r3, [pc, #304]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009db8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	4948      	ldr	r1, [pc, #288]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009dd4:	4b43      	ldr	r3, [pc, #268]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de2:	4940      	ldr	r1, [pc, #256]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009df2:	d105      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009df4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a3a      	ldr	r2, [pc, #232]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d015      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e0c:	4b35      	ldr	r3, [pc, #212]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e1a:	4932      	ldr	r1, [pc, #200]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e2a:	d105      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a2c      	ldr	r2, [pc, #176]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d015      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e44:	4b27      	ldr	r3, [pc, #156]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e52:	4924      	ldr	r1, [pc, #144]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e62:	d105      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e64:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d015      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e7c:	4b19      	ldr	r3, [pc, #100]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e8a:	4916      	ldr	r1, [pc, #88]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e9a:	d105      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4a10      	ldr	r2, [pc, #64]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ea6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d019      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec2:	4908      	ldr	r1, [pc, #32]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ed2:	d109      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ed4:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4a02      	ldr	r2, [pc, #8]	@ (8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ede:	60d3      	str	r3, [r2, #12]
 8009ee0:	e002      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009ee2:	bf00      	nop
 8009ee4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d015      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ef4:	4b29      	ldr	r3, [pc, #164]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f02:	4926      	ldr	r1, [pc, #152]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f12:	d105      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f14:	4b21      	ldr	r3, [pc, #132]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a20      	ldr	r2, [pc, #128]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d015      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f3a:	4918      	ldr	r1, [pc, #96]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f4a:	d105      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f4c:	4b13      	ldr	r3, [pc, #76]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	4a12      	ldr	r2, [pc, #72]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d015      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f64:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f72:	490a      	ldr	r1, [pc, #40]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f82:	d105      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f84:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4a04      	ldr	r2, [pc, #16]	@ (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	40021000 	.word	0x40021000

08009fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e09d      	b.n	800a0ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d108      	bne.n	8009fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fc2:	d009      	beq.n	8009fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	61da      	str	r2, [r3, #28]
 8009fca:	e005      	b.n	8009fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7f8 fa4c 	bl	8002490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a00e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a018:	d902      	bls.n	800a020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e002      	b.n	800a026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a02e:	d007      	beq.n	800a040 <HAL_SPI_Init+0xa0>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a038:	d002      	beq.n	800a040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	431a      	orrs	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a078:	431a      	orrs	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	ea42 0103 	orr.w	r1, r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	0c1b      	lsrs	r3, r3, #16
 800a09c:	f003 0204 	and.w	r2, r3, #4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a4:	f003 0310 	and.w	r3, r3, #16
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ae:	f003 0308 	and.w	r3, r3, #8
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a0bc:	ea42 0103 	orr.w	r1, r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69da      	ldr	r2, [r3, #28]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a0dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e049      	b.n	800a19c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7f8 fc19 	bl	8002954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3304      	adds	r3, #4
 800a132:	4619      	mov	r1, r3
 800a134:	4610      	mov	r0, r2
 800a136:	f000 fb45 	bl	800a7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d001      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e054      	b.n	800a266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0201 	orr.w	r2, r2, #1
 800a1d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a26      	ldr	r2, [pc, #152]	@ (800a274 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d022      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e6:	d01d      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a22      	ldr	r2, [pc, #136]	@ (800a278 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d018      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a21      	ldr	r2, [pc, #132]	@ (800a27c <HAL_TIM_Base_Start_IT+0xd8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d013      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1f      	ldr	r2, [pc, #124]	@ (800a280 <HAL_TIM_Base_Start_IT+0xdc>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d00e      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1e      	ldr	r2, [pc, #120]	@ (800a284 <HAL_TIM_Base_Start_IT+0xe0>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d009      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1c      	ldr	r2, [pc, #112]	@ (800a288 <HAL_TIM_Base_Start_IT+0xe4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d004      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a1b      	ldr	r2, [pc, #108]	@ (800a28c <HAL_TIM_Base_Start_IT+0xe8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d115      	bne.n	800a250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	4b19      	ldr	r3, [pc, #100]	@ (800a290 <HAL_TIM_Base_Start_IT+0xec>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b06      	cmp	r3, #6
 800a234:	d015      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xbe>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a23c:	d011      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24e:	e008      	b.n	800a262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0201 	orr.w	r2, r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e000      	b.n	800a264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	40012c00 	.word	0x40012c00
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40013400 	.word	0x40013400
 800a288:	40014000 	.word	0x40014000
 800a28c:	40015000 	.word	0x40015000
 800a290:	00010007 	.word	0x00010007

0800a294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d020      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f003 0302 	and.w	r3, r3, #2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01b      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0202 	mvn.w	r2, #2
 800a2c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa52 	bl	800a788 <HAL_TIM_IC_CaptureCallback>
 800a2e4:	e005      	b.n	800a2f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fa44 	bl	800a774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fa55 	bl	800a79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d020      	beq.n	800a344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01b      	beq.n	800a344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0204 	mvn.w	r2, #4
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2202      	movs	r2, #2
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fa2c 	bl	800a788 <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa1e 	bl	800a774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fa2f 	bl	800a79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 0308 	and.w	r3, r3, #8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d020      	beq.n	800a390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01b      	beq.n	800a390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0208 	mvn.w	r2, #8
 800a360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2204      	movs	r2, #4
 800a366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa06 	bl	800a788 <HAL_TIM_IC_CaptureCallback>
 800a37c:	e005      	b.n	800a38a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f9f8 	bl	800a774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa09 	bl	800a79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b00      	cmp	r3, #0
 800a398:	d020      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01b      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0210 	mvn.w	r2, #16
 800a3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f9e0 	bl	800a788 <HAL_TIM_IC_CaptureCallback>
 800a3c8:	e005      	b.n	800a3d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f9d2 	bl	800a774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f9e3 	bl	800a79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00c      	beq.n	800a400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f06f 0201 	mvn.w	r2, #1
 800a3f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f9b0 	bl	800a760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d104      	bne.n	800a414 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00c      	beq.n	800a42e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d007      	beq.n	800a42e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fbbb 	bl	800aba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00c      	beq.n	800a452 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d007      	beq.n	800a452 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fbb3 	bl	800abb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00c      	beq.n	800a476 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d007      	beq.n	800a476 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f99d 	bl	800a7b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00c      	beq.n	800a49a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f06f 0220 	mvn.w	r2, #32
 800a492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fb7b 	bl	800ab90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00c      	beq.n	800a4be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb87 	bl	800abcc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00c      	beq.n	800a4e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fb7f 	bl	800abe0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00c      	beq.n	800a506 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fb77 	bl	800abf4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00c      	beq.n	800a52a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb6f 	bl	800ac08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a52a:	bf00      	nop
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_TIM_ConfigClockSource+0x1c>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e0f6      	b.n	800a73e <HAL_TIM_ConfigClockSource+0x20a>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a56e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a57a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a6f      	ldr	r2, [pc, #444]	@ (800a748 <HAL_TIM_ConfigClockSource+0x214>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	f000 80c1 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a590:	4a6d      	ldr	r2, [pc, #436]	@ (800a748 <HAL_TIM_ConfigClockSource+0x214>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f200 80c6 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a598:	4a6c      	ldr	r2, [pc, #432]	@ (800a74c <HAL_TIM_ConfigClockSource+0x218>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f000 80b9 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5a0:	4a6a      	ldr	r2, [pc, #424]	@ (800a74c <HAL_TIM_ConfigClockSource+0x218>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	f200 80be 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5a8:	4a69      	ldr	r2, [pc, #420]	@ (800a750 <HAL_TIM_ConfigClockSource+0x21c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	f000 80b1 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5b0:	4a67      	ldr	r2, [pc, #412]	@ (800a750 <HAL_TIM_ConfigClockSource+0x21c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f200 80b6 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5b8:	4a66      	ldr	r2, [pc, #408]	@ (800a754 <HAL_TIM_ConfigClockSource+0x220>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f000 80a9 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5c0:	4a64      	ldr	r2, [pc, #400]	@ (800a754 <HAL_TIM_ConfigClockSource+0x220>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	f200 80ae 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5c8:	4a63      	ldr	r2, [pc, #396]	@ (800a758 <HAL_TIM_ConfigClockSource+0x224>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f000 80a1 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5d0:	4a61      	ldr	r2, [pc, #388]	@ (800a758 <HAL_TIM_ConfigClockSource+0x224>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	f200 80a6 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5d8:	4a60      	ldr	r2, [pc, #384]	@ (800a75c <HAL_TIM_ConfigClockSource+0x228>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	f000 8099 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5e0:	4a5e      	ldr	r2, [pc, #376]	@ (800a75c <HAL_TIM_ConfigClockSource+0x228>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	f200 809e 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a5ec:	f000 8091 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a5f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a5f4:	f200 8096 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a5f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5fc:	f000 8089 	beq.w	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a604:	f200 808e 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a60c:	d03e      	beq.n	800a68c <HAL_TIM_ConfigClockSource+0x158>
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a612:	f200 8087 	bhi.w	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a61a:	f000 8086 	beq.w	800a72a <HAL_TIM_ConfigClockSource+0x1f6>
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a622:	d87f      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a624:	2b70      	cmp	r3, #112	@ 0x70
 800a626:	d01a      	beq.n	800a65e <HAL_TIM_ConfigClockSource+0x12a>
 800a628:	2b70      	cmp	r3, #112	@ 0x70
 800a62a:	d87b      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a62c:	2b60      	cmp	r3, #96	@ 0x60
 800a62e:	d050      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x19e>
 800a630:	2b60      	cmp	r3, #96	@ 0x60
 800a632:	d877      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a634:	2b50      	cmp	r3, #80	@ 0x50
 800a636:	d03c      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x17e>
 800a638:	2b50      	cmp	r3, #80	@ 0x50
 800a63a:	d873      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a63c:	2b40      	cmp	r3, #64	@ 0x40
 800a63e:	d058      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x1be>
 800a640:	2b40      	cmp	r3, #64	@ 0x40
 800a642:	d86f      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a644:	2b30      	cmp	r3, #48	@ 0x30
 800a646:	d064      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d86b      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	d060      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a650:	2b20      	cmp	r3, #32
 800a652:	d867      	bhi.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d05c      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a658:	2b10      	cmp	r3, #16
 800a65a:	d05a      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x1de>
 800a65c:	e062      	b.n	800a724 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a66e:	f000 f9d9 	bl	800aa24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	609a      	str	r2, [r3, #8]
      break;
 800a68a:	e04f      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a69c:	f000 f9c2 	bl	800aa24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6ae:	609a      	str	r2, [r3, #8]
      break;
 800a6b0:	e03c      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f000 f934 	bl	800a92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2150      	movs	r1, #80	@ 0x50
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f98d 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a6d0:	e02c      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f000 f953 	bl	800a98a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2160      	movs	r1, #96	@ 0x60
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f97d 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a6f0:	e01c      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	461a      	mov	r2, r3
 800a700:	f000 f914 	bl	800a92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2140      	movs	r1, #64	@ 0x40
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f96d 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a710:	e00c      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4619      	mov	r1, r3
 800a71c:	4610      	mov	r0, r2
 800a71e:	f000 f964 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a722:	e003      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	73fb      	strb	r3, [r7, #15]
      break;
 800a728:	e000      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a72a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	00100070 	.word	0x00100070
 800a74c:	00100060 	.word	0x00100060
 800a750:	00100050 	.word	0x00100050
 800a754:	00100040 	.word	0x00100040
 800a758:	00100030 	.word	0x00100030
 800a75c:	00100020 	.word	0x00100020

0800a760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a4c      	ldr	r2, [pc, #304]	@ (800a908 <TIM_Base_SetConfig+0x144>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d017      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7e2:	d013      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a49      	ldr	r2, [pc, #292]	@ (800a90c <TIM_Base_SetConfig+0x148>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00f      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a48      	ldr	r2, [pc, #288]	@ (800a910 <TIM_Base_SetConfig+0x14c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00b      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a47      	ldr	r2, [pc, #284]	@ (800a914 <TIM_Base_SetConfig+0x150>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d007      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a46      	ldr	r2, [pc, #280]	@ (800a918 <TIM_Base_SetConfig+0x154>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_Base_SetConfig+0x48>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a45      	ldr	r2, [pc, #276]	@ (800a91c <TIM_Base_SetConfig+0x158>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d108      	bne.n	800a81e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a39      	ldr	r2, [pc, #228]	@ (800a908 <TIM_Base_SetConfig+0x144>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d023      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82c:	d01f      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a36      	ldr	r2, [pc, #216]	@ (800a90c <TIM_Base_SetConfig+0x148>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d01b      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a35      	ldr	r2, [pc, #212]	@ (800a910 <TIM_Base_SetConfig+0x14c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d017      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a34      	ldr	r2, [pc, #208]	@ (800a914 <TIM_Base_SetConfig+0x150>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d013      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a33      	ldr	r2, [pc, #204]	@ (800a918 <TIM_Base_SetConfig+0x154>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00f      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a33      	ldr	r2, [pc, #204]	@ (800a920 <TIM_Base_SetConfig+0x15c>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d00b      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a32      	ldr	r2, [pc, #200]	@ (800a924 <TIM_Base_SetConfig+0x160>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d007      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a31      	ldr	r2, [pc, #196]	@ (800a928 <TIM_Base_SetConfig+0x164>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d003      	beq.n	800a86e <TIM_Base_SetConfig+0xaa>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2c      	ldr	r2, [pc, #176]	@ (800a91c <TIM_Base_SetConfig+0x158>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d108      	bne.n	800a880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	689a      	ldr	r2, [r3, #8]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a18      	ldr	r2, [pc, #96]	@ (800a908 <TIM_Base_SetConfig+0x144>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <TIM_Base_SetConfig+0x110>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a918 <TIM_Base_SetConfig+0x154>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00f      	beq.n	800a8d4 <TIM_Base_SetConfig+0x110>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a920 <TIM_Base_SetConfig+0x15c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00b      	beq.n	800a8d4 <TIM_Base_SetConfig+0x110>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a19      	ldr	r2, [pc, #100]	@ (800a924 <TIM_Base_SetConfig+0x160>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d007      	beq.n	800a8d4 <TIM_Base_SetConfig+0x110>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a18      	ldr	r2, [pc, #96]	@ (800a928 <TIM_Base_SetConfig+0x164>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_Base_SetConfig+0x110>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a13      	ldr	r2, [pc, #76]	@ (800a91c <TIM_Base_SetConfig+0x158>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d103      	bne.n	800a8dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d105      	bne.n	800a8fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	611a      	str	r2, [r3, #16]
  }
}
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40012c00 	.word	0x40012c00
 800a90c:	40000400 	.word	0x40000400
 800a910:	40000800 	.word	0x40000800
 800a914:	40000c00 	.word	0x40000c00
 800a918:	40013400 	.word	0x40013400
 800a91c:	40015000 	.word	0x40015000
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800

0800a92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 030a 	bic.w	r3, r3, #10
 800a968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	f023 0210 	bic.w	r2, r3, #16
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	031b      	lsls	r3, r3, #12
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	f043 0307 	orr.w	r3, r3, #7
 800aa10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	609a      	str	r2, [r3, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	021a      	lsls	r2, r3, #8
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	431a      	orrs	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	609a      	str	r2, [r3, #8]
}
 800aa58:	bf00      	nop
 800aa5a:	371c      	adds	r7, #28
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d101      	bne.n	800aa7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e074      	b.n	800ab66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a34      	ldr	r2, [pc, #208]	@ (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d009      	beq.n	800aaba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a33      	ldr	r2, [pc, #204]	@ (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a31      	ldr	r2, [pc, #196]	@ (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d108      	bne.n	800aacc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4313      	orrs	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a21      	ldr	r2, [pc, #132]	@ (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d022      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aafc:	d01d      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a1f      	ldr	r2, [pc, #124]	@ (800ab80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d018      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d013      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a1c      	ldr	r2, [pc, #112]	@ (800ab88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00e      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a15      	ldr	r2, [pc, #84]	@ (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d009      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a18      	ldr	r2, [pc, #96]	@ (800ab8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d004      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a11      	ldr	r2, [pc, #68]	@ (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d10c      	bne.n	800ab54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	40012c00 	.word	0x40012c00
 800ab78:	40013400 	.word	0x40013400
 800ab7c:	40015000 	.word	0x40015000
 800ab80:	40000400 	.word	0x40000400
 800ab84:	40000800 	.word	0x40000800
 800ab88:	40000c00 	.word	0x40000c00
 800ab8c:	40014000 	.word	0x40014000

0800ab90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e042      	b.n	800acb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d106      	bne.n	800ac46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7f7 ffd7 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2224      	movs	r2, #36	@ 0x24
 800ac4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f022 0201 	bic.w	r2, r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb24 	bl	800b2b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f825 	bl	800acbc <UART_SetConfig>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d101      	bne.n	800ac7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e01b      	b.n	800acb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689a      	ldr	r2, [r3, #8]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f042 0201 	orr.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fba3 	bl	800b3f8 <UART_CheckIdleState>
 800acb2:	4603      	mov	r3, r0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acc0:	b08c      	sub	sp, #48	@ 0x30
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	431a      	orrs	r2, r3
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4baa      	ldr	r3, [pc, #680]	@ (800af94 <UART_SetConfig+0x2d8>)
 800acec:	4013      	ands	r3, r2
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acf4:	430b      	orrs	r3, r1
 800acf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	68da      	ldr	r2, [r3, #12]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a9f      	ldr	r2, [pc, #636]	@ (800af98 <UART_SetConfig+0x2dc>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ad32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad46:	f023 010f 	bic.w	r1, r3, #15
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a90      	ldr	r2, [pc, #576]	@ (800af9c <UART_SetConfig+0x2e0>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d125      	bne.n	800adac <UART_SetConfig+0xf0>
 800ad60:	4b8f      	ldr	r3, [pc, #572]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d81a      	bhi.n	800ada4 <UART_SetConfig+0xe8>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <UART_SetConfig+0xb8>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800ad95 	.word	0x0800ad95
 800ad7c:	0800ad8d 	.word	0x0800ad8d
 800ad80:	0800ad9d 	.word	0x0800ad9d
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8a:	e116      	b.n	800afba <UART_SetConfig+0x2fe>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e112      	b.n	800afba <UART_SetConfig+0x2fe>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e10e      	b.n	800afba <UART_SetConfig+0x2fe>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada2:	e10a      	b.n	800afba <UART_SetConfig+0x2fe>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adaa:	e106      	b.n	800afba <UART_SetConfig+0x2fe>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a7c      	ldr	r2, [pc, #496]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d138      	bne.n	800ae28 <UART_SetConfig+0x16c>
 800adb6:	4b7a      	ldr	r3, [pc, #488]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800adb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adbc:	f003 030c 	and.w	r3, r3, #12
 800adc0:	2b0c      	cmp	r3, #12
 800adc2:	d82d      	bhi.n	800ae20 <UART_SetConfig+0x164>
 800adc4:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <UART_SetConfig+0x110>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800ae01 	.word	0x0800ae01
 800add0:	0800ae21 	.word	0x0800ae21
 800add4:	0800ae21 	.word	0x0800ae21
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae11 	.word	0x0800ae11
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae21 	.word	0x0800ae21
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae09 	.word	0x0800ae09
 800adf0:	0800ae21 	.word	0x0800ae21
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	0800ae21 	.word	0x0800ae21
 800adfc:	0800ae19 	.word	0x0800ae19
 800ae00:	2300      	movs	r3, #0
 800ae02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae06:	e0d8      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae0e:	e0d4      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae16:	e0d0      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae18:	2308      	movs	r3, #8
 800ae1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae1e:	e0cc      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae20:	2310      	movs	r3, #16
 800ae22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae26:	e0c8      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a5e      	ldr	r2, [pc, #376]	@ (800afa8 <UART_SetConfig+0x2ec>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d125      	bne.n	800ae7e <UART_SetConfig+0x1c2>
 800ae32:	4b5b      	ldr	r3, [pc, #364]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800ae34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae3c:	2b30      	cmp	r3, #48	@ 0x30
 800ae3e:	d016      	beq.n	800ae6e <UART_SetConfig+0x1b2>
 800ae40:	2b30      	cmp	r3, #48	@ 0x30
 800ae42:	d818      	bhi.n	800ae76 <UART_SetConfig+0x1ba>
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d00a      	beq.n	800ae5e <UART_SetConfig+0x1a2>
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	d814      	bhi.n	800ae76 <UART_SetConfig+0x1ba>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <UART_SetConfig+0x19a>
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	d008      	beq.n	800ae66 <UART_SetConfig+0x1aa>
 800ae54:	e00f      	b.n	800ae76 <UART_SetConfig+0x1ba>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae5c:	e0ad      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae64:	e0a9      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae66:	2304      	movs	r3, #4
 800ae68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae6c:	e0a5      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae6e:	2308      	movs	r3, #8
 800ae70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae74:	e0a1      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae76:	2310      	movs	r3, #16
 800ae78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae7c:	e09d      	b.n	800afba <UART_SetConfig+0x2fe>
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a4a      	ldr	r2, [pc, #296]	@ (800afac <UART_SetConfig+0x2f0>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d125      	bne.n	800aed4 <UART_SetConfig+0x218>
 800ae88:	4b45      	ldr	r3, [pc, #276]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae92:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae94:	d016      	beq.n	800aec4 <UART_SetConfig+0x208>
 800ae96:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae98:	d818      	bhi.n	800aecc <UART_SetConfig+0x210>
 800ae9a:	2b80      	cmp	r3, #128	@ 0x80
 800ae9c:	d00a      	beq.n	800aeb4 <UART_SetConfig+0x1f8>
 800ae9e:	2b80      	cmp	r3, #128	@ 0x80
 800aea0:	d814      	bhi.n	800aecc <UART_SetConfig+0x210>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <UART_SetConfig+0x1f0>
 800aea6:	2b40      	cmp	r3, #64	@ 0x40
 800aea8:	d008      	beq.n	800aebc <UART_SetConfig+0x200>
 800aeaa:	e00f      	b.n	800aecc <UART_SetConfig+0x210>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	e082      	b.n	800afba <UART_SetConfig+0x2fe>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeba:	e07e      	b.n	800afba <UART_SetConfig+0x2fe>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec2:	e07a      	b.n	800afba <UART_SetConfig+0x2fe>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	e076      	b.n	800afba <UART_SetConfig+0x2fe>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aed2:	e072      	b.n	800afba <UART_SetConfig+0x2fe>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a35      	ldr	r2, [pc, #212]	@ (800afb0 <UART_SetConfig+0x2f4>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d12a      	bne.n	800af34 <UART_SetConfig+0x278>
 800aede:	4b30      	ldr	r3, [pc, #192]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeec:	d01a      	beq.n	800af24 <UART_SetConfig+0x268>
 800aeee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aef2:	d81b      	bhi.n	800af2c <UART_SetConfig+0x270>
 800aef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef8:	d00c      	beq.n	800af14 <UART_SetConfig+0x258>
 800aefa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aefe:	d815      	bhi.n	800af2c <UART_SetConfig+0x270>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <UART_SetConfig+0x250>
 800af04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af08:	d008      	beq.n	800af1c <UART_SetConfig+0x260>
 800af0a:	e00f      	b.n	800af2c <UART_SetConfig+0x270>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af12:	e052      	b.n	800afba <UART_SetConfig+0x2fe>
 800af14:	2302      	movs	r3, #2
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1a:	e04e      	b.n	800afba <UART_SetConfig+0x2fe>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af22:	e04a      	b.n	800afba <UART_SetConfig+0x2fe>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	e046      	b.n	800afba <UART_SetConfig+0x2fe>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e042      	b.n	800afba <UART_SetConfig+0x2fe>
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a17      	ldr	r2, [pc, #92]	@ (800af98 <UART_SetConfig+0x2dc>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d13a      	bne.n	800afb4 <UART_SetConfig+0x2f8>
 800af3e:	4b18      	ldr	r3, [pc, #96]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800af40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af4c:	d01a      	beq.n	800af84 <UART_SetConfig+0x2c8>
 800af4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af52:	d81b      	bhi.n	800af8c <UART_SetConfig+0x2d0>
 800af54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af58:	d00c      	beq.n	800af74 <UART_SetConfig+0x2b8>
 800af5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af5e:	d815      	bhi.n	800af8c <UART_SetConfig+0x2d0>
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <UART_SetConfig+0x2b0>
 800af64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af68:	d008      	beq.n	800af7c <UART_SetConfig+0x2c0>
 800af6a:	e00f      	b.n	800af8c <UART_SetConfig+0x2d0>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e022      	b.n	800afba <UART_SetConfig+0x2fe>
 800af74:	2302      	movs	r3, #2
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e01e      	b.n	800afba <UART_SetConfig+0x2fe>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e01a      	b.n	800afba <UART_SetConfig+0x2fe>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	e016      	b.n	800afba <UART_SetConfig+0x2fe>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af92:	e012      	b.n	800afba <UART_SetConfig+0x2fe>
 800af94:	cfff69f3 	.word	0xcfff69f3
 800af98:	40008000 	.word	0x40008000
 800af9c:	40013800 	.word	0x40013800
 800afa0:	40021000 	.word	0x40021000
 800afa4:	40004400 	.word	0x40004400
 800afa8:	40004800 	.word	0x40004800
 800afac:	40004c00 	.word	0x40004c00
 800afb0:	40005000 	.word	0x40005000
 800afb4:	2310      	movs	r3, #16
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4aae      	ldr	r2, [pc, #696]	@ (800b278 <UART_SetConfig+0x5bc>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	f040 8097 	bne.w	800b0f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d823      	bhi.n	800b016 <UART_SetConfig+0x35a>
 800afce:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <UART_SetConfig+0x318>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800aff9 	.word	0x0800aff9
 800afd8:	0800b017 	.word	0x0800b017
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b017 	.word	0x0800b017
 800afe4:	0800b007 	.word	0x0800b007
 800afe8:	0800b017 	.word	0x0800b017
 800afec:	0800b017 	.word	0x0800b017
 800aff0:	0800b017 	.word	0x0800b017
 800aff4:	0800b00f 	.word	0x0800b00f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aff8:	f7fe fce0 	bl	80099bc <HAL_RCC_GetPCLK1Freq>
 800affc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800affe:	e010      	b.n	800b022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b000:	4b9e      	ldr	r3, [pc, #632]	@ (800b27c <UART_SetConfig+0x5c0>)
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b004:	e00d      	b.n	800b022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b006:	f7fe fc6b 	bl	80098e0 <HAL_RCC_GetSysClockFreq>
 800b00a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b00c:	e009      	b.n	800b022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b014:	e005      	b.n	800b022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 8130 	beq.w	800b28a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	4a94      	ldr	r2, [pc, #592]	@ (800b280 <UART_SetConfig+0x5c4>)
 800b030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b034:	461a      	mov	r2, r3
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	fbb3 f3f2 	udiv	r3, r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	4413      	add	r3, r2
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d305      	bcc.n	800b05a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	429a      	cmp	r2, r3
 800b058:	d903      	bls.n	800b062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b060:	e113      	b.n	800b28a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b064:	2200      	movs	r2, #0
 800b066:	60bb      	str	r3, [r7, #8]
 800b068:	60fa      	str	r2, [r7, #12]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06e:	4a84      	ldr	r2, [pc, #528]	@ (800b280 <UART_SetConfig+0x5c4>)
 800b070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b074:	b29b      	uxth	r3, r3
 800b076:	2200      	movs	r2, #0
 800b078:	603b      	str	r3, [r7, #0]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b084:	f7f5 fdc8 	bl	8000c18 <__aeabi_uldivmod>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4610      	mov	r0, r2
 800b08e:	4619      	mov	r1, r3
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	020b      	lsls	r3, r1, #8
 800b09a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b09e:	0202      	lsls	r2, r0, #8
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	6849      	ldr	r1, [r1, #4]
 800b0a4:	0849      	lsrs	r1, r1, #1
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	eb12 0804 	adds.w	r8, r2, r4
 800b0b0:	eb43 0905 	adc.w	r9, r3, r5
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	469a      	mov	sl, r3
 800b0bc:	4693      	mov	fp, r2
 800b0be:	4652      	mov	r2, sl
 800b0c0:	465b      	mov	r3, fp
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	f7f5 fda7 	bl	8000c18 <__aeabi_uldivmod>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0d8:	d308      	bcc.n	800b0ec <UART_SetConfig+0x430>
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0e0:	d204      	bcs.n	800b0ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6a3a      	ldr	r2, [r7, #32]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	e0ce      	b.n	800b28a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0f2:	e0ca      	b.n	800b28a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0fc:	d166      	bne.n	800b1cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b0fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b102:	2b08      	cmp	r3, #8
 800b104:	d827      	bhi.n	800b156 <UART_SetConfig+0x49a>
 800b106:	a201      	add	r2, pc, #4	@ (adr r2, 800b10c <UART_SetConfig+0x450>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b139 	.word	0x0800b139
 800b114:	0800b141 	.word	0x0800b141
 800b118:	0800b157 	.word	0x0800b157
 800b11c:	0800b147 	.word	0x0800b147
 800b120:	0800b157 	.word	0x0800b157
 800b124:	0800b157 	.word	0x0800b157
 800b128:	0800b157 	.word	0x0800b157
 800b12c:	0800b14f 	.word	0x0800b14f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b130:	f7fe fc44 	bl	80099bc <HAL_RCC_GetPCLK1Freq>
 800b134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b136:	e014      	b.n	800b162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b138:	f7fe fc56 	bl	80099e8 <HAL_RCC_GetPCLK2Freq>
 800b13c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b13e:	e010      	b.n	800b162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b140:	4b4e      	ldr	r3, [pc, #312]	@ (800b27c <UART_SetConfig+0x5c0>)
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b144:	e00d      	b.n	800b162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b146:	f7fe fbcb 	bl	80098e0 <HAL_RCC_GetSysClockFreq>
 800b14a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b14c:	e009      	b.n	800b162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b14e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b154:	e005      	b.n	800b162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 8090 	beq.w	800b28a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16e:	4a44      	ldr	r2, [pc, #272]	@ (800b280 <UART_SetConfig+0x5c4>)
 800b170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b174:	461a      	mov	r2, r3
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	fbb3 f3f2 	udiv	r3, r3, r2
 800b17c:	005a      	lsls	r2, r3, #1
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	441a      	add	r2, r3
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	2b0f      	cmp	r3, #15
 800b194:	d916      	bls.n	800b1c4 <UART_SetConfig+0x508>
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b19c:	d212      	bcs.n	800b1c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	f023 030f 	bic.w	r3, r3, #15
 800b1a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	085b      	lsrs	r3, r3, #1
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f003 0307 	and.w	r3, r3, #7
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	8bfb      	ldrh	r3, [r7, #30]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	8bfa      	ldrh	r2, [r7, #30]
 800b1c0:	60da      	str	r2, [r3, #12]
 800b1c2:	e062      	b.n	800b28a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1ca:	e05e      	b.n	800b28a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d828      	bhi.n	800b226 <UART_SetConfig+0x56a>
 800b1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <UART_SetConfig+0x520>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b209 	.word	0x0800b209
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	0800b227 	.word	0x0800b227
 800b1ec:	0800b217 	.word	0x0800b217
 800b1f0:	0800b227 	.word	0x0800b227
 800b1f4:	0800b227 	.word	0x0800b227
 800b1f8:	0800b227 	.word	0x0800b227
 800b1fc:	0800b21f 	.word	0x0800b21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b200:	f7fe fbdc 	bl	80099bc <HAL_RCC_GetPCLK1Freq>
 800b204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b206:	e014      	b.n	800b232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b208:	f7fe fbee 	bl	80099e8 <HAL_RCC_GetPCLK2Freq>
 800b20c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b20e:	e010      	b.n	800b232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b210:	4b1a      	ldr	r3, [pc, #104]	@ (800b27c <UART_SetConfig+0x5c0>)
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b214:	e00d      	b.n	800b232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b216:	f7fe fb63 	bl	80098e0 <HAL_RCC_GetSysClockFreq>
 800b21a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b21c:	e009      	b.n	800b232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b224:	e005      	b.n	800b232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b230:	bf00      	nop
    }

    if (pclk != 0U)
 800b232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	d028      	beq.n	800b28a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23c:	4a10      	ldr	r2, [pc, #64]	@ (800b280 <UART_SetConfig+0x5c4>)
 800b23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b242:	461a      	mov	r2, r3
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	fbb3 f2f2 	udiv	r2, r3, r2
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	085b      	lsrs	r3, r3, #1
 800b250:	441a      	add	r2, r3
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	2b0f      	cmp	r3, #15
 800b260:	d910      	bls.n	800b284 <UART_SetConfig+0x5c8>
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b268:	d20c      	bcs.n	800b284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	60da      	str	r2, [r3, #12]
 800b274:	e009      	b.n	800b28a <UART_SetConfig+0x5ce>
 800b276:	bf00      	nop
 800b278:	40008000 	.word	0x40008000
 800b27c:	00f42400 	.word	0x00f42400
 800b280:	08019b40 	.word	0x08019b40
      }
      else
      {
        ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2201      	movs	r2, #1
 800b296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2200      	movs	r2, #0
 800b29e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3730      	adds	r7, #48	@ 0x30
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00a      	beq.n	800b2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3b2:	d10a      	bne.n	800b3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b098      	sub	sp, #96	@ 0x60
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b408:	f7f7 fde0 	bl	8002fcc <HAL_GetTick>
 800b40c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d12f      	bne.n	800b47c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b41c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b424:	2200      	movs	r2, #0
 800b426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f88e 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d022      	beq.n	800b47c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b44a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b454:	647b      	str	r3, [r7, #68]	@ 0x44
 800b456:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e6      	bne.n	800b436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e063      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d149      	bne.n	800b51e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b492:	2200      	movs	r2, #0
 800b494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f857 	bl	800b54c <UART_WaitOnFlagUntilTimeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d03c      	beq.n	800b51e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	69b9      	ldr	r1, [r7, #24]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	617b      	str	r3, [r7, #20]
   return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e012      	b.n	800b544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3758      	adds	r7, #88	@ 0x58
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55c:	e04f      	b.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d04b      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b566:	f7f7 fd31 	bl	8002fcc <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <UART_WaitOnFlagUntilTimeout+0x30>
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e04e      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d037      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d034      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b40      	cmp	r3, #64	@ 0x40
 800b598:	d031      	beq.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d110      	bne.n	800b5ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 f838 	bl	800b626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2208      	movs	r2, #8
 800b5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e029      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5d8:	d111      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f81e 	bl	800b626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e00f      	b.n	800b61e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4013      	ands	r3, r2
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	bf0c      	ite	eq
 800b60e:	2301      	moveq	r3, #1
 800b610:	2300      	movne	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d0a0      	beq.n	800b55e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b626:	b480      	push	{r7}
 800b628:	b095      	sub	sp, #84	@ 0x54
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b64c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b64e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e6      	bne.n	800b62e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3308      	adds	r3, #8
 800b666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3308      	adds	r3, #8
 800b682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e3      	bne.n	800b660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d118      	bne.n	800b6d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f023 0310 	bic.w	r3, r3, #16
 800b6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6be:	61bb      	str	r3, [r7, #24]
 800b6c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6979      	ldr	r1, [r7, #20]
 800b6c4:	69ba      	ldr	r2, [r7, #24]
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e6      	bne.n	800b6a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6e6:	bf00      	nop
 800b6e8:	3754      	adds	r7, #84	@ 0x54
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_UARTEx_DisableFifoMode+0x16>
 800b704:	2302      	movs	r3, #2
 800b706:	e027      	b.n	800b758 <HAL_UARTEx_DisableFifoMode+0x66>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2224      	movs	r2, #36	@ 0x24
 800b714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0201 	bic.w	r2, r2, #1
 800b72e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b778:	2302      	movs	r3, #2
 800b77a:	e02d      	b.n	800b7d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2224      	movs	r2, #36	@ 0x24
 800b788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f84f 	bl	800b85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e02d      	b.n	800b854 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2224      	movs	r2, #36	@ 0x24
 800b804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	430a      	orrs	r2, r1
 800b832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f811 	bl	800b85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2220      	movs	r2, #32
 800b846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d108      	bne.n	800b87e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b87c:	e031      	b.n	800b8e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b87e:	2308      	movs	r3, #8
 800b880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b882:	2308      	movs	r3, #8
 800b884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	0e5b      	lsrs	r3, r3, #25
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0307 	and.w	r3, r3, #7
 800b894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	0f5b      	lsrs	r3, r3, #29
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 0307 	and.w	r3, r3, #7
 800b8a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	7b3a      	ldrb	r2, [r7, #12]
 800b8aa:	4911      	ldr	r1, [pc, #68]	@ (800b8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ac:	5c8a      	ldrb	r2, [r1, r2]
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8b2:	7b3a      	ldrb	r2, [r7, #12]
 800b8b4:	490f      	ldr	r1, [pc, #60]	@ (800b8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	7b7a      	ldrb	r2, [r7, #13]
 800b8c8:	4909      	ldr	r1, [pc, #36]	@ (800b8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ca:	5c8a      	ldrb	r2, [r1, r2]
 800b8cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8d0:	7b7a      	ldrb	r2, [r7, #13]
 800b8d2:	4908      	ldr	r1, [pc, #32]	@ (800b8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b8d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	08019b58 	.word	0x08019b58
 800b8f4:	08019b60 	.word	0x08019b60

0800b8f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b900:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b904:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	b29b      	uxth	r3, r3
 800b912:	43db      	mvns	r3, r3
 800b914:	b29b      	uxth	r3, r3
 800b916:	4013      	ands	r3, r2
 800b918:	b29a      	uxth	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	1d3b      	adds	r3, r7, #4
 800b938:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2201      	movs	r2, #1
 800b940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <__NVIC_SetPriority>:
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	db0a      	blt.n	800b996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	b2da      	uxtb	r2, r3
 800b984:	490c      	ldr	r1, [pc, #48]	@ (800b9b8 <__NVIC_SetPriority+0x4c>)
 800b986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b98a:	0112      	lsls	r2, r2, #4
 800b98c:	b2d2      	uxtb	r2, r2
 800b98e:	440b      	add	r3, r1
 800b990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b994:	e00a      	b.n	800b9ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4908      	ldr	r1, [pc, #32]	@ (800b9bc <__NVIC_SetPriority+0x50>)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	3b04      	subs	r3, #4
 800b9a4:	0112      	lsls	r2, r2, #4
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	761a      	strb	r2, [r3, #24]
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	e000e100 	.word	0xe000e100
 800b9bc:	e000ed00 	.word	0xe000ed00

0800b9c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <SysTick_Handler+0x1c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b9c8:	f002 f864 	bl	800da94 <xTaskGetSchedulerState>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d001      	beq.n	800b9d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b9d2:	f002 ff59 	bl	800e888 <xPortSysTickHandler>
  }
}
 800b9d6:	bf00      	nop
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	e000e010 	.word	0xe000e010

0800b9e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	f06f 0004 	mvn.w	r0, #4
 800b9ea:	f7ff ffbf 	bl	800b96c <__NVIC_SetPriority>
#endif
}
 800b9ee:	bf00      	nop
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9fa:	f3ef 8305 	mrs	r3, IPSR
 800b9fe:	603b      	str	r3, [r7, #0]
  return(result);
 800ba00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba06:	f06f 0305 	mvn.w	r3, #5
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	e00c      	b.n	800ba28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba38 <osKernelInitialize+0x44>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba16:	4b08      	ldr	r3, [pc, #32]	@ (800ba38 <osKernelInitialize+0x44>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	e002      	b.n	800ba28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295
 800ba26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba28:	687b      	ldr	r3, [r7, #4]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	200010d0 	.word	0x200010d0

0800ba3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba42:	f3ef 8305 	mrs	r3, IPSR
 800ba46:	603b      	str	r3, [r7, #0]
  return(result);
 800ba48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ba4e:	f06f 0305 	mvn.w	r3, #5
 800ba52:	607b      	str	r3, [r7, #4]
 800ba54:	e010      	b.n	800ba78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba56:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <osKernelStart+0x48>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d109      	bne.n	800ba72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba5e:	f7ff ffbf 	bl	800b9e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba62:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <osKernelStart+0x48>)
 800ba64:	2202      	movs	r2, #2
 800ba66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba68:	f001 fbb0 	bl	800d1cc <vTaskStartScheduler>
      stat = osOK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	607b      	str	r3, [r7, #4]
 800ba70:	e002      	b.n	800ba78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba72:	f04f 33ff 	mov.w	r3, #4294967295
 800ba76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba78:	687b      	ldr	r3, [r7, #4]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200010d0 	.word	0x200010d0

0800ba88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08e      	sub	sp, #56	@ 0x38
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba98:	f3ef 8305 	mrs	r3, IPSR
 800ba9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ba9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d17e      	bne.n	800bba2 <osThreadNew+0x11a>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d07b      	beq.n	800bba2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800baaa:	2380      	movs	r3, #128	@ 0x80
 800baac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800baae:	2318      	movs	r3, #24
 800bab0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d045      	beq.n	800bb4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <osThreadNew+0x48>
        name = attr->name;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <osThreadNew+0x6e>
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	2b38      	cmp	r3, #56	@ 0x38
 800bae8:	d805      	bhi.n	800baf6 <osThreadNew+0x6e>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <osThreadNew+0x72>
        return (NULL);
 800baf6:	2300      	movs	r3, #0
 800baf8:	e054      	b.n	800bba4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	089b      	lsrs	r3, r3, #2
 800bb08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00e      	beq.n	800bb30 <osThreadNew+0xa8>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	2ba7      	cmp	r3, #167	@ 0xa7
 800bb18:	d90a      	bls.n	800bb30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d006      	beq.n	800bb30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <osThreadNew+0xa8>
        mem = 1;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	61bb      	str	r3, [r7, #24]
 800bb2e:	e010      	b.n	800bb52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10c      	bne.n	800bb52 <osThreadNew+0xca>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d108      	bne.n	800bb52 <osThreadNew+0xca>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d104      	bne.n	800bb52 <osThreadNew+0xca>
          mem = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61bb      	str	r3, [r7, #24]
 800bb4c:	e001      	b.n	800bb52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d110      	bne.n	800bb7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb60:	9202      	str	r2, [sp, #8]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6a3a      	ldr	r2, [r7, #32]
 800bb6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f001 f8c4 	bl	800ccfc <xTaskCreateStatic>
 800bb74:	4603      	mov	r3, r0
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	e013      	b.n	800bba2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d110      	bne.n	800bba2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	f107 0310 	add.w	r3, r7, #16
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f001 f912 	bl	800cdbc <xTaskCreate>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d001      	beq.n	800bba2 <osThreadNew+0x11a>
            hTask = NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bba2:	693b      	ldr	r3, [r7, #16]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3728      	adds	r7, #40	@ 0x28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbb4:	f3ef 8305 	mrs	r3, IPSR
 800bbb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800bbba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <osDelay+0x1c>
    stat = osErrorISR;
 800bbc0:	f06f 0305 	mvn.w	r3, #5
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	e007      	b.n	800bbd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f001 fac4 	bl	800d160 <vTaskDelay>
    }
  }

  return (stat);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a07      	ldr	r2, [pc, #28]	@ (800bc10 <vApplicationGetIdleTaskMemory+0x2c>)
 800bbf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	4a06      	ldr	r2, [pc, #24]	@ (800bc14 <vApplicationGetIdleTaskMemory+0x30>)
 800bbfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2280      	movs	r2, #128	@ 0x80
 800bc00:	601a      	str	r2, [r3, #0]
}
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	200010d4 	.word	0x200010d4
 800bc14:	2000117c 	.word	0x2000117c

0800bc18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	4a07      	ldr	r2, [pc, #28]	@ (800bc44 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4a06      	ldr	r2, [pc, #24]	@ (800bc48 <vApplicationGetTimerTaskMemory+0x30>)
 800bc2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc36:	601a      	str	r2, [r3, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	2000137c 	.word	0x2000137c
 800bc48:	20001424 	.word	0x20001424

0800bc4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f103 0208 	add.w	r2, r3, #8
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f04f 32ff 	mov.w	r2, #4294967295
 800bc64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f103 0208 	add.w	r2, r3, #8
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f103 0208 	add.w	r2, r3, #8
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc9a:	bf00      	nop
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	689a      	ldr	r2, [r3, #8]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	601a      	str	r2, [r3, #0]
}
 800bce2:	bf00      	nop
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d103      	bne.n	800bd0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	e00c      	b.n	800bd28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3308      	adds	r3, #8
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	e002      	b.n	800bd1c <vListInsert+0x2e>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d2f6      	bcs.n	800bd16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	6892      	ldr	r2, [r2, #8]
 800bd76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6852      	ldr	r2, [r2, #4]
 800bd80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d103      	bne.n	800bd94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	1e5a      	subs	r2, r3, #1
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10b      	bne.n	800bde0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdda:	bf00      	nop
 800bddc:	bf00      	nop
 800bdde:	e7fd      	b.n	800bddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bde0:	f002 fcc2 	bl	800e768 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdec:	68f9      	ldr	r1, [r7, #12]
 800bdee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdf0:	fb01 f303 	mul.w	r3, r1, r3
 800bdf4:	441a      	add	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be10:	3b01      	subs	r3, #1
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be16:	fb01 f303 	mul.w	r3, r1, r3
 800be1a:	441a      	add	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	22ff      	movs	r2, #255	@ 0xff
 800be24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	22ff      	movs	r2, #255	@ 0xff
 800be2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d114      	bne.n	800be60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01a      	beq.n	800be74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3310      	adds	r3, #16
 800be42:	4618      	mov	r0, r3
 800be44:	f001 fc60 	bl	800d708 <xTaskRemoveFromEventList>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d012      	beq.n	800be74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be4e:	4b0d      	ldr	r3, [pc, #52]	@ (800be84 <xQueueGenericReset+0xd0>)
 800be50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	e009      	b.n	800be74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3310      	adds	r3, #16
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fef1 	bl	800bc4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3324      	adds	r3, #36	@ 0x24
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff feec 	bl	800bc4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be74:	f002 fcaa 	bl	800e7cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be78:	2301      	movs	r3, #1
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	e000ed04 	.word	0xe000ed04

0800be88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08e      	sub	sp, #56	@ 0x38
 800be8c:	af02      	add	r7, sp, #8
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <xQueueGenericCreateStatic+0x56>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <xQueueGenericCreateStatic+0x5a>
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <xQueueGenericCreateStatic+0x5c>
 800bee2:	2300      	movs	r3, #0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10b      	bne.n	800bf00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	623b      	str	r3, [r7, #32]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <xQueueGenericCreateStatic+0x84>
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <xQueueGenericCreateStatic+0x88>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <xQueueGenericCreateStatic+0x8a>
 800bf10:	2300      	movs	r3, #0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10b      	bne.n	800bf2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	61fb      	str	r3, [r7, #28]
}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	e7fd      	b.n	800bf2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf2e:	2350      	movs	r3, #80	@ 0x50
 800bf30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b50      	cmp	r3, #80	@ 0x50
 800bf36:	d00b      	beq.n	800bf50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	61bb      	str	r3, [r7, #24]
}
 800bf4a:	bf00      	nop
 800bf4c:	bf00      	nop
 800bf4e:	e7fd      	b.n	800bf4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f840 	bl	800bff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3730      	adds	r7, #48	@ 0x30
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b08a      	sub	sp, #40	@ 0x28
 800bf86:	af02      	add	r7, sp, #8
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10b      	bne.n	800bfae <xQueueGenericCreate+0x2c>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	613b      	str	r3, [r7, #16]
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	e7fd      	b.n	800bfaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	fb02 f303 	mul.w	r3, r2, r3
 800bfb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	3350      	adds	r3, #80	@ 0x50
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f002 fcf5 	bl	800e9ac <pvPortMalloc>
 800bfc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d011      	beq.n	800bfee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	3350      	adds	r3, #80	@ 0x50
 800bfd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfdc:	79fa      	ldrb	r2, [r7, #7]
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f000 f805 	bl	800bff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfee:	69bb      	ldr	r3, [r7, #24]
	}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
 800c004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	e002      	b.n	800c01a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c026:	2101      	movs	r1, #1
 800c028:	69b8      	ldr	r0, [r7, #24]
 800c02a:	f7ff fec3 	bl	800bdb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	78fa      	ldrb	r2, [r7, #3]
 800c032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b086      	sub	sp, #24
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10b      	bne.n	800c066 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	613b      	str	r3, [r7, #16]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d90b      	bls.n	800c086 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	60fb      	str	r3, [r7, #12]
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	e7fd      	b.n	800c082 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c086:	2202      	movs	r2, #2
 800c088:	2100      	movs	r1, #0
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ff79 	bl	800bf82 <xQueueGenericCreate>
 800c090:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c09e:	697b      	ldr	r3, [r7, #20]
	}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08e      	sub	sp, #56	@ 0x38
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10b      	bne.n	800c0dc <xQueueGenericSend+0x34>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	e7fd      	b.n	800c0d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d103      	bne.n	800c0ea <xQueueGenericSend+0x42>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <xQueueGenericSend+0x46>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <xQueueGenericSend+0x48>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10b      	bne.n	800c10c <xQueueGenericSend+0x64>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d103      	bne.n	800c11a <xQueueGenericSend+0x72>
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c116:	2b01      	cmp	r3, #1
 800c118:	d101      	bne.n	800c11e <xQueueGenericSend+0x76>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <xQueueGenericSend+0x78>
 800c11e:	2300      	movs	r3, #0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10b      	bne.n	800c13c <xQueueGenericSend+0x94>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	623b      	str	r3, [r7, #32]
}
 800c136:	bf00      	nop
 800c138:	bf00      	nop
 800c13a:	e7fd      	b.n	800c138 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c13c:	f001 fcaa 	bl	800da94 <xTaskGetSchedulerState>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <xQueueGenericSend+0xa4>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <xQueueGenericSend+0xa8>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e000      	b.n	800c152 <xQueueGenericSend+0xaa>
 800c150:	2300      	movs	r3, #0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <xQueueGenericSend+0xc6>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	61fb      	str	r3, [r7, #28]
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c16e:	f002 fafb 	bl	800e768 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d302      	bcc.n	800c184 <xQueueGenericSend+0xdc>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d129      	bne.n	800c1d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	68b9      	ldr	r1, [r7, #8]
 800c188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c18a:	f000 fc49 	bl	800ca20 <prvCopyDataToQueue>
 800c18e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c194:	2b00      	cmp	r3, #0
 800c196:	d010      	beq.n	800c1ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19a:	3324      	adds	r3, #36	@ 0x24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 fab3 	bl	800d708 <xTaskRemoveFromEventList>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d013      	beq.n	800c1d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c1a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c2a8 <xQueueGenericSend+0x200>)
 800c1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ae:	601a      	str	r2, [r3, #0]
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	e00a      	b.n	800c1d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d007      	beq.n	800c1d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1c0:	4b39      	ldr	r3, [pc, #228]	@ (800c2a8 <xQueueGenericSend+0x200>)
 800c1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1d0:	f002 fafc 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e063      	b.n	800c2a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1de:	f002 faf5 	bl	800e7cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e05c      	b.n	800c2a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d106      	bne.n	800c1fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1ec:	f107 0314 	add.w	r3, r7, #20
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f001 faed 	bl	800d7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1fa:	f002 fae7 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1fe:	f001 f855 	bl	800d2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c202:	f002 fab1 	bl	800e768 <vPortEnterCritical>
 800c206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c20c:	b25b      	sxtb	r3, r3
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d103      	bne.n	800c21c <xQueueGenericSend+0x174>
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c222:	b25b      	sxtb	r3, r3
 800c224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c228:	d103      	bne.n	800c232 <xQueueGenericSend+0x18a>
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c232:	f002 facb 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c236:	1d3a      	adds	r2, r7, #4
 800c238:	f107 0314 	add.w	r3, r7, #20
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fadc 	bl	800d7fc <xTaskCheckForTimeOut>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d124      	bne.n	800c294 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c24a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c24c:	f000 fce0 	bl	800cc10 <prvIsQueueFull>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d018      	beq.n	800c288 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c258:	3310      	adds	r3, #16
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 fa00 	bl	800d664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c266:	f000 fc6b 	bl	800cb40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c26a:	f001 f82d 	bl	800d2c8 <xTaskResumeAll>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	f47f af7c 	bne.w	800c16e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c276:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a8 <xQueueGenericSend+0x200>)
 800c278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	e772      	b.n	800c16e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c28a:	f000 fc59 	bl	800cb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c28e:	f001 f81b 	bl	800d2c8 <xTaskResumeAll>
 800c292:	e76c      	b.n	800c16e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c296:	f000 fc53 	bl	800cb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c29a:	f001 f815 	bl	800d2c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c29e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3738      	adds	r7, #56	@ 0x38
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b090      	sub	sp, #64	@ 0x40
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10b      	bne.n	800c2dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d103      	bne.n	800c2ea <xQueueGenericSendFromISR+0x3e>
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <xQueueGenericSendFromISR+0x42>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e000      	b.n	800c2f0 <xQueueGenericSendFromISR+0x44>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10b      	bne.n	800c30c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	e7fd      	b.n	800c308 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d103      	bne.n	800c31a <xQueueGenericSendFromISR+0x6e>
 800c312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c316:	2b01      	cmp	r3, #1
 800c318:	d101      	bne.n	800c31e <xQueueGenericSendFromISR+0x72>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <xQueueGenericSendFromISR+0x74>
 800c31e:	2300      	movs	r3, #0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10b      	bne.n	800c33c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	623b      	str	r3, [r7, #32]
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	e7fd      	b.n	800c338 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c33c:	f002 faf4 	bl	800e928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c340:	f3ef 8211 	mrs	r2, BASEPRI
 800c344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	61fa      	str	r2, [r7, #28]
 800c356:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c358:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c35a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c364:	429a      	cmp	r2, r3
 800c366:	d302      	bcc.n	800c36e <xQueueGenericSendFromISR+0xc2>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d12f      	bne.n	800c3ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c384:	f000 fb4c 	bl	800ca20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c388:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c390:	d112      	bne.n	800c3b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	d016      	beq.n	800c3c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	3324      	adds	r3, #36	@ 0x24
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 f9b2 	bl	800d708 <xTaskRemoveFromEventList>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00e      	beq.n	800c3c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	e007      	b.n	800c3c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c3bc:	3301      	adds	r3, #1
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	b25a      	sxtb	r2, r3
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c3cc:	e001      	b.n	800c3d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3740      	adds	r7, #64	@ 0x40
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08e      	sub	sp, #56	@ 0x38
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10b      	bne.n	800c414 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	623b      	str	r3, [r7, #32]
}
 800c40e:	bf00      	nop
 800c410:	bf00      	nop
 800c412:	e7fd      	b.n	800c410 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	61fb      	str	r3, [r7, #28]
}
 800c42e:	bf00      	nop
 800c430:	bf00      	nop
 800c432:	e7fd      	b.n	800c430 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d103      	bne.n	800c444 <xQueueGiveFromISR+0x5c>
 800c43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <xQueueGiveFromISR+0x60>
 800c444:	2301      	movs	r3, #1
 800c446:	e000      	b.n	800c44a <xQueueGiveFromISR+0x62>
 800c448:	2300      	movs	r3, #0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10b      	bne.n	800c466 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	61bb      	str	r3, [r7, #24]
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	e7fd      	b.n	800c462 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c466:	f002 fa5f 	bl	800e928 <vPortValidateInterruptPriority>
	__asm volatile
 800c46a:	f3ef 8211 	mrs	r2, BASEPRI
 800c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	617a      	str	r2, [r7, #20]
 800c480:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c482:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c48a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c492:	429a      	cmp	r2, r3
 800c494:	d22b      	bcs.n	800c4ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a2:	1c5a      	adds	r2, r3, #1
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b0:	d112      	bne.n	800c4d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d016      	beq.n	800c4e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	3324      	adds	r3, #36	@ 0x24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f001 f922 	bl	800d708 <xTaskRemoveFromEventList>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00e      	beq.n	800c4e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	e007      	b.n	800c4e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4dc:	3301      	adds	r3, #1
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	b25a      	sxtb	r2, r3
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ec:	e001      	b.n	800c4f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f383 8811 	msr	BASEPRI, r3
}
 800c4fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c500:	4618      	mov	r0, r3
 800c502:	3738      	adds	r7, #56	@ 0x38
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08c      	sub	sp, #48	@ 0x30
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <xQueueReceive+0x32>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	623b      	str	r3, [r7, #32]
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop
 800c538:	e7fd      	b.n	800c536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <xQueueReceive+0x40>
 800c540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <xQueueReceive+0x44>
 800c548:	2301      	movs	r3, #1
 800c54a:	e000      	b.n	800c54e <xQueueReceive+0x46>
 800c54c:	2300      	movs	r3, #0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10b      	bne.n	800c56a <xQueueReceive+0x62>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	61fb      	str	r3, [r7, #28]
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	e7fd      	b.n	800c566 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c56a:	f001 fa93 	bl	800da94 <xTaskGetSchedulerState>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <xQueueReceive+0x72>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <xQueueReceive+0x76>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <xQueueReceive+0x78>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10b      	bne.n	800c59c <xQueueReceive+0x94>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	61bb      	str	r3, [r7, #24]
}
 800c596:	bf00      	nop
 800c598:	bf00      	nop
 800c59a:	e7fd      	b.n	800c598 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c59c:	f002 f8e4 	bl	800e768 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01f      	beq.n	800c5ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5b0:	f000 faa0 	bl	800caf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00f      	beq.n	800c5e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c6:	3310      	adds	r3, #16
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f001 f89d 	bl	800d708 <xTaskRemoveFromEventList>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d007      	beq.n	800c5e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5d4:	4b3c      	ldr	r3, [pc, #240]	@ (800c6c8 <xQueueReceive+0x1c0>)
 800c5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5e4:	f002 f8f2 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e069      	b.n	800c6c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d103      	bne.n	800c5fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5f2:	f002 f8eb 	bl	800e7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e062      	b.n	800c6c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c600:	f107 0310 	add.w	r3, r7, #16
 800c604:	4618      	mov	r0, r3
 800c606:	f001 f8e3 	bl	800d7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c60a:	2301      	movs	r3, #1
 800c60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c60e:	f002 f8dd 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c612:	f000 fe4b 	bl	800d2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c616:	f002 f8a7 	bl	800e768 <vPortEnterCritical>
 800c61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c620:	b25b      	sxtb	r3, r3
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c626:	d103      	bne.n	800c630 <xQueueReceive+0x128>
 800c628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c636:	b25b      	sxtb	r3, r3
 800c638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63c:	d103      	bne.n	800c646 <xQueueReceive+0x13e>
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c646:	f002 f8c1 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c64a:	1d3a      	adds	r2, r7, #4
 800c64c:	f107 0310 	add.w	r3, r7, #16
 800c650:	4611      	mov	r1, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f001 f8d2 	bl	800d7fc <xTaskCheckForTimeOut>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d123      	bne.n	800c6a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c65e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c660:	f000 fac0 	bl	800cbe4 <prvIsQueueEmpty>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d017      	beq.n	800c69a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66c:	3324      	adds	r3, #36	@ 0x24
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4611      	mov	r1, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f000 fff6 	bl	800d664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c67a:	f000 fa61 	bl	800cb40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c67e:	f000 fe23 	bl	800d2c8 <xTaskResumeAll>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d189      	bne.n	800c59c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c688:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c8 <xQueueReceive+0x1c0>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	e780      	b.n	800c59c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c69c:	f000 fa50 	bl	800cb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6a0:	f000 fe12 	bl	800d2c8 <xTaskResumeAll>
 800c6a4:	e77a      	b.n	800c59c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6a8:	f000 fa4a 	bl	800cb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ac:	f000 fe0c 	bl	800d2c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b2:	f000 fa97 	bl	800cbe4 <prvIsQueueEmpty>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f43f af6f 	beq.w	800c59c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3730      	adds	r7, #48	@ 0x30
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08e      	sub	sp, #56	@ 0x38
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10b      	bne.n	800c700 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	623b      	str	r3, [r7, #32]
}
 800c6fa:	bf00      	nop
 800c6fc:	bf00      	nop
 800c6fe:	e7fd      	b.n	800c6fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00b      	beq.n	800c720 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	61fb      	str	r3, [r7, #28]
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	e7fd      	b.n	800c71c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c720:	f001 f9b8 	bl	800da94 <xTaskGetSchedulerState>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d102      	bne.n	800c730 <xQueueSemaphoreTake+0x64>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <xQueueSemaphoreTake+0x68>
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <xQueueSemaphoreTake+0x6a>
 800c734:	2300      	movs	r3, #0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10b      	bne.n	800c752 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	61bb      	str	r3, [r7, #24]
}
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	e7fd      	b.n	800c74e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c752:	f002 f809 	bl	800e768 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d024      	beq.n	800c7ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c764:	1e5a      	subs	r2, r3, #1
 800c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c768:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d104      	bne.n	800c77c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c772:	f001 fb09 	bl	800dd88 <pvTaskIncrementMutexHeldCount>
 800c776:	4602      	mov	r2, r0
 800c778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00f      	beq.n	800c7a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	3310      	adds	r3, #16
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 ffbd 	bl	800d708 <xTaskRemoveFromEventList>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d007      	beq.n	800c7a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c794:	4b54      	ldr	r3, [pc, #336]	@ (800c8e8 <xQueueSemaphoreTake+0x21c>)
 800c796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7a4:	f002 f812 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e098      	b.n	800c8de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d112      	bne.n	800c7d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00b      	beq.n	800c7d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	617b      	str	r3, [r7, #20]
}
 800c7ca:	bf00      	nop
 800c7cc:	bf00      	nop
 800c7ce:	e7fd      	b.n	800c7cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c7d0:	f001 fffc 	bl	800e7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e082      	b.n	800c8de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7de:	f107 030c 	add.w	r3, r7, #12
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fff4 	bl	800d7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7ec:	f001 ffee 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7f0:	f000 fd5c 	bl	800d2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7f4:	f001 ffb8 	bl	800e768 <vPortEnterCritical>
 800c7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7fe:	b25b      	sxtb	r3, r3
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d103      	bne.n	800c80e <xQueueSemaphoreTake+0x142>
 800c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c814:	b25b      	sxtb	r3, r3
 800c816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81a:	d103      	bne.n	800c824 <xQueueSemaphoreTake+0x158>
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c824:	f001 ffd2 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c828:	463a      	mov	r2, r7
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4611      	mov	r1, r2
 800c830:	4618      	mov	r0, r3
 800c832:	f000 ffe3 	bl	800d7fc <xTaskCheckForTimeOut>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d132      	bne.n	800c8a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c83c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c83e:	f000 f9d1 	bl	800cbe4 <prvIsQueueEmpty>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d026      	beq.n	800c896 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d109      	bne.n	800c864 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c850:	f001 ff8a 	bl	800e768 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f939 	bl	800dad0 <xTaskPriorityInherit>
 800c85e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c860:	f001 ffb4 	bl	800e7cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c866:	3324      	adds	r3, #36	@ 0x24
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	4611      	mov	r1, r2
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 fef9 	bl	800d664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c874:	f000 f964 	bl	800cb40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c878:	f000 fd26 	bl	800d2c8 <xTaskResumeAll>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f47f af67 	bne.w	800c752 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c884:	4b18      	ldr	r3, [pc, #96]	@ (800c8e8 <xQueueSemaphoreTake+0x21c>)
 800c886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	e75d      	b.n	800c752 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c898:	f000 f952 	bl	800cb40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c89c:	f000 fd14 	bl	800d2c8 <xTaskResumeAll>
 800c8a0:	e757      	b.n	800c752 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c8a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8a4:	f000 f94c 	bl	800cb40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8a8:	f000 fd0e 	bl	800d2c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8ae:	f000 f999 	bl	800cbe4 <prvIsQueueEmpty>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f43f af4c 	beq.w	800c752 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00d      	beq.n	800c8dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c8c0:	f001 ff52 	bl	800e768 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c8c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8c6:	f000 f893 	bl	800c9f0 <prvGetDisinheritPriorityAfterTimeout>
 800c8ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f001 f9d4 	bl	800dc80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8d8:	f001 ff78 	bl	800e7cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3738      	adds	r7, #56	@ 0x38
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08e      	sub	sp, #56	@ 0x38
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	623b      	str	r3, [r7, #32]
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop
 800c918:	e7fd      	b.n	800c916 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d103      	bne.n	800c928 <xQueueReceiveFromISR+0x3c>
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <xQueueReceiveFromISR+0x40>
 800c928:	2301      	movs	r3, #1
 800c92a:	e000      	b.n	800c92e <xQueueReceiveFromISR+0x42>
 800c92c:	2300      	movs	r3, #0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10b      	bne.n	800c94a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	61fb      	str	r3, [r7, #28]
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop
 800c948:	e7fd      	b.n	800c946 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c94a:	f001 ffed 	bl	800e928 <vPortValidateInterruptPriority>
	__asm volatile
 800c94e:	f3ef 8211 	mrs	r2, BASEPRI
 800c952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	61ba      	str	r2, [r7, #24]
 800c964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c968:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c96e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	2b00      	cmp	r3, #0
 800c974:	d02f      	beq.n	800c9d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c984:	f000 f8b6 	bl	800caf4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98a:	1e5a      	subs	r2, r3, #1
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c990:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c998:	d112      	bne.n	800c9c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d016      	beq.n	800c9d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	3310      	adds	r3, #16
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 feae 	bl	800d708 <xTaskRemoveFromEventList>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00e      	beq.n	800c9d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	e007      	b.n	800c9d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	b25a      	sxtb	r2, r3
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9d4:	e001      	b.n	800c9da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f383 8811 	msr	BASEPRI, r3
}
 800c9e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3738      	adds	r7, #56	@ 0x38
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d006      	beq.n	800ca0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	e001      	b.n	800ca12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ca12:	68fb      	ldr	r3, [r7, #12]
	}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10d      	bne.n	800ca5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d14d      	bne.n	800cae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f001 f8a8 	bl	800dba0 <xTaskPriorityDisinherit>
 800ca50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	609a      	str	r2, [r3, #8]
 800ca58:	e043      	b.n	800cae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d119      	bne.n	800ca94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6858      	ldr	r0, [r3, #4]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca68:	461a      	mov	r2, r3
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	f00b fa6b 	bl	8017f46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca78:	441a      	add	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d32b      	bcc.n	800cae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	e026      	b.n	800cae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68d8      	ldr	r0, [r3, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	f00b fa51 	bl	8017f46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caac:	425b      	negs	r3, r3
 800caae:	441a      	add	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d207      	bcs.n	800cad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	689a      	ldr	r2, [r3, #8]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac8:	425b      	negs	r3, r3
 800caca:	441a      	add	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d105      	bne.n	800cae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	3b01      	subs	r3, #1
 800cae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800caea:	697b      	ldr	r3, [r7, #20]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d018      	beq.n	800cb38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb0e:	441a      	add	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68da      	ldr	r2, [r3, #12]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d303      	bcc.n	800cb28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68d9      	ldr	r1, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb30:	461a      	mov	r2, r3
 800cb32:	6838      	ldr	r0, [r7, #0]
 800cb34:	f00b fa07 	bl	8017f46 <memcpy>
	}
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb48:	f001 fe0e 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb54:	e011      	b.n	800cb7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d012      	beq.n	800cb84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3324      	adds	r3, #36	@ 0x24
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 fdd0 	bl	800d708 <xTaskRemoveFromEventList>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb6e:	f000 fea9 	bl	800d8c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	dce9      	bgt.n	800cb56 <prvUnlockQueue+0x16>
 800cb82:	e000      	b.n	800cb86 <prvUnlockQueue+0x46>
					break;
 800cb84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	22ff      	movs	r2, #255	@ 0xff
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb8e:	f001 fe1d 	bl	800e7cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb92:	f001 fde9 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb9e:	e011      	b.n	800cbc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d012      	beq.n	800cbce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3310      	adds	r3, #16
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 fdab 	bl	800d708 <xTaskRemoveFromEventList>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbb8:	f000 fe84 	bl	800d8c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	dce9      	bgt.n	800cba0 <prvUnlockQueue+0x60>
 800cbcc:	e000      	b.n	800cbd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	22ff      	movs	r2, #255	@ 0xff
 800cbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cbd8:	f001 fdf8 	bl	800e7cc <vPortExitCritical>
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbec:	f001 fdbc 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	e001      	b.n	800cc02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc02:	f001 fde3 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc18:	f001 fda6 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d102      	bne.n	800cc2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	e001      	b.n	800cc32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc32:	f001 fdcb 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800cc36:	68fb      	ldr	r3, [r7, #12]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e014      	b.n	800cc7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc50:	4a0f      	ldr	r2, [pc, #60]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10b      	bne.n	800cc74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc5c:	490c      	ldr	r1, [pc, #48]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc66:	4a0a      	ldr	r2, [pc, #40]	@ (800cc90 <vQueueAddToRegistry+0x50>)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	4413      	add	r3, r2
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc72:	e006      	b.n	800cc82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3301      	adds	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b07      	cmp	r3, #7
 800cc7e:	d9e7      	bls.n	800cc50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc80:	bf00      	nop
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20001824 	.word	0x20001824

0800cc94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cca4:	f001 fd60 	bl	800e768 <vPortEnterCritical>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d103      	bne.n	800ccbe <vQueueWaitForMessageRestricted+0x2a>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccca:	d103      	bne.n	800ccd4 <vQueueWaitForMessageRestricted+0x40>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccd4:	f001 fd7a 	bl	800e7cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d106      	bne.n	800ccee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	3324      	adds	r3, #36	@ 0x24
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fce1 	bl	800d6b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccee:	6978      	ldr	r0, [r7, #20]
 800ccf0:	f7ff ff26 	bl	800cb40 <prvUnlockQueue>
	}
 800ccf4:	bf00      	nop
 800ccf6:	3718      	adds	r7, #24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	@ 0x38
 800cd00:	af04      	add	r7, sp, #16
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10b      	bne.n	800cd28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	623b      	str	r3, [r7, #32]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	61fb      	str	r3, [r7, #28]
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	e7fd      	b.n	800cd42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd46:	23a8      	movs	r3, #168	@ 0xa8
 800cd48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd4e:	d00b      	beq.n	800cd68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	61bb      	str	r3, [r7, #24]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01e      	beq.n	800cdae <xTaskCreateStatic+0xb2>
 800cd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01b      	beq.n	800cdae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	9302      	str	r3, [sp, #8]
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f851 	bl	800ce48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cda6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cda8:	f000 f8f6 	bl	800cf98 <prvAddNewTaskToReadyList>
 800cdac:	e001      	b.n	800cdb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdb2:	697b      	ldr	r3, [r7, #20]
	}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3728      	adds	r7, #40	@ 0x28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	@ 0x30
 800cdc0:	af04      	add	r7, sp, #16
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	603b      	str	r3, [r7, #0]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f001 fdeb 	bl	800e9ac <pvPortMalloc>
 800cdd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00e      	beq.n	800cdfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdde:	20a8      	movs	r0, #168	@ 0xa8
 800cde0:	f001 fde4 	bl	800e9ac <pvPortMalloc>
 800cde4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdf2:	e005      	b.n	800ce00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdf4:	6978      	ldr	r0, [r7, #20]
 800cdf6:	f001 fea7 	bl	800eb48 <vPortFree>
 800cdfa:	e001      	b.n	800ce00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d017      	beq.n	800ce36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce0e:	88fa      	ldrh	r2, [r7, #6]
 800ce10:	2300      	movs	r3, #0
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	9302      	str	r3, [sp, #8]
 800ce18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f80f 	bl	800ce48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce2a:	69f8      	ldr	r0, [r7, #28]
 800ce2c:	f000 f8b4 	bl	800cf98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce30:	2301      	movs	r3, #1
 800ce32:	61bb      	str	r3, [r7, #24]
 800ce34:	e002      	b.n	800ce3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce36:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3720      	adds	r7, #32
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	461a      	mov	r2, r3
 800ce60:	21a5      	movs	r1, #165	@ 0xa5
 800ce62:	f00a ff46 	bl	8017cf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce70:	3b01      	subs	r3, #1
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00b      	beq.n	800cea2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	617b      	str	r3, [r7, #20]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01f      	beq.n	800cee8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	e012      	b.n	800ced4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	7819      	ldrb	r1, [r3, #0]
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	4413      	add	r3, r2
 800cebc:	3334      	adds	r3, #52	@ 0x34
 800cebe:	460a      	mov	r2, r1
 800cec0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	4413      	add	r3, r2
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	3301      	adds	r3, #1
 800ced2:	61fb      	str	r3, [r7, #28]
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	2b0f      	cmp	r3, #15
 800ced8:	d9e9      	bls.n	800ceae <prvInitialiseNewTask+0x66>
 800ceda:	e000      	b.n	800cede <prvInitialiseNewTask+0x96>
			{
				break;
 800cedc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cee6:	e003      	b.n	800cef0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef2:	2b37      	cmp	r3, #55	@ 0x37
 800cef4:	d901      	bls.n	800cefa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cef6:	2337      	movs	r3, #55	@ 0x37
 800cef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cefe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	2200      	movs	r2, #0
 800cf0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe febb 	bl	800bc8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf18:	3318      	adds	r3, #24
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe feb6 	bl	800bc8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	3354      	adds	r3, #84	@ 0x54
 800cf4a:	224c      	movs	r2, #76	@ 0x4c
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f00a fecf 	bl	8017cf2 <memset>
 800cf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf56:	4a0d      	ldr	r2, [pc, #52]	@ (800cf8c <prvInitialiseNewTask+0x144>)
 800cf58:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	4a0c      	ldr	r2, [pc, #48]	@ (800cf90 <prvInitialiseNewTask+0x148>)
 800cf5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	4a0c      	ldr	r2, [pc, #48]	@ (800cf94 <prvInitialiseNewTask+0x14c>)
 800cf64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	68f9      	ldr	r1, [r7, #12]
 800cf6a:	69b8      	ldr	r0, [r7, #24]
 800cf6c:	f001 face 	bl	800e50c <pxPortInitialiseStack>
 800cf70:	4602      	mov	r2, r0
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf82:	bf00      	nop
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20010ac8 	.word	0x20010ac8
 800cf90:	20010b30 	.word	0x20010b30
 800cf94:	20010b98 	.word	0x20010b98

0800cf98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfa0:	f001 fbe2 	bl	800e768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfa4:	4b2d      	ldr	r3, [pc, #180]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	4a2c      	ldr	r2, [pc, #176]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfae:	4b2c      	ldr	r3, [pc, #176]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfb6:	4a2a      	ldr	r2, [pc, #168]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfbc:	4b27      	ldr	r3, [pc, #156]	@ (800d05c <prvAddNewTaskToReadyList+0xc4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d110      	bne.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfc4:	f000 fca2 	bl	800d90c <prvInitialiseTaskLists>
 800cfc8:	e00d      	b.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfca:	4b26      	ldr	r3, [pc, #152]	@ (800d064 <prvAddNewTaskToReadyList+0xcc>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfd2:	4b23      	ldr	r3, [pc, #140]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d802      	bhi.n	800cfe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfe0:	4a1f      	ldr	r2, [pc, #124]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfe6:	4b20      	ldr	r3, [pc, #128]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3301      	adds	r3, #1
 800cfec:	4a1e      	ldr	r2, [pc, #120]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cfee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cff0:	4b1d      	ldr	r3, [pc, #116]	@ (800d068 <prvAddNewTaskToReadyList+0xd0>)
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffc:	4b1b      	ldr	r3, [pc, #108]	@ (800d06c <prvAddNewTaskToReadyList+0xd4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d903      	bls.n	800d00c <prvAddNewTaskToReadyList+0x74>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	4a18      	ldr	r2, [pc, #96]	@ (800d06c <prvAddNewTaskToReadyList+0xd4>)
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4a15      	ldr	r2, [pc, #84]	@ (800d070 <prvAddNewTaskToReadyList+0xd8>)
 800d01a:	441a      	add	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3304      	adds	r3, #4
 800d020:	4619      	mov	r1, r3
 800d022:	4610      	mov	r0, r2
 800d024:	f7fe fe3f 	bl	800bca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d028:	f001 fbd0 	bl	800e7cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d02c:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <prvAddNewTaskToReadyList+0xcc>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00e      	beq.n	800d052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d034:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <prvAddNewTaskToReadyList+0xc8>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03e:	429a      	cmp	r2, r3
 800d040:	d207      	bcs.n	800d052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <prvAddNewTaskToReadyList+0xdc>)
 800d044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20001d38 	.word	0x20001d38
 800d060:	20001864 	.word	0x20001864
 800d064:	20001d44 	.word	0x20001d44
 800d068:	20001d54 	.word	0x20001d54
 800d06c:	20001d40 	.word	0x20001d40
 800d070:	20001868 	.word	0x20001868
 800d074:	e000ed04 	.word	0xe000ed04

0800d078 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d080:	f001 fb72 	bl	800e768 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d102      	bne.n	800d090 <vTaskDelete+0x18>
 800d08a:	4b2d      	ldr	r3, [pc, #180]	@ (800d140 <vTaskDelete+0xc8>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	e000      	b.n	800d092 <vTaskDelete+0x1a>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3304      	adds	r3, #4
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fe61 	bl	800bd60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3318      	adds	r3, #24
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe fe58 	bl	800bd60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d0b0:	4b24      	ldr	r3, [pc, #144]	@ (800d144 <vTaskDelete+0xcc>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	4a23      	ldr	r2, [pc, #140]	@ (800d144 <vTaskDelete+0xcc>)
 800d0b8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d0ba:	4b21      	ldr	r3, [pc, #132]	@ (800d140 <vTaskDelete+0xc8>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d10b      	bne.n	800d0dc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	481f      	ldr	r0, [pc, #124]	@ (800d148 <vTaskDelete+0xd0>)
 800d0cc:	f7fe fdeb 	bl	800bca6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800d14c <vTaskDelete+0xd4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d14c <vTaskDelete+0xd4>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	e009      	b.n	800d0f0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d0dc:	4b1c      	ldr	r3, [pc, #112]	@ (800d150 <vTaskDelete+0xd8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	4a1b      	ldr	r2, [pc, #108]	@ (800d150 <vTaskDelete+0xd8>)
 800d0e4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 fc7e 	bl	800d9e8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d0ec:	f000 fcb2 	bl	800da54 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d0f0:	f001 fb6c 	bl	800e7cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d0f4:	4b17      	ldr	r3, [pc, #92]	@ (800d154 <vTaskDelete+0xdc>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d01c      	beq.n	800d136 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800d0fc:	4b10      	ldr	r3, [pc, #64]	@ (800d140 <vTaskDelete+0xc8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	429a      	cmp	r2, r3
 800d104:	d117      	bne.n	800d136 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d106:	4b14      	ldr	r3, [pc, #80]	@ (800d158 <vTaskDelete+0xe0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00b      	beq.n	800d126 <vTaskDelete+0xae>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	60bb      	str	r3, [r7, #8]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d126:	4b0d      	ldr	r3, [pc, #52]	@ (800d15c <vTaskDelete+0xe4>)
 800d128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d136:	bf00      	nop
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20001864 	.word	0x20001864
 800d144:	20001d54 	.word	0x20001d54
 800d148:	20001d0c 	.word	0x20001d0c
 800d14c:	20001d20 	.word	0x20001d20
 800d150:	20001d38 	.word	0x20001d38
 800d154:	20001d44 	.word	0x20001d44
 800d158:	20001d60 	.word	0x20001d60
 800d15c:	e000ed04 	.word	0xe000ed04

0800d160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d018      	beq.n	800d1a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d172:	4b14      	ldr	r3, [pc, #80]	@ (800d1c4 <vTaskDelay+0x64>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <vTaskDelay+0x32>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	60bb      	str	r3, [r7, #8]
}
 800d18c:	bf00      	nop
 800d18e:	bf00      	nop
 800d190:	e7fd      	b.n	800d18e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d192:	f000 f88b 	bl	800d2ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d196:	2100      	movs	r1, #0
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fe09 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d19e:	f000 f893 	bl	800d2c8 <xTaskResumeAll>
 800d1a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d107      	bne.n	800d1ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d1aa:	4b07      	ldr	r3, [pc, #28]	@ (800d1c8 <vTaskDelay+0x68>)
 800d1ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1ba:	bf00      	nop
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20001d60 	.word	0x20001d60
 800d1c8:	e000ed04 	.word	0xe000ed04

0800d1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08a      	sub	sp, #40	@ 0x28
 800d1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1da:	463a      	mov	r2, r7
 800d1dc:	1d39      	adds	r1, r7, #4
 800d1de:	f107 0308 	add.w	r3, r7, #8
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe fcfe 	bl	800bbe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	9202      	str	r2, [sp, #8]
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	460a      	mov	r2, r1
 800d1fa:	4924      	ldr	r1, [pc, #144]	@ (800d28c <vTaskStartScheduler+0xc0>)
 800d1fc:	4824      	ldr	r0, [pc, #144]	@ (800d290 <vTaskStartScheduler+0xc4>)
 800d1fe:	f7ff fd7d 	bl	800ccfc <xTaskCreateStatic>
 800d202:	4603      	mov	r3, r0
 800d204:	4a23      	ldr	r2, [pc, #140]	@ (800d294 <vTaskStartScheduler+0xc8>)
 800d206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d208:	4b22      	ldr	r3, [pc, #136]	@ (800d294 <vTaskStartScheduler+0xc8>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d210:	2301      	movs	r3, #1
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e001      	b.n	800d21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d216:	2300      	movs	r3, #0
 800d218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d102      	bne.n	800d226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d220:	f000 fe1a 	bl	800de58 <xTimerCreateTimerTask>
 800d224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d11b      	bne.n	800d264 <vTaskStartScheduler+0x98>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	613b      	str	r3, [r7, #16]
}
 800d23e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d240:	4b15      	ldr	r3, [pc, #84]	@ (800d298 <vTaskStartScheduler+0xcc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3354      	adds	r3, #84	@ 0x54
 800d246:	4a15      	ldr	r2, [pc, #84]	@ (800d29c <vTaskStartScheduler+0xd0>)
 800d248:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d24a:	4b15      	ldr	r3, [pc, #84]	@ (800d2a0 <vTaskStartScheduler+0xd4>)
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d252:	4b14      	ldr	r3, [pc, #80]	@ (800d2a4 <vTaskStartScheduler+0xd8>)
 800d254:	2201      	movs	r2, #1
 800d256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d258:	4b13      	ldr	r3, [pc, #76]	@ (800d2a8 <vTaskStartScheduler+0xdc>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d25e:	f001 f9df 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d262:	e00f      	b.n	800d284 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26a:	d10b      	bne.n	800d284 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	60fb      	str	r3, [r7, #12]
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	e7fd      	b.n	800d280 <vTaskStartScheduler+0xb4>
}
 800d284:	bf00      	nop
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08019a94 	.word	0x08019a94
 800d290:	0800d8dd 	.word	0x0800d8dd
 800d294:	20001d5c 	.word	0x20001d5c
 800d298:	20001864 	.word	0x20001864
 800d29c:	20000040 	.word	0x20000040
 800d2a0:	20001d58 	.word	0x20001d58
 800d2a4:	20001d44 	.word	0x20001d44
 800d2a8:	20001d3c 	.word	0x20001d3c

0800d2ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2b0:	4b04      	ldr	r3, [pc, #16]	@ (800d2c4 <vTaskSuspendAll+0x18>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a03      	ldr	r2, [pc, #12]	@ (800d2c4 <vTaskSuspendAll+0x18>)
 800d2b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2ba:	bf00      	nop
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	20001d60 	.word	0x20001d60

0800d2c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2d6:	4b42      	ldr	r3, [pc, #264]	@ (800d3e0 <xTaskResumeAll+0x118>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10b      	bne.n	800d2f6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	603b      	str	r3, [r7, #0]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2f6:	f001 fa37 	bl	800e768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2fa:	4b39      	ldr	r3, [pc, #228]	@ (800d3e0 <xTaskResumeAll+0x118>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	4a37      	ldr	r2, [pc, #220]	@ (800d3e0 <xTaskResumeAll+0x118>)
 800d302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d304:	4b36      	ldr	r3, [pc, #216]	@ (800d3e0 <xTaskResumeAll+0x118>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d162      	bne.n	800d3d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d30c:	4b35      	ldr	r3, [pc, #212]	@ (800d3e4 <xTaskResumeAll+0x11c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d05e      	beq.n	800d3d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d314:	e02f      	b.n	800d376 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d316:	4b34      	ldr	r3, [pc, #208]	@ (800d3e8 <xTaskResumeAll+0x120>)
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3318      	adds	r3, #24
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe fd1c 	bl	800bd60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3304      	adds	r3, #4
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe fd17 	bl	800bd60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d336:	4b2d      	ldr	r3, [pc, #180]	@ (800d3ec <xTaskResumeAll+0x124>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d903      	bls.n	800d346 <xTaskResumeAll+0x7e>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d342:	4a2a      	ldr	r2, [pc, #168]	@ (800d3ec <xTaskResumeAll+0x124>)
 800d344:	6013      	str	r3, [r2, #0]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34a:	4613      	mov	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4a27      	ldr	r2, [pc, #156]	@ (800d3f0 <xTaskResumeAll+0x128>)
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3304      	adds	r3, #4
 800d35a:	4619      	mov	r1, r3
 800d35c:	4610      	mov	r0, r2
 800d35e:	f7fe fca2 	bl	800bca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d366:	4b23      	ldr	r3, [pc, #140]	@ (800d3f4 <xTaskResumeAll+0x12c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d302      	bcc.n	800d376 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d370:	4b21      	ldr	r3, [pc, #132]	@ (800d3f8 <xTaskResumeAll+0x130>)
 800d372:	2201      	movs	r2, #1
 800d374:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d376:	4b1c      	ldr	r3, [pc, #112]	@ (800d3e8 <xTaskResumeAll+0x120>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1cb      	bne.n	800d316 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d384:	f000 fb66 	bl	800da54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d388:	4b1c      	ldr	r3, [pc, #112]	@ (800d3fc <xTaskResumeAll+0x134>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d010      	beq.n	800d3b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d394:	f000 f846 	bl	800d424 <xTaskIncrementTick>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d002      	beq.n	800d3a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d39e:	4b16      	ldr	r3, [pc, #88]	@ (800d3f8 <xTaskResumeAll+0x130>)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1f1      	bne.n	800d394 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d3b0:	4b12      	ldr	r3, [pc, #72]	@ (800d3fc <xTaskResumeAll+0x134>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3b6:	4b10      	ldr	r3, [pc, #64]	@ (800d3f8 <xTaskResumeAll+0x130>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d400 <xTaskResumeAll+0x138>)
 800d3c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3d2:	f001 f9fb 	bl	800e7cc <vPortExitCritical>

	return xAlreadyYielded;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20001d60 	.word	0x20001d60
 800d3e4:	20001d38 	.word	0x20001d38
 800d3e8:	20001cf8 	.word	0x20001cf8
 800d3ec:	20001d40 	.word	0x20001d40
 800d3f0:	20001868 	.word	0x20001868
 800d3f4:	20001864 	.word	0x20001864
 800d3f8:	20001d4c 	.word	0x20001d4c
 800d3fc:	20001d48 	.word	0x20001d48
 800d400:	e000ed04 	.word	0xe000ed04

0800d404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d40a:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <xTaskGetTickCount+0x1c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d410:	687b      	ldr	r3, [r7, #4]
}
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	20001d3c 	.word	0x20001d3c

0800d424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42e:	4b4f      	ldr	r3, [pc, #316]	@ (800d56c <xTaskIncrementTick+0x148>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f040 8090 	bne.w	800d558 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d438:	4b4d      	ldr	r3, [pc, #308]	@ (800d570 <xTaskIncrementTick+0x14c>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3301      	adds	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d440:	4a4b      	ldr	r2, [pc, #300]	@ (800d570 <xTaskIncrementTick+0x14c>)
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d121      	bne.n	800d490 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d44c:	4b49      	ldr	r3, [pc, #292]	@ (800d574 <xTaskIncrementTick+0x150>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	603b      	str	r3, [r7, #0]
}
 800d468:	bf00      	nop
 800d46a:	bf00      	nop
 800d46c:	e7fd      	b.n	800d46a <xTaskIncrementTick+0x46>
 800d46e:	4b41      	ldr	r3, [pc, #260]	@ (800d574 <xTaskIncrementTick+0x150>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]
 800d474:	4b40      	ldr	r3, [pc, #256]	@ (800d578 <xTaskIncrementTick+0x154>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a3e      	ldr	r2, [pc, #248]	@ (800d574 <xTaskIncrementTick+0x150>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	4a3e      	ldr	r2, [pc, #248]	@ (800d578 <xTaskIncrementTick+0x154>)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6013      	str	r3, [r2, #0]
 800d482:	4b3e      	ldr	r3, [pc, #248]	@ (800d57c <xTaskIncrementTick+0x158>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	4a3c      	ldr	r2, [pc, #240]	@ (800d57c <xTaskIncrementTick+0x158>)
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	f000 fae2 	bl	800da54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d490:	4b3b      	ldr	r3, [pc, #236]	@ (800d580 <xTaskIncrementTick+0x15c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	429a      	cmp	r2, r3
 800d498:	d349      	bcc.n	800d52e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d49a:	4b36      	ldr	r3, [pc, #216]	@ (800d574 <xTaskIncrementTick+0x150>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d104      	bne.n	800d4ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a4:	4b36      	ldr	r3, [pc, #216]	@ (800d580 <xTaskIncrementTick+0x15c>)
 800d4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4aa:	601a      	str	r2, [r3, #0]
					break;
 800d4ac:	e03f      	b.n	800d52e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ae:	4b31      	ldr	r3, [pc, #196]	@ (800d574 <xTaskIncrementTick+0x150>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d203      	bcs.n	800d4ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4c6:	4a2e      	ldr	r2, [pc, #184]	@ (800d580 <xTaskIncrementTick+0x15c>)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4cc:	e02f      	b.n	800d52e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fc44 	bl	800bd60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fc3b 	bl	800bd60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ee:	4b25      	ldr	r3, [pc, #148]	@ (800d584 <xTaskIncrementTick+0x160>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d903      	bls.n	800d4fe <xTaskIncrementTick+0xda>
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4fa:	4a22      	ldr	r2, [pc, #136]	@ (800d584 <xTaskIncrementTick+0x160>)
 800d4fc:	6013      	str	r3, [r2, #0]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d502:	4613      	mov	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4413      	add	r3, r2
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	4a1f      	ldr	r2, [pc, #124]	@ (800d588 <xTaskIncrementTick+0x164>)
 800d50c:	441a      	add	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	3304      	adds	r3, #4
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f7fe fbc6 	bl	800bca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d51e:	4b1b      	ldr	r3, [pc, #108]	@ (800d58c <xTaskIncrementTick+0x168>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d524:	429a      	cmp	r2, r3
 800d526:	d3b8      	bcc.n	800d49a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d528:	2301      	movs	r3, #1
 800d52a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d52c:	e7b5      	b.n	800d49a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d52e:	4b17      	ldr	r3, [pc, #92]	@ (800d58c <xTaskIncrementTick+0x168>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d534:	4914      	ldr	r1, [pc, #80]	@ (800d588 <xTaskIncrementTick+0x164>)
 800d536:	4613      	mov	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4413      	add	r3, r2
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	440b      	add	r3, r1
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d901      	bls.n	800d54a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d54a:	4b11      	ldr	r3, [pc, #68]	@ (800d590 <xTaskIncrementTick+0x16c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d007      	beq.n	800d562 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d552:	2301      	movs	r3, #1
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	e004      	b.n	800d562 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d558:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <xTaskIncrementTick+0x170>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3301      	adds	r3, #1
 800d55e:	4a0d      	ldr	r2, [pc, #52]	@ (800d594 <xTaskIncrementTick+0x170>)
 800d560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d562:	697b      	ldr	r3, [r7, #20]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20001d60 	.word	0x20001d60
 800d570:	20001d3c 	.word	0x20001d3c
 800d574:	20001cf0 	.word	0x20001cf0
 800d578:	20001cf4 	.word	0x20001cf4
 800d57c:	20001d50 	.word	0x20001d50
 800d580:	20001d58 	.word	0x20001d58
 800d584:	20001d40 	.word	0x20001d40
 800d588:	20001868 	.word	0x20001868
 800d58c:	20001864 	.word	0x20001864
 800d590:	20001d4c 	.word	0x20001d4c
 800d594:	20001d48 	.word	0x20001d48

0800d598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d59e:	4b2b      	ldr	r3, [pc, #172]	@ (800d64c <vTaskSwitchContext+0xb4>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5a6:	4b2a      	ldr	r3, [pc, #168]	@ (800d650 <vTaskSwitchContext+0xb8>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5ac:	e047      	b.n	800d63e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d5ae:	4b28      	ldr	r3, [pc, #160]	@ (800d650 <vTaskSwitchContext+0xb8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b4:	4b27      	ldr	r3, [pc, #156]	@ (800d654 <vTaskSwitchContext+0xbc>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	e011      	b.n	800d5e0 <vTaskSwitchContext+0x48>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10b      	bne.n	800d5da <vTaskSwitchContext+0x42>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	607b      	str	r3, [r7, #4]
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	e7fd      	b.n	800d5d6 <vTaskSwitchContext+0x3e>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	60fb      	str	r3, [r7, #12]
 800d5e0:	491d      	ldr	r1, [pc, #116]	@ (800d658 <vTaskSwitchContext+0xc0>)
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d0e3      	beq.n	800d5bc <vTaskSwitchContext+0x24>
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4a16      	ldr	r2, [pc, #88]	@ (800d658 <vTaskSwitchContext+0xc0>)
 800d600:	4413      	add	r3, r2
 800d602:	60bb      	str	r3, [r7, #8]
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	605a      	str	r2, [r3, #4]
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	3308      	adds	r3, #8
 800d616:	429a      	cmp	r2, r3
 800d618:	d104      	bne.n	800d624 <vTaskSwitchContext+0x8c>
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	605a      	str	r2, [r3, #4]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4a0c      	ldr	r2, [pc, #48]	@ (800d65c <vTaskSwitchContext+0xc4>)
 800d62c:	6013      	str	r3, [r2, #0]
 800d62e:	4a09      	ldr	r2, [pc, #36]	@ (800d654 <vTaskSwitchContext+0xbc>)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d634:	4b09      	ldr	r3, [pc, #36]	@ (800d65c <vTaskSwitchContext+0xc4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3354      	adds	r3, #84	@ 0x54
 800d63a:	4a09      	ldr	r2, [pc, #36]	@ (800d660 <vTaskSwitchContext+0xc8>)
 800d63c:	6013      	str	r3, [r2, #0]
}
 800d63e:	bf00      	nop
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	20001d60 	.word	0x20001d60
 800d650:	20001d4c 	.word	0x20001d4c
 800d654:	20001d40 	.word	0x20001d40
 800d658:	20001868 	.word	0x20001868
 800d65c:	20001864 	.word	0x20001864
 800d660:	20000040 	.word	0x20000040

0800d664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	60fb      	str	r3, [r7, #12]
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	e7fd      	b.n	800d688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d68c:	4b07      	ldr	r3, [pc, #28]	@ (800d6ac <vTaskPlaceOnEventList+0x48>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3318      	adds	r3, #24
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7fe fb2a 	bl	800bcee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d69a:	2101      	movs	r1, #1
 800d69c:	6838      	ldr	r0, [r7, #0]
 800d69e:	f000 fb87 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20001864 	.word	0x20001864

0800d6b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10b      	bne.n	800d6da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	617b      	str	r3, [r7, #20]
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop
 800d6d8:	e7fd      	b.n	800d6d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6da:	4b0a      	ldr	r3, [pc, #40]	@ (800d704 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3318      	adds	r3, #24
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7fe fadf 	bl	800bca6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	68b8      	ldr	r0, [r7, #8]
 800d6f8:	f000 fb5a 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
	}
 800d6fc:	bf00      	nop
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20001864 	.word	0x20001864

0800d708 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10b      	bne.n	800d736 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	60fb      	str	r3, [r7, #12]
}
 800d730:	bf00      	nop
 800d732:	bf00      	nop
 800d734:	e7fd      	b.n	800d732 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	3318      	adds	r3, #24
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fb10 	bl	800bd60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d740:	4b1d      	ldr	r3, [pc, #116]	@ (800d7b8 <xTaskRemoveFromEventList+0xb0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d11d      	bne.n	800d784 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fb07 	bl	800bd60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d756:	4b19      	ldr	r3, [pc, #100]	@ (800d7bc <xTaskRemoveFromEventList+0xb4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d903      	bls.n	800d766 <xTaskRemoveFromEventList+0x5e>
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d762:	4a16      	ldr	r2, [pc, #88]	@ (800d7bc <xTaskRemoveFromEventList+0xb4>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4a13      	ldr	r2, [pc, #76]	@ (800d7c0 <xTaskRemoveFromEventList+0xb8>)
 800d774:	441a      	add	r2, r3
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	3304      	adds	r3, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7fe fa92 	bl	800bca6 <vListInsertEnd>
 800d782:	e005      	b.n	800d790 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	3318      	adds	r3, #24
 800d788:	4619      	mov	r1, r3
 800d78a:	480e      	ldr	r0, [pc, #56]	@ (800d7c4 <xTaskRemoveFromEventList+0xbc>)
 800d78c:	f7fe fa8b 	bl	800bca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d794:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c8 <xTaskRemoveFromEventList+0xc0>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d905      	bls.n	800d7aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d7cc <xTaskRemoveFromEventList+0xc4>)
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	e001      	b.n	800d7ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d7ae:	697b      	ldr	r3, [r7, #20]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3718      	adds	r7, #24
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	20001d60 	.word	0x20001d60
 800d7bc:	20001d40 	.word	0x20001d40
 800d7c0:	20001868 	.word	0x20001868
 800d7c4:	20001cf8 	.word	0x20001cf8
 800d7c8:	20001864 	.word	0x20001864
 800d7cc:	20001d4c 	.word	0x20001d4c

0800d7d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7d8:	4b06      	ldr	r3, [pc, #24]	@ (800d7f4 <vTaskInternalSetTimeOutState+0x24>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7e0:	4b05      	ldr	r3, [pc, #20]	@ (800d7f8 <vTaskInternalSetTimeOutState+0x28>)
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	605a      	str	r2, [r3, #4]
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	20001d50 	.word	0x20001d50
 800d7f8:	20001d3c 	.word	0x20001d3c

0800d7fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10b      	bne.n	800d824 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	613b      	str	r3, [r7, #16]
}
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	e7fd      	b.n	800d820 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10b      	bne.n	800d842 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	60fb      	str	r3, [r7, #12]
}
 800d83c:	bf00      	nop
 800d83e:	bf00      	nop
 800d840:	e7fd      	b.n	800d83e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d842:	f000 ff91 	bl	800e768 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d846:	4b1d      	ldr	r3, [pc, #116]	@ (800d8bc <xTaskCheckForTimeOut+0xc0>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	69ba      	ldr	r2, [r7, #24]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85e:	d102      	bne.n	800d866 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d860:	2300      	movs	r3, #0
 800d862:	61fb      	str	r3, [r7, #28]
 800d864:	e023      	b.n	800d8ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	4b15      	ldr	r3, [pc, #84]	@ (800d8c0 <xTaskCheckForTimeOut+0xc4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d007      	beq.n	800d882 <xTaskCheckForTimeOut+0x86>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	69ba      	ldr	r2, [r7, #24]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d302      	bcc.n	800d882 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d87c:	2301      	movs	r3, #1
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	e015      	b.n	800d8ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	697a      	ldr	r2, [r7, #20]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d20b      	bcs.n	800d8a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	1ad2      	subs	r2, r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff ff99 	bl	800d7d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	e004      	b.n	800d8ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8ae:	f000 ff8d 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3720      	adds	r7, #32
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001d3c 	.word	0x20001d3c
 800d8c0:	20001d50 	.word	0x20001d50

0800d8c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8c8:	4b03      	ldr	r3, [pc, #12]	@ (800d8d8 <vTaskMissedYield+0x14>)
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	601a      	str	r2, [r3, #0]
}
 800d8ce:	bf00      	nop
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	20001d4c 	.word	0x20001d4c

0800d8dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8e4:	f000 f852 	bl	800d98c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8e8:	4b06      	ldr	r3, [pc, #24]	@ (800d904 <prvIdleTask+0x28>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d9f9      	bls.n	800d8e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8f0:	4b05      	ldr	r3, [pc, #20]	@ (800d908 <prvIdleTask+0x2c>)
 800d8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8f6:	601a      	str	r2, [r3, #0]
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d900:	e7f0      	b.n	800d8e4 <prvIdleTask+0x8>
 800d902:	bf00      	nop
 800d904:	20001868 	.word	0x20001868
 800d908:	e000ed04 	.word	0xe000ed04

0800d90c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d912:	2300      	movs	r3, #0
 800d914:	607b      	str	r3, [r7, #4]
 800d916:	e00c      	b.n	800d932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4a12      	ldr	r2, [pc, #72]	@ (800d96c <prvInitialiseTaskLists+0x60>)
 800d924:	4413      	add	r3, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe f990 	bl	800bc4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3301      	adds	r3, #1
 800d930:	607b      	str	r3, [r7, #4]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b37      	cmp	r3, #55	@ 0x37
 800d936:	d9ef      	bls.n	800d918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d938:	480d      	ldr	r0, [pc, #52]	@ (800d970 <prvInitialiseTaskLists+0x64>)
 800d93a:	f7fe f987 	bl	800bc4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d93e:	480d      	ldr	r0, [pc, #52]	@ (800d974 <prvInitialiseTaskLists+0x68>)
 800d940:	f7fe f984 	bl	800bc4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d944:	480c      	ldr	r0, [pc, #48]	@ (800d978 <prvInitialiseTaskLists+0x6c>)
 800d946:	f7fe f981 	bl	800bc4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d94a:	480c      	ldr	r0, [pc, #48]	@ (800d97c <prvInitialiseTaskLists+0x70>)
 800d94c:	f7fe f97e 	bl	800bc4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d950:	480b      	ldr	r0, [pc, #44]	@ (800d980 <prvInitialiseTaskLists+0x74>)
 800d952:	f7fe f97b 	bl	800bc4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d956:	4b0b      	ldr	r3, [pc, #44]	@ (800d984 <prvInitialiseTaskLists+0x78>)
 800d958:	4a05      	ldr	r2, [pc, #20]	@ (800d970 <prvInitialiseTaskLists+0x64>)
 800d95a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d95c:	4b0a      	ldr	r3, [pc, #40]	@ (800d988 <prvInitialiseTaskLists+0x7c>)
 800d95e:	4a05      	ldr	r2, [pc, #20]	@ (800d974 <prvInitialiseTaskLists+0x68>)
 800d960:	601a      	str	r2, [r3, #0]
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20001868 	.word	0x20001868
 800d970:	20001cc8 	.word	0x20001cc8
 800d974:	20001cdc 	.word	0x20001cdc
 800d978:	20001cf8 	.word	0x20001cf8
 800d97c:	20001d0c 	.word	0x20001d0c
 800d980:	20001d24 	.word	0x20001d24
 800d984:	20001cf0 	.word	0x20001cf0
 800d988:	20001cf4 	.word	0x20001cf4

0800d98c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d992:	e019      	b.n	800d9c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d994:	f000 fee8 	bl	800e768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d998:	4b10      	ldr	r3, [pc, #64]	@ (800d9dc <prvCheckTasksWaitingTermination+0x50>)
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe f9db 	bl	800bd60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e0 <prvCheckTasksWaitingTermination+0x54>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	4a0b      	ldr	r2, [pc, #44]	@ (800d9e0 <prvCheckTasksWaitingTermination+0x54>)
 800d9b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e4 <prvCheckTasksWaitingTermination+0x58>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d9e4 <prvCheckTasksWaitingTermination+0x58>)
 800d9bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9be:	f000 ff05 	bl	800e7cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f810 	bl	800d9e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9c8:	4b06      	ldr	r3, [pc, #24]	@ (800d9e4 <prvCheckTasksWaitingTermination+0x58>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e1      	bne.n	800d994 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20001d0c 	.word	0x20001d0c
 800d9e0:	20001d38 	.word	0x20001d38
 800d9e4:	20001d20 	.word	0x20001d20

0800d9e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3354      	adds	r3, #84	@ 0x54
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f00a f9c9 	bl	8017d8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da00:	2b00      	cmp	r3, #0
 800da02:	d108      	bne.n	800da16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da08:	4618      	mov	r0, r3
 800da0a:	f001 f89d 	bl	800eb48 <vPortFree>
				vPortFree( pxTCB );
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f001 f89a 	bl	800eb48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da14:	e019      	b.n	800da4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d103      	bne.n	800da28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f001 f891 	bl	800eb48 <vPortFree>
	}
 800da26:	e010      	b.n	800da4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d00b      	beq.n	800da4a <prvDeleteTCB+0x62>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	60fb      	str	r3, [r7, #12]
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop
 800da48:	e7fd      	b.n	800da46 <prvDeleteTCB+0x5e>
	}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da5a:	4b0c      	ldr	r3, [pc, #48]	@ (800da8c <prvResetNextTaskUnblockTime+0x38>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d104      	bne.n	800da6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da64:	4b0a      	ldr	r3, [pc, #40]	@ (800da90 <prvResetNextTaskUnblockTime+0x3c>)
 800da66:	f04f 32ff 	mov.w	r2, #4294967295
 800da6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da6c:	e008      	b.n	800da80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da6e:	4b07      	ldr	r3, [pc, #28]	@ (800da8c <prvResetNextTaskUnblockTime+0x38>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	4a04      	ldr	r2, [pc, #16]	@ (800da90 <prvResetNextTaskUnblockTime+0x3c>)
 800da7e:	6013      	str	r3, [r2, #0]
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20001cf0 	.word	0x20001cf0
 800da90:	20001d58 	.word	0x20001d58

0800da94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dac8 <xTaskGetSchedulerState+0x34>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d102      	bne.n	800daa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daa2:	2301      	movs	r3, #1
 800daa4:	607b      	str	r3, [r7, #4]
 800daa6:	e008      	b.n	800daba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daa8:	4b08      	ldr	r3, [pc, #32]	@ (800dacc <xTaskGetSchedulerState+0x38>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d102      	bne.n	800dab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dab0:	2302      	movs	r3, #2
 800dab2:	607b      	str	r3, [r7, #4]
 800dab4:	e001      	b.n	800daba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dab6:	2300      	movs	r3, #0
 800dab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800daba:	687b      	ldr	r3, [r7, #4]
	}
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	20001d44 	.word	0x20001d44
 800dacc:	20001d60 	.word	0x20001d60

0800dad0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dadc:	2300      	movs	r3, #0
 800dade:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d051      	beq.n	800db8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daea:	4b2a      	ldr	r3, [pc, #168]	@ (800db94 <xTaskPriorityInherit+0xc4>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d241      	bcs.n	800db78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db06      	blt.n	800db0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dafc:	4b25      	ldr	r3, [pc, #148]	@ (800db94 <xTaskPriorityInherit+0xc4>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	6959      	ldr	r1, [r3, #20]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db12:	4613      	mov	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4a1f      	ldr	r2, [pc, #124]	@ (800db98 <xTaskPriorityInherit+0xc8>)
 800db1c:	4413      	add	r3, r2
 800db1e:	4299      	cmp	r1, r3
 800db20:	d122      	bne.n	800db68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	3304      	adds	r3, #4
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe f91a 	bl	800bd60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db2c:	4b19      	ldr	r3, [pc, #100]	@ (800db94 <xTaskPriorityInherit+0xc4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db3a:	4b18      	ldr	r3, [pc, #96]	@ (800db9c <xTaskPriorityInherit+0xcc>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d903      	bls.n	800db4a <xTaskPriorityInherit+0x7a>
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db46:	4a15      	ldr	r2, [pc, #84]	@ (800db9c <xTaskPriorityInherit+0xcc>)
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4a10      	ldr	r2, [pc, #64]	@ (800db98 <xTaskPriorityInherit+0xc8>)
 800db58:	441a      	add	r2, r3
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	3304      	adds	r3, #4
 800db5e:	4619      	mov	r1, r3
 800db60:	4610      	mov	r0, r2
 800db62:	f7fe f8a0 	bl	800bca6 <vListInsertEnd>
 800db66:	e004      	b.n	800db72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db68:	4b0a      	ldr	r3, [pc, #40]	@ (800db94 <xTaskPriorityInherit+0xc4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db72:	2301      	movs	r3, #1
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	e008      	b.n	800db8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db7c:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <xTaskPriorityInherit+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db82:	429a      	cmp	r2, r3
 800db84:	d201      	bcs.n	800db8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db86:	2301      	movs	r3, #1
 800db88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db8a:	68fb      	ldr	r3, [r7, #12]
	}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20001864 	.word	0x20001864
 800db98:	20001868 	.word	0x20001868
 800db9c:	20001d40 	.word	0x20001d40

0800dba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d058      	beq.n	800dc68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbb6:	4b2f      	ldr	r3, [pc, #188]	@ (800dc74 <xTaskPriorityDisinherit+0xd4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d00b      	beq.n	800dbd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	60fb      	str	r3, [r7, #12]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10b      	bne.n	800dbf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	60bb      	str	r3, [r7, #8]
}
 800dbf2:	bf00      	nop
 800dbf4:	bf00      	nop
 800dbf6:	e7fd      	b.n	800dbf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbfc:	1e5a      	subs	r2, r3, #1
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d02c      	beq.n	800dc68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d128      	bne.n	800dc68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe f8a0 	bl	800bd60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc38:	4b0f      	ldr	r3, [pc, #60]	@ (800dc78 <xTaskPriorityDisinherit+0xd8>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d903      	bls.n	800dc48 <xTaskPriorityDisinherit+0xa8>
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc44:	4a0c      	ldr	r2, [pc, #48]	@ (800dc78 <xTaskPriorityDisinherit+0xd8>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a09      	ldr	r2, [pc, #36]	@ (800dc7c <xTaskPriorityDisinherit+0xdc>)
 800dc56:	441a      	add	r2, r3
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe f821 	bl	800bca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc68:	697b      	ldr	r3, [r7, #20]
	}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	20001864 	.word	0x20001864
 800dc78:	20001d40 	.word	0x20001d40
 800dc7c:	20001868 	.word	0x20001868

0800dc80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d06c      	beq.n	800dd72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	60fb      	str	r3, [r7, #12]
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	e7fd      	b.n	800dcb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d902      	bls.n	800dcc8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	61fb      	str	r3, [r7, #28]
 800dcc6:	e002      	b.n	800dcce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dccc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd2:	69fa      	ldr	r2, [r7, #28]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d04c      	beq.n	800dd72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d147      	bne.n	800dd72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dce2:	4b26      	ldr	r3, [pc, #152]	@ (800dd7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d10b      	bne.n	800dd04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	60bb      	str	r3, [r7, #8]
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	e7fd      	b.n	800dd00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	69fa      	ldr	r2, [r7, #28]
 800dd0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	db04      	blt.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6959      	ldr	r1, [r3, #20]
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4a13      	ldr	r2, [pc, #76]	@ (800dd80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd32:	4413      	add	r3, r2
 800dd34:	4299      	cmp	r1, r3
 800dd36:	d11c      	bne.n	800dd72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe f80f 	bl	800bd60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd46:	4b0f      	ldr	r3, [pc, #60]	@ (800dd84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d903      	bls.n	800dd56 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd52:	4a0c      	ldr	r2, [pc, #48]	@ (800dd84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4a07      	ldr	r2, [pc, #28]	@ (800dd80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd64:	441a      	add	r2, r3
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7fd ff9a 	bl	800bca6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd72:	bf00      	nop
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20001864 	.word	0x20001864
 800dd80:	20001868 	.word	0x20001868
 800dd84:	20001d40 	.word	0x20001d40

0800dd88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd88:	b480      	push	{r7}
 800dd8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <pvTaskIncrementMutexHeldCount+0x24>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d004      	beq.n	800dd9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd94:	4b05      	ldr	r3, [pc, #20]	@ (800ddac <pvTaskIncrementMutexHeldCount+0x24>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd9a:	3201      	adds	r2, #1
 800dd9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dd9e:	4b03      	ldr	r3, [pc, #12]	@ (800ddac <pvTaskIncrementMutexHeldCount+0x24>)
 800dda0:	681b      	ldr	r3, [r3, #0]
	}
 800dda2:	4618      	mov	r0, r3
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	20001864 	.word	0x20001864

0800ddb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddba:	4b21      	ldr	r3, [pc, #132]	@ (800de40 <prvAddCurrentTaskToDelayedList+0x90>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc0:	4b20      	ldr	r3, [pc, #128]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fd ffca 	bl	800bd60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d10a      	bne.n	800ddea <prvAddCurrentTaskToDelayedList+0x3a>
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d007      	beq.n	800ddea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddda:	4b1a      	ldr	r3, [pc, #104]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4819      	ldr	r0, [pc, #100]	@ (800de48 <prvAddCurrentTaskToDelayedList+0x98>)
 800dde4:	f7fd ff5f 	bl	800bca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dde8:	e026      	b.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4413      	add	r3, r2
 800ddf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddf2:	4b14      	ldr	r3, [pc, #80]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d209      	bcs.n	800de16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de02:	4b12      	ldr	r3, [pc, #72]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	4b0f      	ldr	r3, [pc, #60]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fd ff6d 	bl	800bcee <vListInsert>
}
 800de14:	e010      	b.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de16:	4b0e      	ldr	r3, [pc, #56]	@ (800de50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	4b0a      	ldr	r3, [pc, #40]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3304      	adds	r3, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fd ff63 	bl	800bcee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de28:	4b0a      	ldr	r3, [pc, #40]	@ (800de54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d202      	bcs.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de32:	4a08      	ldr	r2, [pc, #32]	@ (800de54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6013      	str	r3, [r2, #0]
}
 800de38:	bf00      	nop
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	20001d3c 	.word	0x20001d3c
 800de44:	20001864 	.word	0x20001864
 800de48:	20001d24 	.word	0x20001d24
 800de4c:	20001cf4 	.word	0x20001cf4
 800de50:	20001cf0 	.word	0x20001cf0
 800de54:	20001d58 	.word	0x20001d58

0800de58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b08a      	sub	sp, #40	@ 0x28
 800de5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de62:	f000 fb13 	bl	800e48c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de66:	4b1d      	ldr	r3, [pc, #116]	@ (800dedc <xTimerCreateTimerTask+0x84>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d021      	beq.n	800deb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de76:	1d3a      	adds	r2, r7, #4
 800de78:	f107 0108 	add.w	r1, r7, #8
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	4618      	mov	r0, r3
 800de82:	f7fd fec9 	bl	800bc18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	9202      	str	r2, [sp, #8]
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	2302      	movs	r3, #2
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	460a      	mov	r2, r1
 800de98:	4911      	ldr	r1, [pc, #68]	@ (800dee0 <xTimerCreateTimerTask+0x88>)
 800de9a:	4812      	ldr	r0, [pc, #72]	@ (800dee4 <xTimerCreateTimerTask+0x8c>)
 800de9c:	f7fe ff2e 	bl	800ccfc <xTaskCreateStatic>
 800dea0:	4603      	mov	r3, r0
 800dea2:	4a11      	ldr	r2, [pc, #68]	@ (800dee8 <xTimerCreateTimerTask+0x90>)
 800dea4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dea6:	4b10      	ldr	r3, [pc, #64]	@ (800dee8 <xTimerCreateTimerTask+0x90>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800deae:	2301      	movs	r3, #1
 800deb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10b      	bne.n	800ded0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	613b      	str	r3, [r7, #16]
}
 800deca:	bf00      	nop
 800decc:	bf00      	nop
 800dece:	e7fd      	b.n	800decc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ded0:	697b      	ldr	r3, [r7, #20]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20001d94 	.word	0x20001d94
 800dee0:	08019a9c 	.word	0x08019a9c
 800dee4:	0800e025 	.word	0x0800e025
 800dee8:	20001d98 	.word	0x20001d98

0800deec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	@ 0x28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800defa:	2300      	movs	r3, #0
 800defc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <xTimerGenericCommand+0x30>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	623b      	str	r3, [r7, #32]
}
 800df16:	bf00      	nop
 800df18:	bf00      	nop
 800df1a:	e7fd      	b.n	800df18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df1c:	4b19      	ldr	r3, [pc, #100]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d02a      	beq.n	800df7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b05      	cmp	r3, #5
 800df34:	dc18      	bgt.n	800df68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df36:	f7ff fdad 	bl	800da94 <xTaskGetSchedulerState>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d109      	bne.n	800df54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df40:	4b10      	ldr	r3, [pc, #64]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df42:	6818      	ldr	r0, [r3, #0]
 800df44:	f107 0110 	add.w	r1, r7, #16
 800df48:	2300      	movs	r3, #0
 800df4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df4c:	f7fe f8ac 	bl	800c0a8 <xQueueGenericSend>
 800df50:	6278      	str	r0, [r7, #36]	@ 0x24
 800df52:	e012      	b.n	800df7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df54:	4b0b      	ldr	r3, [pc, #44]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	f107 0110 	add.w	r1, r7, #16
 800df5c:	2300      	movs	r3, #0
 800df5e:	2200      	movs	r2, #0
 800df60:	f7fe f8a2 	bl	800c0a8 <xQueueGenericSend>
 800df64:	6278      	str	r0, [r7, #36]	@ 0x24
 800df66:	e008      	b.n	800df7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df68:	4b06      	ldr	r3, [pc, #24]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	f107 0110 	add.w	r1, r7, #16
 800df70:	2300      	movs	r3, #0
 800df72:	683a      	ldr	r2, [r7, #0]
 800df74:	f7fe f99a 	bl	800c2ac <xQueueGenericSendFromISR>
 800df78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3728      	adds	r7, #40	@ 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20001d94 	.word	0x20001d94

0800df88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df92:	4b23      	ldr	r3, [pc, #140]	@ (800e020 <prvProcessExpiredTimer+0x98>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	3304      	adds	r3, #4
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd fedd 	bl	800bd60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d023      	beq.n	800dffc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	699a      	ldr	r2, [r3, #24]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	18d1      	adds	r1, r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	6978      	ldr	r0, [r7, #20]
 800dfc2:	f000 f8d5 	bl	800e170 <prvInsertTimerInActiveList>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d020      	beq.n	800e00e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	6978      	ldr	r0, [r7, #20]
 800dfd8:	f7ff ff88 	bl	800deec <xTimerGenericCommand>
 800dfdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d114      	bne.n	800e00e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	60fb      	str	r3, [r7, #12]
}
 800dff6:	bf00      	nop
 800dff8:	bf00      	nop
 800dffa:	e7fd      	b.n	800dff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e002:	f023 0301 	bic.w	r3, r3, #1
 800e006:	b2da      	uxtb	r2, r3
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	4798      	blx	r3
}
 800e016:	bf00      	nop
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	20001d8c 	.word	0x20001d8c

0800e024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e02c:	f107 0308 	add.w	r3, r7, #8
 800e030:	4618      	mov	r0, r3
 800e032:	f000 f859 	bl	800e0e8 <prvGetNextExpireTime>
 800e036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	4619      	mov	r1, r3
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f000 f805 	bl	800e04c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e042:	f000 f8d7 	bl	800e1f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e046:	bf00      	nop
 800e048:	e7f0      	b.n	800e02c <prvTimerTask+0x8>
	...

0800e04c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e056:	f7ff f929 	bl	800d2ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e05a:	f107 0308 	add.w	r3, r7, #8
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f866 	bl	800e130 <prvSampleTimeNow>
 800e064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d130      	bne.n	800e0ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10a      	bne.n	800e088 <prvProcessTimerOrBlockTask+0x3c>
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	429a      	cmp	r2, r3
 800e078:	d806      	bhi.n	800e088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e07a:	f7ff f925 	bl	800d2c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff ff81 	bl	800df88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e086:	e024      	b.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d008      	beq.n	800e0a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e08e:	4b13      	ldr	r3, [pc, #76]	@ (800e0dc <prvProcessTimerOrBlockTask+0x90>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <prvProcessTimerOrBlockTask+0x50>
 800e098:	2301      	movs	r3, #1
 800e09a:	e000      	b.n	800e09e <prvProcessTimerOrBlockTask+0x52>
 800e09c:	2300      	movs	r3, #0
 800e09e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e0 <prvProcessTimerOrBlockTask+0x94>)
 800e0a2:	6818      	ldr	r0, [r3, #0]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f7fe fdf1 	bl	800cc94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0b2:	f7ff f909 	bl	800d2c8 <xTaskResumeAll>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0bc:	4b09      	ldr	r3, [pc, #36]	@ (800e0e4 <prvProcessTimerOrBlockTask+0x98>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	f3bf 8f6f 	isb	sy
}
 800e0cc:	e001      	b.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0ce:	f7ff f8fb 	bl	800d2c8 <xTaskResumeAll>
}
 800e0d2:	bf00      	nop
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20001d90 	.word	0x20001d90
 800e0e0:	20001d94 	.word	0x20001d94
 800e0e4:	e000ed04 	.word	0xe000ed04

0800e0e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <prvGetNextExpireTime+0x44>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d101      	bne.n	800e0fe <prvGetNextExpireTime+0x16>
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	e000      	b.n	800e100 <prvGetNextExpireTime+0x18>
 800e0fe:	2200      	movs	r2, #0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d105      	bne.n	800e118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e10c:	4b07      	ldr	r3, [pc, #28]	@ (800e12c <prvGetNextExpireTime+0x44>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]
 800e116:	e001      	b.n	800e11c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e118:	2300      	movs	r3, #0
 800e11a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e11c:	68fb      	ldr	r3, [r7, #12]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3714      	adds	r7, #20
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	20001d8c 	.word	0x20001d8c

0800e130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e138:	f7ff f964 	bl	800d404 <xTaskGetTickCount>
 800e13c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e13e:	4b0b      	ldr	r3, [pc, #44]	@ (800e16c <prvSampleTimeNow+0x3c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	429a      	cmp	r2, r3
 800e146:	d205      	bcs.n	800e154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e148:	f000 f93a 	bl	800e3c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	e002      	b.n	800e15a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e15a:	4a04      	ldr	r2, [pc, #16]	@ (800e16c <prvSampleTimeNow+0x3c>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e160:	68fb      	ldr	r3, [r7, #12]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20001d9c 	.word	0x20001d9c

0800e170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	429a      	cmp	r2, r3
 800e194:	d812      	bhi.n	800e1bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	1ad2      	subs	r2, r2, r3
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d302      	bcc.n	800e1aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e01b      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1aa:	4b10      	ldr	r3, [pc, #64]	@ (800e1ec <prvInsertTimerInActiveList+0x7c>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fd fd9a 	bl	800bcee <vListInsert>
 800e1ba:	e012      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d206      	bcs.n	800e1d2 <prvInsertTimerInActiveList+0x62>
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d302      	bcc.n	800e1d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	e007      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1d2:	4b07      	ldr	r3, [pc, #28]	@ (800e1f0 <prvInsertTimerInActiveList+0x80>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4619      	mov	r1, r3
 800e1dc:	4610      	mov	r0, r2
 800e1de:	f7fd fd86 	bl	800bcee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1e2:	697b      	ldr	r3, [r7, #20]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20001d90 	.word	0x20001d90
 800e1f0:	20001d8c 	.word	0x20001d8c

0800e1f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08e      	sub	sp, #56	@ 0x38
 800e1f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1fa:	e0ce      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	da19      	bge.n	800e236 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e202:	1d3b      	adds	r3, r7, #4
 800e204:	3304      	adds	r3, #4
 800e206:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10b      	bne.n	800e226 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	61fb      	str	r3, [r7, #28]
}
 800e220:	bf00      	nop
 800e222:	bf00      	nop
 800e224:	e7fd      	b.n	800e222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e22c:	6850      	ldr	r0, [r2, #4]
 800e22e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e230:	6892      	ldr	r2, [r2, #8]
 800e232:	4611      	mov	r1, r2
 800e234:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f2c0 80ae 	blt.w	800e39a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d004      	beq.n	800e254 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24c:	3304      	adds	r3, #4
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fd fd86 	bl	800bd60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e254:	463b      	mov	r3, r7
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff ff6a 	bl	800e130 <prvSampleTimeNow>
 800e25c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b09      	cmp	r3, #9
 800e262:	f200 8097 	bhi.w	800e394 <prvProcessReceivedCommands+0x1a0>
 800e266:	a201      	add	r2, pc, #4	@ (adr r2, 800e26c <prvProcessReceivedCommands+0x78>)
 800e268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26c:	0800e295 	.word	0x0800e295
 800e270:	0800e295 	.word	0x0800e295
 800e274:	0800e295 	.word	0x0800e295
 800e278:	0800e30b 	.word	0x0800e30b
 800e27c:	0800e31f 	.word	0x0800e31f
 800e280:	0800e36b 	.word	0x0800e36b
 800e284:	0800e295 	.word	0x0800e295
 800e288:	0800e295 	.word	0x0800e295
 800e28c:	0800e30b 	.word	0x0800e30b
 800e290:	0800e31f 	.word	0x0800e31f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e29a:	f043 0301 	orr.w	r3, r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	18d1      	adds	r1, r2, r3
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2b4:	f7ff ff5c 	bl	800e170 <prvInsertTimerInActiveList>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d06c      	beq.n	800e398 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2cc:	f003 0304 	and.w	r3, r3, #4
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d061      	beq.n	800e398 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	699b      	ldr	r3, [r3, #24]
 800e2da:	441a      	add	r2, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2e6:	f7ff fe01 	bl	800deec <xTimerGenericCommand>
 800e2ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d152      	bne.n	800e398 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	61bb      	str	r3, [r7, #24]
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop
 800e308:	e7fd      	b.n	800e306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e310:	f023 0301 	bic.w	r3, r3, #1
 800e314:	b2da      	uxtb	r2, r3
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e31c:	e03d      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e324:	f043 0301 	orr.w	r3, r3, #1
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e334:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10b      	bne.n	800e356 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	617b      	str	r3, [r7, #20]
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	e7fd      	b.n	800e352 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e358:	699a      	ldr	r2, [r3, #24]
 800e35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35c:	18d1      	adds	r1, r2, r3
 800e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e364:	f7ff ff04 	bl	800e170 <prvInsertTimerInActiveList>
					break;
 800e368:	e017      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e370:	f003 0302 	and.w	r3, r3, #2
 800e374:	2b00      	cmp	r3, #0
 800e376:	d103      	bne.n	800e380 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e37a:	f000 fbe5 	bl	800eb48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e37e:	e00c      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e386:	f023 0301 	bic.w	r3, r3, #1
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e392:	e002      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e394:	bf00      	nop
 800e396:	e000      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
					break;
 800e398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e39a:	4b08      	ldr	r3, [pc, #32]	@ (800e3bc <prvProcessReceivedCommands+0x1c8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	1d39      	adds	r1, r7, #4
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe f8b0 	bl	800c508 <xQueueReceive>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f47f af26 	bne.w	800e1fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	3730      	adds	r7, #48	@ 0x30
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20001d94 	.word	0x20001d94

0800e3c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c6:	e049      	b.n	800e45c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d2:	4b2c      	ldr	r3, [pc, #176]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fd fcbd 	bl	800bd60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6a1b      	ldr	r3, [r3, #32]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3f4:	f003 0304 	and.w	r3, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02f      	beq.n	800e45c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d90e      	bls.n	800e42c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41a:	4b1a      	ldr	r3, [pc, #104]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fd fc62 	bl	800bcee <vListInsert>
 800e42a:	e017      	b.n	800e45c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e42c:	2300      	movs	r3, #0
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2300      	movs	r3, #0
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	2100      	movs	r1, #0
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7ff fd58 	bl	800deec <xTimerGenericCommand>
 800e43c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10b      	bne.n	800e45c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	603b      	str	r3, [r7, #0]
}
 800e456:	bf00      	nop
 800e458:	bf00      	nop
 800e45a:	e7fd      	b.n	800e458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e45c:	4b09      	ldr	r3, [pc, #36]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1b0      	bne.n	800e3c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e466:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e46c:	4b06      	ldr	r3, [pc, #24]	@ (800e488 <prvSwitchTimerLists+0xc8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a04      	ldr	r2, [pc, #16]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e472:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e474:	4a04      	ldr	r2, [pc, #16]	@ (800e488 <prvSwitchTimerLists+0xc8>)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	6013      	str	r3, [r2, #0]
}
 800e47a:	bf00      	nop
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20001d8c 	.word	0x20001d8c
 800e488:	20001d90 	.word	0x20001d90

0800e48c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e492:	f000 f969 	bl	800e768 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e496:	4b15      	ldr	r3, [pc, #84]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d120      	bne.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e49e:	4814      	ldr	r0, [pc, #80]	@ (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4a0:	f7fd fbd4 	bl	800bc4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4a4:	4813      	ldr	r0, [pc, #76]	@ (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4a6:	f7fd fbd1 	bl	800bc4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4aa:	4b13      	ldr	r3, [pc, #76]	@ (800e4f8 <prvCheckForValidListAndQueue+0x6c>)
 800e4ac:	4a10      	ldr	r2, [pc, #64]	@ (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4b0:	4b12      	ldr	r3, [pc, #72]	@ (800e4fc <prvCheckForValidListAndQueue+0x70>)
 800e4b2:	4a10      	ldr	r2, [pc, #64]	@ (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <prvCheckForValidListAndQueue+0x74>)
 800e4bc:	4a11      	ldr	r2, [pc, #68]	@ (800e504 <prvCheckForValidListAndQueue+0x78>)
 800e4be:	2110      	movs	r1, #16
 800e4c0:	200a      	movs	r0, #10
 800e4c2:	f7fd fce1 	bl	800be88 <xQueueGenericCreateStatic>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4a08      	ldr	r2, [pc, #32]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4cc:	4b07      	ldr	r3, [pc, #28]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4d4:	4b05      	ldr	r3, [pc, #20]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	490b      	ldr	r1, [pc, #44]	@ (800e508 <prvCheckForValidListAndQueue+0x7c>)
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe fbb0 	bl	800cc40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4e0:	f000 f974 	bl	800e7cc <vPortExitCritical>
}
 800e4e4:	bf00      	nop
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20001d94 	.word	0x20001d94
 800e4f0:	20001d64 	.word	0x20001d64
 800e4f4:	20001d78 	.word	0x20001d78
 800e4f8:	20001d8c 	.word	0x20001d8c
 800e4fc:	20001d90 	.word	0x20001d90
 800e500:	20001e40 	.word	0x20001e40
 800e504:	20001da0 	.word	0x20001da0
 800e508:	08019aa4 	.word	0x08019aa4

0800e50c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3b04      	subs	r3, #4
 800e51c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f023 0201 	bic.w	r2, r3, #1
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b04      	subs	r3, #4
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e53c:	4a0c      	ldr	r2, [pc, #48]	@ (800e570 <pxPortInitialiseStack+0x64>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b14      	subs	r3, #20
 800e546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3b04      	subs	r3, #4
 800e552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f06f 0202 	mvn.w	r2, #2
 800e55a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3b20      	subs	r3, #32
 800e560:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e562:	68fb      	ldr	r3, [r7, #12]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	0800e575 	.word	0x0800e575

0800e574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e57e:	4b13      	ldr	r3, [pc, #76]	@ (800e5cc <prvTaskExitError+0x58>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e586:	d00b      	beq.n	800e5a0 <prvTaskExitError+0x2c>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	60fb      	str	r3, [r7, #12]
}
 800e59a:	bf00      	nop
 800e59c:	bf00      	nop
 800e59e:	e7fd      	b.n	800e59c <prvTaskExitError+0x28>
	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	60bb      	str	r3, [r7, #8]
}
 800e5b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5b4:	bf00      	nop
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0fc      	beq.n	800e5b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	2000002c 	.word	0x2000002c

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	@ (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	20001864 	.word	0x20001864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	@ (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e626:	4b47      	ldr	r3, [pc, #284]	@ (800e744 <xPortStartScheduler+0x124>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a47      	ldr	r2, [pc, #284]	@ (800e748 <xPortStartScheduler+0x128>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d10b      	bne.n	800e648 <xPortStartScheduler+0x28>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	613b      	str	r3, [r7, #16]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e648:	4b3e      	ldr	r3, [pc, #248]	@ (800e744 <xPortStartScheduler+0x124>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a3f      	ldr	r2, [pc, #252]	@ (800e74c <xPortStartScheduler+0x12c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d10b      	bne.n	800e66a <xPortStartScheduler+0x4a>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	60fb      	str	r3, [r7, #12]
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	e7fd      	b.n	800e666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e66a:	4b39      	ldr	r3, [pc, #228]	@ (800e750 <xPortStartScheduler+0x130>)
 800e66c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	22ff      	movs	r2, #255	@ 0xff
 800e67a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	b2db      	uxtb	r3, r3
 800e682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4b31      	ldr	r3, [pc, #196]	@ (800e754 <xPortStartScheduler+0x134>)
 800e690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e692:	4b31      	ldr	r3, [pc, #196]	@ (800e758 <xPortStartScheduler+0x138>)
 800e694:	2207      	movs	r2, #7
 800e696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e698:	e009      	b.n	800e6ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e69a:	4b2f      	ldr	r3, [pc, #188]	@ (800e758 <xPortStartScheduler+0x138>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6a4:	78fb      	ldrb	r3, [r7, #3]
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6ae:	78fb      	ldrb	r3, [r7, #3]
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6b6:	2b80      	cmp	r3, #128	@ 0x80
 800e6b8:	d0ef      	beq.n	800e69a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6ba:	4b27      	ldr	r3, [pc, #156]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f1c3 0307 	rsb	r3, r3, #7
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d00b      	beq.n	800e6de <xPortStartScheduler+0xbe>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60bb      	str	r3, [r7, #8]
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	e7fd      	b.n	800e6da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6de:	4b1e      	ldr	r3, [pc, #120]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6f0:	4a19      	ldr	r2, [pc, #100]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6fc:	4b17      	ldr	r3, [pc, #92]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a16      	ldr	r2, [pc, #88]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e708:	4b14      	ldr	r3, [pc, #80]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a13      	ldr	r2, [pc, #76]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e714:	f000 f8da 	bl	800e8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e718:	4b11      	ldr	r3, [pc, #68]	@ (800e760 <xPortStartScheduler+0x140>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e71e:	f000 f8f9 	bl	800e914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e722:	4b10      	ldr	r3, [pc, #64]	@ (800e764 <xPortStartScheduler+0x144>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a0f      	ldr	r2, [pc, #60]	@ (800e764 <xPortStartScheduler+0x144>)
 800e728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e72c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e72e:	f7ff ff63 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e732:	f7fe ff31 	bl	800d598 <vTaskSwitchContext>
	prvTaskExitError();
 800e736:	f7ff ff1d 	bl	800e574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	e000ed00 	.word	0xe000ed00
 800e748:	410fc271 	.word	0x410fc271
 800e74c:	410fc270 	.word	0x410fc270
 800e750:	e000e400 	.word	0xe000e400
 800e754:	20001e90 	.word	0x20001e90
 800e758:	20001e94 	.word	0x20001e94
 800e75c:	e000ed20 	.word	0xe000ed20
 800e760:	2000002c 	.word	0x2000002c
 800e764:	e000ef34 	.word	0xe000ef34

0800e768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	607b      	str	r3, [r7, #4]
}
 800e780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e782:	4b10      	ldr	r3, [pc, #64]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	4a0e      	ldr	r2, [pc, #56]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e78c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d110      	bne.n	800e7b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e794:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c8 <vPortEnterCritical+0x60>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	603b      	str	r3, [r7, #0]
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	e7fd      	b.n	800e7b2 <vPortEnterCritical+0x4a>
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	2000002c 	.word	0x2000002c
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7d2:	4b12      	ldr	r3, [pc, #72]	@ (800e81c <vPortExitCritical+0x50>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <vPortExitCritical+0x26>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	607b      	str	r3, [r7, #4]
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e81c <vPortExitCritical+0x50>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	4a08      	ldr	r2, [pc, #32]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7fc:	4b07      	ldr	r3, [pc, #28]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <vPortExitCritical+0x44>
 800e804:	2300      	movs	r3, #0
 800e806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f383 8811 	msr	BASEPRI, r3
}
 800e80e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	2000002c 	.word	0x2000002c

0800e820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e820:	f3ef 8009 	mrs	r0, PSP
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	4b15      	ldr	r3, [pc, #84]	@ (800e880 <pxCurrentTCBConst>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	f01e 0f10 	tst.w	lr, #16
 800e830:	bf08      	it	eq
 800e832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83a:	6010      	str	r0, [r2, #0]
 800e83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e844:	f380 8811 	msr	BASEPRI, r0
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f7fe fea2 	bl	800d598 <vTaskSwitchContext>
 800e854:	f04f 0000 	mov.w	r0, #0
 800e858:	f380 8811 	msr	BASEPRI, r0
 800e85c:	bc09      	pop	{r0, r3}
 800e85e:	6819      	ldr	r1, [r3, #0]
 800e860:	6808      	ldr	r0, [r1, #0]
 800e862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e866:	f01e 0f10 	tst.w	lr, #16
 800e86a:	bf08      	it	eq
 800e86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e870:	f380 8809 	msr	PSP, r0
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	f3af 8000 	nop.w

0800e880 <pxCurrentTCBConst>:
 800e880:	20001864 	.word	0x20001864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop

0800e888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	607b      	str	r3, [r7, #4]
}
 800e8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8a2:	f7fe fdbf 	bl	800d424 <xTaskIncrementTick>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ac:	4b06      	ldr	r3, [pc, #24]	@ (800e8c8 <xPortSysTickHandler+0x40>)
 800e8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	f383 8811 	msr	BASEPRI, r3
}
 800e8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e904 <vPortSetupTimerInterrupt+0x38>)
 800e8d8:	2200      	movs	r2, #0
 800e8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e908 <vPortSetupTimerInterrupt+0x3c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e90c <vPortSetupTimerInterrupt+0x40>)
 800e8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e6:	099b      	lsrs	r3, r3, #6
 800e8e8:	4a09      	ldr	r2, [pc, #36]	@ (800e910 <vPortSetupTimerInterrupt+0x44>)
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ee:	4b04      	ldr	r3, [pc, #16]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8f0:	2207      	movs	r2, #7
 800e8f2:	601a      	str	r2, [r3, #0]
}
 800e8f4:	bf00      	nop
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	e000e010 	.word	0xe000e010
 800e904:	e000e018 	.word	0xe000e018
 800e908:	20000008 	.word	0x20000008
 800e90c:	10624dd3 	.word	0x10624dd3
 800e910:	e000e014 	.word	0xe000e014

0800e914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e924 <vPortEnableVFP+0x10>
 800e918:	6801      	ldr	r1, [r0, #0]
 800e91a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e91e:	6001      	str	r1, [r0, #0]
 800e920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e922:	bf00      	nop
 800e924:	e000ed88 	.word	0xe000ed88

0800e928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e92e:	f3ef 8305 	mrs	r3, IPSR
 800e932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b0f      	cmp	r3, #15
 800e938:	d915      	bls.n	800e966 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e93a:	4a18      	ldr	r2, [pc, #96]	@ (800e99c <vPortValidateInterruptPriority+0x74>)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e944:	4b16      	ldr	r3, [pc, #88]	@ (800e9a0 <vPortValidateInterruptPriority+0x78>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	7afa      	ldrb	r2, [r7, #11]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d20b      	bcs.n	800e966 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	607b      	str	r3, [r7, #4]
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	e7fd      	b.n	800e962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e966:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a4 <vPortValidateInterruptPriority+0x7c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e96e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a8 <vPortValidateInterruptPriority+0x80>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d90b      	bls.n	800e98e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	603b      	str	r3, [r7, #0]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <vPortValidateInterruptPriority+0x62>
	}
 800e98e:	bf00      	nop
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	e000e3f0 	.word	0xe000e3f0
 800e9a0:	20001e90 	.word	0x20001e90
 800e9a4:	e000ed0c 	.word	0xe000ed0c
 800e9a8:	20001e94 	.word	0x20001e94

0800e9ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	@ 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9b8:	f7fe fc78 	bl	800d2ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9bc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb30 <pvPortMalloc+0x184>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9c4:	f000 f924 	bl	800ec10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9c8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb34 <pvPortMalloc+0x188>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f040 8095 	bne.w	800eb00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d01e      	beq.n	800ea1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9dc:	2208      	movs	r2, #8
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d015      	beq.n	800ea1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f023 0307 	bic.w	r3, r3, #7
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <pvPortMalloc+0x6e>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	617b      	str	r3, [r7, #20]
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	e7fd      	b.n	800ea16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d06f      	beq.n	800eb00 <pvPortMalloc+0x154>
 800ea20:	4b45      	ldr	r3, [pc, #276]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d86a      	bhi.n	800eb00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea2a:	4b44      	ldr	r3, [pc, #272]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea2e:	4b43      	ldr	r3, [pc, #268]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea34:	e004      	b.n	800ea40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d903      	bls.n	800ea52 <pvPortMalloc+0xa6>
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1f1      	bne.n	800ea36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea52:	4b37      	ldr	r3, [pc, #220]	@ (800eb30 <pvPortMalloc+0x184>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d051      	beq.n	800eb00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2208      	movs	r2, #8
 800ea62:	4413      	add	r3, r2
 800ea64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1ad2      	subs	r2, r2, r3
 800ea76:	2308      	movs	r3, #8
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d920      	bls.n	800eac0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4413      	add	r3, r2
 800ea84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	f003 0307 	and.w	r3, r3, #7
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00b      	beq.n	800eaa8 <pvPortMalloc+0xfc>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	613b      	str	r3, [r7, #16]
}
 800eaa2:	bf00      	nop
 800eaa4:	bf00      	nop
 800eaa6:	e7fd      	b.n	800eaa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaba:	69b8      	ldr	r0, [r7, #24]
 800eabc:	f000 f90a 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eac0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	4a1b      	ldr	r2, [pc, #108]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eacc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eace:	4b1a      	ldr	r3, [pc, #104]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb40 <pvPortMalloc+0x194>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d203      	bcs.n	800eae2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eada:	4b17      	ldr	r3, [pc, #92]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a18      	ldr	r2, [pc, #96]	@ (800eb40 <pvPortMalloc+0x194>)
 800eae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b13      	ldr	r3, [pc, #76]	@ (800eb34 <pvPortMalloc+0x188>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eaf6:	4b13      	ldr	r3, [pc, #76]	@ (800eb44 <pvPortMalloc+0x198>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3301      	adds	r3, #1
 800eafc:	4a11      	ldr	r2, [pc, #68]	@ (800eb44 <pvPortMalloc+0x198>)
 800eafe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb00:	f7fe fbe2 	bl	800d2c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00b      	beq.n	800eb26 <pvPortMalloc+0x17a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60fb      	str	r3, [r7, #12]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <pvPortMalloc+0x176>
	return pvReturn;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3728      	adds	r7, #40	@ 0x28
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20010900 	.word	0x20010900
 800eb34:	20010914 	.word	0x20010914
 800eb38:	20010904 	.word	0x20010904
 800eb3c:	200108f8 	.word	0x200108f8
 800eb40:	20010908 	.word	0x20010908
 800eb44:	2001090c 	.word	0x2001090c

0800eb48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d04f      	beq.n	800ebfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb5a:	2308      	movs	r3, #8
 800eb5c:	425b      	negs	r3, r3
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	4b25      	ldr	r3, [pc, #148]	@ (800ec04 <vPortFree+0xbc>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4013      	ands	r3, r2
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <vPortFree+0x46>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60fb      	str	r3, [r7, #12]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <vPortFree+0x66>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	60bb      	str	r3, [r7, #8]
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	e7fd      	b.n	800ebaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	4b14      	ldr	r3, [pc, #80]	@ (800ec04 <vPortFree+0xbc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01e      	beq.n	800ebfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d11a      	bne.n	800ebfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec04 <vPortFree+0xbc>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	43db      	mvns	r3, r3
 800ebce:	401a      	ands	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebd4:	f7fe fb6a 	bl	800d2ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec08 <vPortFree+0xc0>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4a09      	ldr	r2, [pc, #36]	@ (800ec08 <vPortFree+0xc0>)
 800ebe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebe6:	6938      	ldr	r0, [r7, #16]
 800ebe8:	f000 f874 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebec:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <vPortFree+0xc4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4a06      	ldr	r2, [pc, #24]	@ (800ec0c <vPortFree+0xc4>)
 800ebf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ebf6:	f7fe fb67 	bl	800d2c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebfa:	bf00      	nop
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20010914 	.word	0x20010914
 800ec08:	20010904 	.word	0x20010904
 800ec0c:	20010910 	.word	0x20010910

0800ec10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec16:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800ec1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec1c:	4b27      	ldr	r3, [pc, #156]	@ (800ecbc <prvHeapInit+0xac>)
 800ec1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00c      	beq.n	800ec44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 0307 	bic.w	r3, r3, #7
 800ec36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecbc <prvHeapInit+0xac>)
 800ec40:	4413      	add	r3, r2
 800ec42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec48:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec4e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	4413      	add	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec5c:	2208      	movs	r2, #8
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	1a9b      	subs	r3, r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0307 	bic.w	r3, r3, #7
 800ec6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4a15      	ldr	r2, [pc, #84]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2200      	movs	r2, #0
 800ec78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec7a:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec90:	4b0c      	ldr	r3, [pc, #48]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	4a0a      	ldr	r2, [pc, #40]	@ (800ecc8 <prvHeapInit+0xb8>)
 800ec9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4a09      	ldr	r2, [pc, #36]	@ (800eccc <prvHeapInit+0xbc>)
 800eca6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eca8:	4b09      	ldr	r3, [pc, #36]	@ (800ecd0 <prvHeapInit+0xc0>)
 800ecaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecae:	601a      	str	r2, [r3, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	20001e98 	.word	0x20001e98
 800ecc0:	200108f8 	.word	0x200108f8
 800ecc4:	20010900 	.word	0x20010900
 800ecc8:	20010908 	.word	0x20010908
 800eccc:	20010904 	.word	0x20010904
 800ecd0:	20010914 	.word	0x20010914

0800ecd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecdc:	4b28      	ldr	r3, [pc, #160]	@ (800ed80 <prvInsertBlockIntoFreeList+0xac>)
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e002      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x14>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	60fb      	str	r3, [r7, #12]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d8f7      	bhi.n	800ece2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d108      	bne.n	800ed16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	441a      	add	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d118      	bne.n	800ed5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	4b15      	ldr	r3, [pc, #84]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d00d      	beq.n	800ed52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	441a      	add	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e008      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed52:	4b0c      	ldr	r3, [pc, #48]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	e003      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d002      	beq.n	800ed72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed72:	bf00      	nop
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	200108f8 	.word	0x200108f8
 800ed84:	20010900 	.word	0x20010900

0800ed88 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d005      	beq.n	800eda4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	2203      	movs	r2, #3
 800eda2:	4798      	blx	r3
    }
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <_ZNSt8functionIFvhPvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff ffe5 	bl	800ed88 <_ZNSt14_Function_baseD1Ev>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 800edc8:	b590      	push	{r4, r7, lr}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	4a0f      	ldr	r2, [pc, #60]	@ (800ee10 <_ZN10MessageBusD1Ev+0x48>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f503 43ae 	add.w	r3, r3, #22272	@ 0x5700
 800eddc:	3354      	adds	r3, #84	@ 0x54
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d010      	beq.n	800ee04 <_ZN10MessageBusD1Ev+0x3c>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f503 43ae 	add.w	r3, r3, #22272	@ 0x5700
 800ede8:	3354      	adds	r3, #84	@ 0x54
 800edea:	f503 6480 	add.w	r4, r3, #1024	@ 0x400
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f503 43ae 	add.w	r3, r3, #22272	@ 0x5700
 800edf4:	3354      	adds	r3, #84	@ 0x54
 800edf6:	429c      	cmp	r4, r3
 800edf8:	d004      	beq.n	800ee04 <_ZN10MessageBusD1Ev+0x3c>
 800edfa:	3c10      	subs	r4, #16
 800edfc:	4620      	mov	r0, r4
 800edfe:	f7ff ffd6 	bl	800edae <_ZNSt8functionIFvhPvEED1Ev>
 800ee02:	e7f4      	b.n	800edee <_ZN10MessageBusD1Ev+0x26>
 800ee04:	bf00      	nop
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd90      	pop	{r4, r7, pc}
 800ee10:	08019c9c 	.word	0x08019c9c

0800ee14 <_ZN10MessageBusD0Ev>:
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7ff ffd3 	bl	800edc8 <_ZN10MessageBusD1Ev>
 800ee22:	f645 4154 	movw	r1, #23636	@ 0x5c54
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f007 fcce 	bl	80167c8 <_ZdlPvj>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
	...

0800ee38 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	4a05      	ldr	r2, [pc, #20]	@ (800ee58 <_ZN5IOBusD1Ev+0x20>)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	601a      	str	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff ffbd 	bl	800edc8 <_ZN10MessageBusD1Ev>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4618      	mov	r0, r3
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	08019ba4 	.word	0x08019ba4

0800ee5c <_ZN5IOBusD0Ev>:
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ffe7 	bl	800ee38 <_ZN5IOBusD1Ev>
 800ee6a:	f645 4164 	movw	r1, #23652	@ 0x5c64
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f007 fcaa 	bl	80167c8 <_ZdlPvj>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4618      	mov	r0, r3
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
	...

0800ee80 <_ZN6CANBusC1EP8IODriver>:


#include "CANBus.h"
#include "Protocol/Protocol.h"

CANBus::CANBus(IODriver* driver) : IOBus(driver, can_frame, sizeof(can_frame)) {
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f503 42b8 	add.w	r2, r3, #23552	@ 0x5c00
 800ee92:	3264      	adds	r2, #100	@ 0x64
 800ee94:	2340      	movs	r3, #64	@ 0x40
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	f000 f8fc 	bl	800f094 <_ZN5IOBusC1EP8IODriverPhm>
 800ee9c:	4a30      	ldr	r2, [pc, #192]	@ (800ef60 <_ZN6CANBusC1EP8IODriver+0xe0>)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]

	// sENTRY

    define<IMUPacket>(1);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2101      	movs	r1, #1
 800eea6:	4618      	mov	r0, r3
 800eea8:	f001 f980 	bl	80101ac <_ZN10MessageBus6defineI9IMUPacketEEbh>
    define<chassisJointsPacket>(2);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2102      	movs	r1, #2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f001 fa43 	bl	801033c <_ZN10MessageBus6defineI19chassisJointsPacketEEbh>
    define<gimbalJointsPacket>(3);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2103      	movs	r1, #3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f001 f9da 	bl	8010274 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh>
    define<dummyPacket>(4);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2104      	movs	r1, #4
 800eec4:	4618      	mov	r0, r3
 800eec6:	f001 fa9d 	bl	8010404 <_ZN10MessageBus6defineI11dummyPacketEEbh>
    define<imuPacket>(5);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2105      	movs	r1, #5
 800eece:	4618      	mov	r0, r3
 800eed0:	f001 fb7e 	bl	80105d0 <_ZN10MessageBus6defineI9imuPacketEEbh>
    define<chassisSpeedCommandPacket>(6);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2106      	movs	r1, #6
 800eed8:	4618      	mov	r0, r3
 800eeda:	f001 fbdd 	bl	8010698 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh>
    define<gimbalAngleCommandPacket>(7);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2107      	movs	r1, #7
 800eee2:	4618      	mov	r0, r3
 800eee4:	f001 fc3c 	bl	8010760 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh>
    define<LeftTriggerPositionPacket>(8);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2108      	movs	r1, #8
 800eeec:	4618      	mov	r0, r3
 800eeee:	f001 fc9b 	bl	8010828 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh>
    define<RightTriggerPositionPacket>(9);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2109      	movs	r1, #9
 800eef6:	4618      	mov	r0, r3
 800eef8:	f001 fcfa 	bl	80108f0 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh>
    define<ChassisSpinCommandPacket>(10);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	210a      	movs	r1, #10
 800ef00:	4618      	mov	r0, r3
 800ef02:	f001 fd59 	bl	80109b8 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh>
    define<FrontFiringPacket>(11);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	210b      	movs	r1, #11
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f001 fe80 	bl	8010c10 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh>
    define<BackFiringPacket>(12);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	210c      	movs	r1, #12
 800ef14:	4618      	mov	r0, r3
 800ef16:	f001 fedf 	bl	8010cd8 <_ZN10MessageBus6defineI16BackFiringPacketEEbh>
    define<RobotStatusPacket>(13);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	210d      	movs	r1, #13
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f001 ff3e 	bl	8010da0 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh>
    define<gimbalAngleYawCommandPacket>(14);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	210e      	movs	r1, #14
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f001 fda9 	bl	8010a80 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh>
    define<gimbalAnglePitchCommandPacket>(15);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	210f      	movs	r1, #15
 800ef32:	4618      	mov	r0, r3
 800ef34:	f001 fe08 	bl	8010b48 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh>
    define<SideDialPacket>(16);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2110      	movs	r1, #16
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f001 ff93 	bl	8010e68 <_ZN10MessageBus6defineI14SideDialPacketEEbh>
    define<SuperCapDataPacket>(17);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2111      	movs	r1, #17
 800ef46:	4618      	mov	r0, r3
 800ef48:	f001 fff2 	bl	8010f30 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh>
    define<MaxChassisPowerPacket>(18);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2112      	movs	r1, #18
 800ef50:	4618      	mov	r0, r3
 800ef52:	f002 f871 	bl	8011038 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh>
}
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	08019b70 	.word	0x08019b70

0800ef64 <_ZN6CANBusD1Ev>:
#include "IOBus.h"

#define CAN_FRAME_SIZE 64


class CANBus : public IOBus {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	4a05      	ldr	r2, [pc, #20]	@ (800ef84 <_ZN6CANBusD1Ev+0x20>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff ff5f 	bl	800ee38 <_ZN5IOBusD1Ev>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	08019b70 	.word	0x08019b70

0800ef88 <_ZN6CANBusD0Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe7 	bl	800ef64 <_ZN6CANBusD1Ev>
 800ef96:	f645 41a4 	movw	r1, #23716	@ 0x5ca4
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f007 fc14 	bl	80167c8 <_ZdlPvj>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
	...

0800efd8 <_ZN10MessageBusC1Ev>:
class MessageBus {
 800efd8:	b5b0      	push	{r4, r5, r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	4a24      	ldr	r2, [pc, #144]	@ (800f074 <_ZN10MessageBusC1Ev+0x9c>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	3304      	adds	r3, #4
 800efea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800efee:	2100      	movs	r1, #0
 800eff0:	4618      	mov	r0, r3
 800eff2:	f008 fe7e 	bl	8017cf2 <memset>
 800eff6:	2201      	movs	r2, #1
 800eff8:	6879      	ldr	r1, [r7, #4]
 800effa:	4613      	mov	r3, r2
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	4413      	add	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	440b      	add	r3, r1
 800f004:	3304      	adds	r3, #4
 800f006:	21ff      	movs	r1, #255	@ 0xff
 800f008:	7019      	strb	r1, [r3, #0]
 800f00a:	2a3f      	cmp	r2, #63	@ 0x3f
 800f00c:	d001      	beq.n	800f012 <_ZN10MessageBusC1Ev+0x3a>
 800f00e:	3201      	adds	r2, #1
 800f010:	e7f2      	b.n	800eff8 <_ZN10MessageBusC1Ev+0x20>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800f018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f01c:	2100      	movs	r1, #0
 800f01e:	4618      	mov	r0, r3
 800f020:	f008 fe67 	bl	8017cf2 <memset>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f203 7304 	addw	r3, r3, #1796	@ 0x704
 800f02a:	f245 0250 	movw	r2, #20560	@ 0x5050
 800f02e:	2100      	movs	r1, #0
 800f030:	4618      	mov	r0, r3
 800f032:	f008 fe5e 	bl	8017cf2 <memset>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f503 43ae 	add.w	r3, r3, #22272	@ 0x5700
 800f03c:	3354      	adds	r3, #84	@ 0x54
 800f03e:	243f      	movs	r4, #63	@ 0x3f
 800f040:	461d      	mov	r5, r3
 800f042:	e004      	b.n	800f04e <_ZN10MessageBusC1Ev+0x76>
 800f044:	4628      	mov	r0, r5
 800f046:	f000 f940 	bl	800f2ca <_ZNSt8functionIFvhPvEEC1Ev>
 800f04a:	3c01      	subs	r4, #1
 800f04c:	3510      	adds	r5, #16
 800f04e:	2c00      	cmp	r4, #0
 800f050:	daf8      	bge.n	800f044 <_ZN10MessageBusC1Ev+0x6c>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f058:	f603 3354 	addw	r3, r3, #2900	@ 0xb54
 800f05c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f060:	2100      	movs	r1, #0
 800f062:	4618      	mov	r0, r3
 800f064:	f008 fe45 	bl	8017cf2 <memset>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bdb0      	pop	{r4, r5, r7, pc}
 800f072:	bf00      	nop
 800f074:	08019c9c 	.word	0x08019c9c

0800f078 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4618      	mov	r0, r3
 800f084:	f7ff fe80 	bl	800ed88 <_ZNSt14_Function_baseD1Ev>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
	...

0800f094 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 800f094:	b5b0      	push	{r4, r5, r7, lr}
 800f096:	b090      	sub	sp, #64	@ 0x40
 800f098:	af02      	add	r7, sp, #8
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
 800f0a0:	603b      	str	r3, [r7, #0]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff ff97 	bl	800efd8 <_ZN10MessageBusC1Ev>
 800f0aa:	4a27      	ldr	r2, [pc, #156]	@ (800f148 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f8c2 3c54 	str.w	r3, [r2, #3156]	@ 0xc54
	this->packet_buffer = buffer;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8c2 3c58 	str.w	r3, [r2, #3160]	@ 0xc58
	this->buffer_length = length;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	f8c2 3c5c 	str.w	r3, [r2, #3164]	@ 0xc5c
	this->buffer_index = 0;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f8c2 3c60 	str.w	r3, [r2, #3168]	@ 0xc60

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	681c      	ldr	r4, [r3, #0]
 800f0f0:	68bd      	ldr	r5, [r7, #8]
 800f0f2:	4b16      	ldr	r3, [pc, #88]	@ (800f14c <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 800f0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0fe:	f107 0020 	add.w	r0, r7, #32
 800f102:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f106:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800f10a:	4b11      	ldr	r3, [pc, #68]	@ (800f150 <_ZN5IOBusC1EP8IODriverPhm+0xbc>)
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	4b11      	ldr	r3, [pc, #68]	@ (800f154 <_ZN5IOBusC1EP8IODriverPhm+0xc0>)
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	4b11      	ldr	r3, [pc, #68]	@ (800f158 <_ZN5IOBusC1EP8IODriverPhm+0xc4>)
 800f114:	f000 f8ef 	bl	800f2f6 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 800f118:	f107 0220 	add.w	r2, r7, #32
 800f11c:	f107 0310 	add.w	r3, r7, #16
 800f120:	4611      	mov	r1, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f000 f910 	bl	800f348 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvEEOT_>
 800f128:	f107 0310 	add.w	r3, r7, #16
 800f12c:	4619      	mov	r1, r3
 800f12e:	4628      	mov	r0, r5
 800f130:	47a0      	blx	r4
 800f132:	f107 0310 	add.w	r3, r7, #16
 800f136:	4618      	mov	r0, r3
 800f138:	f7ff ff9e 	bl	800f078 <_ZNSt8functionIFvhPhmEED1Ev>
}
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4618      	mov	r0, r3
 800f140:	3738      	adds	r7, #56	@ 0x38
 800f142:	46bd      	mov	sp, r7
 800f144:	bdb0      	pop	{r4, r5, r7, pc}
 800f146:	bf00      	nop
 800f148:	08019ba4 	.word	0x08019ba4
 800f14c:	0800f15d 	.word	0x0800f15d
 800f150:	0801a3ec 	.word	0x0801a3ec
 800f154:	0801a3ed 	.word	0x0801a3ed
 800f158:	0801a3ee 	.word	0x0801a3ee

0800f15c <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	607a      	str	r2, [r7, #4]
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	460b      	mov	r3, r1
 800f16a:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 800f16c:	e019      	b.n	800f1a2 <_ZN5IOBus7receiveEhPhm+0x46>
		MessageBus::receive(sender_id, buffer, buffer_length);
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f176:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	@ 0xc5c
 800f17a:	7af9      	ldrb	r1, [r7, #11]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	f002 f86a 	bl	8011256 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f188:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	@ 0xc5c
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f198:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	@ 0xc5c
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	4413      	add	r3, r2
 800f1a0:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f1a8:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	@ 0xc5c
 800f1ac:	683a      	ldr	r2, [r7, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d8dd      	bhi.n	800f16e <_ZN5IOBus7receiveEhPhm+0x12>
	}

	MessageBus::receive(sender_id, buffer, length);
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	7af9      	ldrb	r1, [r7, #11]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	f002 f84c 	bl	8011256 <_ZN10MessageBus7receiveEhPhm>
}
 800f1be:	bf00      	nop
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <_ZN5IOBus10get_driverEv>:

IODriver* IOBus::get_driver() {
 800f1c6:	b480      	push	{r7}
 800f1c8:	b083      	sub	sp, #12
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
	return driver;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f1d4:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	@ 0xc54
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZN5IOBus6appendEPhm>:

uint32_t IOBus::append(uint8_t* buffer, uint32_t length) {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f1f6:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f200:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	@ 0xc60
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d901      	bls.n	800f214 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f21a:	f8d3 2c58 	ldr.w	r2, [r3, #3160]	@ 0xc58
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f224:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	@ 0xc60
 800f228:	4413      	add	r3, r2
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	68b9      	ldr	r1, [r7, #8]
 800f22e:	4618      	mov	r0, r3
 800f230:	f008 fe89 	bl	8017f46 <memcpy>

	buffer_index += length;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f23a:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 800f248:	f8c2 3c60 	str.w	r3, [r2, #3168]	@ 0xc60

	return length;
 800f24c:	687b      	ldr	r3, [r7, #4]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3718      	adds	r7, #24
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f264:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	@ 0xc54
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	330c      	adds	r3, #12
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 800f274:	f8d2 0c54 	ldr.w	r0, [r2, #3156]	@ 0xc54
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 800f27e:	f8d2 1c58 	ldr.w	r1, [r2, #3160]	@ 0xc58
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 800f288:	f8d2 2c60 	ldr.w	r2, [r2, #3168]	@ 0xc60
 800f28c:	4798      	blx	r3
	buffer_index = 0;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800f294:	461a      	mov	r2, r3
 800f296:	2300      	movs	r3, #0
 800f298:	f8c2 3c60 	str.w	r3, [r2, #3168]	@ 0xc60
}
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	6013      	str	r3, [r2, #0]
 800f2b4:	6053      	str	r3, [r2, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	609a      	str	r2, [r3, #8]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <_ZNSt8functionIFvhPvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	6013      	str	r3, [r2, #0]
 800f2da:	6053      	str	r3, [r2, #4]
 800f2dc:	6093      	str	r3, [r2, #8]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7ff ffdf 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	60da      	str	r2, [r3, #12]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @since C++11
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 800f2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fa:	b086      	sub	sp, #24
 800f2fc:	af02      	add	r7, sp, #8
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
 800f304:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 800f306:	68b8      	ldr	r0, [r7, #8]
 800f308:	f000 f84e 	bl	800f3a8 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f30c:	4605      	mov	r5, r0
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f855 	bl	800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 800f314:	4606      	mov	r6, r0
 800f316:	6838      	ldr	r0, [r7, #0]
 800f318:	f000 f85c 	bl	800f3d4 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f31c:	4680      	mov	r8, r0
 800f31e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f320:	f000 f863 	bl	800f3ea <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f324:	4604      	mov	r4, r0
 800f326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f328:	f000 f86a 	bl	800f400 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f32c:	4603      	mov	r3, r0
 800f32e:	9301      	str	r3, [sp, #4]
 800f330:	9400      	str	r4, [sp, #0]
 800f332:	4643      	mov	r3, r8
 800f334:	4632      	mov	r2, r6
 800f336:	4629      	mov	r1, r5
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f86c 	bl	800f416 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f348 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 800f348:	b590      	push	{r4, r7, lr}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	461a      	mov	r2, r3
 800f356:	2300      	movs	r3, #0
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	6053      	str	r3, [r2, #4]
 800f35c:	6093      	str	r3, [r2, #8]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff ff9f 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 800f36c:	6838      	ldr	r0, [r7, #0]
 800f36e:	f000 f883 	bl	800f478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00e      	beq.n	800f396 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 800f378:	687c      	ldr	r4, [r7, #4]
 800f37a:	6838      	ldr	r0, [r7, #0]
 800f37c:	f000 f887 	bl	800f48e <_ZSt7forwardISt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISC_E4typeE>
 800f380:	4603      	mov	r3, r0
 800f382:	4619      	mov	r1, r3
 800f384:	4620      	mov	r0, r4
 800f386:	f000 f88d 	bl	800f4a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorISC_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a04      	ldr	r2, [pc, #16]	@ (800f3a0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvEEOT_+0x58>)
 800f38e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a04      	ldr	r2, [pc, #16]	@ (800f3a4 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvEEOT_+0x5c>)
 800f394:	609a      	str	r2, [r3, #8]
	    }
	}
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd90      	pop	{r4, r7, pc}
 800f3a0:	0800f4c9 	.word	0x0800f4c9
 800f3a4:	0800f509 	.word	0x0800f509

0800f3a8 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	370c      	adds	r7, #12
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3ea:	b480      	push	{r7}
 800f3ec:	b083      	sub	sp, #12
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4618      	mov	r0, r3
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 800f416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af02      	add	r7, sp, #8
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800f426:	68b8      	ldr	r0, [r7, #8]
 800f428:	f000 f89a 	bl	800f560 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 800f42c:	4602      	mov	r2, r0
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f434:	e883 0003 	stmia.w	r3, {r0, r1}
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f103 0408 	add.w	r4, r3, #8
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7ff ffbd 	bl	800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 800f444:	4605      	mov	r5, r0
 800f446:	6838      	ldr	r0, [r7, #0]
 800f448:	f7ff ffc4 	bl	800f3d4 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f44c:	4606      	mov	r6, r0
 800f44e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f450:	f7ff ffcb 	bl	800f3ea <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f454:	4680      	mov	r8, r0
 800f456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f458:	f7ff ffd2 	bl	800f400 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f45c:	4603      	mov	r3, r0
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	4643      	mov	r3, r8
 800f462:	4632      	mov	r2, r6
 800f464:	4629      	mov	r1, r5
 800f466:	4620      	mov	r0, r4
 800f468:	f000 f885 	bl	800f576 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>
	{ }
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f478 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800f480:	2301      	movs	r3, #1
 800f482:	4618      	mov	r0, r3
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <_ZSt7forwardISt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorISC_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f4ae:	6838      	ldr	r0, [r7, #0]
 800f4b0:	f7ff ffed 	bl	800f48e <_ZSt7forwardISt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISC_E4typeE>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	4622      	mov	r2, r4
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 f8d8 	bl	800f670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_createISC_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd90      	pop	{r4, r7, pc}

0800f4c8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
 800f4d4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f000 f8e6 	bl	800f6a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 800f4dc:	4604      	mov	r4, r0
 800f4de:	68b8      	ldr	r0, [r7, #8]
 800f4e0:	f000 f8ef 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f8f6 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800f4ec:	4606      	mov	r6, r0
 800f4ee:	6838      	ldr	r0, [r7, #0]
 800f4f0:	f000 f8fd 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 f902 	bl	800f704 <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESE_E4typeEOSF_DpOSG_>
				     std::forward<_ArgTypes>(__args)...);
 800f500:	bf00      	nop
      }
 800f502:	3714      	adds	r7, #20
 800f504:	46bd      	mov	sp, r7
 800f506:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f508 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800f508:	b590      	push	{r4, r7, lr}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	4613      	mov	r3, r2
 800f514:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800f516:	79fb      	ldrb	r3, [r7, #7]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d007      	beq.n	800f530 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
 800f520:	e010      	b.n	800f544 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	f000 f912 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800f528:	4603      	mov	r3, r0
 800f52a:	4a0c      	ldr	r2, [pc, #48]	@ (800f55c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x54>)
 800f52c:	601a      	str	r2, [r3, #0]
	    break;
 800f52e:	e00f      	b.n	800f550 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800f530:	68b8      	ldr	r0, [r7, #8]
 800f532:	f000 f8b9 	bl	800f6a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 800f536:	4604      	mov	r4, r0
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f000 f913 	bl	800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 800f53e:	4603      	mov	r3, r0
 800f540:	601c      	str	r4, [r3, #0]
	    break;
 800f542:	e005      	b.n	800f550 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	461a      	mov	r2, r3
 800f548:	68b9      	ldr	r1, [r7, #8]
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f000 f916 	bl	800f77c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>
	return false;
 800f550:	2300      	movs	r3, #0
      }
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	bd90      	pop	{r4, r7, pc}
 800f55a:	bf00      	nop
 800f55c:	08019bbc 	.word	0x08019bbc

0800f560 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>:

      template<typename... _UElements,
	       bool _Valid = __valid_args<_UElements...>(),
	       _ImplicitCtor<_Valid, _UElements...> = true>
	constexpr
	tuple(_UElements&&... __elements)
 800f576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af02      	add	r7, sp, #8
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	603b      	str	r3, [r7, #0]
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 800f586:	68fc      	ldr	r4, [r7, #12]
 800f588:	68b8      	ldr	r0, [r7, #8]
 800f58a:	f7ff ff18 	bl	800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 800f58e:	4605      	mov	r5, r0
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff ff1f 	bl	800f3d4 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f596:	4606      	mov	r6, r0
 800f598:	6838      	ldr	r0, [r7, #0]
 800f59a:	f7ff ff26 	bl	800f3ea <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f59e:	4680      	mov	r8, r0
 800f5a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5a2:	f7ff ff2d 	bl	800f400 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	4643      	mov	r3, r8
 800f5ac:	4632      	mov	r2, r6
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f000 f91f 	bl	800f7f4 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5c2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	6039      	str	r1, [r7, #0]
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 f936 	bl	800f840 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	6039      	str	r1, [r7, #0]
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7ff ffe9 	bl	800f5c2 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff ffe9 	bl	800f5de <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	6812      	ldr	r2, [r2, #0]
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4618      	mov	r0, r3
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800f61e:	b580      	push	{r7, lr}
 800f620:	b082      	sub	sp, #8
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
 800f626:	6039      	str	r1, [r7, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	683a      	ldr	r2, [r7, #0]
 800f62c:	4611      	mov	r1, r2
 800f62e:	4618      	mov	r0, r3
 800f630:	f7ff ffe3 	bl	800f5fa <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4618      	mov	r0, r3
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&&) = default;
 800f63e:	b580      	push	{r7, lr}
 800f640:	b082      	sub	sp, #8
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f650:	e883 0003 	stmia.w	r3, {r0, r1}
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f103 0208 	add.w	r2, r3, #8
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	3308      	adds	r3, #8
 800f65e:	4619      	mov	r1, r3
 800f660:	4610      	mov	r0, r2
 800f662:	f7ff ffdc 	bl	800f61e <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_createISC_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 800f67c:	200c      	movs	r0, #12
 800f67e:	f007 f945 	bl	801690c <_Znwj>
 800f682:	4603      	mov	r3, r0
 800f684:	461c      	mov	r4, r3
 800f686:	68b8      	ldr	r0, [r7, #8]
 800f688:	f7ff ff01 	bl	800f48e <_ZSt7forwardISt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISC_E4typeE>
 800f68c:	4603      	mov	r3, r0
 800f68e:	4619      	mov	r1, r3
 800f690:	4620      	mov	r0, r4
 800f692:	f7ff ffd4 	bl	800f63e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
	    __dest._M_access<_Functor*>()
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f000 f864 	bl	800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 800f69c:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800f69e:	601c      	str	r4, [r3, #0]
	  }
 800f6a0:	bf00      	nop
 800f6a2:	3714      	adds	r7, #20
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd90      	pop	{r4, r7, pc}

0800f6a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 f8d1 	bl	800f858 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	681b      	ldr	r3, [r3, #0]
	}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESE_E4typeEOSF_DpOSG_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f708:	b086      	sub	sp, #24
 800f70a:	af02      	add	r7, sp, #8
 800f70c:	60f8      	str	r0, [r7, #12]
 800f70e:	60b9      	str	r1, [r7, #8]
 800f710:	607a      	str	r2, [r7, #4]
 800f712:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f000 f8ab 	bl	800f870 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800f71a:	4604      	mov	r4, r0
 800f71c:	68b8      	ldr	r0, [r7, #8]
 800f71e:	f7ff ffd0 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f722:	4605      	mov	r5, r0
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7ff ffd7 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800f72a:	4606      	mov	r6, r0
 800f72c:	6838      	ldr	r0, [r7, #0]
 800f72e:	f7ff ffde 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800f732:	4603      	mov	r3, r0
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	4633      	mov	r3, r6
 800f738:	462a      	mov	r2, r5
 800f73a:	4621      	mov	r1, r4
 800f73c:	4640      	mov	r0, r8
 800f73e:	f000 f8a2 	bl	800f886 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800f742:	bf00      	nop
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff fc28 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 800f75a:	4603      	mov	r3, r0
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access() noexcept
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff fc1c 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 800f772:	4603      	mov	r3, r0
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800f77c:	b590      	push	{r4, r7, lr}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	4613      	mov	r3, r2
 800f788:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d82a      	bhi.n	800f7e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x6a>
 800f790:	a201      	add	r2, pc, #4	@ (adr r2, 800f798 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 800f792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f796:	bf00      	nop
 800f798:	0800f7a9 	.word	0x0800f7a9
 800f79c:	0800f7b7 	.word	0x0800f7b7
 800f7a0:	0800f7cb 	.word	0x0800f7cb
 800f7a4:	0800f7dd 	.word	0x0800f7dd
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f7ff ffcf 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	4a0f      	ldr	r2, [pc, #60]	@ (800f7f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x74>)
 800f7b2:	601a      	str	r2, [r3, #0]
	      break;
 800f7b4:	e017      	b.n	800f7e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800f7b6:	68b8      	ldr	r0, [r7, #8]
 800f7b8:	f7ff ff76 	bl	800f6a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 800f7bc:	4604      	mov	r4, r0
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f7ff ffd0 	bl	800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	601c      	str	r4, [r3, #0]
	      break;
 800f7c8:	e00d      	b.n	800f7e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800f7ca:	68b8      	ldr	r0, [r7, #8]
 800f7cc:	f7ff ff6c 	bl	800f6a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 800f7d0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f000 f876 	bl	800f8c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorIRKSC_EEvRSt9_Any_dataOT_>
	      break;
 800f7da:	e004      	b.n	800f7e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800f7dc:	4621      	mov	r1, r4
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 f883 	bl	800f8ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 800f7e4:	bf00      	nop
	  return false;
 800f7e6:	2300      	movs	r3, #0
	}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3714      	adds	r7, #20
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd90      	pop	{r4, r7, pc}
 800f7f0:	08019bbc 	.word	0x08019bbc

0800f7f4 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800f7f4:	b5b0      	push	{r4, r5, r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head))
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff fde6 	bl	800f3d4 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f808:	4604      	mov	r4, r0
 800f80a:	6838      	ldr	r0, [r7, #0]
 800f80c:	f7ff fded 	bl	800f3ea <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f810:	4605      	mov	r5, r0
 800f812:	6a38      	ldr	r0, [r7, #32]
 800f814:	f7ff fdf4 	bl	800f400 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f818:	4603      	mov	r3, r0
 800f81a:	462a      	mov	r2, r5
 800f81c:	4621      	mov	r1, r4
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f000 f877 	bl	800f912 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 800f824:	68fc      	ldr	r4, [r7, #12]
 800f826:	68b8      	ldr	r0, [r7, #8]
 800f828:	f7ff fdc9 	bl	800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 800f82c:	4603      	mov	r3, r0
 800f82e:	4619      	mov	r1, r3
 800f830:	4620      	mov	r0, r4
 800f832:	f000 f883 	bl	800f93c <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
	{ }
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bdb0      	pop	{r4, r5, r7, pc}

0800f840 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
      { }
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const noexcept
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff fbad 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 800f866:	4603      	mov	r3, r0
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4618      	mov	r0, r3
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f886:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f888:	b085      	sub	sp, #20
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	7338      	strb	r0, [r7, #12]
 800f88e:	60b9      	str	r1, [r7, #8]
 800f890:	607a      	str	r2, [r7, #4]
 800f892:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f894:	68b8      	ldr	r0, [r7, #8]
 800f896:	f7ff ffeb 	bl	800f870 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
 800f89a:	4604      	mov	r4, r0
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff ff10 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	6838      	ldr	r0, [r7, #0]
 800f8a6:	f7ff ff17 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ae:	f7ff ff1e 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f000 f850 	bl	800f95e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
 800f8be:	bf00      	nop
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorIRKSC_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f8c6:	b590      	push	{r4, r7, lr}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f8d0:	6838      	ldr	r0, [r7, #0]
 800f8d2:	f000 f868 	bl	800f9a6 <_ZSt7forwardIRKSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISE_E4typeE>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	4622      	mov	r2, r4
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f86d 	bl	800f9bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_createIRKSC_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>
	  }
 800f8e2:	bf00      	nop
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd90      	pop	{r4, r7, pc}

0800f8ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b082      	sub	sp, #8
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f7ff ff35 	bl	800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 800f902:	210c      	movs	r1, #12
 800f904:	4618      	mov	r0, r3
 800f906:	f006 ff5f 	bl	80167c8 <_ZdlPvj>
	}
 800f90a:	bf00      	nop
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 800f912:	b580      	push	{r7, lr}
 800f914:	b084      	sub	sp, #16
 800f916:	af00      	add	r7, sp, #0
 800f918:	60f8      	str	r0, [r7, #12]
 800f91a:	60b9      	str	r1, [r7, #8]
 800f91c:	607a      	str	r2, [r7, #4]
 800f91e:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head)
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	6879      	ldr	r1, [r7, #4]
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f000 f865 	bl	800f9f4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 800f92a:	68b9      	ldr	r1, [r7, #8]
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f000 f874 	bl	800fa1a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
      { }
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800f946:	6838      	ldr	r0, [r7, #0]
 800f948:	f7ff fd39 	bl	800f3be <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 800f94c:	4603      	mov	r3, r0
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 800f95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f960:	b089      	sub	sp, #36	@ 0x24
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
 800f96a:	603b      	str	r3, [r7, #0]
	  return this->__call<_Result>(
 800f96c:	68b8      	ldr	r0, [r7, #8]
 800f96e:	f7ff fea8 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f972:	4604      	mov	r4, r0
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff feaf 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800f97a:	4605      	mov	r5, r0
 800f97c:	6838      	ldr	r0, [r7, #0]
 800f97e:	f7ff feb6 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800f982:	4603      	mov	r3, r0
 800f984:	f107 0014 	add.w	r0, r7, #20
 800f988:	462a      	mov	r2, r5
 800f98a:	4621      	mov	r1, r4
 800f98c:	f000 f851 	bl	800fa32 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 800f990:	f107 0314 	add.w	r3, r7, #20
 800f994:	4632      	mov	r2, r6
 800f996:	4619      	mov	r1, r3
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 f866 	bl	800fa6a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	      _Bound_indexes());
 800f99e:	bf00      	nop
	}
 800f9a0:	3724      	adds	r7, #36	@ 0x24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9a6 <_ZSt7forwardIRKSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_createIRKSC_EEvRSt9_Any_dataOT_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 800f9bc:	b590      	push	{r4, r7, lr}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 800f9c8:	200c      	movs	r0, #12
 800f9ca:	f006 ff9f 	bl	801690c <_Znwj>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	461c      	mov	r4, r3
 800f9d2:	68b8      	ldr	r0, [r7, #8]
 800f9d4:	f7ff ffe7 	bl	800f9a6 <_ZSt7forwardIRKSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISE_E4typeE>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	4623      	mov	r3, r4
 800f9dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f7ff febe 	bl	800f764 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 800f9e8:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 800f9ea:	601c      	str	r4, [r3, #0]
	  }
 800f9ec:	bf00      	nop
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd90      	pop	{r4, r7, pc}

0800f9f4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head)
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 f879 	bl	800fafa <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 800fa08:	68b9      	ldr	r1, [r7, #8]
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f000 f883 	bl	800fb16 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
      { }
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800fa1a:	b480      	push	{r7}
 800fa1c:	b083      	sub	sp, #12
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4618      	mov	r0, r3
 800fa28:	370c      	adds	r7, #12
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr

0800fa32 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800fa32:	b5b0      	push	{r4, r5, r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	60f8      	str	r0, [r7, #12]
 800fa3a:	60b9      	str	r1, [r7, #8]
 800fa3c:	607a      	str	r2, [r7, #4]
 800fa3e:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800fa40:	68b8      	ldr	r0, [r7, #8]
 800fa42:	f7ff fe3e 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fa46:	4604      	mov	r4, r0
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff fe45 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fa4e:	4605      	mov	r5, r0
 800fa50:	6838      	ldr	r0, [r7, #0]
 800fa52:	f7ff fe4c 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fa56:	4603      	mov	r3, r0
 800fa58:	462a      	mov	r2, r5
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f000 f866 	bl	800fb2e <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bdb0      	pop	{r4, r5, r7, pc}

0800fa6a <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800fa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6e:	b08a      	sub	sp, #40	@ 0x28
 800fa70:	af02      	add	r7, sp, #8
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800fa78:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 f873 	bl	800fb6a <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fa84:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800fa86:	f107 0310 	add.w	r3, r7, #16
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 f879 	bl	800fb84 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 800fa92:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	3308      	adds	r3, #8
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 f881 	bl	800fba0 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fa9e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800faa0:	f107 0314 	add.w	r3, r7, #20
 800faa4:	68ba      	ldr	r2, [r7, #8]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 f886 	bl	800fbb8 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 800faac:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	3308      	adds	r3, #8
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 f892 	bl	800fbdc <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fab8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800faba:	f107 0318 	add.w	r3, r7, #24
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f897 	bl	800fbf4 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 800fac6:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	3308      	adds	r3, #8
 800facc:	4618      	mov	r0, r3
 800face:	f000 f8a3 	bl	800fc18 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800fad2:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800fad4:	f107 031c 	add.w	r3, r7, #28
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 f8a8 	bl	800fc30 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 800fae0:	4603      	mov	r3, r0
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	4643      	mov	r3, r8
 800fae6:	4632      	mov	r2, r6
 800fae8:	4629      	mov	r1, r5
 800faea:	4620      	mov	r0, r4
 800faec:	f000 f8b2 	bl	800fc54 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 800faf0:	bf00      	nop
	}
 800faf2:	3720      	adds	r7, #32
 800faf4:	46bd      	mov	sp, r7
 800faf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fafa <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      _Tuple_impl(const _Head& __head)
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f8cd 	bl	800fca6 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
      { }
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800fb16:	b480      	push	{r7}
 800fb18:	b083      	sub	sp, #12
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 800fb2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb30:	b085      	sub	sp, #20
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	60f8      	str	r0, [r7, #12]
 800fb36:	60b9      	str	r1, [r7, #8]
 800fb38:	607a      	str	r2, [r7, #4]
 800fb3a:	603b      	str	r3, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 800fb3c:	68fc      	ldr	r4, [r7, #12]
 800fb3e:	68b8      	ldr	r0, [r7, #8]
 800fb40:	f7ff fdbf 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fb44:	4605      	mov	r5, r0
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fdc6 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	6838      	ldr	r0, [r7, #0]
 800fb50:	f7ff fdcd 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fb54:	4603      	mov	r3, r0
 800fb56:	4632      	mov	r2, r6
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 f8af 	bl	800fcbe <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	4618      	mov	r0, r3
 800fb64:	3714      	adds	r7, #20
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb6a <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 f8c7 	bl	800fd08 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800fb90:	68b8      	ldr	r0, [r7, #8]
 800fb92:	f000 f8c5 	bl	800fd20 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 800fb96:	4603      	mov	r3, r0
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f8c4 	bl	800fd36 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f8c2 	bl	800fd4e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f000 f8c9 	bl	800fd64 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 800fbd2:	4603      	mov	r3, r0
	}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 f8ce 	bl	800fd86 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fbea:	4603      	mov	r3, r0
 800fbec:	4618      	mov	r0, r3
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 f8a4 	bl	800fd4e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 800fc06:	4603      	mov	r3, r0
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f000 f8c8 	bl	800fd9e <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 800fc0e:	4603      	mov	r3, r0
	}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f8cd 	bl	800fdc0 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800fc26:	4603      	mov	r3, r0
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 f886 	bl	800fd4e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 800fc42:	4603      	mov	r3, r0
 800fc44:	4618      	mov	r0, r3
 800fc46:	f000 f8c7 	bl	800fdd8 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 800fc4a:	4603      	mov	r3, r0
	}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800fc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc58:	b087      	sub	sp, #28
 800fc5a:	af02      	add	r7, sp, #8
 800fc5c:	60f8      	str	r0, [r7, #12]
 800fc5e:	60b9      	str	r1, [r7, #8]
 800fc60:	607a      	str	r2, [r7, #4]
 800fc62:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 f8c8 	bl	800fdfa <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 800fc6a:	4605      	mov	r5, r0
 800fc6c:	68b8      	ldr	r0, [r7, #8]
 800fc6e:	f000 f857 	bl	800fd20 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 800fc72:	4606      	mov	r6, r0
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff fd24 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fc7a:	4680      	mov	r8, r0
 800fc7c:	6838      	ldr	r0, [r7, #0]
 800fc7e:	f7ff fd2b 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fc82:	4604      	mov	r4, r0
 800fc84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc86:	f7ff fd32 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	9301      	str	r3, [sp, #4]
 800fc8e:	9400      	str	r4, [sp, #0]
 800fc90:	4643      	mov	r3, r8
 800fc92:	4632      	mov	r2, r6
 800fc94:	4629      	mov	r1, r5
 800fc96:	4648      	mov	r0, r9
 800fc98:	f000 f8ba 	bl	800fe10 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 800fc9c:	bf00      	nop
    }
 800fc9e:	3714      	adds	r7, #20
 800fca0:	46bd      	mov	sp, r7
 800fca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fca6 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800fca6:	b480      	push	{r7}
 800fca8:	b083      	sub	sp, #12
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	370c      	adds	r7, #12
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr

0800fcbe <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800fcbe:	b5b0      	push	{r4, r5, r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	60f8      	str	r0, [r7, #12]
 800fcc6:	60b9      	str	r1, [r7, #8]
 800fcc8:	607a      	str	r2, [r7, #4]
 800fcca:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head))
 800fccc:	68fc      	ldr	r4, [r7, #12]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7ff fd02 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	6838      	ldr	r0, [r7, #0]
 800fcd8:	f7ff fd09 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	4629      	mov	r1, r5
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 f8ce 	bl	800fe84 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f103 0408 	add.w	r4, r3, #8
 800fcee:	68b8      	ldr	r0, [r7, #8]
 800fcf0:	f7ff fce7 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f000 f8e1 	bl	800fec0 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
	{ }
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bdb0      	pop	{r4, r5, r7, pc}

0800fd08 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 f8e5 	bl	800fee0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 800fd16:	4603      	mov	r3, r0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr

0800fd36 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b082      	sub	sp, #8
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 f8db 	bl	800fefa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 800fd44:	4603      	mov	r3, r0
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800fd4e:	b480      	push	{r7}
 800fd50:	b083      	sub	sp, #12
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type>(std::__get_helper<__i>(__t));
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 f8cf 	bl	800ff12 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fd74:	4603      	mov	r3, r0
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f8d7 	bl	800ff2a <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fd7c:	4603      	mov	r3, r0
    }
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b082      	sub	sp, #8
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f8d6 	bl	800ff40 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 800fd94:	4603      	mov	r3, r0
 800fd96:	4618      	mov	r0, r3
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b082      	sub	sp, #8
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type>(std::__get_helper<__i>(__t));
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 f8d5 	bl	800ff58 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f000 f8dd 	bl	800ff70 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 800fdb6:	4603      	mov	r3, r0
    }
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f8dc 	bl	800ff86 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type>(std::__get_helper<__i>(__t));
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f000 f8db 	bl	800ff9e <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 800fde8:	4603      	mov	r3, r0
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 f8e3 	bl	800ffb6 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 800fdf0:	4603      	mov	r3, r0
    }
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 800fe10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	7538      	strb	r0, [r7, #20]
 800fe18:	6139      	str	r1, [r7, #16]
 800fe1a:	60fa      	str	r2, [r7, #12]
 800fe1c:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff ff7e 	bl	800fd20 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe24:	4603      	mov	r3, r0
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	693a      	ldr	r2, [r7, #16]
 800fe2a:	6852      	ldr	r2, [r2, #4]
 800fe2c:	f002 0201 	and.w	r2, r2, #1
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	d102      	bne.n	800fe3a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x2a>
 800fe34:	693a      	ldr	r2, [r7, #16]
 800fe36:	6814      	ldr	r4, [r2, #0]
 800fe38:	e008      	b.n	800fe4c <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x3c>
 800fe3a:	693a      	ldr	r2, [r7, #16]
 800fe3c:	6852      	ldr	r2, [r2, #4]
 800fe3e:	1052      	asrs	r2, r2, #1
 800fe40:	441a      	add	r2, r3
 800fe42:	6812      	ldr	r2, [r2, #0]
 800fe44:	6939      	ldr	r1, [r7, #16]
 800fe46:	6809      	ldr	r1, [r1, #0]
 800fe48:	440a      	add	r2, r1
 800fe4a:	6814      	ldr	r4, [r2, #0]
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	6852      	ldr	r2, [r2, #4]
 800fe50:	1052      	asrs	r2, r2, #1
 800fe52:	189d      	adds	r5, r3, r2
 800fe54:	68b8      	ldr	r0, [r7, #8]
 800fe56:	f7ff fc34 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	781e      	ldrb	r6, [r3, #0]
 800fe5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe60:	f7ff fc3a 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800fe64:	4603      	mov	r3, r0
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	607b      	str	r3, [r7, #4]
 800fe6a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fe6c:	f7ff fc3f 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fe70:	4603      	mov	r3, r0
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	4631      	mov	r1, r6
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47a0      	blx	r4
 800fe7c:	bf00      	nop
    }
 800fe7e:	371c      	adds	r7, #28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe84 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800fe84:	b590      	push	{r4, r7, lr}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800fe90:	68fc      	ldr	r4, [r7, #12]
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fc2b 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f000 f895 	bl	800ffcc <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	1d1c      	adds	r4, r3, #4
 800fea6:	68b8      	ldr	r0, [r7, #8]
 800fea8:	f7ff fc16 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800feac:	4603      	mov	r3, r0
 800feae:	4619      	mov	r1, r3
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 f89e 	bl	800fff2 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
	{ }
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	4618      	mov	r0, r3
 800feba:	3714      	adds	r7, #20
 800febc:	46bd      	mov	sp, r7
 800febe:	bd90      	pop	{r4, r7, pc}

0800fec0 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800feca:	6838      	ldr	r0, [r7, #0]
 800fecc:	f7ff fbf9 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800fed0:	4602      	mov	r2, r0
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4618      	mov	r0, r3
 800feec:	f000 f891 	bl	8010012 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 800fef0:	4603      	mov	r3, r0
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 f890 	bl	8010028 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b082      	sub	sp, #8
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f88f 	bl	801003e <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4618      	mov	r0, r3
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f886 	bl	801005a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	4618      	mov	r0, r3
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f885 	bl	8010070 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr

0800ff86 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b082      	sub	sp, #8
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f87c 	bl	801008c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 800ff94:	4603      	mov	r3, r0
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f87b 	bl	80100a2 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 800ffac:	4603      	mov	r3, r0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ffd6:	687c      	ldr	r4, [r7, #4]
 800ffd8:	6838      	ldr	r0, [r7, #0]
 800ffda:	f7ff fb88 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f000 f86a 	bl	80100bc <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
	{ }
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4618      	mov	r0, r3
 800ffec:	370c      	adds	r7, #12
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd90      	pop	{r4, r7, pc}

0800fff2 <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b082      	sub	sp, #8
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800fffc:	6838      	ldr	r0, [r7, #0]
 800fffe:	f7ff fb6b 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8010002:	4602      	mov	r2, r0
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010012:	b480      	push	{r7}
 8010014:	b083      	sub	sp, #12
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4618      	mov	r0, r3
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4618      	mov	r0, r3
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801003e:	b580      	push	{r7, lr}
 8010040:	b082      	sub	sp, #8
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	3308      	adds	r3, #8
 801004a:	4618      	mov	r0, r3
 801004c:	f000 f846 	bl	80100dc <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 8010050:	4603      	mov	r3, r0
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801005a:	b480      	push	{r7}
 801005c:	b083      	sub	sp, #12
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	3304      	adds	r3, #4
 801007c:	4618      	mov	r0, r3
 801007e:	f000 f839 	bl	80100f4 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 8010082:	4603      	mov	r3, r0
 8010084:	4618      	mov	r0, r3
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr

080100a2 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b082      	sub	sp, #8
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 f82d 	bl	801010c <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 80100b2:	4603      	mov	r3, r0
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80100c6:	6838      	ldr	r0, [r7, #0]
 80100c8:	f7ff fb11 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80100cc:	4602      	mov	r2, r0
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2b2a      	cmp	r3, #42	@ 0x2a
 8010134:	d103      	bne.n	801013e <_ZNKSt9type_info4nameEv+0x1a>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	3301      	adds	r3, #1
 801013c:	e001      	b.n	8010142 <_ZNKSt9type_info4nameEv+0x1e>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
	...

08010150 <_ZNKSt9type_info9hash_codeEv>:
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }
#endif

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 8010150:	b590      	push	{r4, r7, lr}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff ffe3 	bl	8010124 <_ZNKSt9type_info4nameEv>
 801015e:	4604      	mov	r4, r0
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff ffdf 	bl	8010124 <_ZNKSt9type_info4nameEv>
 8010166:	4603      	mov	r3, r0
 8010168:	4618      	mov	r0, r3
 801016a:	f7f0 f8b9 	bl	80002e0 <strlen>
 801016e:	4603      	mov	r3, r0
 8010170:	4a04      	ldr	r2, [pc, #16]	@ (8010184 <_ZNKSt9type_info9hash_codeEv+0x34>)
 8010172:	4619      	mov	r1, r3
 8010174:	4620      	mov	r0, r4
 8010176:	f006 fb95 	bl	80168a4 <_ZSt11_Hash_bytesPKvjj>
 801017a:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	bd90      	pop	{r4, r7, pc}
 8010184:	c70f6907 	.word	0xc70f6907

08010188 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	2b00      	cmp	r3, #0
 8010196:	bf0c      	ite	eq
 8010198:	2301      	moveq	r3, #1
 801019a:	2300      	movne	r3, #0
 801019c:	b2db      	uxtb	r3, r3
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
	...

080101ac <_ZN10MessageBus6defineI9IMUPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80101b8:	2326      	movs	r3, #38	@ 0x26
 80101ba:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80101bc:	482c      	ldr	r0, [pc, #176]	@ (8010270 <_ZN10MessageBus6defineI9IMUPacketEEbh+0xc4>)
 80101be:	f7ff ffc7 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80101c2:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80101ca:	78fb      	ldrb	r3, [r7, #3]
 80101cc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80101d0:	6879      	ldr	r1, [r7, #4]
 80101d2:	4613      	mov	r3, r2
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	440b      	add	r3, r1
 80101dc:	330c      	adds	r3, #12
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <_ZN10MessageBus6defineI9IMUPacketEEbh+0x3c>
		return false; // Packet ID already in use
 80101e4:	2300      	movs	r3, #0
 80101e6:	e03e      	b.n	8010266 <_ZN10MessageBus6defineI9IMUPacketEEbh+0xba>
	}

	if(struct_size > max_packet_size) {
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101ee:	d316      	bcc.n	801021e <_ZN10MessageBus6defineI9IMUPacketEEbh+0x72>
		return false; // Packet size too large
 80101f0:	2300      	movs	r3, #0
 80101f2:	e038      	b.n	8010266 <_ZN10MessageBus6defineI9IMUPacketEEbh+0xba>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
		if(definitions_by_type[insertion_point]->hash == hash) {
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	33c0      	adds	r3, #192	@ 0xc0
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	429a      	cmp	r2, r3
 8010206:	d101      	bne.n	801020c <_ZN10MessageBus6defineI9IMUPacketEEbh+0x60>
			return false; // Packet type already defined
 8010208:	2300      	movs	r3, #0
 801020a:	e02c      	b.n	8010266 <_ZN10MessageBus6defineI9IMUPacketEEbh+0xba>
		}

		insertion_point++;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	3301      	adds	r3, #1
 8010210:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010218:	d101      	bne.n	801021e <_ZN10MessageBus6defineI9IMUPacketEEbh+0x72>
			insertion_point = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	33c0      	adds	r3, #192	@ 0xc0
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4413      	add	r3, r2
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e2      	bne.n	80101f4 <_ZN10MessageBus6defineI9IMUPacketEEbh+0x48>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801022e:	78fb      	ldrb	r3, [r7, #3]
 8010230:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010234:	4613      	mov	r3, r2
 8010236:	005b      	lsls	r3, r3, #1
 8010238:	4413      	add	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	4413      	add	r3, r2
 8010240:	3304      	adds	r3, #4
 8010242:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	78fa      	ldrb	r2, [r7, #3]
 8010248:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	609a      	str	r2, [r3, #8]

	definitions_by_type[insertion_point] = def;
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	33c0      	adds	r3, #192	@ 0xc0
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4413      	add	r3, r2
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	605a      	str	r2, [r3, #4]

	return true;
 8010264:	2301      	movs	r3, #1
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	0801a020 	.word	0x0801a020

08010274 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010274:	b580      	push	{r7, lr}
 8010276:	b086      	sub	sp, #24
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	460b      	mov	r3, r1
 801027e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010280:	230a      	movs	r3, #10
 8010282:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010284:	482c      	ldr	r0, [pc, #176]	@ (8010338 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0xc4>)
 8010286:	f7ff ff63 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 801028a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010292:	78fb      	ldrb	r3, [r7, #3]
 8010294:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	4613      	mov	r3, r2
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4413      	add	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	440b      	add	r3, r1
 80102a4:	330c      	adds	r3, #12
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d001      	beq.n	80102b0 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0x3c>
		return false; // Packet ID already in use
 80102ac:	2300      	movs	r3, #0
 80102ae:	e03e      	b.n	801032e <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102b6:	d316      	bcc.n	80102e6 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0x72>
		return false; // Packet size too large
 80102b8:	2300      	movs	r3, #0
 80102ba:	e038      	b.n	801032e <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	33c0      	adds	r3, #192	@ 0xc0
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d101      	bne.n	80102d4 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0x60>
			return false; // Packet type already defined
 80102d0:	2300      	movs	r3, #0
 80102d2:	e02c      	b.n	801032e <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0xba>
		insertion_point++;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	3301      	adds	r3, #1
 80102d8:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102e0:	d101      	bne.n	80102e6 <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0x72>
			insertion_point = 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	33c0      	adds	r3, #192	@ 0xc0
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1e2      	bne.n	80102bc <_ZN10MessageBus6defineI18gimbalJointsPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80102f6:	78fb      	ldrb	r3, [r7, #3]
 80102f8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80102fc:	4613      	mov	r3, r2
 80102fe:	005b      	lsls	r3, r3, #1
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	4413      	add	r3, r2
 8010308:	3304      	adds	r3, #4
 801030a:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	78fa      	ldrb	r2, [r7, #3]
 8010310:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	693a      	ldr	r2, [r7, #16]
 8010316:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	33c0      	adds	r3, #192	@ 0xc0
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4413      	add	r3, r2
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	605a      	str	r2, [r3, #4]
	return true;
 801032c:	2301      	movs	r3, #1
}
 801032e:	4618      	mov	r0, r3
 8010330:	3718      	adds	r7, #24
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	0801a000 	.word	0x0801a000

0801033c <_ZN10MessageBus6defineI19chassisJointsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010348:	2312      	movs	r3, #18
 801034a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801034c:	482c      	ldr	r0, [pc, #176]	@ (8010400 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0xc4>)
 801034e:	f7ff feff 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010352:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	b2db      	uxtb	r3, r3
 8010358:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801035a:	78fb      	ldrb	r3, [r7, #3]
 801035c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010360:	6879      	ldr	r1, [r7, #4]
 8010362:	4613      	mov	r3, r2
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	440b      	add	r3, r1
 801036c:	330c      	adds	r3, #12
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010374:	2300      	movs	r3, #0
 8010376:	e03e      	b.n	80103f6 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801037e:	d316      	bcc.n	80103ae <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0x72>
		return false; // Packet size too large
 8010380:	2300      	movs	r3, #0
 8010382:	e038      	b.n	80103f6 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	33c0      	adds	r3, #192	@ 0xc0
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	4413      	add	r3, r2
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	68fa      	ldr	r2, [r7, #12]
 8010394:	429a      	cmp	r2, r3
 8010396:	d101      	bne.n	801039c <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0x60>
			return false; // Packet type already defined
 8010398:	2300      	movs	r3, #0
 801039a:	e02c      	b.n	80103f6 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0xba>
		insertion_point++;
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	3301      	adds	r3, #1
 80103a0:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103a8:	d101      	bne.n	80103ae <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0x72>
			insertion_point = 0;
 80103aa:	2300      	movs	r3, #0
 80103ac:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	33c0      	adds	r3, #192	@ 0xc0
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	4413      	add	r3, r2
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1e2      	bne.n	8010384 <_ZN10MessageBus6defineI19chassisJointsPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80103be:	78fb      	ldrb	r3, [r7, #3]
 80103c0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80103c4:	4613      	mov	r3, r2
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	4413      	add	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	4413      	add	r3, r2
 80103d0:	3304      	adds	r3, #4
 80103d2:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	78fa      	ldrb	r2, [r7, #3]
 80103d8:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	33c0      	adds	r3, #192	@ 0xc0
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	4413      	add	r3, r2
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	605a      	str	r2, [r3, #4]
	return true;
 80103f4:	2301      	movs	r3, #1
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3718      	adds	r7, #24
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	08019fe0 	.word	0x08019fe0

08010404 <_ZN10MessageBus6defineI11dummyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010404:	b580      	push	{r7, lr}
 8010406:	b086      	sub	sp, #24
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010410:	2310      	movs	r3, #16
 8010412:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010414:	482c      	ldr	r0, [pc, #176]	@ (80104c8 <_ZN10MessageBus6defineI11dummyPacketEEbh+0xc4>)
 8010416:	f7ff fe9b 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 801041a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	b2db      	uxtb	r3, r3
 8010420:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	4613      	mov	r3, r2
 801042c:	005b      	lsls	r3, r3, #1
 801042e:	4413      	add	r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	440b      	add	r3, r1
 8010434:	330c      	adds	r3, #12
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <_ZN10MessageBus6defineI11dummyPacketEEbh+0x3c>
		return false; // Packet ID already in use
 801043c:	2300      	movs	r3, #0
 801043e:	e03e      	b.n	80104be <_ZN10MessageBus6defineI11dummyPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010446:	d316      	bcc.n	8010476 <_ZN10MessageBus6defineI11dummyPacketEEbh+0x72>
		return false; // Packet size too large
 8010448:	2300      	movs	r3, #0
 801044a:	e038      	b.n	80104be <_ZN10MessageBus6defineI11dummyPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	33c0      	adds	r3, #192	@ 0xc0
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	4413      	add	r3, r2
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	429a      	cmp	r2, r3
 801045e:	d101      	bne.n	8010464 <_ZN10MessageBus6defineI11dummyPacketEEbh+0x60>
			return false; // Packet type already defined
 8010460:	2300      	movs	r3, #0
 8010462:	e02c      	b.n	80104be <_ZN10MessageBus6defineI11dummyPacketEEbh+0xba>
		insertion_point++;
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	3301      	adds	r3, #1
 8010468:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010470:	d101      	bne.n	8010476 <_ZN10MessageBus6defineI11dummyPacketEEbh+0x72>
			insertion_point = 0;
 8010472:	2300      	movs	r3, #0
 8010474:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	33c0      	adds	r3, #192	@ 0xc0
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4413      	add	r3, r2
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1e2      	bne.n	801044c <_ZN10MessageBus6defineI11dummyPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010486:	78fb      	ldrb	r3, [r7, #3]
 8010488:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801048c:	4613      	mov	r3, r2
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	4413      	add	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	4413      	add	r3, r2
 8010498:	3304      	adds	r3, #4
 801049a:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	78fa      	ldrb	r2, [r7, #3]
 80104a0:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	33c0      	adds	r3, #192	@ 0xc0
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4413      	add	r3, r2
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	605a      	str	r2, [r3, #4]
	return true;
 80104bc:	2301      	movs	r3, #1
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	08019fc8 	.word	0x08019fc8

080104cc <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE>:
 *
 * Accepts a function reference as message handler.
 *
 * Warning: this method is not thread-safe.
 */
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b08c      	sub	sp, #48	@ 0x30
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 80104d6:	482d      	ldr	r0, [pc, #180]	@ (801058c <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE+0xc0>)
 80104d8:	f7ff fe3a 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80104dc:	62f8      	str	r0, [r7, #44]	@ 0x2c

	PacketDefinition* def = retrieve(hash);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3314      	adds	r3, #20
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	4798      	blx	r3
 80104ec:	62b8      	str	r0, [r7, #40]	@ 0x28

	if(def != nullptr) {
 80104ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d046      	beq.n	8010582 <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE+0xb6>
		uint8_t packetID = def->id;
 80104f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if(handlers[packetID] != nullptr) {
 80104fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010500:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8010504:	011b      	lsls	r3, r3, #4
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	4413      	add	r3, r2
 801050a:	3304      	adds	r3, #4
 801050c:	2100      	movs	r1, #0
 801050e:	4618      	mov	r0, r3
 8010510:	f001 f8a4 	bl	801165c <_ZSteqIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
 8010514:	4603      	mov	r3, r0
 8010516:	f083 0301 	eor.w	r3, r3, #1
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b00      	cmp	r3, #0
 801051e:	d015      	beq.n	801054c <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE+0x80>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	60bb      	str	r3, [r7, #8]
 8010524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010528:	733b      	strb	r3, [r7, #12]
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	613b      	str	r3, [r7, #16]
 801052e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010532:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8010536:	011b      	lsls	r3, r3, #4
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	4413      	add	r3, r2
 801053c:	3304      	adds	r3, #4
 801053e:	f107 0208 	add.w	r2, r7, #8
 8010542:	4611      	mov	r1, r2
 8010544:	4618      	mov	r0, r3
 8010546:	f001 f8bf 	bl	80116c8 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>
 801054a:	e018      	b.n	801057e <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE+0xb2>
				handlers[packetID](sender, (T*) packet);
				handler(sender, (T*) packet);
			};
		} else {
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 801054c:	f107 0314 	add.w	r3, r7, #20
 8010550:	6839      	ldr	r1, [r7, #0]
 8010552:	4618      	mov	r0, r3
 8010554:	f001 f8d7 	bl	8011706 <_ZNSt8functionIFvhP11dummyPacketEEC1ERKS3_>
 8010558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801055c:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	4413      	add	r3, r2
 8010566:	3304      	adds	r3, #4
 8010568:	f107 0214 	add.w	r2, r7, #20
 801056c:	4611      	mov	r1, r2
 801056e:	4618      	mov	r0, r3
 8010570:	f001 f8f4 	bl	801175c <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>
 8010574:	f107 0314 	add.w	r3, r7, #20
 8010578:	4618      	mov	r0, r3
 801057a:	f000 ffe1 	bl	8011540 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
		}

		return true;
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE+0xb8>
	}

	return false;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3730      	adds	r7, #48	@ 0x30
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	08019fc8 	.word	0x08019fc8

08010590 <_ZN10MessageBus4sendI11dummyPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 801059a:	480c      	ldr	r0, [pc, #48]	@ (80105cc <_ZN10MessageBus4sendI11dummyPacketEEbPT_+0x3c>)
 801059c:	f7ff fdd8 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80105a0:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	3314      	adds	r3, #20
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	68f9      	ldr	r1, [r7, #12]
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	4798      	blx	r3
 80105b0:	60b8      	str	r0, [r7, #8]

	return internal_send(def, (uint8_t*) message);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	3310      	adds	r3, #16
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	68b9      	ldr	r1, [r7, #8]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	4798      	blx	r3
 80105c2:	4603      	mov	r3, r0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	08019fc8 	.word	0x08019fc8

080105d0 <_ZN10MessageBus6defineI9imuPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80105dc:	230a      	movs	r3, #10
 80105de:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80105e0:	482c      	ldr	r0, [pc, #176]	@ (8010694 <_ZN10MessageBus6defineI9imuPacketEEbh+0xc4>)
 80105e2:	f7ff fdb5 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80105e6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80105ee:	78fb      	ldrb	r3, [r7, #3]
 80105f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	4613      	mov	r3, r2
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	4413      	add	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	330c      	adds	r3, #12
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <_ZN10MessageBus6defineI9imuPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010608:	2300      	movs	r3, #0
 801060a:	e03e      	b.n	801068a <_ZN10MessageBus6defineI9imuPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010612:	d316      	bcc.n	8010642 <_ZN10MessageBus6defineI9imuPacketEEbh+0x72>
		return false; // Packet size too large
 8010614:	2300      	movs	r3, #0
 8010616:	e038      	b.n	801068a <_ZN10MessageBus6defineI9imuPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	33c0      	adds	r3, #192	@ 0xc0
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	4413      	add	r3, r2
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	689b      	ldr	r3, [r3, #8]
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	429a      	cmp	r2, r3
 801062a:	d101      	bne.n	8010630 <_ZN10MessageBus6defineI9imuPacketEEbh+0x60>
			return false; // Packet type already defined
 801062c:	2300      	movs	r3, #0
 801062e:	e02c      	b.n	801068a <_ZN10MessageBus6defineI9imuPacketEEbh+0xba>
		insertion_point++;
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	3301      	adds	r3, #1
 8010634:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801063c:	d101      	bne.n	8010642 <_ZN10MessageBus6defineI9imuPacketEEbh+0x72>
			insertion_point = 0;
 801063e:	2300      	movs	r3, #0
 8010640:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	33c0      	adds	r3, #192	@ 0xc0
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	4413      	add	r3, r2
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1e2      	bne.n	8010618 <_ZN10MessageBus6defineI9imuPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010652:	78fb      	ldrb	r3, [r7, #3]
 8010654:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010658:	4613      	mov	r3, r2
 801065a:	005b      	lsls	r3, r3, #1
 801065c:	4413      	add	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	4413      	add	r3, r2
 8010664:	3304      	adds	r3, #4
 8010666:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	78fa      	ldrb	r2, [r7, #3]
 801066c:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	68fa      	ldr	r2, [r7, #12]
 8010678:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	33c0      	adds	r3, #192	@ 0xc0
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	4413      	add	r3, r2
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	605a      	str	r2, [r3, #4]
	return true;
 8010688:	2301      	movs	r3, #1
}
 801068a:	4618      	mov	r0, r3
 801068c:	3718      	adds	r7, #24
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	08019fb4 	.word	0x08019fb4

08010698 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80106a4:	230e      	movs	r3, #14
 80106a6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80106a8:	482c      	ldr	r0, [pc, #176]	@ (801075c <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0xc4>)
 80106aa:	f7ff fd51 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80106ae:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80106b6:	78fb      	ldrb	r3, [r7, #3]
 80106b8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80106bc:	6879      	ldr	r1, [r7, #4]
 80106be:	4613      	mov	r3, r2
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	4413      	add	r3, r2
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	440b      	add	r3, r1
 80106c8:	330c      	adds	r3, #12
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0x3c>
		return false; // Packet ID already in use
 80106d0:	2300      	movs	r3, #0
 80106d2:	e03e      	b.n	8010752 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80106da:	d316      	bcc.n	801070a <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0x72>
		return false; // Packet size too large
 80106dc:	2300      	movs	r3, #0
 80106de:	e038      	b.n	8010752 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	33c0      	adds	r3, #192	@ 0xc0
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	4413      	add	r3, r2
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d101      	bne.n	80106f8 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0x60>
			return false; // Packet type already defined
 80106f4:	2300      	movs	r3, #0
 80106f6:	e02c      	b.n	8010752 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0xba>
		insertion_point++;
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	3301      	adds	r3, #1
 80106fc:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010704:	d101      	bne.n	801070a <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0x72>
			insertion_point = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	33c0      	adds	r3, #192	@ 0xc0
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	4413      	add	r3, r2
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e2      	bne.n	80106e0 <_ZN10MessageBus6defineI25chassisSpeedCommandPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801071a:	78fb      	ldrb	r3, [r7, #3]
 801071c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010720:	4613      	mov	r3, r2
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	4413      	add	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	4413      	add	r3, r2
 801072c:	3304      	adds	r3, #4
 801072e:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	78fa      	ldrb	r2, [r7, #3]
 8010734:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	33c0      	adds	r3, #192	@ 0xc0
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	4413      	add	r3, r2
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	605a      	str	r2, [r3, #4]
	return true;
 8010750:	2301      	movs	r3, #1
}
 8010752:	4618      	mov	r0, r3
 8010754:	3718      	adds	r7, #24
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	08019f90 	.word	0x08019f90

08010760 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010760:	b580      	push	{r7, lr}
 8010762:	b086      	sub	sp, #24
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801076c:	230a      	movs	r3, #10
 801076e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010770:	482c      	ldr	r0, [pc, #176]	@ (8010824 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0xc4>)
 8010772:	f7ff fced 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010776:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	b2db      	uxtb	r3, r3
 801077c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801077e:	78fb      	ldrb	r3, [r7, #3]
 8010780:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010784:	6879      	ldr	r1, [r7, #4]
 8010786:	4613      	mov	r3, r2
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	4413      	add	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	440b      	add	r3, r1
 8010790:	330c      	adds	r3, #12
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d001      	beq.n	801079c <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010798:	2300      	movs	r3, #0
 801079a:	e03e      	b.n	801081a <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107a2:	d316      	bcc.n	80107d2 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0x72>
		return false; // Packet size too large
 80107a4:	2300      	movs	r3, #0
 80107a6:	e038      	b.n	801081a <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	33c0      	adds	r3, #192	@ 0xc0
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	4413      	add	r3, r2
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d101      	bne.n	80107c0 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0x60>
			return false; // Packet type already defined
 80107bc:	2300      	movs	r3, #0
 80107be:	e02c      	b.n	801081a <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0xba>
		insertion_point++;
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	3301      	adds	r3, #1
 80107c4:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107cc:	d101      	bne.n	80107d2 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0x72>
			insertion_point = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	33c0      	adds	r3, #192	@ 0xc0
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1e2      	bne.n	80107a8 <_ZN10MessageBus6defineI24gimbalAngleCommandPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80107e2:	78fb      	ldrb	r3, [r7, #3]
 80107e4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80107e8:	4613      	mov	r3, r2
 80107ea:	005b      	lsls	r3, r3, #1
 80107ec:	4413      	add	r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	4413      	add	r3, r2
 80107f4:	3304      	adds	r3, #4
 80107f6:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	78fa      	ldrb	r2, [r7, #3]
 80107fc:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	693a      	ldr	r2, [r7, #16]
 8010802:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	33c0      	adds	r3, #192	@ 0xc0
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	68ba      	ldr	r2, [r7, #8]
 8010816:	605a      	str	r2, [r3, #4]
	return true;
 8010818:	2301      	movs	r3, #1
}
 801081a:	4618      	mov	r0, r3
 801081c:	3718      	adds	r7, #24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	08019f6c 	.word	0x08019f6c

08010828 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	460b      	mov	r3, r1
 8010832:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010834:	2303      	movs	r3, #3
 8010836:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010838:	482c      	ldr	r0, [pc, #176]	@ (80108ec <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0xc4>)
 801083a:	f7ff fc89 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 801083e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010846:	78fb      	ldrb	r3, [r7, #3]
 8010848:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801084c:	6879      	ldr	r1, [r7, #4]
 801084e:	4613      	mov	r3, r2
 8010850:	005b      	lsls	r3, r3, #1
 8010852:	4413      	add	r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	440b      	add	r3, r1
 8010858:	330c      	adds	r3, #12
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010860:	2300      	movs	r3, #0
 8010862:	e03e      	b.n	80108e2 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801086a:	d316      	bcc.n	801089a <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0x72>
		return false; // Packet size too large
 801086c:	2300      	movs	r3, #0
 801086e:	e038      	b.n	80108e2 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	33c0      	adds	r3, #192	@ 0xc0
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	4413      	add	r3, r2
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	689b      	ldr	r3, [r3, #8]
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	429a      	cmp	r2, r3
 8010882:	d101      	bne.n	8010888 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0x60>
			return false; // Packet type already defined
 8010884:	2300      	movs	r3, #0
 8010886:	e02c      	b.n	80108e2 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0xba>
		insertion_point++;
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	3301      	adds	r3, #1
 801088c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010894:	d101      	bne.n	801089a <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0x72>
			insertion_point = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	33c0      	adds	r3, #192	@ 0xc0
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	4413      	add	r3, r2
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1e2      	bne.n	8010870 <_ZN10MessageBus6defineI25LeftTriggerPositionPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80108aa:	78fb      	ldrb	r3, [r7, #3]
 80108ac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80108b0:	4613      	mov	r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	4413      	add	r3, r2
 80108bc:	3304      	adds	r3, #4
 80108be:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	78fa      	ldrb	r2, [r7, #3]
 80108c4:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	693a      	ldr	r2, [r7, #16]
 80108ca:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	33c0      	adds	r3, #192	@ 0xc0
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	4413      	add	r3, r2
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	605a      	str	r2, [r3, #4]
	return true;
 80108e0:	2301      	movs	r3, #1
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3718      	adds	r7, #24
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	08019f48 	.word	0x08019f48

080108f0 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b086      	sub	sp, #24
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	460b      	mov	r3, r1
 80108fa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80108fc:	2303      	movs	r3, #3
 80108fe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010900:	482c      	ldr	r0, [pc, #176]	@ (80109b4 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0xc4>)
 8010902:	f7ff fc25 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010906:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	b2db      	uxtb	r3, r3
 801090c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801090e:	78fb      	ldrb	r3, [r7, #3]
 8010910:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	4613      	mov	r3, r2
 8010918:	005b      	lsls	r3, r3, #1
 801091a:	4413      	add	r3, r2
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	440b      	add	r3, r1
 8010920:	330c      	adds	r3, #12
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d001      	beq.n	801092c <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010928:	2300      	movs	r3, #0
 801092a:	e03e      	b.n	80109aa <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010932:	d316      	bcc.n	8010962 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0x72>
		return false; // Packet size too large
 8010934:	2300      	movs	r3, #0
 8010936:	e038      	b.n	80109aa <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	33c0      	adds	r3, #192	@ 0xc0
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	689b      	ldr	r3, [r3, #8]
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	429a      	cmp	r2, r3
 801094a:	d101      	bne.n	8010950 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0x60>
			return false; // Packet type already defined
 801094c:	2300      	movs	r3, #0
 801094e:	e02c      	b.n	80109aa <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0xba>
		insertion_point++;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	3301      	adds	r3, #1
 8010954:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801095c:	d101      	bne.n	8010962 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0x72>
			insertion_point = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	33c0      	adds	r3, #192	@ 0xc0
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	4413      	add	r3, r2
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1e2      	bne.n	8010938 <_ZN10MessageBus6defineI26RightTriggerPositionPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010972:	78fb      	ldrb	r3, [r7, #3]
 8010974:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010978:	4613      	mov	r3, r2
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4413      	add	r3, r2
 8010984:	3304      	adds	r3, #4
 8010986:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	78fa      	ldrb	r2, [r7, #3]
 801098c:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	33c0      	adds	r3, #192	@ 0xc0
 80109a0:	009b      	lsls	r3, r3, #2
 80109a2:	4413      	add	r3, r2
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	605a      	str	r2, [r3, #4]
	return true;
 80109a8:	2301      	movs	r3, #1
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	08019f20 	.word	0x08019f20

080109b8 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	460b      	mov	r3, r1
 80109c2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80109c4:	2303      	movs	r3, #3
 80109c6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80109c8:	482c      	ldr	r0, [pc, #176]	@ (8010a7c <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0xc4>)
 80109ca:	f7ff fbc1 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 80109ce:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80109d6:	78fb      	ldrb	r3, [r7, #3]
 80109d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80109dc:	6879      	ldr	r1, [r7, #4]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	440b      	add	r3, r1
 80109e8:	330c      	adds	r3, #12
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0x3c>
		return false; // Packet ID already in use
 80109f0:	2300      	movs	r3, #0
 80109f2:	e03e      	b.n	8010a72 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80109fa:	d316      	bcc.n	8010a2a <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0x72>
		return false; // Packet size too large
 80109fc:	2300      	movs	r3, #0
 80109fe:	e038      	b.n	8010a72 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	33c0      	adds	r3, #192	@ 0xc0
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	4413      	add	r3, r2
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d101      	bne.n	8010a18 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0x60>
			return false; // Packet type already defined
 8010a14:	2300      	movs	r3, #0
 8010a16:	e02c      	b.n	8010a72 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0xba>
		insertion_point++;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a24:	d101      	bne.n	8010a2a <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0x72>
			insertion_point = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	33c0      	adds	r3, #192	@ 0xc0
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4413      	add	r3, r2
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e2      	bne.n	8010a00 <_ZN10MessageBus6defineI24ChassisSpinCommandPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010a3a:	78fb      	ldrb	r3, [r7, #3]
 8010a3c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	78fa      	ldrb	r2, [r7, #3]
 8010a54:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	693a      	ldr	r2, [r7, #16]
 8010a5a:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	33c0      	adds	r3, #192	@ 0xc0
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	605a      	str	r2, [r3, #4]
	return true;
 8010a70:	2301      	movs	r3, #1
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3718      	adds	r7, #24
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08019efc 	.word	0x08019efc

08010a80 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010a8c:	2306      	movs	r3, #6
 8010a8e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010a90:	482c      	ldr	r0, [pc, #176]	@ (8010b44 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0xc4>)
 8010a92:	f7ff fb5d 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010a96:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010a9e:	78fb      	ldrb	r3, [r7, #3]
 8010aa0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010aa4:	6879      	ldr	r1, [r7, #4]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	4413      	add	r3, r2
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	440b      	add	r3, r1
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e03e      	b.n	8010b3a <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ac2:	d316      	bcc.n	8010af2 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0x72>
		return false; // Packet size too large
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	e038      	b.n	8010b3a <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	33c0      	adds	r3, #192	@ 0xc0
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	4413      	add	r3, r2
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d101      	bne.n	8010ae0 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0x60>
			return false; // Packet type already defined
 8010adc:	2300      	movs	r3, #0
 8010ade:	e02c      	b.n	8010b3a <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0xba>
		insertion_point++;
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010aec:	d101      	bne.n	8010af2 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0x72>
			insertion_point = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	33c0      	adds	r3, #192	@ 0xc0
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1e2      	bne.n	8010ac8 <_ZN10MessageBus6defineI27gimbalAngleYawCommandPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010b02:	78fb      	ldrb	r3, [r7, #3]
 8010b04:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	4413      	add	r3, r2
 8010b14:	3304      	adds	r3, #4
 8010b16:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	78fa      	ldrb	r2, [r7, #3]
 8010b1c:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	693a      	ldr	r2, [r7, #16]
 8010b22:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	33c0      	adds	r3, #192	@ 0xc0
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	4413      	add	r3, r2
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	605a      	str	r2, [r3, #4]
	return true;
 8010b38:	2301      	movs	r3, #1
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3718      	adds	r7, #24
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	08019ed4 	.word	0x08019ed4

08010b48 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010b54:	230a      	movs	r3, #10
 8010b56:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010b58:	482c      	ldr	r0, [pc, #176]	@ (8010c0c <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0xc4>)
 8010b5a:	f7ff faf9 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010b5e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010b6c:	6879      	ldr	r1, [r7, #4]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	005b      	lsls	r3, r3, #1
 8010b72:	4413      	add	r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	440b      	add	r3, r1
 8010b78:	330c      	adds	r3, #12
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d001      	beq.n	8010b84 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010b80:	2300      	movs	r3, #0
 8010b82:	e03e      	b.n	8010c02 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b8a:	d316      	bcc.n	8010bba <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0x72>
		return false; // Packet size too large
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	e038      	b.n	8010c02 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	33c0      	adds	r3, #192	@ 0xc0
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	4413      	add	r3, r2
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d101      	bne.n	8010ba8 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0x60>
			return false; // Packet type already defined
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e02c      	b.n	8010c02 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0xba>
		insertion_point++;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	3301      	adds	r3, #1
 8010bac:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bb4:	d101      	bne.n	8010bba <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0x72>
			insertion_point = 0;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	33c0      	adds	r3, #192	@ 0xc0
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1e2      	bne.n	8010b90 <_ZN10MessageBus6defineI29gimbalAnglePitchCommandPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010bca:	78fb      	ldrb	r3, [r7, #3]
 8010bcc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010bd0:	4613      	mov	r3, r2
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	4413      	add	r3, r2
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	4413      	add	r3, r2
 8010bdc:	3304      	adds	r3, #4
 8010bde:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	78fa      	ldrb	r2, [r7, #3]
 8010be4:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	693a      	ldr	r2, [r7, #16]
 8010bea:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	33c0      	adds	r3, #192	@ 0xc0
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	4413      	add	r3, r2
 8010bfc:	68ba      	ldr	r2, [r7, #8]
 8010bfe:	605a      	str	r2, [r3, #4]
	return true;
 8010c00:	2301      	movs	r3, #1
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3718      	adds	r7, #24
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	08019eac 	.word	0x08019eac

08010c10 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b086      	sub	sp, #24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010c1c:	2303      	movs	r3, #3
 8010c1e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010c20:	482c      	ldr	r0, [pc, #176]	@ (8010cd4 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0xc4>)
 8010c22:	f7ff fa95 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010c26:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010c2e:	78fb      	ldrb	r3, [r7, #3]
 8010c30:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	4613      	mov	r3, r2
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	4413      	add	r3, r2
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	440b      	add	r3, r1
 8010c40:	330c      	adds	r3, #12
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010c48:	2300      	movs	r3, #0
 8010c4a:	e03e      	b.n	8010cca <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c52:	d316      	bcc.n	8010c82 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0x72>
		return false; // Packet size too large
 8010c54:	2300      	movs	r3, #0
 8010c56:	e038      	b.n	8010cca <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	33c0      	adds	r3, #192	@ 0xc0
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4413      	add	r3, r2
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d101      	bne.n	8010c70 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0x60>
			return false; // Packet type already defined
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	e02c      	b.n	8010cca <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0xba>
		insertion_point++;
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	3301      	adds	r3, #1
 8010c74:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c7c:	d101      	bne.n	8010c82 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0x72>
			insertion_point = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	33c0      	adds	r3, #192	@ 0xc0
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1e2      	bne.n	8010c58 <_ZN10MessageBus6defineI17FrontFiringPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010c92:	78fb      	ldrb	r3, [r7, #3]
 8010c94:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010c98:	4613      	mov	r3, r2
 8010c9a:	005b      	lsls	r3, r3, #1
 8010c9c:	4413      	add	r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	78fa      	ldrb	r2, [r7, #3]
 8010cac:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	693a      	ldr	r2, [r7, #16]
 8010cb2:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	33c0      	adds	r3, #192	@ 0xc0
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	68ba      	ldr	r2, [r7, #8]
 8010cc6:	605a      	str	r2, [r3, #4]
	return true;
 8010cc8:	2301      	movs	r3, #1
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3718      	adds	r7, #24
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	08019e90 	.word	0x08019e90

08010cd8 <_ZN10MessageBus6defineI16BackFiringPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010ce8:	482c      	ldr	r0, [pc, #176]	@ (8010d9c <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0xc4>)
 8010cea:	f7ff fa31 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010cee:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010cf6:	78fb      	ldrb	r3, [r7, #3]
 8010cf8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4413      	add	r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	440b      	add	r3, r1
 8010d08:	330c      	adds	r3, #12
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010d10:	2300      	movs	r3, #0
 8010d12:	e03e      	b.n	8010d92 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010d1a:	d316      	bcc.n	8010d4a <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0x72>
		return false; // Packet size too large
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e038      	b.n	8010d92 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	33c0      	adds	r3, #192	@ 0xc0
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d101      	bne.n	8010d38 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0x60>
			return false; // Packet type already defined
 8010d34:	2300      	movs	r3, #0
 8010d36:	e02c      	b.n	8010d92 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0xba>
		insertion_point++;
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d44:	d101      	bne.n	8010d4a <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0x72>
			insertion_point = 0;
 8010d46:	2300      	movs	r3, #0
 8010d48:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	33c0      	adds	r3, #192	@ 0xc0
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1e2      	bne.n	8010d20 <_ZN10MessageBus6defineI16BackFiringPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010d5a:	78fb      	ldrb	r3, [r7, #3]
 8010d5c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010d60:	4613      	mov	r3, r2
 8010d62:	005b      	lsls	r3, r3, #1
 8010d64:	4413      	add	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	3304      	adds	r3, #4
 8010d6e:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	78fa      	ldrb	r2, [r7, #3]
 8010d74:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	33c0      	adds	r3, #192	@ 0xc0
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	68ba      	ldr	r2, [r7, #8]
 8010d8e:	605a      	str	r2, [r3, #4]
	return true;
 8010d90:	2301      	movs	r3, #1
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08019e74 	.word	0x08019e74

08010da0 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010dac:	230e      	movs	r3, #14
 8010dae:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010db0:	482c      	ldr	r0, [pc, #176]	@ (8010e64 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0xc4>)
 8010db2:	f7ff f9cd 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010db6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010dbe:	78fb      	ldrb	r3, [r7, #3]
 8010dc0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010dc4:	6879      	ldr	r1, [r7, #4]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	4413      	add	r3, r2
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	440b      	add	r3, r1
 8010dd0:	330c      	adds	r3, #12
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010dd8:	2300      	movs	r3, #0
 8010dda:	e03e      	b.n	8010e5a <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010de2:	d316      	bcc.n	8010e12 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0x72>
		return false; // Packet size too large
 8010de4:	2300      	movs	r3, #0
 8010de6:	e038      	b.n	8010e5a <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	33c0      	adds	r3, #192	@ 0xc0
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	4413      	add	r3, r2
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d101      	bne.n	8010e00 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0x60>
			return false; // Packet type already defined
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	e02c      	b.n	8010e5a <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0xba>
		insertion_point++;
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	3301      	adds	r3, #1
 8010e04:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e0c:	d101      	bne.n	8010e12 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0x72>
			insertion_point = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	33c0      	adds	r3, #192	@ 0xc0
 8010e18:	009b      	lsls	r3, r3, #2
 8010e1a:	4413      	add	r3, r2
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1e2      	bne.n	8010de8 <_ZN10MessageBus6defineI17RobotStatusPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010e22:	78fb      	ldrb	r3, [r7, #3]
 8010e24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010e28:	4613      	mov	r3, r2
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	4413      	add	r3, r2
 8010e2e:	009b      	lsls	r3, r3, #2
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	4413      	add	r3, r2
 8010e34:	3304      	adds	r3, #4
 8010e36:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	78fa      	ldrb	r2, [r7, #3]
 8010e3c:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	693a      	ldr	r2, [r7, #16]
 8010e42:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	33c0      	adds	r3, #192	@ 0xc0
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	4413      	add	r3, r2
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	605a      	str	r2, [r3, #4]
	return true;
 8010e58:	2301      	movs	r3, #1
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3718      	adds	r7, #24
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	08019e58 	.word	0x08019e58

08010e68 <_ZN10MessageBus6defineI14SideDialPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010e74:	2303      	movs	r3, #3
 8010e76:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010e78:	482c      	ldr	r0, [pc, #176]	@ (8010f2c <_ZN10MessageBus6defineI14SideDialPacketEEbh+0xc4>)
 8010e7a:	f7ff f969 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010e7e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010e86:	78fb      	ldrb	r3, [r7, #3]
 8010e88:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010e8c:	6879      	ldr	r1, [r7, #4]
 8010e8e:	4613      	mov	r3, r2
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	4413      	add	r3, r2
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	440b      	add	r3, r1
 8010e98:	330c      	adds	r3, #12
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d001      	beq.n	8010ea4 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	e03e      	b.n	8010f22 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010eaa:	d316      	bcc.n	8010eda <_ZN10MessageBus6defineI14SideDialPacketEEbh+0x72>
		return false; // Packet size too large
 8010eac:	2300      	movs	r3, #0
 8010eae:	e038      	b.n	8010f22 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	33c0      	adds	r3, #192	@ 0xc0
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4413      	add	r3, r2
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d101      	bne.n	8010ec8 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0x60>
			return false; // Packet type already defined
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	e02c      	b.n	8010f22 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0xba>
		insertion_point++;
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ed4:	d101      	bne.n	8010eda <_ZN10MessageBus6defineI14SideDialPacketEEbh+0x72>
			insertion_point = 0;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	33c0      	adds	r3, #192	@ 0xc0
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	4413      	add	r3, r2
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d1e2      	bne.n	8010eb0 <_ZN10MessageBus6defineI14SideDialPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010eea:	78fb      	ldrb	r3, [r7, #3]
 8010eec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	005b      	lsls	r3, r3, #1
 8010ef4:	4413      	add	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	4413      	add	r3, r2
 8010efc:	3304      	adds	r3, #4
 8010efe:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	78fa      	ldrb	r2, [r7, #3]
 8010f04:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	693a      	ldr	r2, [r7, #16]
 8010f0a:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	33c0      	adds	r3, #192	@ 0xc0
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	4413      	add	r3, r2
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	605a      	str	r2, [r3, #4]
	return true;
 8010f20:	2301      	movs	r3, #1
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3718      	adds	r7, #24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	08019e3c 	.word	0x08019e3c

08010f30 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8010f3c:	230d      	movs	r3, #13
 8010f3e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8010f40:	482c      	ldr	r0, [pc, #176]	@ (8010ff4 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0xc4>)
 8010f42:	f7ff f905 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8010f46:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8010f4e:	78fb      	ldrb	r3, [r7, #3]
 8010f50:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010f54:	6879      	ldr	r1, [r7, #4]
 8010f56:	4613      	mov	r3, r2
 8010f58:	005b      	lsls	r3, r3, #1
 8010f5a:	4413      	add	r3, r2
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	440b      	add	r3, r1
 8010f60:	330c      	adds	r3, #12
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d001      	beq.n	8010f6c <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8010f68:	2300      	movs	r3, #0
 8010f6a:	e03e      	b.n	8010fea <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f72:	d316      	bcc.n	8010fa2 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0x72>
		return false; // Packet size too large
 8010f74:	2300      	movs	r3, #0
 8010f76:	e038      	b.n	8010fea <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	33c0      	adds	r3, #192	@ 0xc0
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4413      	add	r3, r2
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	68fa      	ldr	r2, [r7, #12]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d101      	bne.n	8010f90 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0x60>
			return false; // Packet type already defined
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	e02c      	b.n	8010fea <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0xba>
		insertion_point++;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	3301      	adds	r3, #1
 8010f94:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f9c:	d101      	bne.n	8010fa2 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0x72>
			insertion_point = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	33c0      	adds	r3, #192	@ 0xc0
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1e2      	bne.n	8010f78 <_ZN10MessageBus6defineI18SuperCapDataPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8010fb2:	78fb      	ldrb	r3, [r7, #3]
 8010fb4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010fb8:	4613      	mov	r3, r2
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	4413      	add	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	78fa      	ldrb	r2, [r7, #3]
 8010fcc:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	33c0      	adds	r3, #192	@ 0xc0
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	605a      	str	r2, [r3, #4]
	return true;
 8010fe8:	2301      	movs	r3, #1
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	08019e1c 	.word	0x08019e1c

08010ff8 <_ZN10MessageBus4sendI18SuperCapDataPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 8011002:	480c      	ldr	r0, [pc, #48]	@ (8011034 <_ZN10MessageBus4sendI18SuperCapDataPacketEEbPT_+0x3c>)
 8011004:	f7ff f8a4 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8011008:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	3314      	adds	r3, #20
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	68f9      	ldr	r1, [r7, #12]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	4798      	blx	r3
 8011018:	60b8      	str	r0, [r7, #8]
	return internal_send(def, (uint8_t*) message);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3310      	adds	r3, #16
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	4798      	blx	r3
 801102a:	4603      	mov	r3, r0
}
 801102c:	4618      	mov	r0, r3
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	08019e1c 	.word	0x08019e1c

08011038 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8011044:	2305      	movs	r3, #5
 8011046:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8011048:	482c      	ldr	r0, [pc, #176]	@ (80110fc <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0xc4>)
 801104a:	f7ff f881 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 801104e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011056:	78fb      	ldrb	r3, [r7, #3]
 8011058:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801105c:	6879      	ldr	r1, [r7, #4]
 801105e:	4613      	mov	r3, r2
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	4413      	add	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	440b      	add	r3, r1
 8011068:	330c      	adds	r3, #12
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0x3c>
		return false; // Packet ID already in use
 8011070:	2300      	movs	r3, #0
 8011072:	e03e      	b.n	80110f2 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0xba>
	if(struct_size > max_packet_size) {
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801107a:	d316      	bcc.n	80110aa <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0x72>
		return false; // Packet size too large
 801107c:	2300      	movs	r3, #0
 801107e:	e038      	b.n	80110f2 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0xba>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	33c0      	adds	r3, #192	@ 0xc0
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	4413      	add	r3, r2
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	689b      	ldr	r3, [r3, #8]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	429a      	cmp	r2, r3
 8011092:	d101      	bne.n	8011098 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0x60>
			return false; // Packet type already defined
 8011094:	2300      	movs	r3, #0
 8011096:	e02c      	b.n	80110f2 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0xba>
		insertion_point++;
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	3301      	adds	r3, #1
 801109c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110a4:	d101      	bne.n	80110aa <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0x72>
			insertion_point = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	33c0      	adds	r3, #192	@ 0xc0
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	4413      	add	r3, r2
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1e2      	bne.n	8011080 <_ZN10MessageBus6defineI21MaxChassisPowerPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80110ba:	78fb      	ldrb	r3, [r7, #3]
 80110bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80110c0:	4613      	mov	r3, r2
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	4413      	add	r3, r2
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	4413      	add	r3, r2
 80110cc:	3304      	adds	r3, #4
 80110ce:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	78fa      	ldrb	r2, [r7, #3]
 80110d4:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	693a      	ldr	r2, [r7, #16]
 80110da:	605a      	str	r2, [r3, #4]
	def->hash = hash;
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	33c0      	adds	r3, #192	@ 0xc0
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4413      	add	r3, r2
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	605a      	str	r2, [r3, #4]
	return true;
 80110f0:	2301      	movs	r3, #1
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	08019dfc 	.word	0x08019dfc

08011100 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8011100:	b580      	push	{r7, lr}
 8011102:	b08c      	sub	sp, #48	@ 0x30
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 801110a:	482d      	ldr	r0, [pc, #180]	@ (80111c0 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE+0xc0>)
 801110c:	f7ff f820 	bl	8010150 <_ZNKSt9type_info9hash_codeEv>
 8011110:	62f8      	str	r0, [r7, #44]	@ 0x2c
	PacketDefinition* def = retrieve(hash);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	3314      	adds	r3, #20
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	4798      	blx	r3
 8011120:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(def != nullptr) {
 8011122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011124:	2b00      	cmp	r3, #0
 8011126:	d046      	beq.n	80111b6 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE+0xb6>
		uint8_t packetID = def->id;
 8011128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if(handlers[packetID] != nullptr) {
 8011130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011134:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8011138:	011b      	lsls	r3, r3, #4
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	4413      	add	r3, r2
 801113e:	3304      	adds	r3, #4
 8011140:	2100      	movs	r1, #0
 8011142:	4618      	mov	r0, r3
 8011144:	f000 fa8a 	bl	801165c <_ZSteqIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
 8011148:	4603      	mov	r3, r0
 801114a:	f083 0301 	eor.w	r3, r3, #1
 801114e:	b2db      	uxtb	r3, r3
 8011150:	2b00      	cmp	r3, #0
 8011152:	d015      	beq.n	8011180 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE+0x80>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	60bb      	str	r3, [r7, #8]
 8011158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801115c:	733b      	strb	r3, [r7, #12]
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	613b      	str	r3, [r7, #16]
 8011162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011166:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 801116a:	011b      	lsls	r3, r3, #4
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	4413      	add	r3, r2
 8011170:	3304      	adds	r3, #4
 8011172:	f107 0208 	add.w	r2, r7, #8
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f000 fb34 	bl	80117e6 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>
 801117e:	e018      	b.n	80111b2 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE+0xb2>
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 8011180:	f107 0314 	add.w	r3, r7, #20
 8011184:	6839      	ldr	r1, [r7, #0]
 8011186:	4618      	mov	r0, r3
 8011188:	f000 fb4c 	bl	8011824 <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1ERKS3_>
 801118c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011190:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8011194:	011b      	lsls	r3, r3, #4
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	4413      	add	r3, r2
 801119a:	3304      	adds	r3, #4
 801119c:	f107 0214 	add.w	r2, r7, #20
 80111a0:	4611      	mov	r1, r2
 80111a2:	4618      	mov	r0, r3
 80111a4:	f000 fb69 	bl	801187a <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>
 80111a8:	f107 0314 	add.w	r3, r7, #20
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 fa12 	bl	80115d6 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
		return true;
 80111b2:	2301      	movs	r3, #1
 80111b4:	e000      	b.n	80111b8 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE+0xb8>
	return false;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3730      	adds	r7, #48	@ 0x30
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	08019dfc 	.word	0x08019dfc

080111c4 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh>:

bool MessageBus::internal_send(PacketDefinition* def, uint8_t* data) {
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b088      	sub	sp, #32
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d03a      	beq.n	801124c <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x88>
		uint32_t data_bytes_written = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	61fb      	str	r3, [r7, #28]

		while(data_bytes_written < def->size) {
 80111da:	e02a      	b.n	8011232 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x6e>
			uint8_t header = PREAMBLE;
 80111dc:	237f      	movs	r3, #127	@ 0x7f
 80111de:	75fb      	strb	r3, [r7, #23]
			append(&header, 1); // Write the packet ID for each transmission frame.
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	3308      	adds	r3, #8
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f107 0117 	add.w	r1, r7, #23
 80111ec:	2201      	movs	r2, #1
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	4798      	blx	r3

			append(&def->id, 1); // Write the packet ID for each transmission frame.
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	3308      	adds	r3, #8
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	68b9      	ldr	r1, [r7, #8]
 80111fc:	2201      	movs	r2, #1
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3308      	adds	r3, #8
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	6879      	ldr	r1, [r7, #4]
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	1888      	adds	r0, r1, r2
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	6851      	ldr	r1, [r2, #4]
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	1a8a      	subs	r2, r1, r2
 8011218:	4601      	mov	r1, r0
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	4798      	blx	r3
 801121e:	61b8      	str	r0, [r7, #24]

			if(new_bytes == 0) {
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x66>
				return false;
 8011226:	2300      	movs	r3, #0
 8011228:	e011      	b.n	801124e <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x8a>
			} else {
				data_bytes_written += new_bytes;
 801122a:	69fa      	ldr	r2, [r7, #28]
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	4413      	add	r3, r2
 8011230:	61fb      	str	r3, [r7, #28]
		while(data_bytes_written < def->size) {
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	69fa      	ldr	r2, [r7, #28]
 8011238:	429a      	cmp	r2, r3
 801123a:	d3cf      	bcc.n	80111dc <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x18>
			}
		}

		transmit();
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	330c      	adds	r3, #12
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	4798      	blx	r3

		return true;
 8011248:	2301      	movs	r3, #1
 801124a:	e000      	b.n	801124e <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x8a>
	}

	return false;
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	3720      	adds	r7, #32
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}

08011256 <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 8011256:	b590      	push	{r4, r7, lr}
 8011258:	b08b      	sub	sp, #44	@ 0x2c
 801125a:	af00      	add	r7, sp, #0
 801125c:	60f8      	str	r0, [r7, #12]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
 8011262:	460b      	mov	r3, r1
 8011264:	72fb      	strb	r3, [r7, #11]
	ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 8011266:	7afb      	ldrb	r3, [r7, #11]
 8011268:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801126c:	4613      	mov	r3, r2
 801126e:	021b      	lsls	r3, r3, #8
 8011270:	4413      	add	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8011278:	68fa      	ldr	r2, [r7, #12]
 801127a:	4413      	add	r3, r2
 801127c:	3304      	adds	r3, #4
 801127e:	61fb      	str	r3, [r7, #28]
	uint8_t packet_id;
	PacketDefinition* def;

//	 printf("Processing %d bytes\r\n", length);

	while(length > 0) {
 8011280:	e0db      	b.n	801143a <_ZN10MessageBus7receiveEhPhm+0x1e4>
		if(indexable_buffer->index == 0) { // New packet incoming
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011288:	2b00      	cmp	r3, #0
 801128a:	d115      	bne.n	80112b8 <_ZN10MessageBus7receiveEhPhm+0x62>
			do {
				if(length == 0) {
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	f000 80d8 	beq.w	8011444 <_ZN10MessageBus7receiveEhPhm+0x1ee>
					return; // Nothing useful in this frame
				}

				header = *pointer++;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	1c5a      	adds	r2, r3, #1
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	76fb      	strb	r3, [r7, #27]
				length--;
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	3b01      	subs	r3, #1
 80112a2:	603b      	str	r3, [r7, #0]
			} while(header != PREAMBLE);
 80112a4:	7efb      	ldrb	r3, [r7, #27]
 80112a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80112a8:	d1f0      	bne.n	801128c <_ZN10MessageBus7receiveEhPhm+0x36>

			indexable_buffer->buffer[0] = PREAMBLE;
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	227f      	movs	r2, #127	@ 0x7f
 80112ae:	705a      	strb	r2, [r3, #1]
			indexable_buffer->index = 1; // Got the preamble!
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	2201      	movs	r2, #1
 80112b4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

//			 printf("Valid preamble\r\n");
		}

		if(indexable_buffer->index == 1) {
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d12b      	bne.n	801131a <_ZN10MessageBus7receiveEhPhm+0xc4>
			do { // First lock to a valid packet
				if(length == 0) {
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	f000 80bf 	beq.w	8011448 <_ZN10MessageBus7receiveEhPhm+0x1f2>
					return; // Nothing useful in this frame
				}

				packet_id = *pointer++; // Packet ID is the first element in a frame
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	1c5a      	adds	r2, r3, #1
 80112ce:	607a      	str	r2, [r7, #4]
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				length--;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	3b01      	subs	r3, #1
 80112da:	603b      	str	r3, [r7, #0]

				def = &definitions_by_id[packet_id & 0b00111111];
 80112dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112e0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	4413      	add	r3, r2
 80112f0:	3304      	adds	r3, #4
 80112f2:	623b      	str	r3, [r7, #32]

				if(packet_id != def->id) {
//					printf("Corrupt packet: %d\r\n", packet_id);
				}
			} while(def->id != packet_id);
 80112f4:	6a3b      	ldr	r3, [r7, #32]
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d1e0      	bne.n	80112c2 <_ZN10MessageBus7receiveEhPhm+0x6c>

//			 printf("Valid packet ID %d\r\n", packet_id);

			indexable_buffer->buffer[1] = packet_id;
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011306:	709a      	strb	r2, [r3, #2]
			indexable_buffer->index = 2;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	2202      	movs	r2, #2
 801130c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
			indexable_buffer->current_packet_id = packet_id;
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011316:	701a      	strb	r2, [r3, #0]
 8011318:	e00f      	b.n	801133a <_ZN10MessageBus7receiveEhPhm+0xe4>
		} else {
			packet_id = indexable_buffer->current_packet_id;
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			def = &definitions_by_id[packet_id & 0b00111111];
 8011322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801132a:	4613      	mov	r3, r2
 801132c:	005b      	lsls	r3, r3, #1
 801132e:	4413      	add	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	4413      	add	r3, r2
 8011336:	3304      	adds	r3, #4
 8011338:	623b      	str	r3, [r7, #32]
		}

//		 printf("Buffer: %d\r\n", indexable_buffer->index);

		size_t remaining_size = def->size + 2 - indexable_buffer->index;
 801133a:	6a3b      	ldr	r3, [r7, #32]
 801133c:	685a      	ldr	r2, [r3, #4]
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	3302      	adds	r3, #2
 8011348:	617b      	str	r3, [r7, #20]
		size_t copy_length = length < remaining_size ? length : remaining_size;
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	429a      	cmp	r2, r3
 8011350:	d201      	bcs.n	8011356 <_ZN10MessageBus7receiveEhPhm+0x100>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	e000      	b.n	8011358 <_ZN10MessageBus7receiveEhPhm+0x102>
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	613b      	str	r3, [r7, #16]

		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011364:	4413      	add	r3, r2
 8011366:	693a      	ldr	r2, [r7, #16]
 8011368:	6879      	ldr	r1, [r7, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	f006 fdeb 	bl	8017f46 <memcpy>
		indexable_buffer->index += copy_length;
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	441a      	add	r2, r3
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
		pointer += copy_length;
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	4413      	add	r3, r2
 8011386:	607b      	str	r3, [r7, #4]
		length -= copy_length;
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	603b      	str	r3, [r7, #0]

//		 printf("Got %d out of %d\r\n", copy_length, remaining_size);

		if(copy_length == remaining_size) { // Packet is complete
 8011390:	693a      	ldr	r2, [r7, #16]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	429a      	cmp	r2, r3
 8011396:	d150      	bne.n	801143a <_ZN10MessageBus7receiveEhPhm+0x1e4>
//			 printf("Full packet: %d\r\n", packet_id);
			if(handlers[packet_id & 0b00111111]) {
 8011398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801139c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113a0:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 80113a4:	011b      	lsls	r3, r3, #4
 80113a6:	68fa      	ldr	r2, [r7, #12]
 80113a8:	4413      	add	r3, r2
 80113aa:	3304      	adds	r3, #4
 80113ac:	4618      	mov	r0, r3
 80113ae:	f000 f91f 	bl	80115f0 <_ZNKSt8functionIFvhPvEEcvbEv>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d010      	beq.n	80113da <_ZN10MessageBus7receiveEhPhm+0x184>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer + 2);
 80113b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113c0:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 80113c4:	011b      	lsls	r3, r3, #4
 80113c6:	68fa      	ldr	r2, [r7, #12]
 80113c8:	4413      	add	r3, r2
 80113ca:	1d18      	adds	r0, r3, #4
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	3301      	adds	r3, #1
 80113d0:	1c9a      	adds	r2, r3, #2
 80113d2:	7afb      	ldrb	r3, [r7, #11]
 80113d4:	4619      	mov	r1, r3
 80113d6:	f000 f91b 	bl	8011610 <_ZNKSt8functionIFvhPvEEclEhS0_>
			}


			if(forwarders[packet_id & 0b00111111]) {
 80113da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	f503 53b6 	add.w	r3, r3, #5824	@ 0x16c0
 80113e8:	3314      	adds	r3, #20
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4413      	add	r3, r2
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01e      	beq.n	8011432 <_ZN10MessageBus7receiveEhPhm+0x1dc>
				forwarders[packet_id & 0b00111111]->internal_send(def, indexable_buffer->buffer + 2);
 80113f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	f503 53b6 	add.w	r3, r3, #5824	@ 0x16c0
 8011402:	3314      	adds	r3, #20
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	4413      	add	r3, r2
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3310      	adds	r3, #16
 801140e:	681c      	ldr	r4, [r3, #0]
 8011410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	f503 53b6 	add.w	r3, r3, #5824	@ 0x16c0
 801141e:	3314      	adds	r3, #20
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	4413      	add	r3, r2
 8011424:	6858      	ldr	r0, [r3, #4]
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	3301      	adds	r3, #1
 801142a:	3302      	adds	r3, #2
 801142c:	461a      	mov	r2, r3
 801142e:	6a39      	ldr	r1, [r7, #32]
 8011430:	47a0      	blx	r4
			}

			indexable_buffer->index = 0;
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	2200      	movs	r2, #0
 8011436:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
	while(length > 0) {
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	f47f af20 	bne.w	8011282 <_ZN10MessageBus7receiveEhPhm+0x2c>
 8011442:	e002      	b.n	801144a <_ZN10MessageBus7receiveEhPhm+0x1f4>
					return; // Nothing useful in this frame
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <_ZN10MessageBus7receiveEhPhm+0x1f4>
					return; // Nothing useful in this frame
 8011448:	bf00      	nop
		} else {
//			 printf("Incomplete packet: %d\r\n", packet_id);
		}
	}
}
 801144a:	372c      	adds	r7, #44	@ 0x2c
 801144c:	46bd      	mov	sp, r7
 801144e:	bd90      	pop	{r4, r7, pc}

08011450 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8011450:	b480      	push	{r7}
 8011452:	b085      	sub	sp, #20
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	b2db      	uxtb	r3, r3
 801145e:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 8011464:	e01d      	b.n	80114a2 <_ZN10MessageBus8retrieveEj+0x52>
		if(definitions_by_type[searchPoint]->hash == hash) {
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	33c0      	adds	r3, #192	@ 0xc0
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	4413      	add	r3, r2
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	683a      	ldr	r2, [r7, #0]
 8011476:	429a      	cmp	r2, r3
 8011478:	d106      	bne.n	8011488 <_ZN10MessageBus8retrieveEj+0x38>
			return definitions_by_type[searchPoint];
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	33c0      	adds	r3, #192	@ 0xc0
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	e017      	b.n	80114b8 <_ZN10MessageBus8retrieveEj+0x68>
		}

		searchPoint++;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	3301      	adds	r3, #1
 801148c:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011494:	d101      	bne.n	801149a <_ZN10MessageBus8retrieveEj+0x4a>
			searchPoint = 0;
 8011496:	2300      	movs	r3, #0
 8011498:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d008      	beq.n	80114b4 <_ZN10MessageBus8retrieveEj+0x64>
	while(definitions_by_type[searchPoint] != nullptr) {
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	33c0      	adds	r3, #192	@ 0xc0
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4413      	add	r3, r2
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1d9      	bne.n	8011466 <_ZN10MessageBus8retrieveEj+0x16>
 80114b2:	e000      	b.n	80114b6 <_ZN10MessageBus8retrieveEj+0x66>
			break; // No packet definition matching the given template type
 80114b4:	bf00      	nop
		}
	}

	return nullptr;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3714      	adds	r7, #20
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>:
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	460b      	mov	r3, r1
 80114ce:	607a      	str	r2, [r7, #4]
 80114d0:	72fb      	strb	r3, [r7, #11]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	791b      	ldrb	r3, [r3, #4]
				handlers[packetID](sender, (T*) packet);
 80114da:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 80114de:	011b      	lsls	r3, r3, #4
 80114e0:	4413      	add	r3, r2
 80114e2:	3304      	adds	r3, #4
 80114e4:	7af9      	ldrb	r1, [r7, #11]
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f000 f891 	bl	8011610 <_ZNKSt8functionIFvhPvEEclEhS0_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	689b      	ldr	r3, [r3, #8]
				handler(sender, (T*) packet);
 80114f2:	7af9      	ldrb	r1, [r7, #11]
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f000 f8c0 	bl	801167c <_ZNKSt8functionIFvhP11dummyPacketEEclEhS1_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 80114fc:	bf00      	nop
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>:
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	460b      	mov	r3, r1
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	72fb      	strb	r3, [r7, #11]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	7af9      	ldrb	r1, [r7, #11]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	f000 f8af 	bl	801167c <_ZNKSt8functionIFvhP11dummyPacketEEclEhS1_>
 801151e:	bf00      	nop
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <_ZNSt8functionIFvhP11dummyPacketEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8011526:	b580      	push	{r7, lr}
 8011528:	b082      	sub	sp, #8
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	f7fd fc29 	bl	800ed88 <_ZNSt14_Function_baseD1Ev>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	4618      	mov	r0, r3
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>:
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4618      	mov	r0, r3
 801154c:	f7ff ffeb 	bl	8011526 <_ZNSt8functionIFvhP11dummyPacketEED1Ev>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	4618      	mov	r0, r3
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}

0801155a <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>:
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 801155a:	b580      	push	{r7, lr}
 801155c:	b084      	sub	sp, #16
 801155e:	af00      	add	r7, sp, #0
 8011560:	60f8      	str	r0, [r7, #12]
 8011562:	460b      	mov	r3, r1
 8011564:	607a      	str	r2, [r7, #4]
 8011566:	72fb      	strb	r3, [r7, #11]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	791b      	ldrb	r3, [r3, #4]
				handlers[packetID](sender, (T*) packet);
 8011570:	f203 5375 	addw	r3, r3, #1397	@ 0x575
 8011574:	011b      	lsls	r3, r3, #4
 8011576:	4413      	add	r3, r2
 8011578:	3304      	adds	r3, #4
 801157a:	7af9      	ldrb	r1, [r7, #11]
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	4618      	mov	r0, r3
 8011580:	f000 f846 	bl	8011610 <_ZNKSt8functionIFvhPvEEclEhS0_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	689b      	ldr	r3, [r3, #8]
				handler(sender, (T*) packet);
 8011588:	7af9      	ldrb	r1, [r7, #11]
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	f000 f904 	bl	801179a <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEclEhS1_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8011592:	bf00      	nop
 8011594:	3710      	adds	r7, #16
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>:
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 801159a:	b580      	push	{r7, lr}
 801159c:	b084      	sub	sp, #16
 801159e:	af00      	add	r7, sp, #0
 80115a0:	60f8      	str	r0, [r7, #12]
 80115a2:	460b      	mov	r3, r1
 80115a4:	607a      	str	r2, [r7, #4]
 80115a6:	72fb      	strb	r3, [r7, #11]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	7af9      	ldrb	r1, [r7, #11]
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 f8f3 	bl	801179a <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEclEhS1_>
 80115b4:	bf00      	nop
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <_ZNSt8functionIFvhP21MaxChassisPowerPacketEED1Ev>:
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fd fbde 	bl	800ed88 <_ZNSt14_Function_baseD1Ev>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	3708      	adds	r7, #8
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>:
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b082      	sub	sp, #8
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff ffeb 	bl	80115bc <_ZNSt8functionIFvhP21MaxChassisPowerPacketEED1Ev>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <_ZNKSt8functionIFvhPvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fe fdc4 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 8011600:	4603      	mov	r3, r0
 8011602:	f083 0301 	eor.w	r3, r3, #1
 8011606:	b2db      	uxtb	r3, r3
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <_ZNKSt8functionIFvhPvEEclEhS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	460b      	mov	r3, r1
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	72fb      	strb	r3, [r7, #11]
      {
	if (_M_empty())
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe fdb1 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 8011626:	4603      	mov	r3, r0
 8011628:	2b00      	cmp	r3, #0
 801162a:	d001      	beq.n	8011630 <_ZNKSt8functionIFvhPvEEclEhS0_+0x20>
	  __throw_bad_function_call();
 801162c:	f005 fc81 	bl	8016f32 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	68dc      	ldr	r4, [r3, #12]
 8011634:	68fd      	ldr	r5, [r7, #12]
 8011636:	f107 030b 	add.w	r3, r7, #11
 801163a:	4618      	mov	r0, r3
 801163c:	f7fe f841 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011640:	4606      	mov	r6, r0
 8011642:	1d3b      	adds	r3, r7, #4
 8011644:	4618      	mov	r0, r3
 8011646:	f000 f937 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801164a:	4603      	mov	r3, r0
 801164c:	461a      	mov	r2, r3
 801164e:	4631      	mov	r1, r6
 8011650:	4628      	mov	r0, r5
 8011652:	47a0      	blx	r4
 8011654:	bf00      	nop
      }
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801165c <_ZSteqIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw exceptions.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
    { return !static_cast<bool>(__f); }
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff ffc2 	bl	80115f0 <_ZNKSt8functionIFvhPvEEcvbEv>
 801166c:	4603      	mov	r3, r0
 801166e:	f083 0301 	eor.w	r3, r3, #1
 8011672:	b2db      	uxtb	r3, r3
 8011674:	4618      	mov	r0, r3
 8011676:	3708      	adds	r7, #8
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <_ZNKSt8functionIFvhP11dummyPacketEEclEhS1_>:
      operator()(_ArgTypes... __args) const
 801167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801167e:	b085      	sub	sp, #20
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	460b      	mov	r3, r1
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	72fb      	strb	r3, [r7, #11]
	if (_M_empty())
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe fd7b 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <_ZNKSt8functionIFvhP11dummyPacketEEclEhS1_+0x20>
	  __throw_bad_function_call();
 8011698:	f005 fc4b 	bl	8016f32 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	68dc      	ldr	r4, [r3, #12]
 80116a0:	68fd      	ldr	r5, [r7, #12]
 80116a2:	f107 030b 	add.w	r3, r7, #11
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fe f80b 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80116ac:	4606      	mov	r6, r0
 80116ae:	1d3b      	adds	r3, r7, #4
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 f92d 	bl	8011910 <_ZSt7forwardIP11dummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 80116b6:	4603      	mov	r3, r0
 80116b8:	461a      	mov	r2, r3
 80116ba:	4631      	mov	r1, r6
 80116bc:	4628      	mov	r0, r5
 80116be:	47a0      	blx	r4
 80116c0:	bf00      	nop
      }
 80116c2:	3714      	adds	r7, #20
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116c8 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80116d2:	6838      	ldr	r0, [r7, #0]
 80116d4:	f000 f927 	bl	8011926 <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80116d8:	4602      	mov	r2, r0
 80116da:	f107 0308 	add.w	r3, r7, #8
 80116de:	4611      	mov	r1, r2
 80116e0:	4618      	mov	r0, r3
 80116e2:	f000 f92b 	bl	801193c <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_>
 80116e6:	f107 0308 	add.w	r3, r7, #8
 80116ea:	6879      	ldr	r1, [r7, #4]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f8ee 	bl	80118ce <_ZNSt8functionIFvhPvEE4swapERS2_>
 80116f2:	f107 0308 	add.w	r3, r7, #8
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fd fb59 	bl	800edae <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
 80116fc:	687b      	ldr	r3, [r7, #4]
	}
 80116fe:	4618      	mov	r0, r3
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <_ZNSt8functionIFvhP11dummyPacketEEC1ERKS3_>:
      function(const function& __x)
 8011706:	b580      	push	{r7, lr}
 8011708:	b082      	sub	sp, #8
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	461a      	mov	r2, r3
 8011714:	2300      	movs	r3, #0
 8011716:	6013      	str	r3, [r2, #0]
 8011718:	6053      	str	r3, [r2, #4]
 801171a:	6093      	str	r3, [r2, #8]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4618      	mov	r0, r3
 8011720:	f7fd fdc0 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 801172a:	6838      	ldr	r0, [r7, #0]
 801172c:	f000 f936 	bl	801199c <_ZNKSt8functionIFvhP11dummyPacketEEcvbEv>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00d      	beq.n	8011752 <_ZNSt8functionIFvhP11dummyPacketEEC1ERKS3_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	2202      	movs	r2, #2
 8011740:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	68da      	ldr	r2, [r3, #12]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	689a      	ldr	r2, [r3, #8]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	609a      	str	r2, [r3, #8]
      }
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8011766:	6838      	ldr	r0, [r7, #0]
 8011768:	f000 f928 	bl	80119bc <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801176c:	4602      	mov	r2, r0
 801176e:	f107 0308 	add.w	r3, r7, #8
 8011772:	4611      	mov	r1, r2
 8011774:	4618      	mov	r0, r3
 8011776:	f000 f92d 	bl	80119d4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_>
 801177a:	f107 0308 	add.w	r3, r7, #8
 801177e:	6879      	ldr	r1, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	f000 f8a4 	bl	80118ce <_ZNSt8functionIFvhPvEE4swapERS2_>
 8011786:	f107 0308 	add.w	r3, r7, #8
 801178a:	4618      	mov	r0, r3
 801178c:	f7fd fb0f 	bl	800edae <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
 8011790:	687b      	ldr	r3, [r7, #4]
	}
 8011792:	4618      	mov	r0, r3
 8011794:	3718      	adds	r7, #24
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEclEhS1_>:
      operator()(_ArgTypes... __args) const
 801179a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801179c:	b085      	sub	sp, #20
 801179e:	af00      	add	r7, sp, #0
 80117a0:	60f8      	str	r0, [r7, #12]
 80117a2:	460b      	mov	r3, r1
 80117a4:	607a      	str	r2, [r7, #4]
 80117a6:	72fb      	strb	r3, [r7, #11]
	if (_M_empty())
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fcec 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEclEhS1_+0x20>
	  __throw_bad_function_call();
 80117b6:	f005 fbbc 	bl	8016f32 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	68dc      	ldr	r4, [r3, #12]
 80117be:	68fd      	ldr	r5, [r7, #12]
 80117c0:	f107 030b 	add.w	r3, r7, #11
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fd ff7c 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80117ca:	4606      	mov	r6, r0
 80117cc:	1d3b      	adds	r3, r7, #4
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 f930 	bl	8011a34 <_ZSt7forwardIP21MaxChassisPowerPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 80117d4:	4603      	mov	r3, r0
 80117d6:	461a      	mov	r2, r3
 80117d8:	4631      	mov	r1, r6
 80117da:	4628      	mov	r0, r5
 80117dc:	47a0      	blx	r4
 80117de:	bf00      	nop
      }
 80117e0:	3714      	adds	r7, #20
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117e6 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b086      	sub	sp, #24
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
 80117ee:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80117f0:	6838      	ldr	r0, [r7, #0]
 80117f2:	f000 f92a 	bl	8011a4a <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80117f6:	4602      	mov	r2, r0
 80117f8:	f107 0308 	add.w	r3, r7, #8
 80117fc:	4611      	mov	r1, r2
 80117fe:	4618      	mov	r0, r3
 8011800:	f000 f92e 	bl	8011a60 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_>
 8011804:	f107 0308 	add.w	r3, r7, #8
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	4618      	mov	r0, r3
 801180c:	f000 f85f 	bl	80118ce <_ZNSt8functionIFvhPvEE4swapERS2_>
 8011810:	f107 0308 	add.w	r3, r7, #8
 8011814:	4618      	mov	r0, r3
 8011816:	f7fd faca 	bl	800edae <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
 801181a:	687b      	ldr	r3, [r7, #4]
	}
 801181c:	4618      	mov	r0, r3
 801181e:	3718      	adds	r7, #24
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1ERKS3_>:
      function(const function& __x)
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	461a      	mov	r2, r3
 8011832:	2300      	movs	r3, #0
 8011834:	6013      	str	r3, [r2, #0]
 8011836:	6053      	str	r3, [r2, #4]
 8011838:	6093      	str	r3, [r2, #8]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4618      	mov	r0, r3
 801183e:	f7fd fd31 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8011848:	6838      	ldr	r0, [r7, #0]
 801184a:	f000 f939 	bl	8011ac0 <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEcvbEv>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00d      	beq.n	8011870 <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1ERKS3_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	2202      	movs	r2, #2
 801185e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	68da      	ldr	r2, [r3, #12]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	689a      	ldr	r2, [r3, #8]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	609a      	str	r2, [r3, #8]
      }
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableIS7_NSC_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSQ_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 801187a:	b580      	push	{r7, lr}
 801187c:	b086      	sub	sp, #24
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
 8011882:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8011884:	6838      	ldr	r0, [r7, #0]
 8011886:	f000 f92b 	bl	8011ae0 <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801188a:	4602      	mov	r2, r0
 801188c:	f107 0308 	add.w	r3, r7, #8
 8011890:	4611      	mov	r1, r2
 8011892:	4618      	mov	r0, r3
 8011894:	f000 f930 	bl	8011af8 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_>
 8011898:	f107 0308 	add.w	r3, r7, #8
 801189c:	6879      	ldr	r1, [r7, #4]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f815 	bl	80118ce <_ZNSt8functionIFvhPvEE4swapERS2_>
 80118a4:	f107 0308 	add.w	r3, r7, #8
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fd fa80 	bl	800edae <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
 80118ae:	687b      	ldr	r3, [r7, #4]
	}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3718      	adds	r7, #24
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4618      	mov	r0, r3
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <_ZNSt8functionIFvhPvEE4swapERS2_>:
      void swap(function& __x) noexcept
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	4611      	mov	r1, r2
 80118de:	4618      	mov	r0, r3
 80118e0:	f000 f93a 	bl	8011b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f103 0208 	add.w	r2, r3, #8
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	3308      	adds	r3, #8
 80118ee:	4619      	mov	r1, r3
 80118f0:	4610      	mov	r0, r2
 80118f2:	f000 f958 	bl	8011ba6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f103 020c 	add.w	r2, r3, #12
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	330c      	adds	r3, #12
 8011900:	4619      	mov	r1, r3
 8011902:	4610      	mov	r0, r2
 8011904:	f000 f96e 	bl	8011be4 <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8011908:	bf00      	nop
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <_ZSt7forwardIP11dummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011910:	b480      	push	{r7}
 8011912:	b083      	sub	sp, #12
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4618      	mov	r0, r3
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_>:
	function(_Functor&& __f)
 801193c:	b590      	push	{r4, r7, lr}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	461a      	mov	r2, r3
 801194a:	2300      	movs	r3, #0
 801194c:	6013      	str	r3, [r2, #0]
 801194e:	6053      	str	r3, [r2, #4]
 8011950:	6093      	str	r3, [r2, #8]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4618      	mov	r0, r3
 8011956:	f7fd fca5 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8011960:	6838      	ldr	r0, [r7, #0]
 8011962:	f000 f95e 	bl	8011c22 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00e      	beq.n	801198a <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 801196c:	687c      	ldr	r4, [r7, #4]
 801196e:	6838      	ldr	r0, [r7, #0]
 8011970:	f7ff ffd9 	bl	8011926 <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011974:	4603      	mov	r3, r0
 8011976:	4619      	mov	r1, r3
 8011978:	4620      	mov	r0, r4
 801197a:	f000 f95d 	bl	8011c38 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>
	      _M_invoker = &_My_handler::_M_invoke;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4a04      	ldr	r2, [pc, #16]	@ (8011994 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x58>)
 8011982:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4a04      	ldr	r2, [pc, #16]	@ (8011998 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x5c>)
 8011988:	609a      	str	r2, [r3, #8]
	}
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	bd90      	pop	{r4, r7, pc}
 8011994:	08011c5d 	.word	0x08011c5d
 8011998:	08011c95 	.word	0x08011c95

0801199c <_ZNKSt8functionIFvhP11dummyPacketEEcvbEv>:
      explicit operator bool() const noexcept
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe fbee 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 80119ac:	4603      	mov	r3, r0
 80119ae:	f083 0301 	eor.w	r3, r3, #1
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	4618      	mov	r0, r3
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr
	...

080119d4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_>:
	function(_Functor&& __f)
 80119d4:	b590      	push	{r4, r7, lr}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	461a      	mov	r2, r3
 80119e2:	2300      	movs	r3, #0
 80119e4:	6013      	str	r3, [r2, #0]
 80119e6:	6053      	str	r3, [r2, #4]
 80119e8:	6093      	str	r3, [r2, #8]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fd fc59 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80119f8:	6838      	ldr	r0, [r7, #0]
 80119fa:	f000 f977 	bl	8011cec <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00e      	beq.n	8011a22 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8011a04:	687c      	ldr	r4, [r7, #4]
 8011a06:	6838      	ldr	r0, [r7, #0]
 8011a08:	f7ff ffd8 	bl	80119bc <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 f976 	bl	8011d02 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>
	      _M_invoker = &_My_handler::_M_invoke;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4a04      	ldr	r2, [pc, #16]	@ (8011a2c <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x58>)
 8011a1a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4a04      	ldr	r2, [pc, #16]	@ (8011a30 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI11dummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x5c>)
 8011a20:	609a      	str	r2, [r3, #8]
	}
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd90      	pop	{r4, r7, pc}
 8011a2c:	08011d27 	.word	0x08011d27
 8011a30:	08011d5d 	.word	0x08011d5d

08011a34 <_ZSt7forwardIP21MaxChassisPowerPacketEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_>:
	function(_Functor&& __f)
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	2300      	movs	r3, #0
 8011a70:	6013      	str	r3, [r2, #0]
 8011a72:	6053      	str	r3, [r2, #4]
 8011a74:	6093      	str	r3, [r2, #8]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7fd fc13 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8011a84:	6838      	ldr	r0, [r7, #0]
 8011a86:	f000 f995 	bl	8011db4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00e      	beq.n	8011aae <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8011a90:	687c      	ldr	r4, [r7, #4]
 8011a92:	6838      	ldr	r0, [r7, #0]
 8011a94:	f7ff ffd9 	bl	8011a4a <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f000 f994 	bl	8011dca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>
	      _M_invoker = &_My_handler::_M_invoke;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4a04      	ldr	r2, [pc, #16]	@ (8011ab8 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x58>)
 8011aa6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a04      	ldr	r2, [pc, #16]	@ (8011abc <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E_vEEOS7_+0x5c>)
 8011aac:	609a      	str	r2, [r3, #8]
	}
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	370c      	adds	r7, #12
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd90      	pop	{r4, r7, pc}
 8011ab8:	08011def 	.word	0x08011def
 8011abc:	08011e25 	.word	0x08011e25

08011ac0 <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEcvbEv>:
      explicit operator bool() const noexcept
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe fb5c 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	f083 0301 	eor.w	r3, r3, #1
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	4618      	mov	r0, r3
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr
	...

08011af8 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_>:
	function(_Functor&& __f)
 8011af8:	b590      	push	{r4, r7, lr}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	461a      	mov	r2, r3
 8011b06:	2300      	movs	r3, #0
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	6053      	str	r3, [r2, #4]
 8011b0c:	6093      	str	r3, [r2, #8]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fd fbc7 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8011b1c:	6838      	ldr	r0, [r7, #0]
 8011b1e:	f000 f9ad 	bl	8011e7c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d00e      	beq.n	8011b46 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8011b28:	687c      	ldr	r4, [r7, #4]
 8011b2a:	6838      	ldr	r0, [r7, #0]
 8011b2c:	f7ff ffd8 	bl	8011ae0 <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011b30:	4603      	mov	r3, r0
 8011b32:	4619      	mov	r1, r3
 8011b34:	4620      	mov	r0, r4
 8011b36:	f000 f9ac 	bl	8011e92 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>
	      _M_invoker = &_My_handler::_M_invoke;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a04      	ldr	r2, [pc, #16]	@ (8011b50 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x58>)
 8011b3e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4a04      	ldr	r2, [pc, #16]	@ (8011b54 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI21MaxChassisPowerPacketEEbS_IFvhPT_EEEUlhS0_E0_vEEOS7_+0x5c>)
 8011b44:	609a      	str	r2, [r3, #8]
	}
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}
 8011b50:	08011eb7 	.word	0x08011eb7
 8011b54:	08011eed 	.word	0x08011eed

08011b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 f9ee 	bl	8011f44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	f107 0308 	add.w	r3, r7, #8
 8011b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b72:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8011b76:	6838      	ldr	r0, [r7, #0]
 8011b78:	f000 f9e4 	bl	8011f44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b84:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8011b88:	f107 0308 	add.w	r3, r7, #8
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f000 f9d9 	bl	8011f44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011b92:	4602      	mov	r2, r0
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011b9e:	bf00      	nop
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b084      	sub	sp, #16
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f000 f9d2 	bl	8011f5a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011bbc:	6838      	ldr	r0, [r7, #0]
 8011bbe:	f000 f9cc 	bl	8011f5a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011bca:	f107 030c 	add.w	r3, r7, #12
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f000 f9c3 	bl	8011f5a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	601a      	str	r2, [r3, #0]
    }
 8011bdc:	bf00      	nop
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 f9be 	bl	8011f70 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011bfa:	6838      	ldr	r0, [r7, #0]
 8011bfc:	f000 f9b8 	bl	8011f70 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 8011c00:	4603      	mov	r3, r0
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011c08:	f107 030c 	add.w	r3, r7, #12
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 f9af 	bl	8011f70 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 8011c12:	4603      	mov	r3, r0
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	601a      	str	r2, [r3, #0]
    }
 8011c1a:	bf00      	nop
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8011c22:	b480      	push	{r7}
 8011c24:	b083      	sub	sp, #12
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8011c38:	b590      	push	{r4, r7, lr}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8011c42:	6838      	ldr	r0, [r7, #0]
 8011c44:	f7ff fe6f 	bl	8011926 <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 f999 	bl	8011f86 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd90      	pop	{r4, r7, pc}

08011c5c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011c5c:	b5b0      	push	{r4, r5, r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 f9a8 	bl	8011fbe <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 8011c6e:	4604      	mov	r4, r0
 8011c70:	68b8      	ldr	r0, [r7, #8]
 8011c72:	f7fd fd26 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011c76:	4605      	mov	r5, r0
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7ff fe1d 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	461a      	mov	r2, r3
 8011c82:	4629      	mov	r1, r5
 8011c84:	4620      	mov	r0, r4
 8011c86:	f000 f9a7 	bl	8011fd8 <_ZSt10__invoke_rIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8011c8a:	bf00      	nop
      }
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011c94 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011c94:	b590      	push	{r4, r7, lr}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d002      	beq.n	8011cae <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d007      	beq.n	8011cbc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 8011cac:	e010      	b.n	8011cd0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f7fd fd4c 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8011ce8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 8011cb8:	601a      	str	r2, [r3, #0]
	    break;
 8011cba:	e00f      	b.n	8011cdc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011cbc:	68b8      	ldr	r0, [r7, #8]
 8011cbe:	f000 f97e 	bl	8011fbe <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f000 f9a2 	bl	801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	601c      	str	r4, [r3, #0]
	    break;
 8011cce:	e005      	b.n	8011cdc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8011cd0:	79fb      	ldrb	r3, [r7, #7]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	68b9      	ldr	r1, [r7, #8]
 8011cd6:	68f8      	ldr	r0, [r7, #12]
 8011cd8:	f000 f9a6 	bl	8012028 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8011cdc:	2300      	movs	r3, #0
      }
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd90      	pop	{r4, r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	08019db0 	.word	0x08019db0

08011cec <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	370c      	adds	r7, #12
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr

08011d02 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8011d02:	b590      	push	{r4, r7, lr}
 8011d04:	b083      	sub	sp, #12
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8011d0c:	6838      	ldr	r0, [r7, #0]
 8011d0e:	f7ff fe55 	bl	80119bc <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011d12:	4603      	mov	r3, r0
 8011d14:	4622      	mov	r2, r4
 8011d16:	4619      	mov	r1, r3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 f9d1 	bl	80120c0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 8011d1e:	bf00      	nop
 8011d20:	370c      	adds	r7, #12
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd90      	pop	{r4, r7, pc}

08011d26 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011d26:	b5b0      	push	{r4, r5, r7, lr}
 8011d28:	b084      	sub	sp, #16
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	60f8      	str	r0, [r7, #12]
 8011d2e:	60b9      	str	r1, [r7, #8]
 8011d30:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 f9e0 	bl	80120f8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8011d38:	4604      	mov	r4, r0
 8011d3a:	68b8      	ldr	r0, [r7, #8]
 8011d3c:	f7fd fcc1 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011d40:	4605      	mov	r5, r0
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7ff fdb8 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f000 f9df 	bl	8012112 <_ZSt10__invoke_rIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8011d54:	bf00      	nop
      }
 8011d56:	3710      	adds	r7, #16
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bdb0      	pop	{r4, r5, r7, pc}

08011d5c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d5c:	b590      	push	{r4, r7, lr}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	4613      	mov	r3, r2
 8011d68:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011d6a:	79fb      	ldrb	r3, [r7, #7]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d007      	beq.n	8011d84 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 8011d74:	e010      	b.n	8011d98 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f7fd fce8 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8011db0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 8011d80:	601a      	str	r2, [r3, #0]
	    break;
 8011d82:	e00f      	b.n	8011da4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011d84:	68b8      	ldr	r0, [r7, #8]
 8011d86:	f000 f9b7 	bl	80120f8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f000 f9db 	bl	8012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8011d92:	4603      	mov	r3, r0
 8011d94:	601c      	str	r4, [r3, #0]
	    break;
 8011d96:	e005      	b.n	8011da4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8011d98:	79fb      	ldrb	r3, [r7, #7]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	68b9      	ldr	r1, [r7, #8]
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f000 f9de 	bl	8012160 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8011da4:	2300      	movs	r3, #0
      }
 8011da6:	4618      	mov	r0, r3
 8011da8:	3714      	adds	r7, #20
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd90      	pop	{r4, r7, pc}
 8011dae:	bf00      	nop
 8011db0:	08019d64 	.word	0x08019d64

08011db4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8011dca:	b590      	push	{r4, r7, lr}
 8011dcc:	b083      	sub	sp, #12
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8011dd4:	6838      	ldr	r0, [r7, #0]
 8011dd6:	f7ff fe38 	bl	8011a4a <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	4622      	mov	r2, r4
 8011dde:	4619      	mov	r1, r3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 f9f9 	bl	80121d8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 8011de6:	bf00      	nop
 8011de8:	370c      	adds	r7, #12
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd90      	pop	{r4, r7, pc}

08011dee <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011dee:	b5b0      	push	{r4, r5, r7, lr}
 8011df0:	b084      	sub	sp, #16
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	60f8      	str	r0, [r7, #12]
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011dfa:	68f8      	ldr	r0, [r7, #12]
 8011dfc:	f000 fa08 	bl	8012210 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 8011e00:	4604      	mov	r4, r0
 8011e02:	68b8      	ldr	r0, [r7, #8]
 8011e04:	f7fd fc5d 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011e08:	4605      	mov	r5, r0
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f7ff fd54 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011e10:	4603      	mov	r3, r0
 8011e12:	461a      	mov	r2, r3
 8011e14:	4629      	mov	r1, r5
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 fa07 	bl	801222a <_ZSt10__invoke_rIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8011e1c:	bf00      	nop
      }
 8011e1e:	3710      	adds	r7, #16
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bdb0      	pop	{r4, r5, r7, pc}

08011e24 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011e32:	79fb      	ldrb	r3, [r7, #7]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d007      	beq.n	8011e4c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 8011e3c:	e010      	b.n	8011e60 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7fd fc84 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011e44:	4603      	mov	r3, r0
 8011e46:	4a0c      	ldr	r2, [pc, #48]	@ (8011e78 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 8011e48:	601a      	str	r2, [r3, #0]
	    break;
 8011e4a:	e00f      	b.n	8011e6c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011e4c:	68b8      	ldr	r0, [r7, #8]
 8011e4e:	f000 f9df 	bl	8012210 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 8011e52:	4604      	mov	r4, r0
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f000 fa03 	bl	8012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	601c      	str	r4, [r3, #0]
	    break;
 8011e5e:	e005      	b.n	8011e6c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8011e60:	79fb      	ldrb	r3, [r7, #7]
 8011e62:	461a      	mov	r2, r3
 8011e64:	68b9      	ldr	r1, [r7, #8]
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f000 fa06 	bl	8012278 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8011e6c:	2300      	movs	r3, #0
      }
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd90      	pop	{r4, r7, pc}
 8011e76:	bf00      	nop
 8011e78:	08019d0c 	.word	0x08019d0c

08011e7c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011e84:	2301      	movs	r3, #1
 8011e86:	4618      	mov	r0, r3
 8011e88:	370c      	adds	r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorISA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8011e92:	b590      	push	{r4, r7, lr}
 8011e94:	b083      	sub	sp, #12
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8011e9c:	6838      	ldr	r0, [r7, #0]
 8011e9e:	f7ff fe1f 	bl	8011ae0 <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	4622      	mov	r2, r4
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 fa31 	bl	8012310 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 8011eae:	bf00      	nop
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd90      	pop	{r4, r7, pc}

08011eb6 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011eb6:	b5b0      	push	{r4, r5, r7, lr}
 8011eb8:	b084      	sub	sp, #16
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	60f8      	str	r0, [r7, #12]
 8011ebe:	60b9      	str	r1, [r7, #8]
 8011ec0:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011ec2:	68f8      	ldr	r0, [r7, #12]
 8011ec4:	f000 fa40 	bl	8012348 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8011ec8:	4604      	mov	r4, r0
 8011eca:	68b8      	ldr	r0, [r7, #8]
 8011ecc:	f7fd fbf9 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f7ff fcf0 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	461a      	mov	r2, r3
 8011edc:	4629      	mov	r1, r5
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f000 fa3f 	bl	8012362 <_ZSt10__invoke_rIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8011ee4:	bf00      	nop
      }
 8011ee6:	3710      	adds	r7, #16
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bdb0      	pop	{r4, r5, r7, pc}

08011eec <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011eec:	b590      	push	{r4, r7, lr}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011efa:	79fb      	ldrb	r3, [r7, #7]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d002      	beq.n	8011f06 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d007      	beq.n	8011f14 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 8011f04:	e010      	b.n	8011f28 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7fd fc20 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f40 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 8011f10:	601a      	str	r2, [r3, #0]
	    break;
 8011f12:	e00f      	b.n	8011f34 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011f14:	68b8      	ldr	r0, [r7, #8]
 8011f16:	f000 fa17 	bl	8012348 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f000 fa3b 	bl	8012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8011f22:	4603      	mov	r3, r0
 8011f24:	601c      	str	r4, [r3, #0]
	    break;
 8011f26:	e005      	b.n	8011f34 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8011f28:	79fb      	ldrb	r3, [r7, #7]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	68b9      	ldr	r1, [r7, #8]
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f000 fa3e 	bl	80123b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8011f34:	2300      	movs	r3, #0
      }
 8011f36:	4618      	mov	r0, r3
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd90      	pop	{r4, r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	08019cb4 	.word	0x08019cb4

08011f44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	370c      	adds	r7, #12
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8011f5a:	b480      	push	{r7}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	370c      	adds	r7, #12
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8011f86:	b590      	push	{r4, r7, lr}
 8011f88:	b085      	sub	sp, #20
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	60f8      	str	r0, [r7, #12]
 8011f8e:	60b9      	str	r1, [r7, #8]
 8011f90:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8011f92:	200c      	movs	r0, #12
 8011f94:	f004 fcba 	bl	801690c <_Znwj>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	461c      	mov	r4, r3
 8011f9c:	68b8      	ldr	r0, [r7, #8]
 8011f9e:	f7ff fcc2 	bl	8011926 <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	4623      	mov	r3, r4
 8011fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8011fa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f000 f82e 	bl	801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8011fb2:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8011fb4:	601c      	str	r4, [r3, #0]
	  }
 8011fb6:	bf00      	nop
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd90      	pop	{r4, r7, pc}

08011fbe <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fa2e 	bl	8012428 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	681b      	ldr	r3, [r3, #0]
	}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <_ZSt10__invoke_rIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fda:	b085      	sub	sp, #20
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f000 fa2b 	bl	8012440 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8011fea:	4604      	mov	r4, r0
 8011fec:	68b8      	ldr	r0, [r7, #8]
 8011fee:	f7fd fb68 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7ff fc5f 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	462a      	mov	r2, r5
 8011ffe:	4621      	mov	r1, r4
 8012000:	4630      	mov	r0, r6
 8012002:	f000 fa28 	bl	8012456 <_ZSt13__invoke_implIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8012006:	bf00      	nop
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>:
      _M_access() noexcept
 801200e:	b580      	push	{r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7fc ffc7 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 801201c:	4603      	mov	r3, r0
 801201e:	4618      	mov	r0, r3
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
	...

08012028 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8012028:	b590      	push	{r4, r7, lr}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	4613      	mov	r3, r2
 8012034:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8012036:	79fb      	ldrb	r3, [r7, #7]
 8012038:	2b03      	cmp	r3, #3
 801203a:	d82a      	bhi.n	8012092 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
 801203c:	a201      	add	r2, pc, #4	@ (adr r2, 8012044 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 801203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012042:	bf00      	nop
 8012044:	08012055 	.word	0x08012055
 8012048:	08012063 	.word	0x08012063
 801204c:	08012077 	.word	0x08012077
 8012050:	08012089 	.word	0x08012089
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f7fd fb79 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 801205a:	4603      	mov	r3, r0
 801205c:	4a0f      	ldr	r2, [pc, #60]	@ (801209c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x74>)
 801205e:	601a      	str	r2, [r3, #0]
	      break;
 8012060:	e017      	b.n	8012092 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8012062:	68b8      	ldr	r0, [r7, #8]
 8012064:	f7ff ffab 	bl	8011fbe <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 8012068:	4604      	mov	r4, r0
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f7ff ffcf 	bl	801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8012070:	4603      	mov	r3, r0
 8012072:	601c      	str	r4, [r3, #0]
	      break;
 8012074:	e00d      	b.n	8012092 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8012076:	68b8      	ldr	r0, [r7, #8]
 8012078:	f7ff ffa1 	bl	8011fbe <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 801207c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 801207e:	4619      	mov	r1, r3
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 fa06 	bl	8012492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>
	      break;
 8012086:	e004      	b.n	8012092 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8012088:	4621      	mov	r1, r4
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f000 fa13 	bl	80124b6 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8012090:	bf00      	nop
	  return false;
 8012092:	2300      	movs	r3, #0
	}
 8012094:	4618      	mov	r0, r3
 8012096:	3714      	adds	r7, #20
 8012098:	46bd      	mov	sp, r7
 801209a:	bd90      	pop	{r4, r7, pc}
 801209c:	08019db0 	.word	0x08019db0

080120a0 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>:
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	683a      	ldr	r2, [r7, #0]
 80120ae:	4611      	mov	r1, r2
 80120b0:	4618      	mov	r0, r3
 80120b2:	f000 fa14 	bl	80124de <_ZNSt8functionIFvhP11dummyPacketEEC1EOS3_>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80120c0:	b590      	push	{r4, r7, lr}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60f8      	str	r0, [r7, #12]
 80120c8:	60b9      	str	r1, [r7, #8]
 80120ca:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80120cc:	2010      	movs	r0, #16
 80120ce:	f004 fc1d 	bl	801690c <_Znwj>
 80120d2:	4603      	mov	r3, r0
 80120d4:	461c      	mov	r4, r3
 80120d6:	68b8      	ldr	r0, [r7, #8]
 80120d8:	f7ff fc70 	bl	80119bc <_ZSt7forwardIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80120dc:	4603      	mov	r3, r0
 80120de:	4619      	mov	r1, r3
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7ff ffdd 	bl	80120a0 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
	    __dest._M_access<_Functor*>()
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f000 f82e 	bl	8012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80120ec:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80120ee:	601c      	str	r4, [r3, #0]
	  }
 80120f0:	bf00      	nop
 80120f2:	3714      	adds	r7, #20
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd90      	pop	{r4, r7, pc}

080120f8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fa1a 	bl	801253a <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
 8012106:	4603      	mov	r3, r0
 8012108:	681b      	ldr	r3, [r3, #0]
	}
 801210a:	4618      	mov	r0, r3
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <_ZSt10__invoke_rIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8012112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012114:	b085      	sub	sp, #20
 8012116:	af00      	add	r7, sp, #0
 8012118:	60f8      	str	r0, [r7, #12]
 801211a:	60b9      	str	r1, [r7, #8]
 801211c:	607a      	str	r2, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f000 fa17 	bl	8012552 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012124:	4604      	mov	r4, r0
 8012126:	68b8      	ldr	r0, [r7, #8]
 8012128:	f7fd facb 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801212c:	4605      	mov	r5, r0
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff fbc2 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8012134:	4603      	mov	r3, r0
 8012136:	462a      	mov	r2, r5
 8012138:	4621      	mov	r1, r4
 801213a:	4630      	mov	r0, r6
 801213c:	f000 fa14 	bl	8012568 <_ZSt13__invoke_implIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
 8012140:	bf00      	nop
 8012142:	3714      	adds	r7, #20
 8012144:	46bd      	mov	sp, r7
 8012146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>:
      _M_access() noexcept
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7fc ff2a 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 8012156:	4603      	mov	r3, r0
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8012160:	b590      	push	{r4, r7, lr}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	4613      	mov	r3, r2
 801216c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	2b03      	cmp	r3, #3
 8012172:	d82a      	bhi.n	80121ca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
 8012174:	a201      	add	r2, pc, #4	@ (adr r2, 801217c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 8012176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217a:	bf00      	nop
 801217c:	0801218d 	.word	0x0801218d
 8012180:	0801219b 	.word	0x0801219b
 8012184:	080121af 	.word	0x080121af
 8012188:	080121c1 	.word	0x080121c1
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f7fd fadd 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8012192:	4603      	mov	r3, r0
 8012194:	4a0f      	ldr	r2, [pc, #60]	@ (80121d4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x74>)
 8012196:	601a      	str	r2, [r3, #0]
	      break;
 8012198:	e017      	b.n	80121ca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801219a:	68b8      	ldr	r0, [r7, #8]
 801219c:	f7ff ffac 	bl	80120f8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 80121a0:	4604      	mov	r4, r0
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f7ff ffd0 	bl	8012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80121a8:	4603      	mov	r3, r0
 80121aa:	601c      	str	r4, [r3, #0]
	      break;
 80121ac:	e00d      	b.n	80121ca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80121ae:	68b8      	ldr	r0, [r7, #8]
 80121b0:	f7ff ffa2 	bl	80120f8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 80121b4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80121b6:	4619      	mov	r1, r3
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f000 f9f3 	bl	80125a4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>
	      break;
 80121be:	e004      	b.n	80121ca <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80121c0:	4621      	mov	r1, r4
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	f000 fa00 	bl	80125c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 80121c8:	bf00      	nop
	  return false;
 80121ca:	2300      	movs	r3, #0
	}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd90      	pop	{r4, r7, pc}
 80121d4:	08019d64 	.word	0x08019d64

080121d8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80121e4:	200c      	movs	r0, #12
 80121e6:	f004 fb91 	bl	801690c <_Znwj>
 80121ea:	4603      	mov	r3, r0
 80121ec:	461c      	mov	r4, r3
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f7ff fc2b 	bl	8011a4a <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80121f4:	4602      	mov	r2, r0
 80121f6:	4623      	mov	r3, r4
 80121f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80121fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	f000 f82e 	bl	8012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8012204:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8012206:	601c      	str	r4, [r3, #0]
	  }
 8012208:	bf00      	nop
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	bd90      	pop	{r4, r7, pc}

08012210 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f9ec 	bl	80125f6 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
 801221e:	4603      	mov	r3, r0
 8012220:	681b      	ldr	r3, [r3, #0]
	}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <_ZSt10__invoke_rIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 801222a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801222c:	b085      	sub	sp, #20
 801222e:	af00      	add	r7, sp, #0
 8012230:	60f8      	str	r0, [r7, #12]
 8012232:	60b9      	str	r1, [r7, #8]
 8012234:	607a      	str	r2, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f000 f9e9 	bl	801260e <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801223c:	4604      	mov	r4, r0
 801223e:	68b8      	ldr	r0, [r7, #8]
 8012240:	f7fd fa3f 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012244:	4605      	mov	r5, r0
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7ff fb36 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801224c:	4603      	mov	r3, r0
 801224e:	462a      	mov	r2, r5
 8012250:	4621      	mov	r1, r4
 8012252:	4630      	mov	r0, r6
 8012254:	f000 f9e6 	bl	8012624 <_ZSt13__invoke_implIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
 8012258:	bf00      	nop
 801225a:	3714      	adds	r7, #20
 801225c:	46bd      	mov	sp, r7
 801225e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>:
      _M_access() noexcept
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7fc fe9e 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 801226e:	4603      	mov	r3, r0
 8012270:	4618      	mov	r0, r3
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8012278:	b590      	push	{r4, r7, lr}
 801227a:	b085      	sub	sp, #20
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	4613      	mov	r3, r2
 8012284:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8012286:	79fb      	ldrb	r3, [r7, #7]
 8012288:	2b03      	cmp	r3, #3
 801228a:	d82a      	bhi.n	80122e2 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
 801228c:	a201      	add	r2, pc, #4	@ (adr r2, 8012294 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 801228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012292:	bf00      	nop
 8012294:	080122a5 	.word	0x080122a5
 8012298:	080122b3 	.word	0x080122b3
 801229c:	080122c7 	.word	0x080122c7
 80122a0:	080122d9 	.word	0x080122d9
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f7fd fa51 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80122aa:	4603      	mov	r3, r0
 80122ac:	4a0f      	ldr	r2, [pc, #60]	@ (80122ec <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x74>)
 80122ae:	601a      	str	r2, [r3, #0]
	      break;
 80122b0:	e017      	b.n	80122e2 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80122b2:	68b8      	ldr	r0, [r7, #8]
 80122b4:	f7ff ffac 	bl	8012210 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 80122b8:	4604      	mov	r4, r0
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f7ff ffd0 	bl	8012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 80122c0:	4603      	mov	r3, r0
 80122c2:	601c      	str	r4, [r3, #0]
	      break;
 80122c4:	e00d      	b.n	80122e2 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80122c6:	68b8      	ldr	r0, [r7, #8]
 80122c8:	f7ff ffa2 	bl	8012210 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 80122cc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80122ce:	4619      	mov	r1, r3
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f000 f9c5 	bl	8012660 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>
	      break;
 80122d6:	e004      	b.n	80122e2 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80122d8:	4621      	mov	r1, r4
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	f000 f9d2 	bl	8012684 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 80122e0:	bf00      	nop
	  return false;
 80122e2:	2300      	movs	r3, #0
	}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3714      	adds	r7, #20
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd90      	pop	{r4, r7, pc}
 80122ec:	08019d0c 	.word	0x08019d0c

080122f0 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>:
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	683a      	ldr	r2, [r7, #0]
 80122fe:	4611      	mov	r1, r2
 8012300:	4618      	mov	r0, r3
 8012302:	f000 f9d3 	bl	80126ac <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1EOS3_>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4618      	mov	r0, r3
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createISA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8012310:	b590      	push	{r4, r7, lr}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 801231c:	2010      	movs	r0, #16
 801231e:	f004 faf5 	bl	801690c <_Znwj>
 8012322:	4603      	mov	r3, r0
 8012324:	461c      	mov	r4, r3
 8012326:	68b8      	ldr	r0, [r7, #8]
 8012328:	f7ff fbda 	bl	8011ae0 <_ZSt7forwardIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801232c:	4603      	mov	r3, r0
 801232e:	4619      	mov	r1, r3
 8012330:	4620      	mov	r0, r4
 8012332:	f7ff ffdd 	bl	80122f0 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
	    __dest._M_access<_Functor*>()
 8012336:	68f8      	ldr	r0, [r7, #12]
 8012338:	f000 f82e 	bl	8012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 801233c:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 801233e:	601c      	str	r4, [r3, #0]
	  }
 8012340:	bf00      	nop
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	bd90      	pop	{r4, r7, pc}

08012348 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 f9d9 	bl	8012708 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
 8012356:	4603      	mov	r3, r0
 8012358:	681b      	ldr	r3, [r3, #0]
	}
 801235a:	4618      	mov	r0, r3
 801235c:	3708      	adds	r7, #8
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <_ZSt10__invoke_rIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIX16is_invocable_r_vIS4_T0_DpT1_EES4_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8012362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012364:	b085      	sub	sp, #20
 8012366:	af00      	add	r7, sp, #0
 8012368:	60f8      	str	r0, [r7, #12]
 801236a:	60b9      	str	r1, [r7, #8]
 801236c:	607a      	str	r2, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f000 f9d6 	bl	8012720 <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012374:	4604      	mov	r4, r0
 8012376:	68b8      	ldr	r0, [r7, #8]
 8012378:	f7fd f9a3 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801237c:	4605      	mov	r5, r0
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7ff fa9a 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8012384:	4603      	mov	r3, r0
 8012386:	462a      	mov	r2, r5
 8012388:	4621      	mov	r1, r4
 801238a:	4630      	mov	r0, r6
 801238c:	f000 f9d3 	bl	8012736 <_ZSt13__invoke_implIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
 8012390:	bf00      	nop
 8012392:	3714      	adds	r7, #20
 8012394:	46bd      	mov	sp, r7
 8012396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>:
      _M_access() noexcept
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7fc fe02 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 80123a6:	4603      	mov	r3, r0
 80123a8:	4618      	mov	r0, r3
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80123b0:	b590      	push	{r4, r7, lr}
 80123b2:	b085      	sub	sp, #20
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	4613      	mov	r3, r2
 80123bc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80123be:	79fb      	ldrb	r3, [r7, #7]
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d82a      	bhi.n	801241a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
 80123c4:	a201      	add	r2, pc, #4	@ (adr r2, 80123cc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 80123c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ca:	bf00      	nop
 80123cc:	080123dd 	.word	0x080123dd
 80123d0:	080123eb 	.word	0x080123eb
 80123d4:	080123ff 	.word	0x080123ff
 80123d8:	08012411 	.word	0x08012411
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7fd f9b5 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80123e2:	4603      	mov	r3, r0
 80123e4:	4a0f      	ldr	r2, [pc, #60]	@ (8012424 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x74>)
 80123e6:	601a      	str	r2, [r3, #0]
	      break;
 80123e8:	e017      	b.n	801241a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80123ea:	68b8      	ldr	r0, [r7, #8]
 80123ec:	f7ff ffac 	bl	8012348 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 80123f0:	4604      	mov	r4, r0
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f7ff ffd0 	bl	8012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80123f8:	4603      	mov	r3, r0
 80123fa:	601c      	str	r4, [r3, #0]
	      break;
 80123fc:	e00d      	b.n	801241a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80123fe:	68b8      	ldr	r0, [r7, #8]
 8012400:	f7ff ffa2 	bl	8012348 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8012404:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8012406:	4619      	mov	r1, r3
 8012408:	68f8      	ldr	r0, [r7, #12]
 801240a:	f000 f9b2 	bl	8012772 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>
	      break;
 801240e:	e004      	b.n	801241a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8012410:	4621      	mov	r1, r4
 8012412:	68f8      	ldr	r0, [r7, #12]
 8012414:	f000 f9bf 	bl	8012796 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8012418:	bf00      	nop
	  return false;
 801241a:	2300      	movs	r3, #0
	}
 801241c:	4618      	mov	r0, r3
 801241e:	3714      	adds	r7, #20
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}
 8012424:	08019cb4 	.word	0x08019cb4

08012428 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const noexcept
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7fc fdc5 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 8012436:	4603      	mov	r3, r0
 8012438:	4618      	mov	r0, r3
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4618      	mov	r0, r3
 801244c:	370c      	adds	r7, #12
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr

08012456 <_ZSt13__invoke_implIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012456:	b5b0      	push	{r4, r5, r7, lr}
 8012458:	b084      	sub	sp, #16
 801245a:	af00      	add	r7, sp, #0
 801245c:	7338      	strb	r0, [r7, #12]
 801245e:	60b9      	str	r1, [r7, #8]
 8012460:	607a      	str	r2, [r7, #4]
 8012462:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012464:	68b8      	ldr	r0, [r7, #8]
 8012466:	f7ff ffeb 	bl	8012440 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801246a:	4605      	mov	r5, r0
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7fd f928 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012472:	4603      	mov	r3, r0
 8012474:	781c      	ldrb	r4, [r3, #0]
 8012476:	6838      	ldr	r0, [r7, #0]
 8012478:	f7ff fa1e 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801247c:	4603      	mov	r3, r0
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	461a      	mov	r2, r3
 8012482:	4621      	mov	r1, r4
 8012484:	4628      	mov	r0, r5
 8012486:	f7ff f81d 	bl	80114c4 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>
 801248a:	bf00      	nop
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bdb0      	pop	{r4, r5, r7, pc}

08012492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8012492:	b590      	push	{r4, r7, lr}
 8012494:	b083      	sub	sp, #12
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 801249c:	6838      	ldr	r0, [r7, #0]
 801249e:	f000 f991 	bl	80127c4 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80124a2:	4603      	mov	r3, r0
 80124a4:	4622      	mov	r2, r4
 80124a6:	4619      	mov	r1, r3
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f996 	bl	80127da <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 80124ae:	bf00      	nop
 80124b0:	370c      	adds	r7, #12
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd90      	pop	{r4, r7, pc}

080124b6 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff fda4 	bl	801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 80124c6:	4603      	mov	r3, r0
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d003      	beq.n	80124d6 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 80124ce:	210c      	movs	r1, #12
 80124d0:	4618      	mov	r0, r3
 80124d2:	f004 f979 	bl	80167c8 <_ZdlPvj>
	}
 80124d6:	bf00      	nop
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <_ZNSt8functionIFvhP11dummyPacketEEC1EOS3_>:
      function(function&& __x) noexcept
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	6039      	str	r1, [r7, #0]
      : _Function_base(), _M_invoker(__x._M_invoker)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	461a      	mov	r2, r3
 80124ec:	2300      	movs	r3, #0
 80124ee:	6013      	str	r3, [r2, #0]
 80124f0:	6053      	str	r3, [r2, #4]
 80124f2:	6093      	str	r3, [r2, #8]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fc fed4 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	68da      	ldr	r2, [r3, #12]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8012504:	6838      	ldr	r0, [r7, #0]
 8012506:	f7ff fa49 	bl	801199c <_ZNKSt8functionIFvhP11dummyPacketEEcvbEv>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d00f      	beq.n	8012530 <_ZNSt8functionIFvhP11dummyPacketEEC1EOS3_+0x52>
	    _M_functor = __x._M_functor;
 8012510:	683a      	ldr	r2, [r7, #0]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012518:	e883 0003 	stmia.w	r3, {r0, r1}
	    _M_manager = __x._M_manager;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	689a      	ldr	r2, [r3, #8]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	609a      	str	r2, [r3, #8]
	    __x._M_manager = nullptr;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	2200      	movs	r2, #0
 8012528:	609a      	str	r2, [r3, #8]
	    __x._M_invoker = nullptr;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2200      	movs	r2, #0
 801252e:	60da      	str	r2, [r3, #12]
      }
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4618      	mov	r0, r3
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const noexcept
 801253a:	b580      	push	{r7, lr}
 801253c:	b082      	sub	sp, #8
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7fc fd3c 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 8012548:	4603      	mov	r3, r0
 801254a:	4618      	mov	r0, r3
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012552:	b480      	push	{r7}
 8012554:	b083      	sub	sp, #12
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <_ZSt13__invoke_implIvRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012568:	b5b0      	push	{r4, r5, r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	7338      	strb	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012576:	68b8      	ldr	r0, [r7, #8]
 8012578:	f7ff ffeb 	bl	8012552 <_ZSt7forwardIRZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801257c:	4605      	mov	r5, r0
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7fd f89f 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012584:	4603      	mov	r3, r0
 8012586:	781c      	ldrb	r4, [r3, #0]
 8012588:	6838      	ldr	r0, [r7, #0]
 801258a:	f7ff f995 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801258e:	4603      	mov	r3, r0
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	4621      	mov	r1, r4
 8012596:	4628      	mov	r0, r5
 8012598:	f7fe ffb4 	bl	8011504 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>
 801259c:	bf00      	nop
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bdb0      	pop	{r4, r5, r7, pc}

080125a4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80125a4:	b590      	push	{r4, r7, lr}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80125ae:	6838      	ldr	r0, [r7, #0]
 80125b0:	f000 f92f 	bl	8012812 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80125b4:	4603      	mov	r3, r0
 80125b6:	4622      	mov	r2, r4
 80125b8:	4619      	mov	r1, r3
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f000 f944 	bl	8012848 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 80125c0:	bf00      	nop
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd90      	pop	{r4, r7, pc}

080125c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 80125c8:	b590      	push	{r4, r7, lr}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff fdb8 	bl	8012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80125d8:	4603      	mov	r3, r0
 80125da:	681c      	ldr	r4, [r3, #0]
 80125dc:	2c00      	cmp	r4, #0
 80125de:	d006      	beq.n	80125ee <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x26>
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7fe ffad 	bl	8011540 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
 80125e6:	2110      	movs	r1, #16
 80125e8:	4620      	mov	r0, r4
 80125ea:	f004 f8ed 	bl	80167c8 <_ZdlPvj>
	}
 80125ee:	bf00      	nop
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd90      	pop	{r4, r7, pc}

080125f6 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const noexcept
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b082      	sub	sp, #8
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f7fc fcde 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 8012604:	4603      	mov	r3, r0
 8012606:	4618      	mov	r0, r3
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801260e:	b480      	push	{r7}
 8012610:	b083      	sub	sp, #12
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	4618      	mov	r0, r3
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <_ZSt13__invoke_implIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012624:	b5b0      	push	{r4, r5, r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	7338      	strb	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
 8012630:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012632:	68b8      	ldr	r0, [r7, #8]
 8012634:	f7ff ffeb 	bl	801260e <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012638:	4605      	mov	r5, r0
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7fd f841 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012640:	4603      	mov	r3, r0
 8012642:	781c      	ldrb	r4, [r3, #0]
 8012644:	6838      	ldr	r0, [r7, #0]
 8012646:	f7ff f937 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801264a:	4603      	mov	r3, r0
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	461a      	mov	r2, r3
 8012650:	4621      	mov	r1, r4
 8012652:	4628      	mov	r0, r5
 8012654:	f7fe ff81 	bl	801155a <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>
 8012658:	bf00      	nop
 801265a:	3710      	adds	r7, #16
 801265c:	46bd      	mov	sp, r7
 801265e:	bdb0      	pop	{r4, r5, r7, pc}

08012660 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8012660:	b590      	push	{r4, r7, lr}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 801266a:	6838      	ldr	r0, [r7, #0]
 801266c:	f000 f908 	bl	8012880 <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012670:	4603      	mov	r3, r0
 8012672:	4622      	mov	r2, r4
 8012674:	4619      	mov	r1, r3
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f90d 	bl	8012896 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	bd90      	pop	{r4, r7, pc}

08012684 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ff fde6 	bl	8012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8012694:	4603      	mov	r3, r0
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d003      	beq.n	80126a4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 801269c:	210c      	movs	r1, #12
 801269e:	4618      	mov	r0, r3
 80126a0:	f004 f892 	bl	80167c8 <_ZdlPvj>
	}
 80126a4:	bf00      	nop
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1EOS3_>:
      function(function&& __x) noexcept
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
      : _Function_base(), _M_invoker(__x._M_invoker)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	461a      	mov	r2, r3
 80126ba:	2300      	movs	r3, #0
 80126bc:	6013      	str	r3, [r2, #0]
 80126be:	6053      	str	r3, [r2, #4]
 80126c0:	6093      	str	r3, [r2, #8]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fc fded 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	68da      	ldr	r2, [r3, #12]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80126d2:	6838      	ldr	r0, [r7, #0]
 80126d4:	f7ff f9f4 	bl	8011ac0 <_ZNKSt8functionIFvhP21MaxChassisPowerPacketEEcvbEv>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00f      	beq.n	80126fe <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1EOS3_+0x52>
	    _M_functor = __x._M_functor;
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126e6:	e883 0003 	stmia.w	r3, {r0, r1}
	    _M_manager = __x._M_manager;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	689a      	ldr	r2, [r3, #8]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	609a      	str	r2, [r3, #8]
	    __x._M_manager = nullptr;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2200      	movs	r2, #0
 80126f6:	609a      	str	r2, [r3, #8]
	    __x._M_invoker = nullptr;
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	2200      	movs	r2, #0
 80126fc:	60da      	str	r2, [r3, #12]
      }
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4618      	mov	r0, r3
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const noexcept
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7fc fc55 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 8012716:	4603      	mov	r3, r0
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <_ZSt13__invoke_implIvRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012736:	b5b0      	push	{r4, r5, r7, lr}
 8012738:	b084      	sub	sp, #16
 801273a:	af00      	add	r7, sp, #0
 801273c:	7338      	strb	r0, [r7, #12]
 801273e:	60b9      	str	r1, [r7, #8]
 8012740:	607a      	str	r2, [r7, #4]
 8012742:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012744:	68b8      	ldr	r0, [r7, #8]
 8012746:	f7ff ffeb 	bl	8012720 <_ZSt7forwardIRZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801274a:	4605      	mov	r5, r0
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7fc ffb8 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012752:	4603      	mov	r3, r0
 8012754:	781c      	ldrb	r4, [r3, #0]
 8012756:	6838      	ldr	r0, [r7, #0]
 8012758:	f7ff f8ae 	bl	80118b8 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801275c:	4603      	mov	r3, r0
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	461a      	mov	r2, r3
 8012762:	4621      	mov	r1, r4
 8012764:	4628      	mov	r0, r5
 8012766:	f7fe ff18 	bl	801159a <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>
 801276a:	bf00      	nop
 801276c:	3710      	adds	r7, #16
 801276e:	46bd      	mov	sp, r7
 8012770:	bdb0      	pop	{r4, r5, r7, pc}

08012772 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorIRKSA_EEvRSt9_Any_dataOS5_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8012772:	b590      	push	{r4, r7, lr}
 8012774:	b083      	sub	sp, #12
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 801277c:	6838      	ldr	r0, [r7, #0]
 801277e:	f000 f8a6 	bl	80128ce <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012782:	4603      	mov	r3, r0
 8012784:	4622      	mov	r2, r4
 8012786:	4619      	mov	r1, r3
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 f8bb 	bl	8012904 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>
	  }
 801278e:	bf00      	nop
 8012790:	370c      	adds	r7, #12
 8012792:	46bd      	mov	sp, r7
 8012794:	bd90      	pop	{r4, r7, pc}

08012796 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8012796:	b590      	push	{r4, r7, lr}
 8012798:	b083      	sub	sp, #12
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fdf9 	bl	8012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80127a6:	4603      	mov	r3, r0
 80127a8:	681c      	ldr	r4, [r3, #0]
 80127aa:	2c00      	cmp	r4, #0
 80127ac:	d006      	beq.n	80127bc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x26>
 80127ae:	4620      	mov	r0, r4
 80127b0:	f7fe ff11 	bl	80115d6 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
 80127b4:	2110      	movs	r1, #16
 80127b6:	4620      	mov	r0, r4
 80127b8:	f004 f806 	bl	80167c8 <_ZdlPvj>
	}
 80127bc:	bf00      	nop
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd90      	pop	{r4, r7, pc}

080127c4 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 80127da:	b590      	push	{r4, r7, lr}
 80127dc:	b085      	sub	sp, #20
 80127de:	af00      	add	r7, sp, #0
 80127e0:	60f8      	str	r0, [r7, #12]
 80127e2:	60b9      	str	r1, [r7, #8]
 80127e4:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80127e6:	200c      	movs	r0, #12
 80127e8:	f004 f890 	bl	801690c <_Znwj>
 80127ec:	4603      	mov	r3, r0
 80127ee:	461c      	mov	r4, r3
 80127f0:	68b8      	ldr	r0, [r7, #8]
 80127f2:	f7ff ffe7 	bl	80127c4 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80127f6:	4602      	mov	r2, r0
 80127f8:	4623      	mov	r3, r4
 80127fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80127fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f7ff fc04 	bl	801200e <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8012806:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8012808:	601c      	str	r4, [r3, #0]
	  }
 801280a:	bf00      	nop
 801280c:	3714      	adds	r7, #20
 801280e:	46bd      	mov	sp, r7
 8012810:	bd90      	pop	{r4, r7, pc}

08012812 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012812:	b480      	push	{r7}
 8012814:	b083      	sub	sp, #12
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4618      	mov	r0, r3
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>:
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	4611      	mov	r1, r2
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe ff64 	bl	8011706 <_ZNSt8functionIFvhP11dummyPacketEEC1ERKS3_>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8012848:	b590      	push	{r4, r7, lr}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8012854:	2010      	movs	r0, #16
 8012856:	f004 f859 	bl	801690c <_Znwj>
 801285a:	4603      	mov	r3, r0
 801285c:	461c      	mov	r4, r3
 801285e:	68b8      	ldr	r0, [r7, #8]
 8012860:	f7ff ffd7 	bl	8012812 <_ZSt7forwardIRKZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012864:	4603      	mov	r3, r0
 8012866:	4619      	mov	r1, r3
 8012868:	4620      	mov	r0, r4
 801286a:	f7ff ffdd 	bl	8012828 <_ZZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>
	    __dest._M_access<_Functor*>()
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f7ff fc6a 	bl	8012148 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8012874:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8012876:	601c      	str	r4, [r3, #0]
	  }
 8012878:	bf00      	nop
 801287a:	3714      	adds	r7, #20
 801287c:	46bd      	mov	sp, r7
 801287e:	bd90      	pop	{r4, r7, pc}

08012880 <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012880:	b480      	push	{r7}
 8012882:	b083      	sub	sp, #12
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	4618      	mov	r0, r3
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8012896:	b590      	push	{r4, r7, lr}
 8012898:	b085      	sub	sp, #20
 801289a:	af00      	add	r7, sp, #0
 801289c:	60f8      	str	r0, [r7, #12]
 801289e:	60b9      	str	r1, [r7, #8]
 80128a0:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 80128a2:	200c      	movs	r0, #12
 80128a4:	f004 f832 	bl	801690c <_Znwj>
 80128a8:	4603      	mov	r3, r0
 80128aa:	461c      	mov	r4, r3
 80128ac:	68b8      	ldr	r0, [r7, #8]
 80128ae:	f7ff ffe7 	bl	8012880 <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80128b2:	4602      	mov	r2, r0
 80128b4:	4623      	mov	r3, r4
 80128b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80128b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    __dest._M_access<_Functor*>()
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f7ff fccf 	bl	8012260 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 80128c2:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 80128c4:	601c      	str	r4, [r3, #0]
	  }
 80128c6:	bf00      	nop
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd90      	pop	{r4, r7, pc}

080128ce <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80128ce:	b480      	push	{r7}
 80128d0:	b083      	sub	sp, #12
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	4618      	mov	r0, r3
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>:
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	683a      	ldr	r2, [r7, #0]
 80128f2:	4611      	mov	r1, r2
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7fe ff95 	bl	8011824 <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1ERKS3_>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E9_M_createIRKSA_EEvRSt9_Any_dataOS5_St17integral_constantIbLb0EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, false_type)
 8012904:	b590      	push	{r4, r7, lr}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	713a      	strb	r2, [r7, #4]
	      = new _Functor(std::forward<_Fn>(__f));
 8012910:	2010      	movs	r0, #16
 8012912:	f003 fffb 	bl	801690c <_Znwj>
 8012916:	4603      	mov	r3, r0
 8012918:	461c      	mov	r4, r3
 801291a:	68b8      	ldr	r0, [r7, #8]
 801291c:	f7ff ffd7 	bl	80128ce <_ZSt7forwardIRKZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8012920:	4603      	mov	r3, r0
 8012922:	4619      	mov	r1, r3
 8012924:	4620      	mov	r0, r4
 8012926:	f7ff ffdd 	bl	80128e4 <_ZZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>
	    __dest._M_access<_Functor*>()
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f7ff fd34 	bl	8012398 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8012930:	4603      	mov	r3, r0
	      = new _Functor(std::forward<_Fn>(__f));
 8012932:	601c      	str	r4, [r3, #0]
	  }
 8012934:	bf00      	nop
 8012936:	3714      	adds	r7, #20
 8012938:	46bd      	mov	sp, r7
 801293a:	bd90      	pop	{r4, r7, pc}

0801293c <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 801293c:	b480      	push	{r7}
 801293e:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8012940:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8012942:	4618      	mov	r0, r3
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 801294c:	b480      	push	{r7}
 801294e:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8012950:	2300      	movs	r3, #0
#endif
  }
 8012952:	4618      	mov	r0, r3
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801295c:	b480      	push	{r7}
 801295e:	b083      	sub	sp, #12
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	429a      	cmp	r2, r3
 8012988:	d201      	bcs.n	801298e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	e000      	b.n	8012990 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 801298e:	687b      	ldr	r3, [r7, #4]
    }
 8012990:	4618      	mov	r0, r3
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	4a04      	ldr	r2, [pc, #16]	@ (80129b8 <_ZN8IODriverD1Ev+0x1c>)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	601a      	str	r2, [r3, #0]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	0801a0a4 	.word	0x0801a0a4

080129bc <_ZN8IODriverD0Ev>:
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7ff ffe9 	bl	801299c <_ZN8IODriverD1Ev>
 80129ca:	2104      	movs	r1, #4
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f003 fefb 	bl	80167c8 <_ZdlPvj>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	4a04      	ldr	r2, [pc, #16]	@ (80129f8 <_ZN6ThreadD1Ev+0x1c>)
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr
 80129f8:	0801a08c 	.word	0x0801a08c

080129fc <_ZN6ThreadD0Ev>:
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7ff ffe9 	bl	80129dc <_ZN6ThreadD1Ev>
 8012a0a:	2138      	movs	r1, #56	@ 0x38
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f003 fedb 	bl	80167c8 <_ZdlPvj>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <_ZN8IODriverC1Ev>:
class IODriver {
 8012a1c:	b480      	push	{r7}
 8012a1e:	b083      	sub	sp, #12
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	4a04      	ldr	r2, [pc, #16]	@ (8012a38 <_ZN8IODriverC1Ev+0x1c>)
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	601a      	str	r2, [r3, #0]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr
 8012a38:	0801a0a4 	.word	0x0801a0a4

08012a3c <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm>:


static ROCANDriver* instance;
static xSemaphoreHandle semaphore;

ROCANDriver::ROCANDriver(FDCAN_HandleTypeDef* fdcan, uint32_t can_id): Thread("ROCANDriver", osPriorityRealtime, 4096), fdcan(fdcan), can_id(can_id) {
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b086      	sub	sp, #24
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff ffe6 	bl	8012a1c <_ZN8IODriverC1Ev>
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	1d18      	adds	r0, r3, #4
 8012a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012a58:	2230      	movs	r2, #48	@ 0x30
 8012a5a:	4920      	ldr	r1, [pc, #128]	@ (8012adc <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xa0>)
 8012a5c:	f002 fc5e 	bl	801531c <_ZN6ThreadC1EPKc12osPriority_tm>
 8012a60:	4a1f      	ldr	r2, [pc, #124]	@ (8012ae0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xa4>)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	601a      	str	r2, [r3, #0]
 8012a66:	4a1f      	ldr	r2, [pc, #124]	@ (8012ae4 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xa8>)
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	605a      	str	r2, [r3, #4]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	68ba      	ldr	r2, [r7, #8]
 8012a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	4a1c      	ldr	r2, [pc, #112]	@ (8012ae8 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xac>)
 8012a78:	3390      	adds	r3, #144	@ 0x90
 8012a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	33b4      	adds	r3, #180	@ 0xb4
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f000 fcda 	bl	8013448 <_ZNSt8functionIFvhPhmEEC1Ev>
	instance = this;
 8012a94:	4a15      	ldr	r2, [pc, #84]	@ (8012aec <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xb0>)
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6013      	str	r3, [r2, #0]
//	LOG_INFO("Driver created for FDCAN%d", getSenderID(fdcan));
	FDCANDriver_list.push_back(this);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	617b      	str	r3, [r7, #20]
 8012a9e:	f107 0314 	add.w	r3, r7, #20
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	4812      	ldr	r0, [pc, #72]	@ (8012af0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xb4>)
 8012aa6:	f000 fce5 	bl	8013474 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE9push_backEOS1_>
	this->RxData = (uint8_t*) pvPortMalloc(RX_ELEMENT_NUMBER*RX_ELEMENT_SIZE);
 8012aaa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012aae:	f7fb ff7d 	bl	800e9ac <pvPortMalloc>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	665a      	str	r2, [r3, #100]	@ 0x64

    if((RxData == nullptr)){
//        LOG_ERROR("Unable to allocate Rx buffer for FDCAN%d", getSenderID(fdcan));
    }

    semaphore = xSemaphoreCreateCounting(16, 0);
 8012ab8:	2100      	movs	r1, #0
 8012aba:	2010      	movs	r0, #16
 8012abc:	f7f9 fabf 	bl	800c03e <xQueueCreateCountingSemaphore>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8012af4 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xb8>)
 8012ac4:	6013      	str	r3, [r2, #0]

    if(semaphore == nullptr) {
//    	LOG_ERROR("Unable to allocate semaphore for FDCAN%d", getSenderID(fdcan));
    }
    setTickDelay(0);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	3304      	adds	r3, #4
 8012aca:	2100      	movs	r1, #0
 8012acc:	4618      	mov	r0, r3
 8012ace:	f002 fc55 	bl	801537c <_ZN6Thread12setTickDelayEm>
}
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	08019aac 	.word	0x08019aac
 8012ae0:	0801a054 	.word	0x0801a054
 8012ae4:	0801a074 	.word	0x0801a074
 8012ae8:	08019ab8 	.word	0x08019ab8
 8012aec:	20010918 	.word	0x20010918
 8012af0:	20010920 	.word	0x20010920
 8012af4:	2001091c 	.word	0x2001091c

08012af8 <_ZN11ROCANDriverD1Ev>:

ROCANDriver::~ROCANDriver() {
 8012af8:	b590      	push	{r4, r7, lr}
 8012afa:	b089      	sub	sp, #36	@ 0x24
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	4a24      	ldr	r2, [pc, #144]	@ (8012b94 <_ZN11ROCANDriverD1Ev+0x9c>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	4a24      	ldr	r2, [pc, #144]	@ (8012b98 <_ZN11ROCANDriverD1Ev+0xa0>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	605a      	str	r2, [r3, #4]
    vPortFree(RxData);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7fc f819 	bl	800eb48 <vPortFree>
    FDCANDriver_list.erase(std::remove(FDCANDriver_list.begin(), FDCANDriver_list.end(), this), FDCANDriver_list.end());
 8012b16:	4821      	ldr	r0, [pc, #132]	@ (8012b9c <_ZN11ROCANDriverD1Ev+0xa4>)
 8012b18:	f000 fb0e 	bl	8013138 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	481f      	ldr	r0, [pc, #124]	@ (8012b9c <_ZN11ROCANDriverD1Ev+0xa4>)
 8012b20:	f000 fb2a 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8012b24:	4601      	mov	r1, r0
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	617b      	str	r3, [r7, #20]
 8012b2a:	f107 0314 	add.w	r3, r7, #20
 8012b2e:	461a      	mov	r2, r3
 8012b30:	4620      	mov	r0, r4
 8012b32:	f000 fcb0 	bl	8013496 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_>
 8012b36:	4603      	mov	r3, r0
 8012b38:	613b      	str	r3, [r7, #16]
 8012b3a:	f107 0210 	add.w	r2, r7, #16
 8012b3e:	f107 030c 	add.w	r3, r7, #12
 8012b42:	4611      	mov	r1, r2
 8012b44:	4618      	mov	r0, r3
 8012b46:	f000 fcba 	bl	80134be <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_vEERKNS0_IT_S7_EE>
 8012b4a:	4814      	ldr	r0, [pc, #80]	@ (8012b9c <_ZN11ROCANDriverD1Ev+0xa4>)
 8012b4c:	f000 fb14 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8012b50:	4603      	mov	r3, r0
 8012b52:	61fb      	str	r3, [r7, #28]
 8012b54:	f107 021c 	add.w	r2, r7, #28
 8012b58:	f107 0318 	add.w	r3, r7, #24
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f000 fcad 	bl	80134be <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_vEERKNS0_IT_S7_EE>
 8012b64:	69ba      	ldr	r2, [r7, #24]
 8012b66:	68f9      	ldr	r1, [r7, #12]
 8012b68:	480c      	ldr	r0, [pc, #48]	@ (8012b9c <_ZN11ROCANDriverD1Ev+0xa4>)
 8012b6a:	f000 fcb9 	bl	80134e0 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>
}
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	33b4      	adds	r3, #180	@ 0xb4
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fc fa80 	bl	800f078 <_ZNSt8functionIFvhPhmEED1Ev>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff ff2d 	bl	80129dc <_ZN6ThreadD1Ev>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ff ff09 	bl	801299c <_ZN8IODriverD1Ev>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3724      	adds	r7, #36	@ 0x24
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd90      	pop	{r4, r7, pc}
 8012b94:	0801a054 	.word	0x0801a054
 8012b98:	0801a074 	.word	0x0801a074
 8012b9c:	20010920 	.word	0x20010920

08012ba0 <_ZThn4_N11ROCANDriverD1Ev>:
#define NB_CAN_PORTS           2                  // CHANGE ONLY IF NEEDED

class ROCANDriver: public IODriver,  public Thread{
    public:
		ROCANDriver(FDCAN_HandleTypeDef* fdcan, uint32_t can_id); // Constructor
        virtual ~ROCANDriver(); // Destructor
 8012ba0:	f1a0 0004 	sub.w	r0, r0, #4
 8012ba4:	f7ff bfa8 	b.w	8012af8 <_ZN11ROCANDriverD1Ev>

08012ba8 <_ZN11ROCANDriverD0Ev>:
ROCANDriver::~ROCANDriver() {
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
}
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff ffa1 	bl	8012af8 <_ZN11ROCANDriverD1Ev>
 8012bb6:	21c4      	movs	r1, #196	@ 0xc4
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f003 fe05 	bl	80167c8 <_ZdlPvj>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <_ZThn4_N11ROCANDriverD0Ev>:
 8012bc8:	f1a0 0004 	sub.w	r0, r0, #4
 8012bcc:	f7ff bfec 	b.w	8012ba8 <_ZN11ROCANDriverD0Ev>

08012bd0 <_ZN11ROCANDriver4initEv>:

void ROCANDriver::init() {
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]

	/* Configure Rx filter */
	if(fdcan == &hfdcan3)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bde:	4a11      	ldr	r2, [pc, #68]	@ (8012c24 <_ZN11ROCANDriver4initEv+0x54>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d102      	bne.n	8012bea <_ZN11ROCANDriver4initEv+0x1a>
		MX_FDCAN3_Init();
 8012be4:	f7ee fd48 	bl	8001678 <MX_FDCAN3_Init>
 8012be8:	e007      	b.n	8012bfa <_ZN11ROCANDriver4initEv+0x2a>
	else if (fdcan == &hfdcan2)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8012c28 <_ZN11ROCANDriver4initEv+0x58>)
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d101      	bne.n	8012bfa <_ZN11ROCANDriver4initEv+0x2a>
		MX_FDCAN2_Init();
 8012bf6:	f7ee fcf9 	bl	80015ec <MX_FDCAN2_Init>
	/* Start the FDCan line */
	filterConfig(can_id);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012c00:	4619      	mov	r1, r3
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 f816 	bl	8012c34 <_ZN11ROCANDriver12filterConfigEm>
	TxHeaderConfig();
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 f8b0 	bl	8012d6e <_ZN11ROCANDriver14TxHeaderConfigEv>
	TxHeaderConfigID(0);
 8012c0e:	2100      	movs	r1, #0
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 f8cd 	bl	8012db0 <_ZN11ROCANDriver16TxHeaderConfigIDEm>
	start();
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f000 f8f4 	bl	8012e04 <_ZN11ROCANDriver5startEv>
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	200004ac 	.word	0x200004ac
 8012c28:	20000448 	.word	0x20000448

08012c2c <_ZThn4_N11ROCANDriver4initEv>:
        uint8_t* getTxBuffer();

        xSemaphoreHandle getSemaphore();
        uint8_t getSenderID(FDCAN_HandleTypeDef* fdcan);

        void init();
 8012c2c:	f1a0 0004 	sub.w	r0, r0, #4
 8012c30:	f7ff bfce 	b.w	8012bd0 <_ZN11ROCANDriver4initEv>

08012c34 <_ZN11ROCANDriver12filterConfigEm>:

void ROCANDriver::filterConfig(uint32_t id){
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af02      	add	r7, sp, #8
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]

	// Node ID (can_id)
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	sFilterConfig.FilterIndex = 0;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	sFilterConfig.FilterID1 = id;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	683a      	ldr	r2, [r7, #0]
 8012c62:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	sFilterConfig.FilterID2 = 0x7FF;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012c6c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	if(HAL_FDCAN_ConfigFilter(fdcan, &sFilterConfig) != HAL_OK)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	3398      	adds	r3, #152	@ 0x98
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4610      	mov	r0, r2
 8012c7e:	f7f3 f873 	bl	8005d68 <HAL_FDCAN_ConfigFilter>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	bf14      	ite	ne
 8012c88:	2301      	movne	r3, #1
 8012c8a:	2300      	moveq	r3, #0
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <_ZN11ROCANDriver12filterConfigEm+0x66>
//		LOG_ERROR("Unable to configure CAN RX filters index 0 for FDCAN%d", getSenderID(fdcan));

	// General ID (0x7FF)
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	sFilterConfig.FilterIndex = 1;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2201      	movs	r2, #1
 8012cae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	sFilterConfig.FilterID1 = 0x7FF;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012cb8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	sFilterConfig.FilterID2 = 0x7FF;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012cc2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	if(HAL_FDCAN_ConfigFilter(fdcan, &sFilterConfig) != HAL_OK)
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	3398      	adds	r3, #152	@ 0x98
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	4610      	mov	r0, r2
 8012cd4:	f7f3 f848 	bl	8005d68 <HAL_FDCAN_ConfigFilter>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	bf14      	ite	ne
 8012cde:	2301      	movne	r3, #1
 8012ce0:	2300      	moveq	r3, #0
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d009      	beq.n	8012cfc <_ZN11ROCANDriver12filterConfigEm+0xc8>
//		LOG_ERROR("Unable to configure CAN RX filters index 1 for FDCAN%d", getSenderID(fdcan));

	HAL_FDCAN_ConfigGlobalFilter(fdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8012cee:	2300      	movs	r3, #0
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	2102      	movs	r1, #2
 8012cf8:	f7f3 f890 	bl	8005e1c <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012d02:	2200      	movs	r2, #0
 8012d04:	2101      	movs	r1, #1
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7f3 faa0 	bl	800624c <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_BUS_OFF, 0);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012d12:	2200      	movs	r2, #0
 8012d14:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7f3 fa97 	bl	800624c <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ConfigTxDelayCompensation(fdcan, fdcan->Init.DataPrescaler * fdcan->Init.DataTimeSeg1, 0);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8012d32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012d34:	fb02 f303 	mul.w	r3, r2, r3
 8012d38:	2200      	movs	r2, #0
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	f7f3 f89f 	bl	8005e7e <HAL_FDCAN_ConfigTxDelayCompensation>
	HAL_FDCAN_EnableTxDelayCompensation(fdcan);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7f3 f8bb 	bl	8005ec2 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8012d4c:	bf00      	nop
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <_ZN11ROCANDriver10get_can_idEv>:

uint32_t ROCANDriver::get_can_id() {
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
	return can_id;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr

08012d6e <_ZN11ROCANDriver14TxHeaderConfigEv>:

void ROCANDriver::TxHeaderConfig(){
 8012d6e:	b480      	push	{r7}
 8012d70:	b083      	sub	sp, #12
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	671a      	str	r2, [r3, #112]	@ 0x70
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	679a      	str	r2, [r3, #120]	@ 0x78
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012d88:	67da      	str	r2, [r3, #124]	@ 0x7c
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8012d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	TxHeader.MessageMarker = 0;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8012da4:	bf00      	nop
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <_ZN11ROCANDriver16TxHeaderConfigIDEm>:

void ROCANDriver::TxHeaderConfigID(uint32_t id){
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	6039      	str	r1, [r7, #0]
	TxHeader.Identifier = id;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	669a      	str	r2, [r3, #104]	@ 0x68
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8012dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
	if(id < 0x800) {
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012dce:	d202      	bcs.n	8012dd6 <_ZN11ROCANDriver16TxHeaderConfigIDEm+0x26>
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
}
 8012dd6:	bf00      	nop
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <_ZN11ROCANDriver20TxHeaderConfigLengthEm>:

void ROCANDriver::TxHeaderConfigLength(uint32_t length){
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b082      	sub	sp, #8
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
 8012dea:	6039      	str	r1, [r7, #0]
	TxHeader.DataLength = len2dlc(length);
 8012dec:	2200      	movs	r2, #0
 8012dee:	6839      	ldr	r1, [r7, #0]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 f81f 	bl	8012e34 <_ZN11ROCANDriver7len2dlcEmb>
 8012df6:	4602      	mov	r2, r0
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012dfc:	bf00      	nop
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <_ZN11ROCANDriver5startEv>:

void ROCANDriver::start(){
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
	if(HAL_FDCAN_Start(fdcan) != HAL_OK)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7f3 f876 	bl	8005f04 <HAL_FDCAN_Start>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	bf14      	ite	ne
 8012e1e:	2301      	movne	r3, #1
 8012e20:	2300      	moveq	r3, #0
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <_ZN11ROCANDriver5startEv+0x28>
		int i = 1;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	60fb      	str	r3, [r7, #12]
//		LOG_ERROR("Couldn't start FDCAN%d module", getSenderID(fdcan));
}
 8012e2c:	bf00      	nop
 8012e2e:	3710      	adds	r7, #16
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <_ZN11ROCANDriver7len2dlcEmb>:

uint32_t ROCANDriver::len2dlc(uint32_t length, bool return_raw) {
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	71fb      	strb	r3, [r7, #7]

	if (return_raw) {
 8012e42:	79fb      	ldrb	r3, [r7, #7]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d029      	beq.n	8012e9c <_ZN11ROCANDriver7len2dlcEmb+0x68>
		if (length <= 8)
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	2b08      	cmp	r3, #8
 8012e4c:	d801      	bhi.n	8012e52 <_ZN11ROCANDriver7len2dlcEmb+0x1e>
			return length;
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	e072      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 12)
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	2b0c      	cmp	r3, #12
 8012e56:	d801      	bhi.n	8012e5c <_ZN11ROCANDriver7len2dlcEmb+0x28>
			return 12;
 8012e58:	230c      	movs	r3, #12
 8012e5a:	e06d      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 16)
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2b10      	cmp	r3, #16
 8012e60:	d801      	bhi.n	8012e66 <_ZN11ROCANDriver7len2dlcEmb+0x32>
			return 16;
 8012e62:	2310      	movs	r3, #16
 8012e64:	e068      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 20)
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	2b14      	cmp	r3, #20
 8012e6a:	d801      	bhi.n	8012e70 <_ZN11ROCANDriver7len2dlcEmb+0x3c>
			return 20;
 8012e6c:	2314      	movs	r3, #20
 8012e6e:	e063      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 24)
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	2b18      	cmp	r3, #24
 8012e74:	d801      	bhi.n	8012e7a <_ZN11ROCANDriver7len2dlcEmb+0x46>
			return 24;
 8012e76:	2318      	movs	r3, #24
 8012e78:	e05e      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 32)
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	2b20      	cmp	r3, #32
 8012e7e:	d801      	bhi.n	8012e84 <_ZN11ROCANDriver7len2dlcEmb+0x50>
			return 32;
 8012e80:	2320      	movs	r3, #32
 8012e82:	e059      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 48)
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	2b30      	cmp	r3, #48	@ 0x30
 8012e88:	d801      	bhi.n	8012e8e <_ZN11ROCANDriver7len2dlcEmb+0x5a>
			return 48;
 8012e8a:	2330      	movs	r3, #48	@ 0x30
 8012e8c:	e054      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 64)
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	2b40      	cmp	r3, #64	@ 0x40
 8012e92:	d801      	bhi.n	8012e98 <_ZN11ROCANDriver7len2dlcEmb+0x64>
			return 64;
 8012e94:	2340      	movs	r3, #64	@ 0x40
 8012e96:	e04f      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else
			return 0;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e04d      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
	}
	else {
		// Standard lengths
		switch (length) {
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	2b08      	cmp	r3, #8
 8012ea0:	d826      	bhi.n	8012ef0 <_ZN11ROCANDriver7len2dlcEmb+0xbc>
 8012ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ea8 <_ZN11ROCANDriver7len2dlcEmb+0x74>)
 8012ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea8:	08012ecd 	.word	0x08012ecd
 8012eac:	08012ed1 	.word	0x08012ed1
 8012eb0:	08012ed5 	.word	0x08012ed5
 8012eb4:	08012ed9 	.word	0x08012ed9
 8012eb8:	08012edd 	.word	0x08012edd
 8012ebc:	08012ee1 	.word	0x08012ee1
 8012ec0:	08012ee5 	.word	0x08012ee5
 8012ec4:	08012ee9 	.word	0x08012ee9
 8012ec8:	08012eed 	.word	0x08012eed
		case 0:
			return FDCAN_DLC_BYTES_0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e033      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 1:
			return FDCAN_DLC_BYTES_1;
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	e031      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 2:
			return FDCAN_DLC_BYTES_2;
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	e02f      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 3:
			return FDCAN_DLC_BYTES_3;
 8012ed8:	2303      	movs	r3, #3
 8012eda:	e02d      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 4:
			return FDCAN_DLC_BYTES_4;
 8012edc:	2304      	movs	r3, #4
 8012ede:	e02b      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 5:
			return FDCAN_DLC_BYTES_5;
 8012ee0:	2305      	movs	r3, #5
 8012ee2:	e029      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 6:
			return FDCAN_DLC_BYTES_6;
 8012ee4:	2306      	movs	r3, #6
 8012ee6:	e027      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 7:
			return FDCAN_DLC_BYTES_7;
 8012ee8:	2307      	movs	r3, #7
 8012eea:	e025      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		case 8:
			return FDCAN_DLC_BYTES_8;
 8012eec:	2308      	movs	r3, #8
 8012eee:	e023      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		}

		// Extended lengths
		if (length <= 12)
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	2b0c      	cmp	r3, #12
 8012ef4:	d801      	bhi.n	8012efa <_ZN11ROCANDriver7len2dlcEmb+0xc6>
			return FDCAN_DLC_BYTES_12;
 8012ef6:	2309      	movs	r3, #9
 8012ef8:	e01e      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 16)
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	2b10      	cmp	r3, #16
 8012efe:	d801      	bhi.n	8012f04 <_ZN11ROCANDriver7len2dlcEmb+0xd0>
			return FDCAN_DLC_BYTES_16;
 8012f00:	230a      	movs	r3, #10
 8012f02:	e019      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 20)
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2b14      	cmp	r3, #20
 8012f08:	d801      	bhi.n	8012f0e <_ZN11ROCANDriver7len2dlcEmb+0xda>
			return FDCAN_DLC_BYTES_20;
 8012f0a:	230b      	movs	r3, #11
 8012f0c:	e014      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 24)
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	2b18      	cmp	r3, #24
 8012f12:	d801      	bhi.n	8012f18 <_ZN11ROCANDriver7len2dlcEmb+0xe4>
			return FDCAN_DLC_BYTES_24;
 8012f14:	230c      	movs	r3, #12
 8012f16:	e00f      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 32)
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	2b20      	cmp	r3, #32
 8012f1c:	d801      	bhi.n	8012f22 <_ZN11ROCANDriver7len2dlcEmb+0xee>
			return FDCAN_DLC_BYTES_32;
 8012f1e:	230d      	movs	r3, #13
 8012f20:	e00a      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 48)
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	2b30      	cmp	r3, #48	@ 0x30
 8012f26:	d801      	bhi.n	8012f2c <_ZN11ROCANDriver7len2dlcEmb+0xf8>
			return FDCAN_DLC_BYTES_48;
 8012f28:	230e      	movs	r3, #14
 8012f2a:	e005      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else if (length <= 64)
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	2b40      	cmp	r3, #64	@ 0x40
 8012f30:	d801      	bhi.n	8012f36 <_ZN11ROCANDriver7len2dlcEmb+0x102>
			return FDCAN_DLC_BYTES_64;
 8012f32:	230f      	movs	r3, #15
 8012f34:	e000      	b.n	8012f38 <_ZN11ROCANDriver7len2dlcEmb+0x104>
		else
			return 0;
 8012f36:	2300      	movs	r3, #0
	}
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3714      	adds	r7, #20
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f42:	4770      	bx	lr

08012f44 <_ZN11ROCANDriver7dlc2lenEm>:

uint32_t ROCANDriver::dlc2len(uint32_t dlc) {
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
	switch (dlc) {
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	2b0f      	cmp	r3, #15
 8012f52:	d843      	bhi.n	8012fdc <_ZN11ROCANDriver7dlc2lenEm+0x98>
 8012f54:	a201      	add	r2, pc, #4	@ (adr r2, 8012f5c <_ZN11ROCANDriver7dlc2lenEm+0x18>)
 8012f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f5a:	bf00      	nop
 8012f5c:	08012f9d 	.word	0x08012f9d
 8012f60:	08012fa1 	.word	0x08012fa1
 8012f64:	08012fa5 	.word	0x08012fa5
 8012f68:	08012fa9 	.word	0x08012fa9
 8012f6c:	08012fad 	.word	0x08012fad
 8012f70:	08012fb1 	.word	0x08012fb1
 8012f74:	08012fb5 	.word	0x08012fb5
 8012f78:	08012fb9 	.word	0x08012fb9
 8012f7c:	08012fbd 	.word	0x08012fbd
 8012f80:	08012fc1 	.word	0x08012fc1
 8012f84:	08012fc5 	.word	0x08012fc5
 8012f88:	08012fc9 	.word	0x08012fc9
 8012f8c:	08012fcd 	.word	0x08012fcd
 8012f90:	08012fd1 	.word	0x08012fd1
 8012f94:	08012fd5 	.word	0x08012fd5
 8012f98:	08012fd9 	.word	0x08012fd9
	case FDCAN_DLC_BYTES_0:
		return 0;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	e01e      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_1:
		return 1;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e01c      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_2:
		return 2;
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e01a      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_3:
		return 3;
 8012fa8:	2303      	movs	r3, #3
 8012faa:	e018      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_4:
		return 4;
 8012fac:	2304      	movs	r3, #4
 8012fae:	e016      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_5:
		return 5;
 8012fb0:	2305      	movs	r3, #5
 8012fb2:	e014      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_6:
		return 6;
 8012fb4:	2306      	movs	r3, #6
 8012fb6:	e012      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_7:
		return 7;
 8012fb8:	2307      	movs	r3, #7
 8012fba:	e010      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_8:
		return 8;
 8012fbc:	2308      	movs	r3, #8
 8012fbe:	e00e      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_12:
		return 12;
 8012fc0:	230c      	movs	r3, #12
 8012fc2:	e00c      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_16:
		return 16;
 8012fc4:	2310      	movs	r3, #16
 8012fc6:	e00a      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_20:
		return 20;
 8012fc8:	2314      	movs	r3, #20
 8012fca:	e008      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_24:
		return 24;
 8012fcc:	2318      	movs	r3, #24
 8012fce:	e006      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_32:
		return 32;
 8012fd0:	2320      	movs	r3, #32
 8012fd2:	e004      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_48:
		return 48;
 8012fd4:	2330      	movs	r3, #48	@ 0x30
 8012fd6:	e002      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	case FDCAN_DLC_BYTES_64:
		return 64;
 8012fd8:	2340      	movs	r3, #64	@ 0x40
 8012fda:	e000      	b.n	8012fde <_ZN11ROCANDriver7dlc2lenEm+0x9a>
	}
	return 0;
 8012fdc:	2300      	movs	r3, #0
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	370c      	adds	r7, #12
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop

08012fec <_ZN11ROCANDriver4loopEv>:


void ROCANDriver::loop() {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b086      	sub	sp, #24
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY)) {
 8012ff4:	4b24      	ldr	r3, [pc, #144]	@ (8013088 <_ZN11ROCANDriver4loopEv+0x9c>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7f9 fb65 	bl	800c6cc <xQueueSemaphoreTake>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	bf14      	ite	ne
 8013008:	2301      	movne	r3, #1
 801300a:	2300      	moveq	r3, #0
 801300c:	b2db      	uxtb	r3, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	d035      	beq.n	801307e <_ZN11ROCANDriver4loopEv+0x92>
		uint8_t sender = getSenderID(fdcan);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013018:	4619      	mov	r1, r3
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 f9c2 	bl	80133a4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>
 8013020:	4603      	mov	r3, r0
 8013022:	74fb      	strb	r3, [r7, #19]
		if((FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0){
			uint32_t fill_level = HAL_FDCAN_GetRxFifoFillLevel(fdcan, FDCAN_RX_FIFO0);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801302a:	2140      	movs	r1, #64	@ 0x40
 801302c:	4618      	mov	r0, r3
 801302e:	f7f3 f8dd 	bl	80061ec <HAL_FDCAN_GetRxFifoFillLevel>
 8013032:	6178      	str	r0, [r7, #20]
			while (fill_level > 0) {
 8013034:	e020      	b.n	8013078 <_ZN11ROCANDriver4loopEv+0x8c>
				HAL_FDCAN_GetRxMessage(fdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013046:	2140      	movs	r1, #64	@ 0x40
 8013048:	f7f2 ffc8 	bl	8005fdc <HAL_FDCAN_GetRxMessage>
				uint32_t length = dlc2len(RxHeader.DataLength);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013050:	4619      	mov	r1, r3
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7ff ff76 	bl	8012f44 <_ZN11ROCANDriver7dlc2lenEm>
 8013058:	60f8      	str	r0, [r7, #12]
				receiveFDCan(sender, RxData, length);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801305e:	7cf9      	ldrb	r1, [r7, #19]
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 f90a 	bl	801327c <_ZN11ROCANDriver12receiveFDCanEhPhm>
				fill_level = HAL_FDCAN_GetRxFifoFillLevel(fdcan, FDCAN_RX_FIFO0);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801306e:	2140      	movs	r1, #64	@ 0x40
 8013070:	4618      	mov	r0, r3
 8013072:	f7f3 f8bb 	bl	80061ec <HAL_FDCAN_GetRxFifoFillLevel>
 8013076:	6178      	str	r0, [r7, #20]
			while (fill_level > 0) {
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d1db      	bne.n	8013036 <_ZN11ROCANDriver4loopEv+0x4a>
			}
		}
	}
}
 801307e:	bf00      	nop
 8013080:	3718      	adds	r7, #24
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	2001091c 	.word	0x2001091c

0801308c <_ZThn4_N11ROCANDriver4loopEv>:
        void loop();
 801308c:	f1a0 0004 	sub.w	r0, r0, #4
 8013090:	f7ff bfac 	b.w	8012fec <_ZN11ROCANDriver4loopEv>

08013094 <_ZN11ROCANDriver7receiveERKSt8functionIFvhPhmEE>:

void ROCANDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
    this->receiver_func = receiver;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	33b4      	adds	r3, #180	@ 0xb4
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f000 fa54 	bl	8013552 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 80130aa:	bf00      	nop
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <_ZN11ROCANDriver8transmitEPhm>:

void ROCANDriver::transmit(uint8_t* buffer, uint32_t length) {
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b086      	sub	sp, #24
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	60f8      	str	r0, [r7, #12]
 80130ba:	60b9      	str	r1, [r7, #8]
 80130bc:	607a      	str	r2, [r7, #4]
//		if(HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, buffer) != HAL_OK) {
//			LOG_ERROR("Transmission failed on FDCAN%d", getSenderID(fdcan));
//		}
//	}

	if (HAL_FDCAN_GetTxFifoFreeLevel(fdcan) > 0) {
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7f3 f8af 	bl	8006228 <HAL_FDCAN_GetTxFifoFreeLevel>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	bf14      	ite	ne
 80130d0:	2301      	movne	r3, #1
 80130d2:	2300      	moveq	r3, #0
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d02a      	beq.n	8013130 <_ZN11ROCANDriver8transmitEPhm+0x7e>
		for (uint32_t offset = 0; offset < length; offset += 8) {
 80130da:	2300      	movs	r3, #0
 80130dc:	617b      	str	r3, [r7, #20]
 80130de:	e021      	b.n	8013124 <_ZN11ROCANDriver8transmitEPhm+0x72>
				// Calculate the size of the current chunk (either 8 or less for the last chunk)
				uint32_t chunkSize = (length - offset > 8) ? 8 : (length - offset);
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	2b08      	cmp	r3, #8
 80130e8:	bf28      	it	cs
 80130ea:	2308      	movcs	r3, #8
 80130ec:	613b      	str	r3, [r7, #16]

				// Configure the header for the current chunk size
				TxHeaderConfigLength(chunkSize);
 80130ee:	6939      	ldr	r1, [r7, #16]
 80130f0:	68f8      	ldr	r0, [r7, #12]
 80130f2:	f7ff fe76 	bl	8012de2 <_ZN11ROCANDriver20TxHeaderConfigLengthEm>


				// Transmit the current chunk
				if (HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, &buffer[offset]) != HAL_OK) {
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	4413      	add	r3, r2
 8013108:	461a      	mov	r2, r3
 801310a:	f7f2 ff23 	bl	8005f54 <HAL_FDCAN_AddMessageToTxFifoQ>
 801310e:	4603      	mov	r3, r0
 8013110:	2b00      	cmp	r3, #0
 8013112:	bf14      	ite	ne
 8013114:	2301      	movne	r3, #1
 8013116:	2300      	moveq	r3, #0
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	d107      	bne.n	801312e <_ZN11ROCANDriver8transmitEPhm+0x7c>
		for (uint32_t offset = 0; offset < length; offset += 8) {
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	3308      	adds	r3, #8
 8013122:	617b      	str	r3, [r7, #20]
 8013124:	697a      	ldr	r2, [r7, #20]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	429a      	cmp	r2, r3
 801312a:	d3d9      	bcc.n	80130e0 <_ZN11ROCANDriver8transmitEPhm+0x2e>
//		// Normally always HAL_OK if (HAL_FDCAN_GetTxFifoFreeLevel(fdcan) > 0
//		if(HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, buffer) != HAL_OK) {
////			LOG_ERROR("Transmission failed on FDCAN%d", getSenderID(fdcan));
//		}
//	}
}
 801312c:	e000      	b.n	8013130 <_ZN11ROCANDriver8transmitEPhm+0x7e>
					break;
 801312e:	bf00      	nop
}
 8013130:	bf00      	nop
 8013132:	3718      	adds	r7, #24
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	f107 030c 	add.w	r3, r7, #12
 8013146:	4611      	mov	r1, r2
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f805 	bl	8013158 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013158:	b480      	push	{r7}
 801315a:	b083      	sub	sp, #12
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4618      	mov	r0, r3
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr

08013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	1d1a      	adds	r2, r3, #4
 8013184:	f107 030c 	add.w	r3, r7, #12
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f7ff ffe4 	bl	8013158 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801319a:	b590      	push	{r4, r7, lr}
 801319c:	b083      	sub	sp, #12
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
 80131a2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f810 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 80131aa:	4603      	mov	r3, r0
 80131ac:	681c      	ldr	r4, [r3, #0]
 80131ae:	6838      	ldr	r0, [r7, #0]
 80131b0:	f000 f80b 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 80131b4:	4603      	mov	r3, r0
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	429c      	cmp	r4, r3
 80131ba:	bf0c      	ite	eq
 80131bc:	2301      	moveq	r3, #1
 80131be:	2300      	movne	r3, #0
 80131c0:	b2db      	uxtb	r3, r3
 80131c2:	4618      	mov	r0, r3
 80131c4:	370c      	adds	r7, #12
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd90      	pop	{r4, r7, pc}

080131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80131ca:	b480      	push	{r7}
 80131cc:	b083      	sub	sp, #12
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>:
 */
uint8_t* ROCANDriver::getRxBuffer() {
	return this->RxData;
}

ROCANDriver* ROCANDriver::getInstance(FDCAN_HandleTypeDef* fdcan) {
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
	for (auto & driver : FDCANDriver_list) {
 8013200:	4b1d      	ldr	r3, [pc, #116]	@ (8013278 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x80>)
 8013202:	617b      	str	r3, [r7, #20]
 8013204:	6978      	ldr	r0, [r7, #20]
 8013206:	f7ff ff97 	bl	8013138 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
 801320a:	4603      	mov	r3, r0
 801320c:	60fb      	str	r3, [r7, #12]
 801320e:	6978      	ldr	r0, [r7, #20]
 8013210:	f7ff ffb2 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8013214:	4603      	mov	r3, r0
 8013216:	60bb      	str	r3, [r7, #8]
 8013218:	e01b      	b.n	8013252 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x5a>
 801321a:	f107 030c 	add.w	r3, r7, #12
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff ffde 	bl	80131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
 8013224:	6138      	str	r0, [r7, #16]
		if (driver->getFDCan() == fdcan)
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4618      	mov	r0, r3
 801322c:	f000 f83a 	bl	80132a4 <_ZN11ROCANDriver8getFDCanEv>
 8013230:	4602      	mov	r2, r0
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	4293      	cmp	r3, r2
 8013236:	bf0c      	ite	eq
 8013238:	2301      	moveq	r3, #1
 801323a:	2300      	movne	r3, #0
 801323c:	b2db      	uxtb	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d002      	beq.n	8013248 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x50>
			return driver;
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	e013      	b.n	8013270 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x78>
	for (auto & driver : FDCANDriver_list) {
 8013248:	f107 030c 	add.w	r3, r7, #12
 801324c:	4618      	mov	r0, r3
 801324e:	f000 f99b 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
 8013252:	f107 0208 	add.w	r2, r7, #8
 8013256:	f107 030c 	add.w	r3, r7, #12
 801325a:	4611      	mov	r1, r2
 801325c:	4618      	mov	r0, r3
 801325e:	f7ff ff9c 	bl	801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8013262:	4603      	mov	r3, r0
 8013264:	f083 0301 	eor.w	r3, r3, #1
 8013268:	b2db      	uxtb	r3, r3
 801326a:	2b00      	cmp	r3, #0
 801326c:	d1d5      	bne.n	801321a <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x22>
	}
	return nullptr;
 801326e:	2300      	movs	r3, #0
}
 8013270:	4618      	mov	r0, r3
 8013272:	3718      	adds	r7, #24
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	20010920 	.word	0x20010920

0801327c <_ZN11ROCANDriver12receiveFDCanEhPhm>:
 *
 * @param sender_id the ID of the MCU
 * @param buffer the buffer to provide to the user-defined callback function
 * @param length the size of the data in the buffer to provide
 */
void ROCANDriver::receiveFDCan(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	607a      	str	r2, [r7, #4]
 8013286:	603b      	str	r3, [r7, #0]
 8013288:	460b      	mov	r3, r1
 801328a:	72fb      	strb	r3, [r7, #11]
	this->receiver_func(sender_id, buffer, length);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 8013292:	7af9      	ldrb	r1, [r7, #11]
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	f000 f986 	bl	80135a8 <_ZNKSt8functionIFvhPhmEEclEhS0_m>
}
 801329c:	bf00      	nop
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <_ZN11ROCANDriver8getFDCanEv>:

FDCAN_HandleTypeDef* ROCANDriver::getFDCan() {
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
	return this->fdcan;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <HAL_FDCAN_RxFifo0Callback>:

// Fifo0 Rx Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80132be:	b580      	push	{r7, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
 80132c6:	6039      	str	r1, [r7, #0]
	ROCANDriver* driver = ROCANDriver::getInstance(hfdcan);
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff ff95 	bl	80131f8 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>
 80132ce:	60f8      	str	r0, [r7, #12]
	xSemaphoreGiveFromISR(driver->getSemaphore(), nullptr);
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	f000 f88b 	bl	80133ec <_ZN11ROCANDriver12getSemaphoreEv>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2100      	movs	r1, #0
 80132da:	4618      	mov	r0, r3
 80132dc:	f7f9 f884 	bl	800c3e8 <xQueueGiveFromISR>
}
 80132e0:	bf00      	nop
 80132e2:	3710      	adds	r7, #16
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <HAL_FDCAN_ErrorStatusCallback>:


void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80132e8:	b590      	push	{r4, r7, lr}
 80132ea:	b085      	sub	sp, #20
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
	if(hfdcan == &hfdcan3){
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	4a29      	ldr	r2, [pc, #164]	@ (801339c <HAL_FDCAN_ErrorStatusCallback+0xb4>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d124      	bne.n	8013344 <HAL_FDCAN_ErrorStatusCallback+0x5c>
		MX_FDCAN3_Init();
 80132fa:	f7ee f9bd 	bl	8001678 <MX_FDCAN3_Init>
		ROCANDriver* driver = ROCANDriver::getInstance(hfdcan);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7ff ff7a 	bl	80131f8 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>
 8013304:	60b8      	str	r0, [r7, #8]
		while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
 8013306:	bf00      	nop
 8013308:	68b8      	ldr	r0, [r7, #8]
 801330a:	f000 f86f 	bl	80133ec <_ZN11ROCANDriver12getSemaphoreEv>
 801330e:	4603      	mov	r3, r0
 8013310:	2200      	movs	r2, #0
 8013312:	2100      	movs	r1, #0
 8013314:	4618      	mov	r0, r3
 8013316:	f7f9 fae9 	bl	800c8ec <xQueueReceiveFromISR>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	bf14      	ite	ne
 8013320:	2301      	movne	r3, #1
 8013322:	2300      	moveq	r3, #0
 8013324:	b2db      	uxtb	r3, r3
 8013326:	2b00      	cmp	r3, #0
 8013328:	d1ee      	bne.n	8013308 <HAL_FDCAN_ErrorStatusCallback+0x20>
		driver->filterConfig(driver->get_can_id());
 801332a:	68bc      	ldr	r4, [r7, #8]
 801332c:	68b8      	ldr	r0, [r7, #8]
 801332e:	f7ff fd11 	bl	8012d54 <_ZN11ROCANDriver10get_can_idEv>
 8013332:	4603      	mov	r3, r0
 8013334:	4619      	mov	r1, r3
 8013336:	4620      	mov	r0, r4
 8013338:	f7ff fc7c 	bl	8012c34 <_ZN11ROCANDriver12filterConfigEm>
		driver->start();
 801333c:	68b8      	ldr	r0, [r7, #8]
 801333e:	f7ff fd61 	bl	8012e04 <_ZN11ROCANDriver5startEv>
		ROCANDriver* driver = ROCANDriver::getInstance(hfdcan);
		while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
		driver->filterConfig(driver->get_can_id());
		driver->start();
	}
}
 8013342:	e027      	b.n	8013394 <HAL_FDCAN_ErrorStatusCallback+0xac>
	} else if (hfdcan == &hfdcan2) {
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	4a16      	ldr	r2, [pc, #88]	@ (80133a0 <HAL_FDCAN_ErrorStatusCallback+0xb8>)
 8013348:	4293      	cmp	r3, r2
 801334a:	d123      	bne.n	8013394 <HAL_FDCAN_ErrorStatusCallback+0xac>
		MX_FDCAN2_Init();
 801334c:	f7ee f94e 	bl	80015ec <MX_FDCAN2_Init>
		ROCANDriver* driver = ROCANDriver::getInstance(hfdcan);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7ff ff51 	bl	80131f8 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>
 8013356:	60f8      	str	r0, [r7, #12]
		while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
 8013358:	bf00      	nop
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f000 f846 	bl	80133ec <_ZN11ROCANDriver12getSemaphoreEv>
 8013360:	4603      	mov	r3, r0
 8013362:	2200      	movs	r2, #0
 8013364:	2100      	movs	r1, #0
 8013366:	4618      	mov	r0, r3
 8013368:	f7f9 fac0 	bl	800c8ec <xQueueReceiveFromISR>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	bf14      	ite	ne
 8013372:	2301      	movne	r3, #1
 8013374:	2300      	moveq	r3, #0
 8013376:	b2db      	uxtb	r3, r3
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1ee      	bne.n	801335a <HAL_FDCAN_ErrorStatusCallback+0x72>
		driver->filterConfig(driver->get_can_id());
 801337c:	68fc      	ldr	r4, [r7, #12]
 801337e:	68f8      	ldr	r0, [r7, #12]
 8013380:	f7ff fce8 	bl	8012d54 <_ZN11ROCANDriver10get_can_idEv>
 8013384:	4603      	mov	r3, r0
 8013386:	4619      	mov	r1, r3
 8013388:	4620      	mov	r0, r4
 801338a:	f7ff fc53 	bl	8012c34 <_ZN11ROCANDriver12filterConfigEm>
		driver->start();
 801338e:	68f8      	ldr	r0, [r7, #12]
 8013390:	f7ff fd38 	bl	8012e04 <_ZN11ROCANDriver5startEv>
}
 8013394:	bf00      	nop
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	bd90      	pop	{r4, r7, pc}
 801339c:	200004ac 	.word	0x200004ac
 80133a0:	20000448 	.word	0x20000448

080133a4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>:
 * @brief Get the sender id from the FDCAN port ID
 *
 * @param fdcan the FDCAN port to get
 * @return uint8_t the sender_id
 */
uint8_t ROCANDriver::getSenderID(FDCAN_HandleTypeDef* fdcan) {
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < NB_CAN_PORTS; ++i){
 80133ae:	2300      	movs	r3, #0
 80133b0:	60fb      	str	r3, [r7, #12]
 80133b2:	e010      	b.n	80133d6 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x32>
        if(this->mapper[i] == fdcan->Instance){
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	68fa      	ldr	r2, [r7, #12]
 80133b8:	3224      	adds	r2, #36	@ 0x24
 80133ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d104      	bne.n	80133d0 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x2c>
            return i+1;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	3301      	adds	r3, #1
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	e006      	b.n	80133de <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x3a>
    for(int i = 0; i < NB_CAN_PORTS; ++i){
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	3301      	adds	r3, #1
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b01      	cmp	r3, #1
 80133da:	ddeb      	ble.n	80133b4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x10>
        }
    }
    return 0;
 80133dc:	2300      	movs	r3, #0
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3714      	adds	r7, #20
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr
	...

080133ec <_ZN11ROCANDriver12getSemaphoreEv>:


xSemaphoreHandle ROCANDriver::getSemaphore() {
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	return semaphore;
 80133f4:	4b03      	ldr	r3, [pc, #12]	@ (8013404 <_ZN11ROCANDriver12getSemaphoreEv+0x18>)
 80133f6:	681b      	ldr	r3, [r3, #0]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	370c      	adds	r7, #12
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr
 8013404:	2001091c 	.word	0x2001091c

08013408 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 f8f7 	bl	8013604 <_ZNSaIP11ROCANDriverED1Ev>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8013420:	b480      	push	{r7}
 8013422:	b083      	sub	sp, #12
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	d201      	bcs.n	801343a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	e000      	b.n	801343c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 801343a:	687b      	ldr	r3, [r7, #4]
    }
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	461a      	mov	r2, r3
 8013454:	2300      	movs	r3, #0
 8013456:	6013      	str	r3, [r2, #0]
 8013458:	6053      	str	r3, [r2, #4]
 801345a:	6093      	str	r3, [r2, #8]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	4618      	mov	r0, r3
 8013460:	f7fb ff20 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	60da      	str	r2, [r3, #12]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801347e:	6838      	ldr	r0, [r7, #0]
 8013480:	f000 f8e4 	bl	801364c <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>
 8013484:	4603      	mov	r3, r0
 8013486:	4619      	mov	r1, r3
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f000 f8ea 	bl	8013662 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 801348e:	bf00      	nop
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}

08013496 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
 8013496:	b580      	push	{r7, lr}
 8013498:	b084      	sub	sp, #16
 801349a:	af00      	add	r7, sp, #0
 801349c:	60f8      	str	r0, [r7, #12]
 801349e:	60b9      	str	r1, [r7, #8]
 80134a0:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 f90f 	bl	80136c6 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP11ROCANDriverEENS0_16_Iter_equals_valIT_EERS6_>
 80134a8:	4603      	mov	r3, r0
 80134aa:	461a      	mov	r2, r3
 80134ac:	68b9      	ldr	r1, [r7, #8]
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f000 f918 	bl	80136e4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>
 80134b4:	4603      	mov	r3, r0
		__gnu_cxx::__ops::__iter_equals_val(__value));
    }
 80134b6:	4618      	mov	r0, r3
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_vEERKNS0_IT_S7_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 80134be:	b580      	push	{r7, lr}
 80134c0:	b082      	sub	sp, #8
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
 80134c6:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80134c8:	6838      	ldr	r0, [r7, #0]
 80134ca:	f7ff fe7e 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 80134ce:	4603      	mov	r3, r0
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	601a      	str	r2, [r3, #0]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>:
       *  Managing the pointer is the user's responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __first, const_iterator __last)
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b087      	sub	sp, #28
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
      {
	const auto __beg = begin();
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f7ff fe23 	bl	8013138 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
 80134f2:	4603      	mov	r3, r0
 80134f4:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f000 f950 	bl	801379c <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE6cbeginEv>
 80134fc:	4603      	mov	r3, r0
 80134fe:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 8013500:	f107 0210 	add.w	r2, r7, #16
 8013504:	f107 0308 	add.w	r3, r7, #8
 8013508:	4611      	mov	r1, r2
 801350a:	4618      	mov	r0, r3
 801350c:	f000 f956 	bl	80137bc <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8013510:	4602      	mov	r2, r0
 8013512:	f107 0314 	add.w	r3, r7, #20
 8013516:	4611      	mov	r1, r2
 8013518:	4618      	mov	r0, r3
 801351a:	f000 f964 	bl	80137e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
 801351e:	4604      	mov	r4, r0
 8013520:	f107 0210 	add.w	r2, r7, #16
 8013524:	1d3b      	adds	r3, r7, #4
 8013526:	4611      	mov	r1, r2
 8013528:	4618      	mov	r0, r3
 801352a:	f000 f947 	bl	80137bc <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801352e:	4602      	mov	r2, r0
 8013530:	f107 0314 	add.w	r3, r7, #20
 8013534:	4611      	mov	r1, r2
 8013536:	4618      	mov	r0, r3
 8013538:	f000 f955 	bl	80137e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
 801353c:	4603      	mov	r3, r0
 801353e:	461a      	mov	r2, r3
 8013540:	4621      	mov	r1, r4
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 f967 	bl	8013816 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>
 8013548:	4603      	mov	r3, r0
      }
 801354a:	4618      	mov	r0, r3
 801354c:	371c      	adds	r7, #28
 801354e:	46bd      	mov	sp, r7
 8013550:	bd90      	pop	{r4, r7, pc}

08013552 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 8013552:	b580      	push	{r7, lr}
 8013554:	b086      	sub	sp, #24
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
 801355a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801355c:	f107 0308 	add.w	r3, r7, #8
 8013560:	6839      	ldr	r1, [r7, #0]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 f9a4 	bl	80138b0 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 8013568:	f107 0308 	add.w	r3, r7, #8
 801356c:	6879      	ldr	r1, [r7, #4]
 801356e:	4618      	mov	r0, r3
 8013570:	f000 f9c9 	bl	8013906 <_ZNSt8functionIFvhPhmEE4swapERS2_>
 8013574:	f107 0308 	add.w	r3, r7, #8
 8013578:	4618      	mov	r0, r3
 801357a:	f7fb fd7d 	bl	800f078 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 801357e:	687b      	ldr	r3, [r7, #4]
      }
 8013580:	4618      	mov	r0, r3
 8013582:	3718      	adds	r7, #24
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	1d1a      	adds	r2, r3, #4
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	601a      	str	r2, [r3, #0]
	return *this;
 801359a:	687b      	ldr	r3, [r7, #4]
      }
 801359c:	4618      	mov	r0, r3
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr

080135a8 <_ZNKSt8functionIFvhPhmEEclEhS0_m>:
      operator()(_ArgTypes... __args) const
 80135a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ac:	b084      	sub	sp, #16
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	60f8      	str	r0, [r7, #12]
 80135b2:	607a      	str	r2, [r7, #4]
 80135b4:	603b      	str	r3, [r7, #0]
 80135b6:	460b      	mov	r3, r1
 80135b8:	72fb      	strb	r3, [r7, #11]
	if (_M_empty())
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fc fde3 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d001      	beq.n	80135cc <_ZNKSt8functionIFvhPhmEEclEhS0_m+0x24>
	  __throw_bad_function_call();
 80135c8:	f003 fcb3 	bl	8016f32 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68dc      	ldr	r4, [r3, #12]
 80135d0:	68fd      	ldr	r5, [r7, #12]
 80135d2:	f107 030b 	add.w	r3, r7, #11
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fc f873 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80135dc:	4606      	mov	r6, r0
 80135de:	1d3b      	adds	r3, r7, #4
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fc f879 	bl	800f6d8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80135e6:	4680      	mov	r8, r0
 80135e8:	463b      	mov	r3, r7
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fc f87f 	bl	800f6ee <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80135f0:	4603      	mov	r3, r0
 80135f2:	4642      	mov	r2, r8
 80135f4:	4631      	mov	r1, r6
 80135f6:	4628      	mov	r0, r5
 80135f8:	47a0      	blx	r4
 80135fa:	bf00      	nop
      }
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013604 <_ZNSaIP11ROCANDriverED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8013604:	b480      	push	{r7}
 8013606:	b083      	sub	sp, #12
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	4618      	mov	r0, r3
 8013610:	370c      	adds	r7, #12
 8013612:	46bd      	mov	sp, r7
 8013614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013618:	4770      	bx	lr

0801361a <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801361a:	b580      	push	{r7, lr}
 801361c:	b082      	sub	sp, #8
 801361e:	af00      	add	r7, sp, #0
 8013620:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689a      	ldr	r2, [r3, #8]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8013632:	461a      	mov	r2, r3
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 f987 	bl	8013948 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j>
      }
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fee3 	bl	8013408 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implD1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	4618      	mov	r0, r3
 8013658:	370c      	adds	r7, #12
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr

08013662 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8013662:	b5b0      	push	{r4, r5, r7, lr}
 8013664:	b082      	sub	sp, #8
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
 801366a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	685a      	ldr	r2, [r3, #4]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	429a      	cmp	r2, r3
 8013676:	d011      	beq.n	801369c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8013678:	687c      	ldr	r4, [r7, #4]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	685d      	ldr	r5, [r3, #4]
 801367e:	6838      	ldr	r0, [r7, #0]
 8013680:	f000 f975 	bl	801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 8013684:	4603      	mov	r3, r0
 8013686:	461a      	mov	r2, r3
 8013688:	4629      	mov	r1, r5
 801368a:	4620      	mov	r0, r4
 801368c:	f000 f97a 	bl	8013984 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	1d1a      	adds	r2, r3, #4
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	605a      	str	r2, [r3, #4]
 801369a:	e00c      	b.n	80136b6 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7ff fd6b 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 80136a2:	4604      	mov	r4, r0
 80136a4:	6838      	ldr	r0, [r7, #0]
 80136a6:	f000 f962 	bl	801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 80136aa:	4603      	mov	r3, r0
 80136ac:	461a      	mov	r2, r3
 80136ae:	4621      	mov	r1, r4
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 f9e5 	bl	8013a80 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f000 fa5e 	bl	8013b78 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE4backEv>
 80136bc:	4603      	mov	r3, r0
#endif
      }
 80136be:	4618      	mov	r0, r3
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bdb0      	pop	{r4, r5, r7, pc}

080136c6 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP11ROCANDriverEENS0_16_Iter_equals_valIT_EERS6_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80136c6:	b580      	push	{r7, lr}
 80136c8:	b084      	sub	sp, #16
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80136ce:	f107 030c 	add.w	r3, r7, #12
 80136d2:	6879      	ldr	r1, [r7, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f000 fa6a 	bl	8013bae <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEC1ERS4_>
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 80136e4:	b590      	push	{r4, r7, lr}
 80136e6:	b087      	sub	sp, #28
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	68b9      	ldr	r1, [r7, #8]
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	f000 fa69 	bl	8013bcc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>
 80136fa:	4603      	mov	r3, r0
 80136fc:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 80136fe:	f107 0208 	add.w	r2, r7, #8
 8013702:	f107 030c 	add.w	r3, r7, #12
 8013706:	4611      	mov	r1, r2
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff fd46 	bl	801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801370e:	4603      	mov	r3, r0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x34>
	return __first;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	e03d      	b.n	8013794 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xb0>
      _ForwardIterator __result = __first;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	617b      	str	r3, [r7, #20]
      ++__first;
 801371c:	f107 030c 	add.w	r3, r7, #12
 8013720:	4618      	mov	r0, r3
 8013722:	f7ff ff31 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __first != __last; ++__first)
 8013726:	e026      	b.n	8013776 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x92>
	if (!__pred(__first))
 8013728:	1d3b      	adds	r3, r7, #4
 801372a:	68f9      	ldr	r1, [r7, #12]
 801372c:	4618      	mov	r0, r3
 801372e:	f000 fa63 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013732:	4603      	mov	r3, r0
 8013734:	f083 0301 	eor.w	r3, r3, #1
 8013738:	b2db      	uxtb	r3, r3
 801373a:	2b00      	cmp	r3, #0
 801373c:	d016      	beq.n	801376c <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x88>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801373e:	f107 030c 	add.w	r3, r7, #12
 8013742:	4618      	mov	r0, r3
 8013744:	f7ff fd4c 	bl	80131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
 8013748:	4603      	mov	r3, r0
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff ff7e 	bl	801364c <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>
 8013750:	4603      	mov	r3, r0
 8013752:	681c      	ldr	r4, [r3, #0]
 8013754:	f107 0314 	add.w	r3, r7, #20
 8013758:	4618      	mov	r0, r3
 801375a:	f7ff fd41 	bl	80131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
 801375e:	4603      	mov	r3, r0
 8013760:	601c      	str	r4, [r3, #0]
	    ++__result;
 8013762:	f107 0314 	add.w	r3, r7, #20
 8013766:	4618      	mov	r0, r3
 8013768:	f7ff ff0e 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __first != __last; ++__first)
 801376c:	f107 030c 	add.w	r3, r7, #12
 8013770:	4618      	mov	r0, r3
 8013772:	f7ff ff09 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
 8013776:	f107 0208 	add.w	r2, r7, #8
 801377a:	f107 030c 	add.w	r3, r7, #12
 801377e:	4611      	mov	r1, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff fd0a 	bl	801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8013786:	4603      	mov	r3, r0
 8013788:	f083 0301 	eor.w	r3, r3, #1
 801378c:	b2db      	uxtb	r3, r3
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1ca      	bne.n	8013728 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x44>
	  }
      return __result;
 8013792:	697b      	ldr	r3, [r7, #20]
    }
 8013794:	4618      	mov	r0, r3
 8013796:	371c      	adds	r7, #28
 8013798:	46bd      	mov	sp, r7
 801379a:	bd90      	pop	{r4, r7, pc}

0801379c <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	f107 030c 	add.w	r3, r7, #12
 80137aa:	4611      	mov	r1, r2
 80137ac:	4618      	mov	r0, r3
 80137ae:	f000 fa3a 	bl	8013c26 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	4618      	mov	r0, r3
 80137b6:	3710      	adds	r7, #16
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80137bc:	b590      	push	{r4, r7, lr}
 80137be:	b083      	sub	sp, #12
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fa3d 	bl	8013c46 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 80137cc:	4603      	mov	r3, r0
 80137ce:	681c      	ldr	r4, [r3, #0]
 80137d0:	6838      	ldr	r0, [r7, #0]
 80137d2:	f000 fa38 	bl	8013c46 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 80137d6:	4603      	mov	r3, r0
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	1ae3      	subs	r3, r4, r3
 80137dc:	109b      	asrs	r3, r3, #2
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd90      	pop	{r4, r7, pc}

080137e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b084      	sub	sp, #16
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
 80137ee:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	4413      	add	r3, r2
 80137fa:	60fb      	str	r3, [r7, #12]
 80137fc:	f107 020c 	add.w	r2, r7, #12
 8013800:	f107 0308 	add.w	r3, r7, #8
 8013804:	4611      	mov	r1, r2
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff fca6 	bl	8013158 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	4618      	mov	r0, r3
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}

08013816 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>:
    }

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 8013816:	b590      	push	{r4, r7, lr}
 8013818:	b087      	sub	sp, #28
 801381a:	af00      	add	r7, sp, #0
 801381c:	60f8      	str	r0, [r7, #12]
 801381e:	60b9      	str	r1, [r7, #8]
 8013820:	607a      	str	r2, [r7, #4]
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 8013822:	1d3a      	adds	r2, r7, #4
 8013824:	f107 0308 	add.w	r3, r7, #8
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fcb5 	bl	801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8013830:	4603      	mov	r3, r0
 8013832:	f083 0301 	eor.w	r3, r3, #1
 8013836:	b2db      	uxtb	r3, r3
 8013838:	2b00      	cmp	r3, #0
 801383a:	d034      	beq.n	80138a6 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x90>
	{
	  if (__last != end())
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f7ff fc9b 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8013842:	4603      	mov	r3, r0
 8013844:	613b      	str	r3, [r7, #16]
 8013846:	f107 0210 	add.w	r2, r7, #16
 801384a:	1d3b      	adds	r3, r7, #4
 801384c:	4611      	mov	r1, r2
 801384e:	4618      	mov	r0, r3
 8013850:	f7ff fca3 	bl	801319a <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8013854:	4603      	mov	r3, r0
 8013856:	f083 0301 	eor.w	r3, r3, #1
 801385a:	b2db      	uxtb	r3, r3
 801385c:	2b00      	cmp	r3, #0
 801385e:	d008      	beq.n	8013872 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x5c>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ff fc89 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8013866:	4603      	mov	r3, r0
 8013868:	68ba      	ldr	r2, [r7, #8]
 801386a:	4619      	mov	r1, r3
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f000 f9f5 	bl	8013c5c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 8013872:	f107 0308 	add.w	r3, r7, #8
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff fca7 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 801387c:	4603      	mov	r3, r0
 801387e:	681c      	ldr	r4, [r3, #0]
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	f7ff fc79 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8013886:	4603      	mov	r3, r0
 8013888:	617b      	str	r3, [r7, #20]
 801388a:	1d3a      	adds	r2, r7, #4
 801388c:	f107 0314 	add.w	r3, r7, #20
 8013890:	4611      	mov	r1, r2
 8013892:	4618      	mov	r0, r3
 8013894:	f000 f8df 	bl	8013a56 <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8013898:	4603      	mov	r3, r0
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	4423      	add	r3, r4
 801389e:	4619      	mov	r1, r3
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f000 f9f3 	bl	8013c8c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_>
	}
      return __first;
 80138a6:	68bb      	ldr	r3, [r7, #8]
    }
 80138a8:	4618      	mov	r0, r3
 80138aa:	371c      	adds	r7, #28
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd90      	pop	{r4, r7, pc}

080138b0 <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
      function(const function& __x)
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	461a      	mov	r2, r3
 80138be:	2300      	movs	r3, #0
 80138c0:	6013      	str	r3, [r2, #0]
 80138c2:	6053      	str	r3, [r2, #4]
 80138c4:	6093      	str	r3, [r2, #8]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7fb fceb 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80138d4:	6838      	ldr	r0, [r7, #0]
 80138d6:	f000 f9fa 	bl	8013cce <_ZNKSt8functionIFvhPhmEEcvbEv>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00d      	beq.n	80138fc <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	6839      	ldr	r1, [r7, #0]
 80138e8:	2202      	movs	r2, #2
 80138ea:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	68da      	ldr	r2, [r3, #12]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	689a      	ldr	r2, [r3, #8]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	609a      	str	r2, [r3, #8]
      }
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	3708      	adds	r7, #8
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}

08013906 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 8013906:	b580      	push	{r7, lr}
 8013908:	b082      	sub	sp, #8
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
 801390e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f7fe f91e 	bl	8011b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f103 0208 	add.w	r2, r3, #8
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	3308      	adds	r3, #8
 8013926:	4619      	mov	r1, r3
 8013928:	4610      	mov	r0, r2
 801392a:	f7fe f93c 	bl	8011ba6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f103 020c 	add.w	r2, r3, #12
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	330c      	adds	r3, #12
 8013938:	4619      	mov	r1, r3
 801393a:	4610      	mov	r0, r2
 801393c:	f000 f9d7 	bl	8013cee <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
	if (__p)
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d005      	beq.n	8013966 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	68b9      	ldr	r1, [r7, #8]
 8013960:	4618      	mov	r0, r3
 8013962:	f000 f9e3 	bl	8013d2c <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j>
      }
 8013966:	bf00      	nop
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801396e:	b480      	push	{r7}
 8013970:	b083      	sub	sp, #12
 8013972:	af00      	add	r7, sp, #0
 8013974:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4618      	mov	r0, r3
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7ff ffec 	bl	801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 8013996:	4603      	mov	r3, r0
 8013998:	4619      	mov	r1, r3
 801399a:	68b8      	ldr	r0, [r7, #8]
 801399c:	f000 f9e5 	bl	8013d6a <_ZSt12construct_atIP11ROCANDriverJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 80139a0:	bf00      	nop
 80139a2:	3710      	adds	r7, #16
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	685a      	ldr	r2, [r3, #4]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	109b      	asrs	r3, r3, #2
 80139bc:	4618      	mov	r0, r3
 80139be:	370c      	adds	r7, #12
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80139c8:	b590      	push	{r4, r7, lr}
 80139ca:	b087      	sub	sp, #28
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f000 f9de 	bl	8013d96 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE8max_sizeEv>
 80139da:	4604      	mov	r4, r0
 80139dc:	68f8      	ldr	r0, [r7, #12]
 80139de:	f7ff ffe3 	bl	80139a8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE4sizeEv>
 80139e2:	4603      	mov	r3, r0
 80139e4:	1ae2      	subs	r2, r4, r3
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	bf34      	ite	cc
 80139ec:	2301      	movcc	r3, #1
 80139ee:	2300      	movcs	r3, #0
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f003 fa98 	bl	8016f2c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f7ff ffd3 	bl	80139a8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE4sizeEv>
 8013a02:	4604      	mov	r4, r0
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f7ff ffcf 	bl	80139a8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE4sizeEv>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	613b      	str	r3, [r7, #16]
 8013a0e:	f107 0208 	add.w	r2, r7, #8
 8013a12:	f107 0310 	add.w	r3, r7, #16
 8013a16:	4611      	mov	r1, r2
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff fd01 	bl	8013420 <_ZSt3maxIjERKT_S2_S2_>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	4423      	add	r3, r4
 8013a24:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff ffbe 	bl	80139a8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE4sizeEv>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d306      	bcc.n	8013a42 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f000 f9ae 	bl	8013d96 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE8max_sizeEv>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d904      	bls.n	8013a4c <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc+0x84>
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f000 f9a7 	bl	8013d96 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE8max_sizeEv>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	e000      	b.n	8013a4e <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc+0x86>
 8013a4c:	697b      	ldr	r3, [r7, #20]
      }
 8013a4e:	4618      	mov	r0, r3
 8013a50:	371c      	adds	r7, #28
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd90      	pop	{r4, r7, pc}

08013a56 <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8013a56:	b590      	push	{r4, r7, lr}
 8013a58:	b083      	sub	sp, #12
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
 8013a5e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff fbb2 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 8013a66:	4603      	mov	r3, r0
 8013a68:	681c      	ldr	r4, [r3, #0]
 8013a6a:	6838      	ldr	r0, [r7, #0]
 8013a6c:	f7ff fbad 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 8013a70:	4603      	mov	r3, r0
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	1ae3      	subs	r3, r4, r3
 8013a76:	109b      	asrs	r3, r3, #2
 8013a78:	4618      	mov	r0, r3
 8013a7a:	370c      	adds	r7, #12
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd90      	pop	{r4, r7, pc}

08013a80 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8013a80:	b5b0      	push	{r4, r5, r7, lr}
 8013a82:	b08c      	sub	sp, #48	@ 0x30
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8013a8c:	4a39      	ldr	r2, [pc, #228]	@ (8013b74 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8013a8e:	2101      	movs	r1, #1
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f7ff ff99 	bl	80139c8 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE12_M_check_lenEjPKc>
 8013a96:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	f7ff fb47 	bl	8013138 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	617b      	str	r3, [r7, #20]
 8013aae:	f107 0214 	add.w	r2, r7, #20
 8013ab2:	f107 0308 	add.w	r3, r7, #8
 8013ab6:	4611      	mov	r1, r2
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7ff ffcc 	bl	8013a56 <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f000 f976 	bl	8013db8 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE11_M_allocateEj>
 8013acc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8013ad2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8013ad4:	6a3b      	ldr	r3, [r7, #32]
 8013ad6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8013ad8:	69fa      	ldr	r2, [r7, #28]
 8013ada:	18d5      	adds	r5, r2, r3
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff ff46 	bl	801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	4629      	mov	r1, r5
 8013ae8:	4620      	mov	r0, r4
 8013aea:	f7ff ff4b 	bl	8013984 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8013aee:	2300      	movs	r3, #0
 8013af0:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8013af2:	f107 0308 	add.w	r3, r7, #8
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff fb67 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 8013afc:	4603      	mov	r3, r0
 8013afe:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f000 f97e 	bl	8013e04 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
 8013b08:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8013b0a:	69fa      	ldr	r2, [r7, #28]
 8013b0c:	4621      	mov	r1, r4
 8013b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b10:	f000 f966 	bl	8013de0 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8013b14:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	3304      	adds	r3, #4
 8013b1a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013b1c:	f107 0308 	add.w	r3, r7, #8
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff fb52 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 8013b26:	4603      	mov	r3, r0
 8013b28:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f000 f969 	bl	8013e04 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
 8013b32:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013b34:	69ba      	ldr	r2, [r7, #24]
 8013b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f000 f951 	bl	8013de0 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8013b3e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8013b40:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	689a      	ldr	r2, [r3, #8]
 8013b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b50:	f7ff fefa 	bl	8013948 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	69fa      	ldr	r2, [r7, #28]
 8013b58:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	69ba      	ldr	r2, [r7, #24]
 8013b5e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	69fa      	ldr	r2, [r7, #28]
 8013b66:	441a      	add	r2, r3
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	609a      	str	r2, [r3, #8]
    }
 8013b6c:	bf00      	nop
 8013b6e:	3730      	adds	r7, #48	@ 0x30
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bdb0      	pop	{r4, r5, r7, pc}
 8013b74:	08019ac0 	.word	0x08019ac0

08013b78 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b084      	sub	sp, #16
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7ff faf9 	bl	8013178 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
 8013b86:	4603      	mov	r3, r0
 8013b88:	60fb      	str	r3, [r7, #12]
 8013b8a:	f107 030c 	add.w	r3, r7, #12
 8013b8e:	2101      	movs	r1, #1
 8013b90:	4618      	mov	r0, r3
 8013b92:	f000 f95c 	bl	8013e4e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEmiEi>
 8013b96:	4603      	mov	r3, r0
 8013b98:	60bb      	str	r3, [r7, #8]
 8013b9a:	f107 0308 	add.w	r3, r7, #8
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7ff fb1e 	bl	80131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
 8013ba4:	4603      	mov	r3, r0
      }
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3710      	adds	r7, #16
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}

08013bae <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEC1ERS4_>:
      _Iter_equals_val(_Value& __value)
 8013bae:	b480      	push	{r7}
 8013bb0:	b083      	sub	sp, #12
 8013bb2:	af00      	add	r7, sp, #0
 8013bb4:	6078      	str	r0, [r7, #4]
 8013bb6:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	683a      	ldr	r2, [r7, #0]
 8013bbc:	601a      	str	r2, [r3, #0]
      { }
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b085      	sub	sp, #20
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 8013bd8:	f107 030c 	add.w	r3, r7, #12
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f000 f94f 	bl	8013e80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return __find_if(__first, __last, __pred,
 8013be2:	4623      	mov	r3, r4
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	68b9      	ldr	r1, [r7, #8]
 8013be8:	68f8      	ldr	r0, [r7, #12]
 8013bea:	f000 f953 	bl	8013e94 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag>
 8013bee:	4603      	mov	r3, r0
    }
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3714      	adds	r7, #20
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd90      	pop	{r4, r7, pc}

08013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>:
	operator()(_Iterator __it)
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8013c02:	463b      	mov	r3, r7
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff faeb 	bl	80131e0 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	bf0c      	ite	eq
 8013c18:	2301      	moveq	r3, #1
 8013c1a:	2300      	movne	r3, #0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3708      	adds	r7, #8
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}

08013c26 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013c26:	b480      	push	{r7}
 8013c28:	b083      	sub	sp, #12
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	6078      	str	r0, [r7, #4]
 8013c2e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	601a      	str	r2, [r3, #0]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	370c      	adds	r7, #12
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c44:	4770      	bx	lr

08013c46 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8013c46:	b480      	push	{r7}
 8013c48:	b083      	sub	sp, #12
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 8013c5c:	b590      	push	{r4, r7, lr}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f000 f9ac 	bl	8013fc6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>
 8013c6e:	4604      	mov	r4, r0
 8013c70:	68b8      	ldr	r0, [r7, #8]
 8013c72:	f000 f9a8 	bl	8013fc6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>
 8013c76:	4603      	mov	r3, r0
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f000 f9ad 	bl	8013fdc <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8013c82:	4603      	mov	r3, r0
    }
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd90      	pop	{r4, r7, pc}

08013c8c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8013c8c:	b590      	push	{r4, r7, lr}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	685a      	ldr	r2, [r3, #4]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	1ad3      	subs	r3, r2, r3
 8013c9e:	109b      	asrs	r3, r3, #2
 8013ca0:	60fb      	str	r3, [r7, #12]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00e      	beq.n	8013cc6 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f000 f8a8 	bl	8013e04 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
 8013cb4:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	4621      	mov	r1, r4
 8013cba:	6838      	ldr	r0, [r7, #0]
 8013cbc:	f000 f8b9 	bl	8013e32 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	683a      	ldr	r2, [r7, #0]
 8013cc4:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8013cc6:	bf00      	nop
 8013cc8:	3714      	adds	r7, #20
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd90      	pop	{r4, r7, pc}

08013cce <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b082      	sub	sp, #8
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fc fa55 	bl	8010188 <_ZNKSt14_Function_base8_M_emptyEv>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	f083 0301 	eor.w	r3, r3, #1
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
 8013cf6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 f990 	bl	801401e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8013d04:	6838      	ldr	r0, [r7, #0]
 8013d06:	f000 f98a 	bl	801401e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8013d12:	f107 030c 	add.w	r3, r7, #12
 8013d16:	4618      	mov	r0, r3
 8013d18:	f000 f981 	bl	801401e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	601a      	str	r2, [r3, #0]
    }
 8013d24:	bf00      	nop
 8013d26:	3710      	adds	r7, #16
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b088      	sub	sp, #32
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	60b9      	str	r1, [r7, #8]
 8013d36:	607a      	str	r2, [r7, #4]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	61fb      	str	r3, [r7, #28]
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	61bb      	str	r3, [r7, #24]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 8013d44:	f7fe fdfa 	bl	801293c <_ZSt23__is_constant_evaluatedv>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d003      	beq.n	8013d56 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 8013d4e:	69b8      	ldr	r0, [r7, #24]
 8013d50:	f002 fd38 	bl	80167c4 <_ZdlPv>
	    return;
 8013d54:	e005      	b.n	8013d62 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 8013d56:	697a      	ldr	r2, [r7, #20]
 8013d58:	69b9      	ldr	r1, [r7, #24]
 8013d5a:	69f8      	ldr	r0, [r7, #28]
 8013d5c:	f000 fa3e 	bl	80141dc <_ZNSt15__new_allocatorIP11ROCANDriverE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8013d60:	bf00      	nop
 8013d62:	bf00      	nop
 8013d64:	3720      	adds	r7, #32
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <_ZSt12construct_atIP11ROCANDriverJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8013d6a:	b590      	push	{r4, r7, lr}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4619      	mov	r1, r3
 8013d78:	2004      	movs	r0, #4
 8013d7a:	f7fe fdef 	bl	801295c <_ZnwjPv>
 8013d7e:	4604      	mov	r4, r0
 8013d80:	6838      	ldr	r0, [r7, #0]
 8013d82:	f7ff fdf4 	bl	801396e <_ZSt7forwardIP11ROCANDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 8013d86:	4603      	mov	r3, r0
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	4623      	mov	r3, r4
 8013d8e:	4618      	mov	r0, r3
 8013d90:	370c      	adds	r7, #12
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd90      	pop	{r4, r7, pc}

08013d96 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f000 f96d 	bl	8014080 <_ZNKSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
 8013da6:	4603      	mov	r3, r0
 8013da8:	4618      	mov	r0, r3
 8013daa:	f000 f94f 	bl	801404c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE11_S_max_sizeERKS2_>
 8013dae:	4603      	mov	r3, r0
 8013db0:	4618      	mov	r0, r3
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d006      	beq.n	8013dd6 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE11_M_allocateEj+0x1e>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6839      	ldr	r1, [r7, #0]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f000 f962 	bl	8014096 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	e000      	b.n	8013dd8 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE11_M_allocateEj+0x20>
 8013dd6:	2300      	movs	r3, #0
      }
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3708      	adds	r7, #8
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	607a      	str	r2, [r7, #4]
 8013dec:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	68b9      	ldr	r1, [r7, #8]
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f000 f97f 	bl	80140f8 <_ZSt12__relocate_aIPP11ROCANDriverS2_SaIS1_EET0_T_S5_S4_RT1_>
 8013dfa:	4603      	mov	r3, r0
      }
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3710      	adds	r7, #16
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	370c      	adds	r7, #12
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr

08013e1a <_ZNSt16allocator_traitsISaIP11ROCANDriverEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8013e24:	6838      	ldr	r0, [r7, #0]
 8013e26:	f000 f984 	bl	8014132 <_ZSt10destroy_atIP11ROCANDriverEvPT_>
#endif
	}
 8013e2a:	bf00      	nop
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b084      	sub	sp, #16
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	60f8      	str	r0, [r7, #12]
 8013e3a:	60b9      	str	r1, [r7, #8]
 8013e3c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8013e3e:	68b9      	ldr	r1, [r7, #8]
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f000 f980 	bl	8014146 <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_>
    }
 8013e46:	bf00      	nop
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b084      	sub	sp, #16
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	425b      	negs	r3, r3
 8013e62:	4413      	add	r3, r2
 8013e64:	60fb      	str	r3, [r7, #12]
 8013e66:	f107 020c 	add.w	r2, r7, #12
 8013e6a:	f107 0308 	add.w	r3, r7, #8
 8013e6e:	4611      	mov	r1, r2
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7ff f971 	bl	8013158 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8013e80:	b480      	push	{r7}
 8013e82:	b083      	sub	sp, #12
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8013e88:	4618      	mov	r0, r3
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	607a      	str	r2, [r7, #4]
 8013ea0:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8013ea2:	f107 020c 	add.w	r2, r7, #12
 8013ea6:	f107 0308 	add.w	r3, r7, #8
 8013eaa:	4611      	mov	r1, r2
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7ff fdd2 	bl	8013a56 <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	109b      	asrs	r3, r3, #2
 8013eb6:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8013eb8:	e03e      	b.n	8013f38 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8013eba:	1d3b      	adds	r3, r7, #4
 8013ebc:	68f9      	ldr	r1, [r7, #12]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff fe9a 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	e077      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013ece:	f107 030c 	add.w	r3, r7, #12
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff fb58 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8013ed8:	1d3b      	adds	r3, r7, #4
 8013eda:	68f9      	ldr	r1, [r7, #12]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7ff fe8b 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d001      	beq.n	8013eec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	e068      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013eec:	f107 030c 	add.w	r3, r7, #12
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7ff fb49 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8013ef6:	1d3b      	adds	r3, r7, #4
 8013ef8:	68f9      	ldr	r1, [r7, #12]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7ff fe7c 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d001      	beq.n	8013f0a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	e059      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013f0a:	f107 030c 	add.w	r3, r7, #12
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7ff fb3a 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8013f14:	1d3b      	adds	r3, r7, #4
 8013f16:	68f9      	ldr	r1, [r7, #12]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7ff fe6d 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d001      	beq.n	8013f28 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	e04a      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013f28:	f107 030c 	add.w	r3, r7, #12
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff fb2b 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	3b01      	subs	r3, #1
 8013f36:	617b      	str	r3, [r7, #20]
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	dcbd      	bgt.n	8013eba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8013f3e:	f107 020c 	add.w	r2, r7, #12
 8013f42:	f107 0308 	add.w	r3, r7, #8
 8013f46:	4611      	mov	r1, r2
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ff fd84 	bl	8013a56 <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	2b03      	cmp	r3, #3
 8013f52:	d006      	beq.n	8013f62 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xce>
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	dc31      	bgt.n	8013fbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x128>
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d020      	beq.n	8013f9e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x10a>
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d00f      	beq.n	8013f80 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xec>
 8013f60:	e02c      	b.n	8013fbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8013f62:	1d3b      	adds	r3, r7, #4
 8013f64:	68f9      	ldr	r1, [r7, #12]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7ff fe46 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d001      	beq.n	8013f76 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	e023      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013f76:	f107 030c 	add.w	r3, r7, #12
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7ff fb04 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8013f80:	1d3b      	adds	r3, r7, #4
 8013f82:	68f9      	ldr	r1, [r7, #12]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7ff fe37 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d001      	beq.n	8013f94 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	e014      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013f94:	f107 030c 	add.w	r3, r7, #12
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff faf5 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8013f9e:	1d3b      	adds	r3, r7, #4
 8013fa0:	68f9      	ldr	r1, [r7, #12]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff fe28 	bl	8013bf8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d001      	beq.n	8013fb2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	e005      	b.n	8013fbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8013fb2:	f107 030c 	add.w	r3, r7, #12
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff fae6 	bl	8013588 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 8013fbc:	68bb      	ldr	r3, [r7, #8]
    }
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3718      	adds	r7, #24
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8013fc6:	b480      	push	{r7}
 8013fc8:	b083      	sub	sp, #12
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	370c      	adds	r7, #12
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8013fdc:	b5b0      	push	{r4, r5, r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f000 f8c2 	bl	8014172 <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8013fee:	4604      	mov	r4, r0
 8013ff0:	68b8      	ldr	r0, [r7, #8]
 8013ff2:	f000 f8be 	bl	8014172 <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 f8ba 	bl	8014172 <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8013ffe:	4603      	mov	r3, r0
 8014000:	461a      	mov	r2, r3
 8014002:	4629      	mov	r1, r5
 8014004:	4620      	mov	r0, r4
 8014006:	f000 f8c2 	bl	801418e <_ZSt14__copy_move_a1ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>
 801400a:	4603      	mov	r3, r0
 801400c:	4619      	mov	r1, r3
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 f8cd 	bl	80141ae <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8014014:	4603      	mov	r3, r0
    }
 8014016:	4618      	mov	r0, r3
 8014018:	3710      	adds	r7, #16
 801401a:	46bd      	mov	sp, r7
 801401c:	bdb0      	pop	{r4, r5, r7, pc}

0801401e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801401e:	b480      	push	{r7}
 8014020:	b083      	sub	sp, #12
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801403c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 8014040:	4618      	mov	r0, r3
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr

0801404c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801404c:	b580      	push	{r7, lr}
 801404e:	b084      	sub	sp, #16
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8014054:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8014058:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff ffea 	bl	8014034 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8max_sizeERKS2_>
 8014060:	4603      	mov	r3, r0
 8014062:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8014064:	f107 0208 	add.w	r2, r7, #8
 8014068:	f107 030c 	add.w	r3, r7, #12
 801406c:	4611      	mov	r1, r2
 801406e:	4618      	mov	r0, r3
 8014070:	f7fe fc80 	bl	8012974 <_ZSt3minIjERKT_S2_S2_>
 8014074:	4603      	mov	r3, r0
 8014076:	681b      	ldr	r3, [r3, #0]
      }
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <_ZNKSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	370c      	adds	r7, #12
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr

08014096 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8014096:	b580      	push	{r7, lr}
 8014098:	b084      	sub	sp, #16
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
 801409e:	6039      	str	r1, [r7, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	60fb      	str	r3, [r7, #12]
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 80140a8:	f7fe fc48 	bl	801293c <_ZSt23__is_constant_evaluatedv>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d016      	beq.n	80140e0 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	2200      	movs	r2, #0
 80140b6:	0099      	lsls	r1, r3, #2
 80140b8:	0f9b      	lsrs	r3, r3, #30
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d000      	beq.n	80140c0 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j+0x2a>
 80140be:	2201      	movs	r2, #1
 80140c0:	460b      	mov	r3, r1
 80140c2:	60bb      	str	r3, [r7, #8]
 80140c4:	4613      	mov	r3, r2
 80140c6:	f003 0301 	and.w	r3, r3, #1
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d001      	beq.n	80140d4 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j+0x3e>
	      std::__throw_bad_array_new_length();
 80140d0:	f002 ff29 	bl	8016f26 <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f002 fc18 	bl	801690c <_Znwj>
 80140dc:	4603      	mov	r3, r0
 80140de:	e007      	b.n	80140f0 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE8allocateERS2_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	2200      	movs	r2, #0
 80140e4:	4619      	mov	r1, r3
 80140e6:	68f8      	ldr	r0, [r7, #12]
 80140e8:	f000 f91d 	bl	8014326 <_ZNSt15__new_allocatorIP11ROCANDriverE8allocateEjPKv>
 80140ec:	4603      	mov	r3, r0
 80140ee:	bf00      	nop
      { return __a.allocate(__n); }
 80140f0:	4618      	mov	r0, r3
 80140f2:	3710      	adds	r7, #16
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <_ZSt12__relocate_aIPP11ROCANDriverS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80140f8:	b5b0      	push	{r4, r5, r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
 8014104:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f000 f877 	bl	80141fa <_ZSt12__niter_baseIPP11ROCANDriverET_S3_>
 801410c:	4604      	mov	r4, r0
 801410e:	68b8      	ldr	r0, [r7, #8]
 8014110:	f000 f873 	bl	80141fa <_ZSt12__niter_baseIPP11ROCANDriverET_S3_>
 8014114:	4605      	mov	r5, r0
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f86f 	bl	80141fa <_ZSt12__niter_baseIPP11ROCANDriverET_S3_>
 801411c:	4602      	mov	r2, r0
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	4629      	mov	r1, r5
 8014122:	4620      	mov	r0, r4
 8014124:	f000 f884 	bl	8014230 <_ZSt14__relocate_a_1IP11ROCANDriverS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8014128:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 801412a:	4618      	mov	r0, r3
 801412c:	3710      	adds	r7, #16
 801412e:	46bd      	mov	sp, r7
 8014130:	bdb0      	pop	{r4, r5, r7, pc}

08014132 <_ZSt10destroy_atIP11ROCANDriverEvPT_>:
    destroy_at(_Tp* __location)
 8014132:	b480      	push	{r7}
 8014134:	b083      	sub	sp, #12
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
    }
 801413a:	bf00      	nop
 801413c:	370c      	adds	r7, #12
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr

08014146 <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8014146:	b580      	push	{r7, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
 801414e:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 8014150:	f7fe fbf4 	bl	801293c <_ZSt23__is_constant_evaluatedv>
 8014154:	4603      	mov	r3, r0
 8014156:	2b00      	cmp	r3, #0
 8014158:	d004      	beq.n	8014164 <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 801415a:	6839      	ldr	r1, [r7, #0]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 f8a1 	bl	80142a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP11ROCANDriverEEvT_S5_>
 8014162:	e003      	b.n	801416c <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8014164:	6839      	ldr	r1, [r7, #0]
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 f8b5 	bl	80142d6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ROCANDriverEEvT_S5_>
    }
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}

08014172 <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8014172:	b580      	push	{r7, lr}
 8014174:	b082      	sub	sp, #8
 8014176:	af00      	add	r7, sp, #0
 8014178:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801417a:	1d3b      	adds	r3, r7, #4
 801417c:	4618      	mov	r0, r3
 801417e:	f7ff f824 	bl	80131ca <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
 8014182:	4603      	mov	r3, r0
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	4618      	mov	r0, r3
 8014188:	3708      	adds	r7, #8
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}

0801418e <_ZSt14__copy_move_a1ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801418e:	b580      	push	{r7, lr}
 8014190:	b084      	sub	sp, #16
 8014192:	af00      	add	r7, sp, #0
 8014194:	60f8      	str	r0, [r7, #12]
 8014196:	60b9      	str	r1, [r7, #8]
 8014198:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	68b9      	ldr	r1, [r7, #8]
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f000 f8a4 	bl	80142ec <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>
 80141a4:	4603      	mov	r3, r0
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b082      	sub	sp, #8
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
 80141b6:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff ffda 	bl	8014172 <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80141be:	4602      	mov	r2, r0
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	1a9b      	subs	r3, r3, r2
 80141c4:	109b      	asrs	r3, r3, #2
 80141c6:	461a      	mov	r2, r3
 80141c8:	1d3b      	adds	r3, r7, #4
 80141ca:	4611      	mov	r1, r2
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7ff fb0a 	bl	80137e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
 80141d2:	4603      	mov	r3, r0
 80141d4:	4618      	mov	r0, r3
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <_ZNSt15__new_allocatorIP11ROCANDriverE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	4619      	mov	r1, r3
 80141ee:	68b8      	ldr	r0, [r7, #8]
 80141f0:	f002 faea 	bl	80167c8 <_ZdlPvj>
      }
 80141f4:	3710      	adds	r7, #16
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}

080141fa <_ZSt12__niter_baseIPP11ROCANDriverET_S3_>:
    __niter_base(_Iterator __it)
 80141fa:	b480      	push	{r7}
 80141fc:	b083      	sub	sp, #12
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	4618      	mov	r0, r3
 8014206:	370c      	adds	r7, #12
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr

08014210 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	601a      	str	r2, [r3, #0]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZSt14__relocate_a_1IP11ROCANDriverS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8014230:	b580      	push	{r7, lr}
 8014232:	b086      	sub	sp, #24
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
 801423c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	109b      	asrs	r3, r3, #2
 8014246:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	2b00      	cmp	r3, #0
 801424c:	dd22      	ble.n	8014294 <_ZSt14__relocate_a_1IP11ROCANDriverS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 801424e:	f7fe fb7d 	bl	801294c <_ZSt21is_constant_evaluatedv>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d016      	beq.n	8014286 <_ZSt14__relocate_a_1IP11ROCANDriverS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 8014258:	1d3a      	adds	r2, r7, #4
 801425a:	f107 0310 	add.w	r3, r7, #16
 801425e:	4611      	mov	r1, r2
 8014260:	4618      	mov	r0, r3
 8014262:	f7ff ffd5 	bl	8014210 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	693a      	ldr	r2, [r7, #16]
 801426a:	68b9      	ldr	r1, [r7, #8]
 801426c:	68f8      	ldr	r0, [r7, #12]
 801426e:	f000 f884 	bl	801437a <_ZSt14__relocate_a_1IPP11ROCANDriverN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
 8014272:	4603      	mov	r3, r0
 8014274:	613b      	str	r3, [r7, #16]
	      return __out.base();
 8014276:	f107 0310 	add.w	r3, r7, #16
 801427a:	4618      	mov	r0, r3
 801427c:	f000 f8ab 	bl	80143d6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervE4baseEv>
 8014280:	4603      	mov	r3, r0
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	e00a      	b.n	801429c <_ZSt14__relocate_a_1IP11ROCANDriverS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	461a      	mov	r2, r3
 801428e:	68f9      	ldr	r1, [r7, #12]
 8014290:	f003 fd15 	bl	8017cbe <memmove>
      return __result + __count;
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	4413      	add	r3, r2
    }
 801429c:	4618      	mov	r0, r3
 801429e:	3718      	adds	r7, #24
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP11ROCANDriverEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80142ae:	e009      	b.n	80142c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP11ROCANDriverEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 f89b 	bl	80143ec <_ZSt11__addressofIP11ROCANDriverEPT_RS2_>
 80142b6:	4603      	mov	r3, r0
 80142b8:	4618      	mov	r0, r3
 80142ba:	f000 f8a2 	bl	8014402 <_ZSt8_DestroyIP11ROCANDriverEvPT_>
	  for (; __first != __last; ++__first)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3304      	adds	r3, #4
 80142c2:	607b      	str	r3, [r7, #4]
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d1f1      	bne.n	80142b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP11ROCANDriverEEvT_S5_+0xc>
	}
 80142cc:	bf00      	nop
 80142ce:	bf00      	nop
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ROCANDriverEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80142d6:	b480      	push	{r7}
 80142d8:	b083      	sub	sp, #12
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
 80142de:	6039      	str	r1, [r7, #0]
 80142e0:	bf00      	nop
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80142f8:	f7fe fb28 	bl	801294c <_ZSt21is_constant_evaluatedv>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d006      	beq.n	8014310 <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	68b9      	ldr	r1, [r7, #8]
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f000 f886 	bl	8014418 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP11ROCANDriverS5_EET0_T_S7_S6_>
 801430c:	4603      	mov	r3, r0
 801430e:	e006      	b.n	801431e <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	68b9      	ldr	r1, [r7, #8]
 8014314:	68f8      	ldr	r0, [r7, #12]
 8014316:	f000 f8a3 	bl	8014460 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_>
 801431a:	4603      	mov	r3, r0
 801431c:	bf00      	nop
    }
 801431e:	4618      	mov	r0, r3
 8014320:	3710      	adds	r7, #16
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <_ZNSt15__new_allocatorIP11ROCANDriverE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8014326:	b580      	push	{r7, lr}
 8014328:	b084      	sub	sp, #16
 801432a:	af00      	add	r7, sp, #0
 801432c:	60f8      	str	r0, [r7, #12]
 801432e:	60b9      	str	r1, [r7, #8]
 8014330:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f000 f8b1 	bl	801449a <_ZNKSt15__new_allocatorIP11ROCANDriverE11_M_max_sizeEv>
 8014338:	4602      	mov	r2, r0
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	4293      	cmp	r3, r2
 801433e:	bf8c      	ite	hi
 8014340:	2301      	movhi	r3, #1
 8014342:	2300      	movls	r3, #0
 8014344:	b2db      	uxtb	r3, r3
 8014346:	2b00      	cmp	r3, #0
 8014348:	bf14      	ite	ne
 801434a:	2301      	movne	r3, #1
 801434c:	2300      	moveq	r3, #0
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b00      	cmp	r3, #0
 8014352:	d007      	beq.n	8014364 <_ZNSt15__new_allocatorIP11ROCANDriverE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801435a:	d301      	bcc.n	8014360 <_ZNSt15__new_allocatorIP11ROCANDriverE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801435c:	f002 fde3 	bl	8016f26 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8014360:	f002 fdde 	bl	8016f20 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4618      	mov	r0, r3
 801436a:	f002 facf 	bl	801690c <_Znwj>
 801436e:	4603      	mov	r3, r0
 8014370:	bf00      	nop
      }
 8014372:	4618      	mov	r0, r3
 8014374:	3710      	adds	r7, #16
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}

0801437a <_ZSt14__relocate_a_1IPP11ROCANDriverN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801437a:	b590      	push	{r4, r7, lr}
 801437c:	b087      	sub	sp, #28
 801437e:	af00      	add	r7, sp, #0
 8014380:	60f8      	str	r0, [r7, #12]
 8014382:	60b9      	str	r1, [r7, #8]
 8014384:	607a      	str	r2, [r7, #4]
 8014386:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 801438c:	e01a      	b.n	80143c4 <_ZSt14__relocate_a_1IPP11ROCANDriverN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 801438e:	f107 0314 	add.w	r3, r7, #20
 8014392:	4618      	mov	r0, r3
 8014394:	f000 f89d 	bl	80144d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEdeEv>
 8014398:	4603      	mov	r3, r0
 801439a:	4618      	mov	r0, r3
 801439c:	f000 f826 	bl	80143ec <_ZSt11__addressofIP11ROCANDriverEPT_RS2_>
 80143a0:	4604      	mov	r4, r0
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f000 f822 	bl	80143ec <_ZSt11__addressofIP11ROCANDriverEPT_RS2_>
 80143a8:	4603      	mov	r3, r0
 80143aa:	683a      	ldr	r2, [r7, #0]
 80143ac:	4619      	mov	r1, r3
 80143ae:	4620      	mov	r0, r4
 80143b0:	f000 f89b 	bl	80144ea <_ZSt19__relocate_object_aIP11ROCANDriverS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	3304      	adds	r3, #4
 80143b8:	60fb      	str	r3, [r7, #12]
 80143ba:	f107 0314 	add.w	r3, r7, #20
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 f877 	bl	80144b2 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEppEv>
 80143c4:	68fa      	ldr	r2, [r7, #12]
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d1e0      	bne.n	801438e <_ZSt14__relocate_a_1IPP11ROCANDriverN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x14>
      return __cur;
 80143cc:	697b      	ldr	r3, [r7, #20]
    }
 80143ce:	4618      	mov	r0, r3
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd90      	pop	{r4, r7, pc}

080143d6 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80143d6:	b480      	push	{r7}
 80143d8:	b083      	sub	sp, #12
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4618      	mov	r0, r3
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <_ZSt11__addressofIP11ROCANDriverEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4618      	mov	r0, r3
 80143f8:	370c      	adds	r7, #12
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr

08014402 <_ZSt8_DestroyIP11ROCANDriverEvPT_>:
    _Destroy(_Tp* __pointer)
 8014402:	b580      	push	{r7, lr}
 8014404:	b082      	sub	sp, #8
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7ff fe91 	bl	8014132 <_ZSt10destroy_atIP11ROCANDriverEvPT_>
    }
 8014410:	bf00      	nop
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP11ROCANDriverS5_EET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8014418:	b580      	push	{r7, lr}
 801441a:	b086      	sub	sp, #24
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8014424:	68ba      	ldr	r2, [r7, #8]
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	109b      	asrs	r3, r3, #2
 801442c:	617b      	str	r3, [r7, #20]
 801442e:	e00f      	b.n	8014450 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP11ROCANDriverS5_EET0_T_S7_S6_+0x38>
	      *__result = std::move(*__first);
 8014430:	68f8      	ldr	r0, [r7, #12]
 8014432:	f7ff f90b 	bl	801364c <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>
 8014436:	4603      	mov	r3, r0
 8014438:	681a      	ldr	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	601a      	str	r2, [r3, #0]
	      ++__first;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	3304      	adds	r3, #4
 8014442:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	3304      	adds	r3, #4
 8014448:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	3b01      	subs	r3, #1
 801444e:	617b      	str	r3, [r7, #20]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	2b00      	cmp	r3, #0
 8014454:	dcec      	bgt.n	8014430 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPP11ROCANDriverS5_EET0_T_S7_S6_+0x18>
	  return __result;
 8014456:	687b      	ldr	r3, [r7, #4]
	}
 8014458:	4618      	mov	r0, r3
 801445a:	3718      	adds	r7, #24
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8014460:	b580      	push	{r7, lr}
 8014462:	b086      	sub	sp, #24
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801446c:	68ba      	ldr	r2, [r7, #8]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	1ad3      	subs	r3, r2, r3
 8014472:	109b      	asrs	r3, r3, #2
 8014474:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d006      	beq.n	801448a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	461a      	mov	r2, r3
 8014482:	68f9      	ldr	r1, [r7, #12]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f003 fc1a 	bl	8017cbe <memmove>
	  return __result + _Num;
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	4413      	add	r3, r2
	}
 8014492:	4618      	mov	r0, r3
 8014494:	3718      	adds	r7, #24
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <_ZNKSt15__new_allocatorIP11ROCANDriverE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801449a:	b480      	push	{r7}
 801449c:	b083      	sub	sp, #12
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80144a2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80144a6:	4618      	mov	r0, r3
 80144a8:	370c      	adds	r7, #12
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr

080144b2 <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80144b2:	b480      	push	{r7}
 80144b4:	b083      	sub	sp, #12
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	1d1a      	adds	r2, r3, #4
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	601a      	str	r2, [r3, #0]
	return *this;
 80144c4:	687b      	ldr	r3, [r7, #4]
      }
 80144c6:	4618      	mov	r0, r3
 80144c8:	370c      	adds	r7, #12
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr

080144d2 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDrivervEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4618      	mov	r0, r3
 80144e0:	370c      	adds	r7, #12
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr

080144ea <_ZSt19__relocate_object_aIP11ROCANDriverS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80144ea:	b580      	push	{r7, lr}
 80144ec:	b084      	sub	sp, #16
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	60f8      	str	r0, [r7, #12]
 80144f2:	60b9      	str	r1, [r7, #8]
 80144f4:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80144f6:	68b8      	ldr	r0, [r7, #8]
 80144f8:	f7ff f8a8 	bl	801364c <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>
 80144fc:	4603      	mov	r3, r0
 80144fe:	461a      	mov	r2, r3
 8014500:	68f9      	ldr	r1, [r7, #12]
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7ff fa3e 	bl	8013984 <_ZNSt16allocator_traitsISaIP11ROCANDriverEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8014508:	68b8      	ldr	r0, [r7, #8]
 801450a:	f7ff ff6f 	bl	80143ec <_ZSt11__addressofIP11ROCANDriverEPT_RS2_>
 801450e:	4603      	mov	r3, r0
 8014510:	4619      	mov	r1, r3
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f7ff fc81 	bl	8013e1a <_ZNSt16allocator_traitsISaIP11ROCANDriverEE7destroyIS1_EEvRS2_PT_>
    }
 8014518:	bf00      	nop
 801451a:	3710      	adds	r7, #16
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}

08014520 <_Z41__static_initialization_and_destruction_0ii>:

std::vector<ROCANDriver*> ROCANDriver::FDCANDriver_list;
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d107      	bne.n	8014540 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014536:	4293      	cmp	r3, r2
 8014538:	d102      	bne.n	8014540 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801453a:	4803      	ldr	r0, [pc, #12]	@ (8014548 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801453c:	f000 f806 	bl	801454c <_ZNSt6vectorIP11ROCANDriverSaIS1_EED1Ev>
 8014540:	bf00      	nop
 8014542:	3708      	adds	r7, #8
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	20010920 	.word	0x20010920

0801454c <_ZNSt6vectorIP11ROCANDriverSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801454c:	b5b0      	push	{r4, r5, r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681c      	ldr	r4, [r3, #0]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	4618      	mov	r0, r3
 8014560:	f7ff fc50 	bl	8013e04 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
 8014564:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8014566:	461a      	mov	r2, r3
 8014568:	4629      	mov	r1, r5
 801456a:	4620      	mov	r0, r4
 801456c:	f7ff fc61 	bl	8013e32 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>
      }
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	4618      	mov	r0, r3
 8014574:	f7ff f851 	bl	801361a <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EED1Ev>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	4618      	mov	r0, r3
 801457c:	3708      	adds	r7, #8
 801457e:	46bd      	mov	sp, r7
 8014580:	bdb0      	pop	{r4, r5, r7, pc}

08014582 <_GLOBAL__sub_I__ZN11ROCANDriverC2EP19FDCAN_HandleTypeDefm>:
 8014582:	b580      	push	{r7, lr}
 8014584:	af00      	add	r7, sp, #0
 8014586:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801458a:	2001      	movs	r0, #1
 801458c:	f7ff ffc8 	bl	8014520 <_Z41__static_initialization_and_destruction_0ii>
 8014590:	bd80      	pop	{r7, pc}

08014592 <_GLOBAL__sub_D__ZN11ROCANDriverC2EP19FDCAN_HandleTypeDefm>:
 8014592:	b580      	push	{r7, lr}
 8014594:	af00      	add	r7, sp, #0
 8014596:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801459a:	2000      	movs	r0, #0
 801459c:	f7ff ffc0 	bl	8014520 <_Z41__static_initialization_and_destruction_0ii>
 80145a0:	bd80      	pop	{r7, pc}

080145a2 <_ZN12SuperCapData7toArrayEPh>:
			sprintf(buffer, "Capacitor voltage: %.3f \t Chassis Power : %.3f \t Charge state : %d",
					V_cap, P_chassis, charge_state);
			return buffer;
		}

	uint8_t* toArray(uint8_t* buffer) {
 80145a2:	b480      	push	{r7}
 80145a4:	b083      	sub	sp, #12
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
 80145aa:	6039      	str	r1, [r7, #0]
		*(float*)(buffer) = V_cap;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	601a      	str	r2, [r3, #0]
		*(float*)(buffer + 4) = P_chassis;
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	3304      	adds	r3, #4
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	6852      	ldr	r2, [r2, #4]
 80145bc:	601a      	str	r2, [r3, #0]
		*(uint8_t*)(buffer + 8) = charge_state;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	3308      	adds	r3, #8
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	7a12      	ldrb	r2, [r2, #8]
 80145c6:	701a      	strb	r2, [r3, #0]
		return buffer;
 80145c8:	683b      	ldr	r3, [r7, #0]
	}
 80145ca:	4618      	mov	r0, r3
 80145cc:	370c      	adds	r7, #12
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr

080145d6 <_ZL11__gen_crc16PKht>:
#define PROTOCOL_MACROS_H


#include <cstdint>

static uint16_t __gen_crc16(const uint8_t *data, uint16_t size) {
 80145d6:	b480      	push	{r7}
 80145d8:	b085      	sub	sp, #20
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]
 80145de:	460b      	mov	r3, r1
 80145e0:	807b      	strh	r3, [r7, #2]
    uint8_t x;
    uint16_t crc = 0xFFFF;
 80145e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80145e6:	81fb      	strh	r3, [r7, #14]

    while (size--){
 80145e8:	e023      	b.n	8014632 <_ZL11__gen_crc16PKht+0x5c>
        x = crc >> 8 ^ *data++;
 80145ea:	89fb      	ldrh	r3, [r7, #14]
 80145ec:	0a1b      	lsrs	r3, r3, #8
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	1c59      	adds	r1, r3, #1
 80145f6:	6079      	str	r1, [r7, #4]
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	4053      	eors	r3, r2
 80145fc:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 80145fe:	7b7b      	ldrb	r3, [r7, #13]
 8014600:	091b      	lsrs	r3, r3, #4
 8014602:	b2da      	uxtb	r2, r3
 8014604:	7b7b      	ldrb	r3, [r7, #13]
 8014606:	4053      	eors	r3, r2
 8014608:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 801460a:	89fb      	ldrh	r3, [r7, #14]
 801460c:	021b      	lsls	r3, r3, #8
 801460e:	b21a      	sxth	r2, r3
 8014610:	7b7b      	ldrb	r3, [r7, #13]
 8014612:	b21b      	sxth	r3, r3
 8014614:	031b      	lsls	r3, r3, #12
 8014616:	b21b      	sxth	r3, r3
 8014618:	4053      	eors	r3, r2
 801461a:	b21a      	sxth	r2, r3
 801461c:	7b7b      	ldrb	r3, [r7, #13]
 801461e:	b21b      	sxth	r3, r3
 8014620:	015b      	lsls	r3, r3, #5
 8014622:	b21b      	sxth	r3, r3
 8014624:	4053      	eors	r3, r2
 8014626:	b21a      	sxth	r2, r3
 8014628:	7b7b      	ldrb	r3, [r7, #13]
 801462a:	b21b      	sxth	r3, r3
 801462c:	4053      	eors	r3, r2
 801462e:	b21b      	sxth	r3, r3
 8014630:	81fb      	strh	r3, [r7, #14]
    while (size--){
 8014632:	887b      	ldrh	r3, [r7, #2]
 8014634:	1e5a      	subs	r2, r3, #1
 8014636:	807a      	strh	r2, [r7, #2]
 8014638:	2b00      	cmp	r3, #0
 801463a:	bf14      	ite	ne
 801463c:	2301      	movne	r3, #1
 801463e:	2300      	moveq	r3, #0
 8014640:	b2db      	uxtb	r3, r3
 8014642:	2b00      	cmp	r3, #0
 8014644:	d1d1      	bne.n	80145ea <_ZL11__gen_crc16PKht+0x14>
    }
    return crc;
 8014646:	89fb      	ldrh	r3, [r7, #14]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3714      	adds	r7, #20
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <_ZN18SuperCapCommThreadD1Ev>:
extern float chassis_voltage;
extern float cap_voltage;
extern float source_current;
extern uint8_t max_chassis_power;

SuperCapCommThread::~SuperCapCommThread(){
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	4a05      	ldr	r2, [pc, #20]	@ (8014674 <_ZN18SuperCapCommThreadD1Ev+0x20>)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	601a      	str	r2, [r3, #0]
}
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	f7fe f9b9 	bl	80129dc <_ZN6ThreadD1Ev>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	0801a110 	.word	0x0801a110

08014678 <_ZN18SuperCapCommThreadD0Ev>:
SuperCapCommThread::~SuperCapCommThread(){
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
}
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7ff ffe7 	bl	8014654 <_ZN18SuperCapCommThreadD1Ev>
 8014686:	2144      	movs	r1, #68	@ 0x44
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f002 f89d 	bl	80167c8 <_ZdlPvj>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	4618      	mov	r0, r3
 8014692:	3708      	adds	r7, #8
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <_ZN18SuperCapCommThread4initEv>:

void SuperCapCommThread::init(){
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
	;;
}
 80146a0:	bf00      	nop
 80146a2:	370c      	adds	r7, #12
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr

080146ac <_ZN18SuperCapCommThread4loopEv>:
// Declare the RoCo packet with the proper data structure defined in RoCo/Src/Protocol/Protocol24
static SuperCapDataPacket supercap_packet;
static int i = 0;

void SuperCapCommThread::loop()
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
	supercap_data.V_cap = cap_voltage;
 80146b4:	4b28      	ldr	r3, [pc, #160]	@ (8014758 <_ZN18SuperCapCommThread4loopEv+0xac>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4a28      	ldr	r2, [pc, #160]	@ (801475c <_ZN18SuperCapCommThread4loopEv+0xb0>)
 80146ba:	6013      	str	r3, [r2, #0]
	supercap_data.P_chassis = chassis_voltage * source_current;
 80146bc:	4b28      	ldr	r3, [pc, #160]	@ (8014760 <_ZN18SuperCapCommThread4loopEv+0xb4>)
 80146be:	ed93 7a00 	vldr	s14, [r3]
 80146c2:	4b28      	ldr	r3, [pc, #160]	@ (8014764 <_ZN18SuperCapCommThread4loopEv+0xb8>)
 80146c4:	edd3 7a00 	vldr	s15, [r3]
 80146c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146cc:	4b23      	ldr	r3, [pc, #140]	@ (801475c <_ZN18SuperCapCommThread4loopEv+0xb0>)
 80146ce:	edc3 7a01 	vstr	s15, [r3, #4]
	supercap_data.charge_state = (uint8_t)(((cap_voltage - 2.95f) / (SUPERCAP_MAX_VOLTAGE - 2.95f))*100);
 80146d2:	4b21      	ldr	r3, [pc, #132]	@ (8014758 <_ZN18SuperCapCommThread4loopEv+0xac>)
 80146d4:	edd3 7a00 	vldr	s15, [r3]
 80146d8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8014768 <_ZN18SuperCapCommThread4loopEv+0xbc>
 80146dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80146e0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801476c <_ZN18SuperCapCommThread4loopEv+0xc0>
 80146e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80146e8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8014770 <_ZN18SuperCapCommThread4loopEv+0xc4>
 80146ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80146f4:	edc7 7a00 	vstr	s15, [r7]
 80146f8:	783b      	ldrb	r3, [r7, #0]
 80146fa:	b2da      	uxtb	r2, r3
 80146fc:	4b17      	ldr	r3, [pc, #92]	@ (801475c <_ZN18SuperCapCommThread4loopEv+0xb0>)
 80146fe:	721a      	strb	r2, [r3, #8]

	supercap_data.toArray((uint8_t*) &supercap_packet);
 8014700:	491c      	ldr	r1, [pc, #112]	@ (8014774 <_ZN18SuperCapCommThread4loopEv+0xc8>)
 8014702:	4816      	ldr	r0, [pc, #88]	@ (801475c <_ZN18SuperCapCommThread4loopEv+0xb0>)
 8014704:	f7ff ff4d 	bl	80145a2 <_ZN12SuperCapData7toArrayEPh>

	MAKE_IDENTIFIABLE(supercap_packet);
 8014708:	4b1a      	ldr	r3, [pc, #104]	@ (8014774 <_ZN18SuperCapCommThread4loopEv+0xc8>)
 801470a:	2200      	movs	r2, #0
 801470c:	f042 0203 	orr.w	r2, r2, #3
 8014710:	725a      	strb	r2, [r3, #9]
 8014712:	2200      	movs	r2, #0
 8014714:	729a      	strb	r2, [r3, #10]
	MAKE_RELIABLE(supercap_packet);
 8014716:	210b      	movs	r1, #11
 8014718:	4816      	ldr	r0, [pc, #88]	@ (8014774 <_ZN18SuperCapCommThread4loopEv+0xc8>)
 801471a:	f7ff ff5c 	bl	80145d6 <_ZL11__gen_crc16PKht>
 801471e:	4603      	mov	r3, r0
 8014720:	461a      	mov	r2, r3
 8014722:	4b14      	ldr	r3, [pc, #80]	@ (8014774 <_ZN18SuperCapCommThread4loopEv+0xc8>)
 8014724:	f8a3 200b 	strh.w	r2, [r3, #11]
	Telemetry::set_id(OTHER_NODE_ID);
 8014728:	2008      	movs	r0, #8
 801472a:	f000 f9fb 	bl	8014b24 <_ZN9Telemetry6set_idEm>

	FDCAN3_network->send(&supercap_packet);
 801472e:	4b12      	ldr	r3, [pc, #72]	@ (8014778 <_ZN18SuperCapCommThread4loopEv+0xcc>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4910      	ldr	r1, [pc, #64]	@ (8014774 <_ZN18SuperCapCommThread4loopEv+0xc8>)
 8014734:	4618      	mov	r0, r3
 8014736:	f7fc fc5f 	bl	8010ff8 <_ZN10MessageBus4sendI18SuperCapDataPacketEEbPT_>

	osDelay(100);
 801473a:	2064      	movs	r0, #100	@ 0x64
 801473c:	f7f7 fa36 	bl	800bbac <osDelay>

	portYIELD();
 8014740:	4b0e      	ldr	r3, [pc, #56]	@ (801477c <_ZN18SuperCapCommThread4loopEv+0xd0>)
 8014742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014746:	601a      	str	r2, [r3, #0]
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	f3bf 8f6f 	isb	sy
}
 8014750:	bf00      	nop
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	20000a8c 	.word	0x20000a8c
 801475c:	2001092c 	.word	0x2001092c
 8014760:	20000a90 	.word	0x20000a90
 8014764:	20000a9c 	.word	0x20000a9c
 8014768:	403ccccd 	.word	0x403ccccd
 801476c:	41a86666 	.word	0x41a86666
 8014770:	42c80000 	.word	0x42c80000
 8014774:	20010938 	.word	0x20010938
 8014778:	20010970 	.word	0x20010970
 801477c:	e000ed04 	.word	0xe000ed04

08014780 <_ZN18SuperCapCommThread16handle_max_powerEhP21MaxChassisPowerPacket>:

void SuperCapCommThread::handle_max_power(uint8_t sender_id, MaxChassisPowerPacket* packet) {
 8014780:	b590      	push	{r4, r7, lr}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	4603      	mov	r3, r0
 8014788:	6039      	str	r1, [r7, #0]
 801478a:	71fb      	strb	r3, [r7, #7]
	if(!(IS_RELIABLE(*packet))) {
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014792:	b29c      	uxth	r4, r3
 8014794:	2103      	movs	r1, #3
 8014796:	6838      	ldr	r0, [r7, #0]
 8014798:	f7ff ff1d 	bl	80145d6 <_ZL11__gen_crc16PKht>
 801479c:	4603      	mov	r3, r0
 801479e:	429c      	cmp	r4, r3
 80147a0:	bf14      	ite	ne
 80147a2:	2301      	movne	r3, #1
 80147a4:	2300      	moveq	r3, #0
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d10c      	bne.n	80147c6 <_ZN18SuperCapCommThread16handle_max_powerEhP21MaxChassisPowerPacket+0x46>
//		console.printf_error("Unreliable IMU calibration packet");
		return;
	}
	int temp_val = packet->max_chassis_power;
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	60fb      	str	r3, [r7, #12]
	if(temp_val < 50)
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2b31      	cmp	r3, #49	@ 0x31
 80147b6:	dc01      	bgt.n	80147bc <_ZN18SuperCapCommThread16handle_max_powerEhP21MaxChassisPowerPacket+0x3c>
		temp_val = 50;
 80147b8:	2332      	movs	r3, #50	@ 0x32
 80147ba:	60fb      	str	r3, [r7, #12]
	max_chassis_power = temp_val;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	b2da      	uxtb	r2, r3
 80147c0:	4b03      	ldr	r3, [pc, #12]	@ (80147d0 <_ZN18SuperCapCommThread16handle_max_powerEhP21MaxChassisPowerPacket+0x50>)
 80147c2:	701a      	strb	r2, [r3, #0]
 80147c4:	e000      	b.n	80147c8 <_ZN18SuperCapCommThread16handle_max_powerEhP21MaxChassisPowerPacket+0x48>
		return;
 80147c6:	bf00      	nop
}
 80147c8:	3714      	adds	r7, #20
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd90      	pop	{r4, r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20000030 	.word	0x20000030

080147d4 <_ZN9dummyData7toArrayEPh>:
	uint8_t* toArray(uint8_t* buffer) {
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
		*(int*)(buffer) = num[0];
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	601a      	str	r2, [r3, #0]
		*(int*)(buffer + 4) = num[1];
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	3304      	adds	r3, #4
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	6852      	ldr	r2, [r2, #4]
 80147ee:	601a      	str	r2, [r3, #0]
		*(int*)(buffer + 8) = num[2];
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	3308      	adds	r3, #8
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	6892      	ldr	r2, [r2, #8]
 80147f8:	601a      	str	r2, [r3, #0]
		return buffer;
 80147fa:	683b      	ldr	r3, [r7, #0]
	}
 80147fc:	4618      	mov	r0, r3
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr

08014808 <_ZL11__gen_crc16PKht>:
static uint16_t __gen_crc16(const uint8_t *data, uint16_t size) {
 8014808:	b480      	push	{r7}
 801480a:	b085      	sub	sp, #20
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	460b      	mov	r3, r1
 8014812:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8014814:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014818:	81fb      	strh	r3, [r7, #14]
    while (size--){
 801481a:	e023      	b.n	8014864 <_ZL11__gen_crc16PKht+0x5c>
        x = crc >> 8 ^ *data++;
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	0a1b      	lsrs	r3, r3, #8
 8014820:	b29b      	uxth	r3, r3
 8014822:	b2da      	uxtb	r2, r3
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	1c59      	adds	r1, r3, #1
 8014828:	6079      	str	r1, [r7, #4]
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	4053      	eors	r3, r2
 801482e:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 8014830:	7b7b      	ldrb	r3, [r7, #13]
 8014832:	091b      	lsrs	r3, r3, #4
 8014834:	b2da      	uxtb	r2, r3
 8014836:	7b7b      	ldrb	r3, [r7, #13]
 8014838:	4053      	eors	r3, r2
 801483a:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 801483c:	89fb      	ldrh	r3, [r7, #14]
 801483e:	021b      	lsls	r3, r3, #8
 8014840:	b21a      	sxth	r2, r3
 8014842:	7b7b      	ldrb	r3, [r7, #13]
 8014844:	b21b      	sxth	r3, r3
 8014846:	031b      	lsls	r3, r3, #12
 8014848:	b21b      	sxth	r3, r3
 801484a:	4053      	eors	r3, r2
 801484c:	b21a      	sxth	r2, r3
 801484e:	7b7b      	ldrb	r3, [r7, #13]
 8014850:	b21b      	sxth	r3, r3
 8014852:	015b      	lsls	r3, r3, #5
 8014854:	b21b      	sxth	r3, r3
 8014856:	4053      	eors	r3, r2
 8014858:	b21a      	sxth	r2, r3
 801485a:	7b7b      	ldrb	r3, [r7, #13]
 801485c:	b21b      	sxth	r3, r3
 801485e:	4053      	eors	r3, r2
 8014860:	b21b      	sxth	r3, r3
 8014862:	81fb      	strh	r3, [r7, #14]
    while (size--){
 8014864:	887b      	ldrh	r3, [r7, #2]
 8014866:	1e5a      	subs	r2, r3, #1
 8014868:	807a      	strh	r2, [r7, #2]
 801486a:	2b00      	cmp	r3, #0
 801486c:	bf14      	ite	ne
 801486e:	2301      	movne	r3, #1
 8014870:	2300      	moveq	r3, #0
 8014872:	b2db      	uxtb	r3, r3
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1d1      	bne.n	801481c <_ZL11__gen_crc16PKht+0x14>
    return crc;
 8014878:	89fb      	ldrh	r3, [r7, #14]
}
 801487a:	4618      	mov	r0, r3
 801487c:	3714      	adds	r7, #20
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr
	...

08014888 <_ZN11dummyThreadD1Ev>:
#include <Telemetry.h>

dummyThread* dummyInstance = nullptr;
int count_dummy = 0;

dummyThread::~dummyThread(){
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	4a05      	ldr	r2, [pc, #20]	@ (80148a8 <_ZN11dummyThreadD1Ev+0x20>)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	601a      	str	r2, [r3, #0]
}
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	4618      	mov	r0, r3
 801489a:	f7fe f89f 	bl	80129dc <_ZN6ThreadD1Ev>
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	0801a14c 	.word	0x0801a14c

080148ac <_ZN11dummyThreadD0Ev>:
dummyThread::~dummyThread(){
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
}
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f7ff ffe7 	bl	8014888 <_ZN11dummyThreadD1Ev>
 80148ba:	2144      	movs	r1, #68	@ 0x44
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f001 ff83 	bl	80167c8 <_ZdlPvj>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4618      	mov	r0, r3
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <_ZN11dummyThread4initEv>:

void dummyThread::init(){
 80148cc:	b480      	push	{r7}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	int j = 1;
 80148d4:	2301      	movs	r3, #1
 80148d6:	60fb      	str	r3, [r7, #12]
}
 80148d8:	bf00      	nop
 80148da:	3714      	adds	r7, #20
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <_ZN11dummyThread4loopEv>:
// Declare the RoCo packet with the proper data structure defined in RoCo/Src/Protocol/Protocol24
static dummyPacket dummy_packet;
static int i = 0;

void dummyThread::loop()
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
	++i;
 80148ec:	4b1e      	ldr	r3, [pc, #120]	@ (8014968 <_ZN11dummyThread4loopEv+0x84>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	3301      	adds	r3, #1
 80148f2:	4a1d      	ldr	r2, [pc, #116]	@ (8014968 <_ZN11dummyThread4loopEv+0x84>)
 80148f4:	6013      	str	r3, [r2, #0]
	dummy_data.num[0] = i;
 80148f6:	4b1c      	ldr	r3, [pc, #112]	@ (8014968 <_ZN11dummyThread4loopEv+0x84>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4a1c      	ldr	r2, [pc, #112]	@ (801496c <_ZN11dummyThread4loopEv+0x88>)
 80148fc:	6013      	str	r3, [r2, #0]
	dummy_data.num[1] = i*2;
 80148fe:	4b1a      	ldr	r3, [pc, #104]	@ (8014968 <_ZN11dummyThread4loopEv+0x84>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	4a19      	ldr	r2, [pc, #100]	@ (801496c <_ZN11dummyThread4loopEv+0x88>)
 8014906:	6053      	str	r3, [r2, #4]
	dummy_data.num[2] = i*10;
 8014908:	4b17      	ldr	r3, [pc, #92]	@ (8014968 <_ZN11dummyThread4loopEv+0x84>)
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	4613      	mov	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4413      	add	r3, r2
 8014912:	005b      	lsls	r3, r3, #1
 8014914:	461a      	mov	r2, r3
 8014916:	4b15      	ldr	r3, [pc, #84]	@ (801496c <_ZN11dummyThread4loopEv+0x88>)
 8014918:	609a      	str	r2, [r3, #8]


	dummy_data.toArray((uint8_t*) &dummy_packet);
 801491a:	4915      	ldr	r1, [pc, #84]	@ (8014970 <_ZN11dummyThread4loopEv+0x8c>)
 801491c:	4813      	ldr	r0, [pc, #76]	@ (801496c <_ZN11dummyThread4loopEv+0x88>)
 801491e:	f7ff ff59 	bl	80147d4 <_ZN9dummyData7toArrayEPh>

	MAKE_IDENTIFIABLE(dummy_packet);
 8014922:	4b13      	ldr	r3, [pc, #76]	@ (8014970 <_ZN11dummyThread4loopEv+0x8c>)
 8014924:	2203      	movs	r2, #3
 8014926:	819a      	strh	r2, [r3, #12]
	MAKE_RELIABLE(dummy_packet);
 8014928:	210e      	movs	r1, #14
 801492a:	4811      	ldr	r0, [pc, #68]	@ (8014970 <_ZN11dummyThread4loopEv+0x8c>)
 801492c:	f7ff ff6c 	bl	8014808 <_ZL11__gen_crc16PKht>
 8014930:	4603      	mov	r3, r0
 8014932:	461a      	mov	r2, r3
 8014934:	4b0e      	ldr	r3, [pc, #56]	@ (8014970 <_ZN11dummyThread4loopEv+0x8c>)
 8014936:	81da      	strh	r2, [r3, #14]
	Telemetry::set_id(OTHER_NODE_ID);
 8014938:	2008      	movs	r0, #8
 801493a:	f000 f8f3 	bl	8014b24 <_ZN9Telemetry6set_idEm>

	FDCAN3_network->send(&dummy_packet);
 801493e:	4b0d      	ldr	r3, [pc, #52]	@ (8014974 <_ZN11dummyThread4loopEv+0x90>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	490b      	ldr	r1, [pc, #44]	@ (8014970 <_ZN11dummyThread4loopEv+0x8c>)
 8014944:	4618      	mov	r0, r3
 8014946:	f7fb fe23 	bl	8010590 <_ZN10MessageBus4sendI11dummyPacketEEbPT_>

	osDelay(10);
 801494a:	200a      	movs	r0, #10
 801494c:	f7f7 f92e 	bl	800bbac <osDelay>

	portYIELD();
 8014950:	4b09      	ldr	r3, [pc, #36]	@ (8014978 <_ZN11dummyThread4loopEv+0x94>)
 8014952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014956:	601a      	str	r2, [r3, #0]
 8014958:	f3bf 8f4f 	dsb	sy
 801495c:	f3bf 8f6f 	isb	sy
}
 8014960:	bf00      	nop
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	20010968 	.word	0x20010968
 801496c:	2001094c 	.word	0x2001094c
 8014970:	20010958 	.word	0x20010958
 8014974:	20010970 	.word	0x20010970
 8014978:	e000ed04 	.word	0xe000ed04

0801497c <_ZN11dummyThread12handle_dummyEhP11dummyPacket>:

void dummyThread::handle_dummy(uint8_t sender_id, dummyPacket* packet) {
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b083      	sub	sp, #12
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	6039      	str	r1, [r7, #0]
 8014986:	71fb      	strb	r3, [r7, #7]
	if(!(IS_RELIABLE_MCU(*packet))) {
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	89db      	ldrh	r3, [r3, #14]
 801498c:	b29c      	uxth	r4, r3
 801498e:	220e      	movs	r2, #14
 8014990:	6839      	ldr	r1, [r7, #0]
 8014992:	480a      	ldr	r0, [pc, #40]	@ (80149bc <_ZN11dummyThread12handle_dummyEhP11dummyPacket+0x40>)
 8014994:	f7f0 fc7a 	bl	800528c <HAL_CRC_Calculate>
 8014998:	4603      	mov	r3, r0
 801499a:	b29b      	uxth	r3, r3
 801499c:	429c      	cmp	r4, r3
 801499e:	bf14      	ite	ne
 80149a0:	2301      	movne	r3, #1
 80149a2:	2300      	moveq	r3, #0
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d003      	beq.n	80149b2 <_ZN11dummyThread12handle_dummyEhP11dummyPacket+0x36>
//		console.printf_error("Unreliable IMU calibration packet");
		count_dummy = packet->num1;
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	4a04      	ldr	r2, [pc, #16]	@ (80149c0 <_ZN11dummyThread12handle_dummyEhP11dummyPacket+0x44>)
 80149b0:	6013      	str	r3, [r2, #0]
	}

}
 80149b2:	bf00      	nop
 80149b4:	370c      	adds	r7, #12
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd90      	pop	{r4, r7, pc}
 80149ba:	bf00      	nop
 80149bc:	20000424 	.word	0x20000424
 80149c0:	20010948 	.word	0x20010948

080149c4 <_ZN11dummyThreadC1Ev>:
#include "Telemetry.h"

class dummyThread : public Thread {
public:

	dummyThread(): Thread("dummy"), var1(0), var2(0), var3(0) {};
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	490a      	ldr	r1, [pc, #40]	@ (80149f8 <_ZN11dummyThreadC1Ev+0x34>)
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 fc82 	bl	80152da <_ZN6ThreadC1EPKc>
 80149d6:	4a09      	ldr	r2, [pc, #36]	@ (80149fc <_ZN11dummyThreadC1Ev+0x38>)
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	601a      	str	r2, [r3, #0]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2200      	movs	r2, #0
 80149e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2200      	movs	r2, #0
 80149e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	08019adc 	.word	0x08019adc
 80149fc:	0801a14c 	.word	0x0801a14c

08014a00 <_ZN18SuperCapCommThreadC1Ev>:
#include "Telemetry.h"

class SuperCapCommThread : public Thread {
public:

	SuperCapCommThread(): Thread("SuperCapComm"), V_cap(0), P_chassis(0), charge_state(0) {};
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	490c      	ldr	r1, [pc, #48]	@ (8014a3c <_ZN18SuperCapCommThreadC1Ev+0x3c>)
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 fc64 	bl	80152da <_ZN6ThreadC1EPKc>
 8014a12:	4a0b      	ldr	r2, [pc, #44]	@ (8014a40 <_ZN18SuperCapCommThreadC1Ev+0x40>)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	601a      	str	r2, [r3, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f04f 0200 	mov.w	r2, #0
 8014a1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f04f 0200 	mov.w	r2, #0
 8014a26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4618      	mov	r0, r3
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	bf00      	nop
 8014a3c:	08019ae4 	.word	0x08019ae4
 8014a40:	0801a110 	.word	0x0801a110

08014a44 <_ZN9Telemetry5setupEv>:
dummyThread* dummy = nullptr;
SuperCapCommThread* SuperCapComm = nullptr;

extern gimbal_control_t gimbal_ctrl_data;

void Telemetry::setup() {
 8014a44:	b590      	push	{r4, r7, lr}
 8014a46:	b08b      	sub	sp, #44	@ 0x2c
 8014a48:	af00      	add	r7, sp, #0
		// UART line(s) initialization
//		UART1_line = new STMUARTDriver(&huart1);
//		UART1_network = new NetworkBus(UART1_line);

		// CANFD network initialization
		FDCAN3_driver = new ROCANDriver(&hfdcan3, CURRENT_NODE_ID);
 8014a4a:	20c4      	movs	r0, #196	@ 0xc4
 8014a4c:	f001 ff5e 	bl	801690c <_Znwj>
 8014a50:	4603      	mov	r3, r0
 8014a52:	461c      	mov	r4, r3
 8014a54:	2203      	movs	r2, #3
 8014a56:	492c      	ldr	r1, [pc, #176]	@ (8014b08 <_ZN9Telemetry5setupEv+0xc4>)
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f7fd ffef 	bl	8012a3c <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm>
 8014a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8014b0c <_ZN9Telemetry5setupEv+0xc8>)
 8014a60:	601c      	str	r4, [r3, #0]
		FDCAN3_network = new CANBus(FDCAN3_driver);
 8014a62:	f645 40a4 	movw	r0, #23716	@ 0x5ca4
 8014a66:	f001 ff51 	bl	801690c <_Znwj>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	461c      	mov	r4, r3
 8014a6e:	4b27      	ldr	r3, [pc, #156]	@ (8014b0c <_ZN9Telemetry5setupEv+0xc8>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4619      	mov	r1, r3
 8014a74:	4620      	mov	r0, r4
 8014a76:	f7fa fa03 	bl	800ee80 <_ZN6CANBusC1EP8IODriver>
 8014a7a:	4b25      	ldr	r3, [pc, #148]	@ (8014b10 <_ZN9Telemetry5setupEv+0xcc>)
 8014a7c:	601c      	str	r4, [r3, #0]
		dummy = new dummyThread();
 8014a7e:	2044      	movs	r0, #68	@ 0x44
 8014a80:	f001 ff44 	bl	801690c <_Znwj>
 8014a84:	4603      	mov	r3, r0
 8014a86:	461c      	mov	r4, r3
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f7ff ff9b 	bl	80149c4 <_ZN11dummyThreadC1Ev>
 8014a8e:	4b21      	ldr	r3, [pc, #132]	@ (8014b14 <_ZN9Telemetry5setupEv+0xd0>)
 8014a90:	601c      	str	r4, [r3, #0]
		SuperCapComm = new SuperCapCommThread();
 8014a92:	2044      	movs	r0, #68	@ 0x44
 8014a94:	f001 ff3a 	bl	801690c <_Znwj>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	461c      	mov	r4, r3
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f7ff ffaf 	bl	8014a00 <_ZN18SuperCapCommThreadC1Ev>
 8014aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8014b18 <_ZN9Telemetry5setupEv+0xd4>)
 8014aa4:	601c      	str	r4, [r3, #0]

		FDCAN3_network->handle<dummyPacket>(&dummyThread::handle_dummy);
 8014aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8014b10 <_ZN9Telemetry5setupEv+0xcc>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	461c      	mov	r4, r3
 8014aac:	4b1b      	ldr	r3, [pc, #108]	@ (8014b1c <_ZN9Telemetry5setupEv+0xd8>)
 8014aae:	613b      	str	r3, [r7, #16]
 8014ab0:	f107 0210 	add.w	r2, r7, #16
 8014ab4:	463b      	mov	r3, r7
 8014ab6:	4611      	mov	r1, r2
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f000 f855 	bl	8014b68 <_ZNSt8functionIFvhP11dummyPacketEEC1IPS2_vEEOT_>
 8014abe:	463b      	mov	r3, r7
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	f7fb fd02 	bl	80104cc <_ZN10MessageBus6handleI11dummyPacketEEbSt8functionIFvhPT_EE>
 8014ac8:	463b      	mov	r3, r7
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fc fd2b 	bl	8011526 <_ZNSt8functionIFvhP11dummyPacketEED1Ev>
		FDCAN3_network->handle<MaxChassisPowerPacket>(&SuperCapCommThread::handle_max_power);
 8014ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8014b10 <_ZN9Telemetry5setupEv+0xcc>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	461c      	mov	r4, r3
 8014ad6:	4b12      	ldr	r3, [pc, #72]	@ (8014b20 <_ZN9Telemetry5setupEv+0xdc>)
 8014ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ada:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014ade:	f107 0314 	add.w	r3, r7, #20
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 f871 	bl	8014bcc <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1IPS2_vEEOT_>
 8014aea:	f107 0314 	add.w	r3, r7, #20
 8014aee:	4619      	mov	r1, r3
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7fc fb05 	bl	8011100 <_ZN10MessageBus6handleI21MaxChassisPowerPacketEEbSt8functionIFvhPT_EE>
 8014af6:	f107 0314 	add.w	r3, r7, #20
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fc fd5e 	bl	80115bc <_ZNSt8functionIFvhP21MaxChassisPowerPacketEED1Ev>


}
 8014b00:	bf00      	nop
 8014b02:	372c      	adds	r7, #44	@ 0x2c
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd90      	pop	{r4, r7, pc}
 8014b08:	200004ac 	.word	0x200004ac
 8014b0c:	2001096c 	.word	0x2001096c
 8014b10:	20010970 	.word	0x20010970
 8014b14:	20010974 	.word	0x20010974
 8014b18:	20010978 	.word	0x20010978
 8014b1c:	0801497d 	.word	0x0801497d
 8014b20:	08014781 	.word	0x08014781

08014b24 <_ZN9Telemetry6set_idEm>:

void Telemetry::set_id(uint32_t id) {
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
	dynamic_cast<ROCANDriver*>(FDCAN3_network->get_driver())->TxHeaderConfigID(id);
 8014b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8014b5c <_ZN9Telemetry6set_idEm+0x38>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fa fb48 	bl	800f1c6 <_ZN5IOBus10get_driverEv>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d006      	beq.n	8014b48 <_ZN9Telemetry6set_idEm+0x24>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	4a08      	ldr	r2, [pc, #32]	@ (8014b60 <_ZN9Telemetry6set_idEm+0x3c>)
 8014b3e:	4909      	ldr	r1, [pc, #36]	@ (8014b64 <_ZN9Telemetry6set_idEm+0x40>)
 8014b40:	f001 fe44 	bl	80167cc <__dynamic_cast>
 8014b44:	4603      	mov	r3, r0
 8014b46:	e000      	b.n	8014b4a <_ZN9Telemetry6set_idEm+0x26>
 8014b48:	2300      	movs	r3, #0
 8014b4a:	6879      	ldr	r1, [r7, #4]
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fe f92f 	bl	8012db0 <_ZN11ROCANDriver16TxHeaderConfigIDEm>
//	dynamic_cast<ROCANDriver*>(FDCAN2_network->get_driver())->TxHeaderConfigID(id);
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	20010970 	.word	0x20010970
 8014b60:	0801a0b4 	.word	0x0801a0b4
 8014b64:	0801a0f4 	.word	0x0801a0f4

08014b68 <_ZNSt8functionIFvhP11dummyPacketEEC1IPS2_vEEOT_>:
	function(_Functor&& __f)
 8014b68:	b590      	push	{r4, r7, lr}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	461a      	mov	r2, r3
 8014b76:	2300      	movs	r3, #0
 8014b78:	6013      	str	r3, [r2, #0]
 8014b7a:	6053      	str	r3, [r2, #4]
 8014b7c:	6093      	str	r3, [r2, #8]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7fa fb8f 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	4618      	mov	r0, r3
 8014b92:	f000 f84d 	bl	8014c30 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE21_M_not_empty_functionIS3_EEbPT_>
 8014b96:	4603      	mov	r3, r0
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d00e      	beq.n	8014bba <_ZNSt8functionIFvhP11dummyPacketEEC1IPS2_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 8014b9c:	687c      	ldr	r4, [r7, #4]
 8014b9e:	6838      	ldr	r0, [r7, #0]
 8014ba0:	f000 f856 	bl	8014c50 <_ZSt7forwardIPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f000 f85c 	bl	8014c66 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE15_M_init_functorIS4_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4a04      	ldr	r2, [pc, #16]	@ (8014bc4 <_ZNSt8functionIFvhP11dummyPacketEEC1IPS2_vEEOT_+0x5c>)
 8014bb2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	4a04      	ldr	r2, [pc, #16]	@ (8014bc8 <_ZNSt8functionIFvhP11dummyPacketEEC1IPS2_vEEOT_+0x60>)
 8014bb8:	609a      	str	r2, [r3, #8]
	}
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd90      	pop	{r4, r7, pc}
 8014bc4:	08014c8b 	.word	0x08014c8b
 8014bc8:	08014cc1 	.word	0x08014cc1

08014bcc <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1IPS2_vEEOT_>:
	function(_Functor&& __f)
 8014bcc:	b590      	push	{r4, r7, lr}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	461a      	mov	r2, r3
 8014bda:	2300      	movs	r3, #0
 8014bdc:	6013      	str	r3, [r2, #0]
 8014bde:	6053      	str	r3, [r2, #4]
 8014be0:	6093      	str	r3, [r2, #8]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fa fb5d 	bl	800f2a4 <_ZNSt14_Function_baseC1Ev>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2200      	movs	r2, #0
 8014bee:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f000 f88f 	bl	8014d18 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE21_M_not_empty_functionIS3_EEbPT_>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d00e      	beq.n	8014c1e <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1IPS2_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 8014c00:	687c      	ldr	r4, [r7, #4]
 8014c02:	6838      	ldr	r0, [r7, #0]
 8014c04:	f000 f898 	bl	8014d38 <_ZSt7forwardIPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f000 f89e 	bl	8014d4e <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE15_M_init_functorIS4_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4a04      	ldr	r2, [pc, #16]	@ (8014c28 <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1IPS2_vEEOT_+0x5c>)
 8014c16:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	4a04      	ldr	r2, [pc, #16]	@ (8014c2c <_ZNSt8functionIFvhP21MaxChassisPowerPacketEEC1IPS2_vEEOT_+0x60>)
 8014c1c:	609a      	str	r2, [r3, #8]
	}
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	4618      	mov	r0, r3
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd90      	pop	{r4, r7, pc}
 8014c28:	08014d73 	.word	0x08014d73
 8014c2c:	08014da9 	.word	0x08014da9

08014c30 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8014c30:	b480      	push	{r7}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	bf14      	ite	ne
 8014c3e:	2301      	movne	r3, #1
 8014c40:	2300      	moveq	r3, #0
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	4618      	mov	r0, r3
 8014c46:	370c      	adds	r7, #12
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <_ZSt7forwardIPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014c50:	b480      	push	{r7}
 8014c52:	b083      	sub	sp, #12
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	370c      	adds	r7, #12
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c64:	4770      	bx	lr

08014c66 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE15_M_init_functorIS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8014c66:	b590      	push	{r4, r7, lr}
 8014c68:	b083      	sub	sp, #12
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
 8014c6e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8014c70:	6838      	ldr	r0, [r7, #0]
 8014c72:	f7ff ffed 	bl	8014c50 <_ZSt7forwardIPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014c76:	4603      	mov	r3, r0
 8014c78:	4622      	mov	r2, r4
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f000 f8bf 	bl	8014e00 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8014c82:	bf00      	nop
 8014c84:	370c      	adds	r7, #12
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd90      	pop	{r4, r7, pc}

08014c8a <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014c8a:	b5b0      	push	{r4, r5, r7, lr}
 8014c8c:	b084      	sub	sp, #16
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	60f8      	str	r0, [r7, #12]
 8014c92:	60b9      	str	r1, [r7, #8]
 8014c94:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f000 f8cb 	bl	8014e32 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE14_M_get_pointerERKSt9_Any_data>
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	68b8      	ldr	r0, [r7, #8]
 8014ca0:	f7fa fd0f 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014ca4:	4605      	mov	r5, r0
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7fc fe32 	bl	8011910 <_ZSt7forwardIP11dummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 8014cac:	4603      	mov	r3, r0
 8014cae:	461a      	mov	r2, r3
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f000 f8cd 	bl	8014e52 <_ZSt10__invoke_rIvRPFvhP11dummyPacketEJhS1_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8014cb8:	bf00      	nop
      }
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bdb0      	pop	{r4, r5, r7, pc}

08014cc0 <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8014cc0:	b590      	push	{r4, r7, lr}
 8014cc2:	b085      	sub	sp, #20
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8014cce:	79fb      	ldrb	r3, [r7, #7]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d002      	beq.n	8014cda <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
 8014cd4:	2b01      	cmp	r3, #1
 8014cd6:	d007      	beq.n	8014ce8 <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
 8014cd8:	e010      	b.n	8014cfc <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f7fa fd36 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8014d14 <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x54>)
 8014ce4:	601a      	str	r2, [r3, #0]
	    break;
 8014ce6:	e00f      	b.n	8014d08 <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8014ce8:	68b8      	ldr	r0, [r7, #8]
 8014cea:	f000 f8a2 	bl	8014e32 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE14_M_get_pointerERKSt9_Any_data>
 8014cee:	4604      	mov	r4, r0
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f000 f8c9 	bl	8014e88 <_ZNSt9_Any_data9_M_accessIPPFvhP11dummyPacketEEERT_v>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	601c      	str	r4, [r3, #0]
	    break;
 8014cfa:	e005      	b.n	8014d08 <_ZNSt17_Function_handlerIFvhP11dummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8014cfc:	79fb      	ldrb	r3, [r7, #7]
 8014cfe:	461a      	mov	r2, r3
 8014d00:	68b9      	ldr	r1, [r7, #8]
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	f000 f8cc 	bl	8014ea0 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8014d08:	2300      	movs	r3, #0
      }
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3714      	adds	r7, #20
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd90      	pop	{r4, r7, pc}
 8014d12:	bf00      	nop
 8014d14:	0801a1a8 	.word	0x0801a1a8

08014d18 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	bf14      	ite	ne
 8014d26:	2301      	movne	r3, #1
 8014d28:	2300      	moveq	r3, #0
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	370c      	adds	r7, #12
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr

08014d38 <_ZSt7forwardIPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	4618      	mov	r0, r3
 8014d44:	370c      	adds	r7, #12
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr

08014d4e <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE15_M_init_functorIS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8014d4e:	b590      	push	{r4, r7, lr}
 8014d50:	b083      	sub	sp, #12
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
 8014d56:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8014d58:	6838      	ldr	r0, [r7, #0]
 8014d5a:	f7ff ffed 	bl	8014d38 <_ZSt7forwardIPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	4622      	mov	r2, r4
 8014d62:	4619      	mov	r1, r3
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f000 f8d7 	bl	8014f18 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8014d6a:	bf00      	nop
 8014d6c:	370c      	adds	r7, #12
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd90      	pop	{r4, r7, pc}

08014d72 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014d72:	b5b0      	push	{r4, r5, r7, lr}
 8014d74:	b084      	sub	sp, #16
 8014d76:	af00      	add	r7, sp, #0
 8014d78:	60f8      	str	r0, [r7, #12]
 8014d7a:	60b9      	str	r1, [r7, #8]
 8014d7c:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f000 f8e3 	bl	8014f4a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE14_M_get_pointerERKSt9_Any_data>
 8014d84:	4604      	mov	r4, r0
 8014d86:	68b8      	ldr	r0, [r7, #8]
 8014d88:	f7fa fc9b 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014d8c:	4605      	mov	r5, r0
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7fc fe50 	bl	8011a34 <_ZSt7forwardIP21MaxChassisPowerPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 8014d94:	4603      	mov	r3, r0
 8014d96:	461a      	mov	r2, r3
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f000 f8e5 	bl	8014f6a <_ZSt10__invoke_rIvRPFvhP21MaxChassisPowerPacketEJhS1_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8014da0:	bf00      	nop
      }
 8014da2:	3710      	adds	r7, #16
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bdb0      	pop	{r4, r5, r7, pc}

08014da8 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8014da8:	b590      	push	{r4, r7, lr}
 8014daa:	b085      	sub	sp, #20
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	4613      	mov	r3, r2
 8014db4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8014db6:	79fb      	ldrb	r3, [r7, #7]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d002      	beq.n	8014dc2 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d007      	beq.n	8014dd0 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
 8014dc0:	e010      	b.n	8014de4 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014dc2:	68f8      	ldr	r0, [r7, #12]
 8014dc4:	f7fa fcc2 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	4a0c      	ldr	r2, [pc, #48]	@ (8014dfc <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x54>)
 8014dcc:	601a      	str	r2, [r3, #0]
	    break;
 8014dce:	e00f      	b.n	8014df0 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8014dd0:	68b8      	ldr	r0, [r7, #8]
 8014dd2:	f000 f8ba 	bl	8014f4a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE14_M_get_pointerERKSt9_Any_data>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f000 f8e1 	bl	8014fa0 <_ZNSt9_Any_data9_M_accessIPPFvhP21MaxChassisPowerPacketEEERT_v>
 8014dde:	4603      	mov	r3, r0
 8014de0:	601c      	str	r4, [r3, #0]
	    break;
 8014de2:	e005      	b.n	8014df0 <_ZNSt17_Function_handlerIFvhP21MaxChassisPowerPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8014de4:	79fb      	ldrb	r3, [r7, #7]
 8014de6:	461a      	mov	r2, r3
 8014de8:	68b9      	ldr	r1, [r7, #8]
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f000 f8e4 	bl	8014fb8 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8014df0:	2300      	movs	r3, #0
      }
 8014df2:	4618      	mov	r0, r3
 8014df4:	3714      	adds	r7, #20
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd90      	pop	{r4, r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	0801a178 	.word	0x0801a178

08014e00 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8014e00:	b590      	push	{r4, r7, lr}
 8014e02:	b085      	sub	sp, #20
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7fa f8cc 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 8014e12:	4603      	mov	r3, r0
 8014e14:	4619      	mov	r1, r3
 8014e16:	2004      	movs	r0, #4
 8014e18:	f7fd fda0 	bl	801295c <_ZnwjPv>
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	68b8      	ldr	r0, [r7, #8]
 8014e20:	f7ff ff16 	bl	8014c50 <_ZSt7forwardIPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014e24:	4603      	mov	r3, r0
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	6023      	str	r3, [r4, #0]
	  }
 8014e2a:	bf00      	nop
 8014e2c:	3714      	adds	r7, #20
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd90      	pop	{r4, r7, pc}

08014e32 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8014e32:	b580      	push	{r7, lr}
 8014e34:	b084      	sub	sp, #16
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f8f8 	bl	8015030 <_ZNKSt9_Any_data9_M_accessIPFvhP11dummyPacketEEERKT_v>
 8014e40:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8014e42:	68f8      	ldr	r0, [r7, #12]
 8014e44:	f000 f900 	bl	8015048 <_ZSt11__addressofIKPFvhP11dummyPacketEEPT_RS5_>
 8014e48:	4603      	mov	r3, r0
	}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3710      	adds	r7, #16
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}

08014e52 <_ZSt10__invoke_rIvRPFvhP11dummyPacketEJhS1_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8014e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e54:	b085      	sub	sp, #20
 8014e56:	af00      	add	r7, sp, #0
 8014e58:	60f8      	str	r0, [r7, #12]
 8014e5a:	60b9      	str	r1, [r7, #8]
 8014e5c:	607a      	str	r2, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f000 f8fd 	bl	801505e <_ZSt7forwardIRPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
 8014e64:	4604      	mov	r4, r0
 8014e66:	68b8      	ldr	r0, [r7, #8]
 8014e68:	f7fa fc2b 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014e6c:	4605      	mov	r5, r0
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f7fc fd4e 	bl	8011910 <_ZSt7forwardIP11dummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 8014e74:	4603      	mov	r3, r0
 8014e76:	462a      	mov	r2, r5
 8014e78:	4621      	mov	r1, r4
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f000 f8fa 	bl	8015074 <_ZSt13__invoke_implIvRPFvhP11dummyPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8014e80:	bf00      	nop
 8014e82:	3714      	adds	r7, #20
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e88 <_ZNSt9_Any_data9_M_accessIPPFvhP11dummyPacketEEERT_v>:
      _M_access() noexcept
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7fa f88a 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 8014e96:	4603      	mov	r3, r0
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3708      	adds	r7, #8
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b085      	sub	sp, #20
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8014eae:	79fb      	ldrb	r3, [r7, #7]
 8014eb0:	2b03      	cmp	r3, #3
 8014eb2:	d82a      	bhi.n	8014f0a <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
 8014eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8014ebc <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x1c>)
 8014eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eba:	bf00      	nop
 8014ebc:	08014ecd 	.word	0x08014ecd
 8014ec0:	08014edb 	.word	0x08014edb
 8014ec4:	08014eef 	.word	0x08014eef
 8014ec8:	08014f01 	.word	0x08014f01
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014ecc:	68f8      	ldr	r0, [r7, #12]
 8014ece:	f7fa fc3d 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8014f14 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x74>)
 8014ed6:	601a      	str	r2, [r3, #0]
	      break;
 8014ed8:	e017      	b.n	8014f0a <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8014eda:	68b8      	ldr	r0, [r7, #8]
 8014edc:	f7ff ffa9 	bl	8014e32 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE14_M_get_pointerERKSt9_Any_data>
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	68f8      	ldr	r0, [r7, #12]
 8014ee4:	f7ff ffd0 	bl	8014e88 <_ZNSt9_Any_data9_M_accessIPPFvhP11dummyPacketEEERT_v>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	601c      	str	r4, [r3, #0]
	      break;
 8014eec:	e00d      	b.n	8014f0a <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8014eee:	68b8      	ldr	r0, [r7, #8]
 8014ef0:	f7ff ff9f 	bl	8014e32 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE14_M_get_pointerERKSt9_Any_data>
 8014ef4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	68f8      	ldr	r0, [r7, #12]
 8014efa:	f000 f8d8 	bl	80150ae <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>
	      break;
 8014efe:	e004      	b.n	8014f0a <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8014f00:	4621      	mov	r1, r4
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f000 f8e5 	bl	80150d2 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8014f08:	bf00      	nop
	  return false;
 8014f0a:	2300      	movs	r3, #0
	}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3714      	adds	r7, #20
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd90      	pop	{r4, r7, pc}
 8014f14:	0801a1a8 	.word	0x0801a1a8

08014f18 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8014f18:	b590      	push	{r4, r7, lr}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	60f8      	str	r0, [r7, #12]
 8014f20:	60b9      	str	r1, [r7, #8]
 8014f22:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8014f24:	68f8      	ldr	r0, [r7, #12]
 8014f26:	f7fa f840 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	2004      	movs	r0, #4
 8014f30:	f7fd fd14 	bl	801295c <_ZnwjPv>
 8014f34:	4604      	mov	r4, r0
 8014f36:	68b8      	ldr	r0, [r7, #8]
 8014f38:	f7ff fefe 	bl	8014d38 <_ZSt7forwardIPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	6023      	str	r3, [r4, #0]
	  }
 8014f42:	bf00      	nop
 8014f44:	3714      	adds	r7, #20
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd90      	pop	{r4, r7, pc}

08014f4a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b084      	sub	sp, #16
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 f8c9 	bl	80150ea <_ZNKSt9_Any_data9_M_accessIPFvhP21MaxChassisPowerPacketEEERKT_v>
 8014f58:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f000 f8d1 	bl	8015102 <_ZSt11__addressofIKPFvhP21MaxChassisPowerPacketEEPT_RS5_>
 8014f60:	4603      	mov	r3, r0
	}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3710      	adds	r7, #16
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <_ZSt10__invoke_rIvRPFvhP21MaxChassisPowerPacketEJhS1_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8014f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f6c:	b085      	sub	sp, #20
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	60f8      	str	r0, [r7, #12]
 8014f72:	60b9      	str	r1, [r7, #8]
 8014f74:	607a      	str	r2, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8014f76:	68f8      	ldr	r0, [r7, #12]
 8014f78:	f000 f8ce 	bl	8015118 <_ZSt7forwardIRPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	68b8      	ldr	r0, [r7, #8]
 8014f80:	f7fa fb9f 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014f84:	4605      	mov	r5, r0
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f7fc fd54 	bl	8011a34 <_ZSt7forwardIP21MaxChassisPowerPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	462a      	mov	r2, r5
 8014f90:	4621      	mov	r1, r4
 8014f92:	4630      	mov	r0, r6
 8014f94:	f000 f8cb 	bl	801512e <_ZSt13__invoke_implIvRPFvhP21MaxChassisPowerPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8014f98:	bf00      	nop
 8014f9a:	3714      	adds	r7, #20
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fa0 <_ZNSt9_Any_data9_M_accessIPPFvhP21MaxChassisPowerPacketEEERT_v>:
      _M_access() noexcept
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f7f9 fffe 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3708      	adds	r7, #8
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8014fb8:	b590      	push	{r4, r7, lr}
 8014fba:	b085      	sub	sp, #20
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8014fc6:	79fb      	ldrb	r3, [r7, #7]
 8014fc8:	2b03      	cmp	r3, #3
 8014fca:	d82a      	bhi.n	8015022 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
 8014fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8014fd4 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x1c>)
 8014fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fd2:	bf00      	nop
 8014fd4:	08014fe5 	.word	0x08014fe5
 8014fd8:	08014ff3 	.word	0x08014ff3
 8014fdc:	08015007 	.word	0x08015007
 8014fe0:	08015019 	.word	0x08015019
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f7fa fbb1 	bl	800f74c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014fea:	4603      	mov	r3, r0
 8014fec:	4a0f      	ldr	r2, [pc, #60]	@ (801502c <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x74>)
 8014fee:	601a      	str	r2, [r3, #0]
	      break;
 8014ff0:	e017      	b.n	8015022 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8014ff2:	68b8      	ldr	r0, [r7, #8]
 8014ff4:	f7ff ffa9 	bl	8014f4a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE14_M_get_pointerERKSt9_Any_data>
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	f7ff ffd0 	bl	8014fa0 <_ZNSt9_Any_data9_M_accessIPPFvhP21MaxChassisPowerPacketEEERT_v>
 8015000:	4603      	mov	r3, r0
 8015002:	601c      	str	r4, [r3, #0]
	      break;
 8015004:	e00d      	b.n	8015022 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8015006:	68b8      	ldr	r0, [r7, #8]
 8015008:	f7ff ff9f 	bl	8014f4a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE14_M_get_pointerERKSt9_Any_data>
 801500c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 801500e:	4619      	mov	r1, r3
 8015010:	68f8      	ldr	r0, [r7, #12]
 8015012:	f000 f8a9 	bl	8015168 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>
	      break;
 8015016:	e004      	b.n	8015022 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8015018:	4621      	mov	r1, r4
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f000 f8b6 	bl	801518c <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8015020:	bf00      	nop
	  return false;
 8015022:	2300      	movs	r3, #0
	}
 8015024:	4618      	mov	r0, r3
 8015026:	3714      	adds	r7, #20
 8015028:	46bd      	mov	sp, r7
 801502a:	bd90      	pop	{r4, r7, pc}
 801502c:	0801a178 	.word	0x0801a178

08015030 <_ZNKSt9_Any_data9_M_accessIPFvhP11dummyPacketEEERKT_v>:
      _M_access() const noexcept
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f7f9 ffc1 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 801503e:	4603      	mov	r3, r0
 8015040:	4618      	mov	r0, r3
 8015042:	3708      	adds	r7, #8
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <_ZSt11__addressofIKPFvhP11dummyPacketEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	4618      	mov	r0, r3
 8015054:	370c      	adds	r7, #12
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr

0801505e <_ZSt7forwardIRPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801505e:	b480      	push	{r7}
 8015060:	b083      	sub	sp, #12
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	370c      	adds	r7, #12
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <_ZSt13__invoke_implIvRPFvhP11dummyPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8015074:	b5b0      	push	{r4, r5, r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	7338      	strb	r0, [r7, #12]
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8015082:	68b8      	ldr	r0, [r7, #8]
 8015084:	f7ff ffeb 	bl	801505e <_ZSt7forwardIRPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
 8015088:	4603      	mov	r3, r0
 801508a:	681c      	ldr	r4, [r3, #0]
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7fa fb18 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8015092:	4603      	mov	r3, r0
 8015094:	781d      	ldrb	r5, [r3, #0]
 8015096:	6838      	ldr	r0, [r7, #0]
 8015098:	f7fc fc3a 	bl	8011910 <_ZSt7forwardIP11dummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 801509c:	4603      	mov	r3, r0
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4619      	mov	r1, r3
 80150a2:	4628      	mov	r0, r5
 80150a4:	47a0      	blx	r4
 80150a6:	bf00      	nop
 80150a8:	3710      	adds	r7, #16
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bdb0      	pop	{r4, r5, r7, pc}

080150ae <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80150ae:	b590      	push	{r4, r7, lr}
 80150b0:	b083      	sub	sp, #12
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80150b8:	6838      	ldr	r0, [r7, #0]
 80150ba:	f000 f873 	bl	80151a4 <_ZSt7forwardIRKPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS6_E4typeE>
 80150be:	4603      	mov	r3, r0
 80150c0:	4622      	mov	r2, r4
 80150c2:	4619      	mov	r1, r3
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f000 f878 	bl	80151ba <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80150ca:	bf00      	nop
 80150cc:	370c      	adds	r7, #12
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd90      	pop	{r4, r7, pc}

080150d2 <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80150d2:	b580      	push	{r7, lr}
 80150d4:	b082      	sub	sp, #8
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
 80150da:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 f885 	bl	80151ec <_ZNSt9_Any_data9_M_accessIPFvhP11dummyPacketEEERT_v>
	}
 80150e2:	bf00      	nop
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}

080150ea <_ZNKSt9_Any_data9_M_accessIPFvhP21MaxChassisPowerPacketEEERKT_v>:
      _M_access() const noexcept
 80150ea:	b580      	push	{r7, lr}
 80150ec:	b082      	sub	sp, #8
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f7f9 ff64 	bl	800efc0 <_ZNKSt9_Any_data9_M_accessEv>
 80150f8:	4603      	mov	r3, r0
 80150fa:	4618      	mov	r0, r3
 80150fc:	3708      	adds	r7, #8
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}

08015102 <_ZSt11__addressofIKPFvhP21MaxChassisPowerPacketEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015102:	b480      	push	{r7}
 8015104:	b083      	sub	sp, #12
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr

08015118 <_ZSt7forwardIRPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015118:	b480      	push	{r7}
 801511a:	b083      	sub	sp, #12
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	4618      	mov	r0, r3
 8015124:	370c      	adds	r7, #12
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr

0801512e <_ZSt13__invoke_implIvRPFvhP21MaxChassisPowerPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 801512e:	b5b0      	push	{r4, r5, r7, lr}
 8015130:	b084      	sub	sp, #16
 8015132:	af00      	add	r7, sp, #0
 8015134:	7338      	strb	r0, [r7, #12]
 8015136:	60b9      	str	r1, [r7, #8]
 8015138:	607a      	str	r2, [r7, #4]
 801513a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801513c:	68b8      	ldr	r0, [r7, #8]
 801513e:	f7ff ffeb 	bl	8015118 <_ZSt7forwardIRPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
 8015142:	4603      	mov	r3, r0
 8015144:	681c      	ldr	r4, [r3, #0]
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7fa fabb 	bl	800f6c2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801514c:	4603      	mov	r3, r0
 801514e:	781d      	ldrb	r5, [r3, #0]
 8015150:	6838      	ldr	r0, [r7, #0]
 8015152:	f7fc fc6f 	bl	8011a34 <_ZSt7forwardIP21MaxChassisPowerPacketEOT_RNSt16remove_referenceIS2_E4typeE>
 8015156:	4603      	mov	r3, r0
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4619      	mov	r1, r3
 801515c:	4628      	mov	r0, r5
 801515e:	47a0      	blx	r4
 8015160:	bf00      	nop
 8015162:	3710      	adds	r7, #16
 8015164:	46bd      	mov	sp, r7
 8015166:	bdb0      	pop	{r4, r5, r7, pc}

08015168 <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8015168:	b590      	push	{r4, r7, lr}
 801516a:	b083      	sub	sp, #12
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8015172:	6838      	ldr	r0, [r7, #0]
 8015174:	f000 f846 	bl	8015204 <_ZSt7forwardIRKPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015178:	4603      	mov	r3, r0
 801517a:	4622      	mov	r2, r4
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f000 f84b 	bl	801521a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8015184:	bf00      	nop
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	bd90      	pop	{r4, r7, pc}

0801518c <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f000 f858 	bl	801524c <_ZNSt9_Any_data9_M_accessIPFvhP21MaxChassisPowerPacketEEERT_v>
	}
 801519c:	bf00      	nop
 801519e:	3708      	adds	r7, #8
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <_ZSt7forwardIRKPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	4618      	mov	r0, r3
 80151b0:	370c      	adds	r7, #12
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr

080151ba <_ZNSt14_Function_base13_Base_managerIPFvhP11dummyPacketEE9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80151ba:	b590      	push	{r4, r7, lr}
 80151bc:	b085      	sub	sp, #20
 80151be:	af00      	add	r7, sp, #0
 80151c0:	60f8      	str	r0, [r7, #12]
 80151c2:	60b9      	str	r1, [r7, #8]
 80151c4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7f9 feef 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 80151cc:	4603      	mov	r3, r0
 80151ce:	4619      	mov	r1, r3
 80151d0:	2004      	movs	r0, #4
 80151d2:	f7fd fbc3 	bl	801295c <_ZnwjPv>
 80151d6:	4604      	mov	r4, r0
 80151d8:	68b8      	ldr	r0, [r7, #8]
 80151da:	f7ff ffe3 	bl	80151a4 <_ZSt7forwardIRKPFvhP11dummyPacketEEOT_RNSt16remove_referenceIS6_E4typeE>
 80151de:	4603      	mov	r3, r0
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	6023      	str	r3, [r4, #0]
	  }
 80151e4:	bf00      	nop
 80151e6:	3714      	adds	r7, #20
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd90      	pop	{r4, r7, pc}

080151ec <_ZNSt9_Any_data9_M_accessIPFvhP11dummyPacketEEERT_v>:
      _M_access() noexcept
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7f9 fed8 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 80151fa:	4603      	mov	r3, r0
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <_ZSt7forwardIRKPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	4618      	mov	r0, r3
 8015210:	370c      	adds	r7, #12
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr

0801521a <_ZNSt14_Function_base13_Base_managerIPFvhP21MaxChassisPowerPacketEE9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 801521a:	b590      	push	{r4, r7, lr}
 801521c:	b085      	sub	sp, #20
 801521e:	af00      	add	r7, sp, #0
 8015220:	60f8      	str	r0, [r7, #12]
 8015222:	60b9      	str	r1, [r7, #8]
 8015224:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8015226:	68f8      	ldr	r0, [r7, #12]
 8015228:	f7f9 febf 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 801522c:	4603      	mov	r3, r0
 801522e:	4619      	mov	r1, r3
 8015230:	2004      	movs	r0, #4
 8015232:	f7fd fb93 	bl	801295c <_ZnwjPv>
 8015236:	4604      	mov	r4, r0
 8015238:	68b8      	ldr	r0, [r7, #8]
 801523a:	f7ff ffe3 	bl	8015204 <_ZSt7forwardIRKPFvhP21MaxChassisPowerPacketEEOT_RNSt16remove_referenceIS6_E4typeE>
 801523e:	4603      	mov	r3, r0
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	6023      	str	r3, [r4, #0]
	  }
 8015244:	bf00      	nop
 8015246:	3714      	adds	r7, #20
 8015248:	46bd      	mov	sp, r7
 801524a:	bd90      	pop	{r4, r7, pc}

0801524c <_ZNSt9_Any_data9_M_accessIPFvhP21MaxChassisPowerPacketEEERT_v>:
      _M_access() noexcept
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7f9 fea8 	bl	800efaa <_ZNSt9_Any_data9_M_accessEv>
 801525a:	4603      	mov	r3, r0
 801525c:	4618      	mov	r0, r3
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}

08015264 <_ZN6Thread9isRunningEv>:
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	7b1b      	ldrb	r3, [r3, #12]
 8015270:	4618      	mov	r0, r3
 8015272:	370c      	adds	r7, #12
 8015274:	46bd      	mov	sp, r7
 8015276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527a:	4770      	bx	lr

0801527c <_Z10__task_runPv>:
								  // We're already using more than 70%
								  // of the RAM :)

static char buffer[128];

void __task_run(void* arg) {
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 8015288:	2064      	movs	r0, #100	@ 0x64
 801528a:	f7f6 fc8f 	bl	800bbac <osDelay>

	thread->init();
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3308      	adds	r3, #8
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	4798      	blx	r3

	while(thread->isRunning()) {
 801529a:	e008      	b.n	80152ae <_Z10__task_runPv+0x32>
		thread->loop();
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	330c      	adds	r3, #12
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	68f8      	ldr	r0, [r7, #12]
 80152a6:	4798      	blx	r3
		osDelay(1 / portTICK_PERIOD_MS);
 80152a8:	2001      	movs	r0, #1
 80152aa:	f7f6 fc7f 	bl	800bbac <osDelay>
	while(thread->isRunning()) {
 80152ae:	68f8      	ldr	r0, [r7, #12]
 80152b0:	f7ff ffd8 	bl	8015264 <_ZN6Thread9isRunningEv>
 80152b4:	4603      	mov	r3, r0
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d1f0      	bne.n	801529c <_Z10__task_runPv+0x20>
	}

	delete thread;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d004      	beq.n	80152ca <_Z10__task_runPv+0x4e>
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	3204      	adds	r2, #4
 80152c4:	6812      	ldr	r2, [r2, #0]
 80152c6:	4618      	mov	r0, r3
 80152c8:	4790      	blx	r2

	vTaskDelete(nullptr);
 80152ca:	2000      	movs	r0, #0
 80152cc:	f7f7 fed4 	bl	800d078 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 80152d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80152d4:	f7f6 fc6a 	bl	800bbac <osDelay>
 80152d8:	e7fa      	b.n	80152d0 <_Z10__task_runPv+0x54>

080152da <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	6039      	str	r1, [r7, #0]
 80152e4:	2218      	movs	r2, #24
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f000 f805 	bl	80152f8 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	607a      	str	r2, [r7, #4]
 8015304:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	68b9      	ldr	r1, [r7, #8]
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f000 f805 	bl	801531c <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	4618      	mov	r0, r3
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 801531c:	b580      	push	{r7, lr}
 801531e:	b08e      	sub	sp, #56	@ 0x38
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
 8015328:	603b      	str	r3, [r7, #0]
 801532a:	4a12      	ldr	r2, [pc, #72]	@ (8015374 <_ZN6ThreadC1EPKc12osPriority_tm+0x58>)
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	601a      	str	r2, [r3, #0]
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2201      	movs	r2, #1
 8015334:	731a      	strb	r2, [r3, #12]
	const osThreadAttr_t thread_attributes = {
 8015336:	f107 0314 	add.w	r3, r7, #20
 801533a:	2224      	movs	r2, #36	@ 0x24
 801533c:	2100      	movs	r1, #0
 801533e:	4618      	mov	r0, r3
 8015340:	f002 fcd7 	bl	8017cf2 <memset>
	  .name = (char*) name,
	  .stack_size = stackSize,
	  .priority = (osPriority_t) priority,
	};
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	617b      	str	r3, [r7, #20]
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	this->handle = (osThreadId) osThreadNew(&__task_run, this, &thread_attributes);
 8015350:	f107 0314 	add.w	r3, r7, #20
 8015354:	461a      	mov	r2, r3
 8015356:	68f9      	ldr	r1, [r7, #12]
 8015358:	4807      	ldr	r0, [pc, #28]	@ (8015378 <_ZN6ThreadC1EPKc12osPriority_tm+0x5c>)
 801535a:	f7f6 fb95 	bl	800ba88 <osThreadNew>
 801535e:	4602      	mov	r2, r0
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	605a      	str	r2, [r3, #4]
	this->name = name;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	68ba      	ldr	r2, [r7, #8]
 8015368:	609a      	str	r2, [r3, #8]
}
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	4618      	mov	r0, r3
 801536e:	3738      	adds	r7, #56	@ 0x38
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	0801a08c 	.word	0x0801a08c
 8015378:	0801527d 	.word	0x0801527d

0801537c <_ZN6Thread12setTickDelayEm>:
void Thread::terminate() {
	this->running = false;
}


void Thread::setTickDelay(uint32_t ms) {
 801537c:	b480      	push	{r7}
 801537e:	b083      	sub	sp, #12
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
	this->delay = ms;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	683a      	ldr	r2, [r7, #0]
 801538a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801538c:	bf00      	nop
 801538e:	370c      	adds	r7, #12
 8015390:	46bd      	mov	sp, r7
 8015392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015396:	4770      	bx	lr

08015398 <_ZN11adc_manager8adc_initEPh>:
#include "math.h"

uint16_t adc1_samples[2][16][2];
uint16_t adc2_samples[2][16][3];

HAL_StatusTypeDef adc_manager::adc_init(uint8_t* filters_length){
 8015398:	b580      	push	{r7, lr}
 801539a:	b084      	sub	sp, #16
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	6039      	str	r1, [r7, #0]

  HAL_ADC_Start_DMA(adc_cap_, (uint32_t*)(&adc1_samples[0][0][0]),64);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	699b      	ldr	r3, [r3, #24]
 80153a6:	2240      	movs	r2, #64	@ 0x40
 80153a8:	4936      	ldr	r1, [pc, #216]	@ (8015484 <_ZN11adc_manager8adc_initEPh+0xec>)
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7ee fb20 	bl	80039f0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(adc_bat_, (uint32_t*)(&adc2_samples[0][0][0]),96);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	69db      	ldr	r3, [r3, #28]
 80153b4:	2260      	movs	r2, #96	@ 0x60
 80153b6:	4934      	ldr	r1, [pc, #208]	@ (8015488 <_ZN11adc_manager8adc_initEPh+0xf0>)
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7ee fb19 	bl	80039f0 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(adc_temp_, ADC_SINGLE_ENDED);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a1b      	ldr	r3, [r3, #32]
 80153c2:	217f      	movs	r1, #127	@ 0x7f
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ef fc81 	bl	8004ccc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(adc_temp_);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6a1b      	ldr	r3, [r3, #32]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7ee fa2a 	bl	8003828 <HAL_ADC_Start>

  for(int i = 0; i < 5; ++i){
 80153d4:	2300      	movs	r3, #0
 80153d6:	60fb      	str	r3, [r7, #12]
 80153d8:	e048      	b.n	801546c <_ZN11adc_manager8adc_initEPh+0xd4>
	  filters[i].sum = 0;
 80153da:	687a      	ldr	r2, [r7, #4]
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	218c      	movs	r1, #140	@ 0x8c
 80153e0:	fb01 f303 	mul.w	r3, r1, r3
 80153e4:	4413      	add	r3, r2
 80153e6:	33a8      	adds	r3, #168	@ 0xa8
 80153e8:	2200      	movs	r2, #0
 80153ea:	601a      	str	r2, [r3, #0]
	  filters[i].index = 0;
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	218c      	movs	r1, #140	@ 0x8c
 80153f2:	fb01 f303 	mul.w	r3, r1, r3
 80153f6:	4413      	add	r3, r2
 80153f8:	33a5      	adds	r3, #165	@ 0xa5
 80153fa:	2200      	movs	r2, #0
 80153fc:	701a      	strb	r2, [r3, #0]
	  filters[i].full = 0;
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	218c      	movs	r1, #140	@ 0x8c
 8015404:	fb01 f303 	mul.w	r3, r1, r3
 8015408:	4413      	add	r3, r2
 801540a:	33ac      	adds	r3, #172	@ 0xac
 801540c:	2200      	movs	r2, #0
 801540e:	701a      	strb	r2, [r3, #0]
	  filters[i].length = filters_length[i];
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	683a      	ldr	r2, [r7, #0]
 8015414:	4413      	add	r3, r2
 8015416:	7818      	ldrb	r0, [r3, #0]
 8015418:	687a      	ldr	r2, [r7, #4]
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	218c      	movs	r1, #140	@ 0x8c
 801541e:	fb01 f303 	mul.w	r3, r1, r3
 8015422:	4413      	add	r3, r2
 8015424:	33a4      	adds	r3, #164	@ 0xa4
 8015426:	4602      	mov	r2, r0
 8015428:	701a      	strb	r2, [r3, #0]
	  for (int j = 0; j < filters[i].length; j++) {
 801542a:	2300      	movs	r3, #0
 801542c:	60bb      	str	r3, [r7, #8]
 801542e:	e00e      	b.n	801544e <_ZN11adc_manager8adc_initEPh+0xb6>
	      filters[i].window_filter[j] = 0;  // Initialize each element to 0.0
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2146      	movs	r1, #70	@ 0x46
 8015436:	fb03 f101 	mul.w	r1, r3, r1
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	440b      	add	r3, r1
 801543e:	3310      	adds	r3, #16
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	4413      	add	r3, r2
 8015444:	2200      	movs	r2, #0
 8015446:	809a      	strh	r2, [r3, #4]
	  for (int j = 0; j < filters[i].length; j++) {
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	3301      	adds	r3, #1
 801544c:	60bb      	str	r3, [r7, #8]
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	218c      	movs	r1, #140	@ 0x8c
 8015454:	fb01 f303 	mul.w	r3, r1, r3
 8015458:	4413      	add	r3, r2
 801545a:	33a4      	adds	r3, #164	@ 0xa4
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	461a      	mov	r2, r3
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	4293      	cmp	r3, r2
 8015464:	dbe4      	blt.n	8015430 <_ZN11adc_manager8adc_initEPh+0x98>
  for(int i = 0; i < 5; ++i){
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	3301      	adds	r3, #1
 801546a:	60fb      	str	r3, [r7, #12]
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	2b04      	cmp	r3, #4
 8015470:	ddb3      	ble.n	80153da <_ZN11adc_manager8adc_initEPh+0x42>
	  }
  }
  set_gains_offsets();
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f000 f94c 	bl	8015710 <_ZN11adc_manager17set_gains_offsetsEv>
}
 8015478:	bf00      	nop
 801547a:	4618      	mov	r0, r3
 801547c:	3710      	adds	r7, #16
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	2001097c 	.word	0x2001097c
 8015488:	200109fc 	.word	0x200109fc

0801548c <_ZN11adc_manager10sample_adcEv>:

 HAL_StatusTypeDef adc_manager::sample_adc(){
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b087      	sub	sp, #28
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
	uint8_t Cap_HalfFull, Bat_HalfFull;
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 8015494:	4b69      	ldr	r3, [pc, #420]	@ (801563c <_ZN11adc_manager10sample_adcEv+0x1b0>)
 8015496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	461a      	mov	r2, r3
 801549c:	4b68      	ldr	r3, [pc, #416]	@ (8015640 <_ZN11adc_manager10sample_adcEv+0x1b4>)
 801549e:	429a      	cmp	r2, r3
 80154a0:	d904      	bls.n	80154ac <_ZN11adc_manager10sample_adcEv+0x20>
 80154a2:	4b68      	ldr	r3, [pc, #416]	@ (8015644 <_ZN11adc_manager10sample_adcEv+0x1b8>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f003 0304 	and.w	r3, r3, #4
 80154aa:	e003      	b.n	80154b4 <_ZN11adc_manager10sample_adcEv+0x28>
 80154ac:	4b66      	ldr	r3, [pc, #408]	@ (8015648 <_ZN11adc_manager10sample_adcEv+0x1bc>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f003 0304 	and.w	r3, r3, #4
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	bf0c      	ite	eq
 80154b8:	2301      	moveq	r3, #1
 80154ba:	2300      	movne	r3, #0
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d010      	beq.n	80154e4 <_ZN11adc_manager10sample_adcEv+0x58>
		__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1);
 80154c2:	4b5e      	ldr	r3, [pc, #376]	@ (801563c <_ZN11adc_manager10sample_adcEv+0x1b0>)
 80154c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	461a      	mov	r2, r3
 80154ca:	4b5d      	ldr	r3, [pc, #372]	@ (8015640 <_ZN11adc_manager10sample_adcEv+0x1b4>)
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d903      	bls.n	80154d8 <_ZN11adc_manager10sample_adcEv+0x4c>
 80154d0:	4b5c      	ldr	r3, [pc, #368]	@ (8015644 <_ZN11adc_manager10sample_adcEv+0x1b8>)
 80154d2:	2204      	movs	r2, #4
 80154d4:	605a      	str	r2, [r3, #4]
 80154d6:	e002      	b.n	80154de <_ZN11adc_manager10sample_adcEv+0x52>
 80154d8:	4b5b      	ldr	r3, [pc, #364]	@ (8015648 <_ZN11adc_manager10sample_adcEv+0x1bc>)
 80154da:	2204      	movs	r2, #4
 80154dc:	605a      	str	r2, [r3, #4]
		Cap_HalfFull=0;
 80154de:	2300      	movs	r3, #0
 80154e0:	75fb      	strb	r3, [r7, #23]
 80154e2:	e001      	b.n	80154e8 <_ZN11adc_manager10sample_adcEv+0x5c>
	} else {
		Cap_HalfFull=1;
 80154e4:	2301      	movs	r3, #1
 80154e6:	75fb      	strb	r3, [r7, #23]
	}
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 80154e8:	4b58      	ldr	r3, [pc, #352]	@ (801564c <_ZN11adc_manager10sample_adcEv+0x1c0>)
 80154ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	461a      	mov	r2, r3
 80154f0:	4b53      	ldr	r3, [pc, #332]	@ (8015640 <_ZN11adc_manager10sample_adcEv+0x1b4>)
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d904      	bls.n	8015500 <_ZN11adc_manager10sample_adcEv+0x74>
 80154f6:	4b53      	ldr	r3, [pc, #332]	@ (8015644 <_ZN11adc_manager10sample_adcEv+0x1b8>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	f003 0304 	and.w	r3, r3, #4
 80154fe:	e003      	b.n	8015508 <_ZN11adc_manager10sample_adcEv+0x7c>
 8015500:	4b51      	ldr	r3, [pc, #324]	@ (8015648 <_ZN11adc_manager10sample_adcEv+0x1bc>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	f003 0304 	and.w	r3, r3, #4
 8015508:	2b01      	cmp	r3, #1
 801550a:	bf0c      	ite	eq
 801550c:	2301      	moveq	r3, #1
 801550e:	2300      	movne	r3, #0
 8015510:	b2db      	uxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	d010      	beq.n	8015538 <_ZN11adc_manager10sample_adcEv+0xac>
		__HAL_DMA_CLEAR_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1);
 8015516:	4b4d      	ldr	r3, [pc, #308]	@ (801564c <_ZN11adc_manager10sample_adcEv+0x1c0>)
 8015518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	461a      	mov	r2, r3
 801551e:	4b48      	ldr	r3, [pc, #288]	@ (8015640 <_ZN11adc_manager10sample_adcEv+0x1b4>)
 8015520:	429a      	cmp	r2, r3
 8015522:	d903      	bls.n	801552c <_ZN11adc_manager10sample_adcEv+0xa0>
 8015524:	4b47      	ldr	r3, [pc, #284]	@ (8015644 <_ZN11adc_manager10sample_adcEv+0x1b8>)
 8015526:	2204      	movs	r2, #4
 8015528:	605a      	str	r2, [r3, #4]
 801552a:	e002      	b.n	8015532 <_ZN11adc_manager10sample_adcEv+0xa6>
 801552c:	4b46      	ldr	r3, [pc, #280]	@ (8015648 <_ZN11adc_manager10sample_adcEv+0x1bc>)
 801552e:	2204      	movs	r2, #4
 8015530:	605a      	str	r2, [r3, #4]
		Bat_HalfFull=0;
 8015532:	2300      	movs	r3, #0
 8015534:	75bb      	strb	r3, [r7, #22]
 8015536:	e001      	b.n	801553c <_ZN11adc_manager10sample_adcEv+0xb0>
	} else {
		Bat_HalfFull=1;
 8015538:	2301      	movs	r3, #1
 801553a:	75bb      	strb	r3, [r7, #22]
	}
	uint16_t sum=0;
 801553c:	2300      	movs	r3, #0
 801553e:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = 0; i < 2 ; i++){
 8015540:	2300      	movs	r3, #0
 8015542:	74fb      	strb	r3, [r7, #19]
 8015544:	e021      	b.n	801558a <_ZN11adc_manager10sample_adcEv+0xfe>
		sum = 0;
 8015546:	2300      	movs	r3, #0
 8015548:	82bb      	strh	r3, [r7, #20]
		for(uint8_t j = 0; j < 16; j++)
 801554a:	2300      	movs	r3, #0
 801554c:	74bb      	strb	r3, [r7, #18]
 801554e:	e00f      	b.n	8015570 <_ZN11adc_manager10sample_adcEv+0xe4>
		{
			sum += adc1_samples[Cap_HalfFull][j][i];
 8015550:	7df9      	ldrb	r1, [r7, #23]
 8015552:	7cba      	ldrb	r2, [r7, #18]
 8015554:	7cfb      	ldrb	r3, [r7, #19]
 8015556:	483e      	ldr	r0, [pc, #248]	@ (8015650 <_ZN11adc_manager10sample_adcEv+0x1c4>)
 8015558:	0109      	lsls	r1, r1, #4
 801555a:	440a      	add	r2, r1
 801555c:	0052      	lsls	r2, r2, #1
 801555e:	4413      	add	r3, r2
 8015560:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8015564:	8abb      	ldrh	r3, [r7, #20]
 8015566:	4413      	add	r3, r2
 8015568:	82bb      	strh	r3, [r7, #20]
		for(uint8_t j = 0; j < 16; j++)
 801556a:	7cbb      	ldrb	r3, [r7, #18]
 801556c:	3301      	adds	r3, #1
 801556e:	74bb      	strb	r3, [r7, #18]
 8015570:	7cbb      	ldrb	r3, [r7, #18]
 8015572:	2b0f      	cmp	r3, #15
 8015574:	d9ec      	bls.n	8015550 <_ZN11adc_manager10sample_adcEv+0xc4>
		}
		ADC_sampled_data[i] = (sum>>4);
 8015576:	7cfa      	ldrb	r2, [r7, #19]
 8015578:	8abb      	ldrh	r3, [r7, #20]
 801557a:	091b      	lsrs	r3, r3, #4
 801557c:	b299      	uxth	r1, r3
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < 2 ; i++){
 8015584:	7cfb      	ldrb	r3, [r7, #19]
 8015586:	3301      	adds	r3, #1
 8015588:	74fb      	strb	r3, [r7, #19]
 801558a:	7cfb      	ldrb	r3, [r7, #19]
 801558c:	2b01      	cmp	r3, #1
 801558e:	d9da      	bls.n	8015546 <_ZN11adc_manager10sample_adcEv+0xba>
	}
	for(uint8_t i = 0; i < 3 ; i++){
 8015590:	2300      	movs	r3, #0
 8015592:	747b      	strb	r3, [r7, #17]
 8015594:	e027      	b.n	80155e6 <_ZN11adc_manager10sample_adcEv+0x15a>
		sum = 0;
 8015596:	2300      	movs	r3, #0
 8015598:	82bb      	strh	r3, [r7, #20]
		for(uint8_t j = 0; j < 16; j++)
 801559a:	2300      	movs	r3, #0
 801559c:	743b      	strb	r3, [r7, #16]
 801559e:	e014      	b.n	80155ca <_ZN11adc_manager10sample_adcEv+0x13e>
		{
			sum += adc2_samples[Bat_HalfFull][j][i];
 80155a0:	7db9      	ldrb	r1, [r7, #22]
 80155a2:	7c3b      	ldrb	r3, [r7, #16]
 80155a4:	7c78      	ldrb	r0, [r7, #17]
 80155a6:	4c2b      	ldr	r4, [pc, #172]	@ (8015654 <_ZN11adc_manager10sample_adcEv+0x1c8>)
 80155a8:	461a      	mov	r2, r3
 80155aa:	0052      	lsls	r2, r2, #1
 80155ac:	441a      	add	r2, r3
 80155ae:	460b      	mov	r3, r1
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	440b      	add	r3, r1
 80155b4:	011b      	lsls	r3, r3, #4
 80155b6:	4413      	add	r3, r2
 80155b8:	4403      	add	r3, r0
 80155ba:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 80155be:	8abb      	ldrh	r3, [r7, #20]
 80155c0:	4413      	add	r3, r2
 80155c2:	82bb      	strh	r3, [r7, #20]
		for(uint8_t j = 0; j < 16; j++)
 80155c4:	7c3b      	ldrb	r3, [r7, #16]
 80155c6:	3301      	adds	r3, #1
 80155c8:	743b      	strb	r3, [r7, #16]
 80155ca:	7c3b      	ldrb	r3, [r7, #16]
 80155cc:	2b0f      	cmp	r3, #15
 80155ce:	d9e7      	bls.n	80155a0 <_ZN11adc_manager10sample_adcEv+0x114>
		}
		ADC_sampled_data[i+2] = (sum>>4);
 80155d0:	7c7b      	ldrb	r3, [r7, #17]
 80155d2:	1c9a      	adds	r2, r3, #2
 80155d4:	8abb      	ldrh	r3, [r7, #20]
 80155d6:	091b      	lsrs	r3, r3, #4
 80155d8:	b299      	uxth	r1, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < 3 ; i++){
 80155e0:	7c7b      	ldrb	r3, [r7, #17]
 80155e2:	3301      	adds	r3, #1
 80155e4:	747b      	strb	r3, [r7, #17]
 80155e6:	7c7b      	ldrb	r3, [r7, #17]
 80155e8:	2b02      	cmp	r3, #2
 80155ea:	d9d4      	bls.n	8015596 <_ZN11adc_manager10sample_adcEv+0x10a>
	}
	for(uint8_t i = 0; i < 5; i++)
 80155ec:	2300      	movs	r3, #0
 80155ee:	73fb      	strb	r3, [r7, #15]
 80155f0:	e01b      	b.n	801562a <_ZN11adc_manager10sample_adcEv+0x19e>
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 80155f2:	7bfb      	ldrb	r3, [r7, #15]
 80155f4:	228c      	movs	r2, #140	@ 0x8c
 80155f6:	fb02 f303 	mul.w	r3, r2, r3
 80155fa:	3320      	adds	r3, #32
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	4413      	add	r3, r2
 8015600:	1d19      	adds	r1, r3, #4
 8015602:	7bfa      	ldrb	r2, [r7, #15]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801560a:	7bfc      	ldrb	r4, [r7, #15]
 801560c:	461a      	mov	r2, r3
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f000 f822 	bl	8015658 <_ZN11adc_manager14moving_averageER15mov_avrg_filtert>
 8015614:	4603      	mov	r3, r0
 8015616:	4619      	mov	r1, r3
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	1d23      	adds	r3, r4, #4
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	4413      	add	r3, r2
 8015620:	460a      	mov	r2, r1
 8015622:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = 0; i < 5; i++)
 8015624:	7bfb      	ldrb	r3, [r7, #15]
 8015626:	3301      	adds	r3, #1
 8015628:	73fb      	strb	r3, [r7, #15]
 801562a:	7bfb      	ldrb	r3, [r7, #15]
 801562c:	2b04      	cmp	r3, #4
 801562e:	d9e0      	bls.n	80155f2 <_ZN11adc_manager10sample_adcEv+0x166>
}
 8015630:	bf00      	nop
 8015632:	4618      	mov	r0, r3
 8015634:	371c      	adds	r7, #28
 8015636:	46bd      	mov	sp, r7
 8015638:	bd90      	pop	{r4, r7, pc}
 801563a:	bf00      	nop
 801563c:	20000218 	.word	0x20000218
 8015640:	40020094 	.word	0x40020094
 8015644:	40020400 	.word	0x40020400
 8015648:	40020000 	.word	0x40020000
 801564c:	20000284 	.word	0x20000284
 8015650:	2001097c 	.word	0x2001097c
 8015654:	200109fc 	.word	0x200109fc

08015658 <_ZN11adc_manager14moving_averageER15mov_avrg_filtert>:

 uint16_t adc_manager::moving_average(mov_avrg_filter& filter, uint16_t new_sample){
 8015658:	b480      	push	{r7}
 801565a:	b085      	sub	sp, #20
 801565c:	af00      	add	r7, sp, #0
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	4613      	mov	r3, r2
 8015664:	80fb      	strh	r3, [r7, #6]
	filter.sum -= filter.window_filter[filter.index];
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801566c:	68ba      	ldr	r2, [r7, #8]
 801566e:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 8015672:	4611      	mov	r1, r2
 8015674:	68ba      	ldr	r2, [r7, #8]
 8015676:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801567a:	1a9a      	subs	r2, r3, r2
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.sum += new_sample;
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8015688:	88fb      	ldrh	r3, [r7, #6]
 801568a:	441a      	add	r2, r3
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.window_filter[filter.index] = new_sample;
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015698:	4619      	mov	r1, r3
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	88fa      	ldrh	r2, [r7, #6]
 801569e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	filter.index += 1;
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80156a8:	3301      	adds	r3, #1
 80156aa:	b2da      	uxtb	r2, r3
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if(filter.index == filter.length){
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80156be:	429a      	cmp	r2, r3
 80156c0:	d107      	bne.n	80156d2 <_ZN11adc_manager14moving_averageER15mov_avrg_filtert+0x7a>
		filter.index = 0;
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	2200      	movs	r2, #0
 80156c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		filter.full = true;
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2201      	movs	r2, #1
 80156ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	}
	if(filter.full)
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d009      	beq.n	80156f0 <_ZN11adc_manager14moving_averageER15mov_avrg_filtert+0x98>
		return (uint16_t)(filter.sum/filter.length);
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156e2:	68ba      	ldr	r2, [r7, #8]
 80156e4:	f892 2080 	ldrb.w	r2, [r2, #128]	@ 0x80
 80156e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	e008      	b.n	8015702 <_ZN11adc_manager14moving_averageER15mov_avrg_filtert+0xaa>
	else
		return (uint16_t)(filter.sum/filter.index);
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156f6:	68ba      	ldr	r2, [r7, #8]
 80156f8:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 80156fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015700:	b29b      	uxth	r3, r3

}
 8015702:	4618      	mov	r0, r3
 8015704:	3714      	adds	r7, #20
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr
	...

08015710 <_ZN11adc_manager17set_gains_offsetsEv>:

void adc_manager::set_gains_offsets(){
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
	adc_gains[adc_names::V_cap] = 0.0088623046875f;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	4a16      	ldr	r2, [pc, #88]	@ (8015774 <_ZN11adc_manager17set_gains_offsetsEv+0x64>)
 801571c:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	adc_offsets[adc_names::V_cap] = 0.4914794921875f;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	4a15      	ldr	r2, [pc, #84]	@ (8015778 <_ZN11adc_manager17set_gains_offsetsEv+0x68>)
 8015724:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334

	adc_gains[adc_names::I_cap] = -(0.0040293f);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4a14      	ldr	r2, [pc, #80]	@ (801577c <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 801572c:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	adc_offsets[adc_names::I_cap] = -(-8.25f + 0.31227863582f - 0.0402927399f);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	4a13      	ldr	r2, [pc, #76]	@ (8015780 <_ZN11adc_manager17set_gains_offsetsEv+0x70>)
 8015734:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330

	adc_gains[adc_names::V_bat] = 0.0088623046875f;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	4a0e      	ldr	r2, [pc, #56]	@ (8015774 <_ZN11adc_manager17set_gains_offsetsEv+0x64>)
 801573c:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	adc_offsets[adc_names::V_bat] = 0.5060302734375f;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	4a10      	ldr	r2, [pc, #64]	@ (8015784 <_ZN11adc_manager17set_gains_offsetsEv+0x74>)
 8015744:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338

	adc_gains[adc_names::I_chassis] = -(0.0040293f);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	4a0c      	ldr	r2, [pc, #48]	@ (801577c <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 801574c:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328
	adc_offsets[adc_names::I_chassis] = -(-8.25f + 0.4089821269f + 0.0161170959f -0.193406105f);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	4a0d      	ldr	r2, [pc, #52]	@ (8015788 <_ZN11adc_manager17set_gains_offsetsEv+0x78>)
 8015754:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c

	adc_gains[adc_names::I_bat] = -(0.0040293f);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	4a08      	ldr	r2, [pc, #32]	@ (801577c <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 801575c:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
	adc_offsets[adc_names::I_bat] = -(-8.25f + 0.2598981019f + 0.012087822f - 0.0402927399f) ;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	4a09      	ldr	r2, [pc, #36]	@ (8015788 <_ZN11adc_manager17set_gains_offsetsEv+0x78>)
 8015764:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
}
 8015768:	bf00      	nop
 801576a:	370c      	adds	r7, #12
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr
 8015774:	3c113333 	.word	0x3c113333
 8015778:	3efba333 	.word	0x3efba333
 801577c:	bb840838 	.word	0xbb840838
 8015780:	40ff4be4 	.word	0x40ff4be4
 8015784:	3f018b33 	.word	0x3f018b33
 8015788:	41004afc 	.word	0x41004afc

0801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>:
	float NTC_Res = (3.3f - V_temp) / (V_temp/TEMP_NTC_RES);
	return ((1/((1.0f/TEMP_PARAM_B) * ((float)log((double)(NTC_Res/TEMP_FIX_RES))) + 1.0f/TEMP_AMBIANT)) - TEMP_CELSIUS_CONST);

}

float adc_manager::get_compensated_adc(uint16_t val, adc_names name){
 801578c:	b480      	push	{r7}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	460b      	mov	r3, r1
 8015796:	807b      	strh	r3, [r7, #2]
 8015798:	4613      	mov	r3, r2
 801579a:	707b      	strb	r3, [r7, #1]
	return (((float)(val)) * adc_gains[name]) +  adc_offsets[name];
 801579c:	887b      	ldrh	r3, [r7, #2]
 801579e:	ee07 3a90 	vmov	s15, r3
 80157a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80157a6:	787b      	ldrb	r3, [r7, #1]
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	33c6      	adds	r3, #198	@ 0xc6
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	4413      	add	r3, r2
 80157b0:	3304      	adds	r3, #4
 80157b2:	edd3 7a00 	vldr	s15, [r3]
 80157b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157ba:	787b      	ldrb	r3, [r7, #1]
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	33cc      	adds	r3, #204	@ 0xcc
 80157c0:	009b      	lsls	r3, r3, #2
 80157c2:	4413      	add	r3, r2
 80157c4:	edd3 7a00 	vldr	s15, [r3]
 80157c8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80157cc:	eeb0 0a67 	vmov.f32	s0, s15
 80157d0:	370c      	adds	r7, #12
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr

080157da <_ZN24supercap_control_manager9init_loopEv>:
#include "cmsis_os.h"

uint8_t max_chassis_power = 60;


HAL_StatusTypeDef supercap_control_manager::init_loop(){
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
	setup_pid_controllers();
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 f826 	bl	8015834 <_ZN24supercap_control_manager21setup_pid_controllersEv>
	return HAL_OK;
 80157e8:	2300      	movs	r3, #0
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3708      	adds	r7, #8
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
	...

080157f4 <_ZN24supercap_control_manager17update_pid_maxpowEv>:

void supercap_control_manager::update_pid_maxpow(){
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
	pid[0].IntegMax = max_chassis_power + 10;
 80157fc:	4b0c      	ldr	r3, [pc, #48]	@ (8015830 <_ZN24supercap_control_manager17update_pid_maxpowEv+0x3c>)
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	330a      	adds	r3, #10
 8015802:	ee07 3a90 	vmov	s15, r3
 8015806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	edc3 7ae4 	vstr	s15, [r3, #912]	@ 0x390
	pid[0].OutputMax = max_chassis_power + 10;
 8015810:	4b07      	ldr	r3, [pc, #28]	@ (8015830 <_ZN24supercap_control_manager17update_pid_maxpowEv+0x3c>)
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	330a      	adds	r3, #10
 8015816:	ee07 3a90 	vmov	s15, r3
 801581a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	edc3 7ae6 	vstr	s15, [r3, #920]	@ 0x398
}
 8015824:	bf00      	nop
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr
 8015830:	20000030 	.word	0x20000030

08015834 <_ZN24supercap_control_manager21setup_pid_controllersEv>:

void supercap_control_manager::setup_pid_controllers(){
 8015834:	b580      	push	{r7, lr}
 8015836:	ed2d 8b02 	vpush	{d8}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	4a8f      	ldr	r2, [pc, #572]	@ (8015a80 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x24c>)
 8015844:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	4a8e      	ldr	r2, [pc, #568]	@ (8015a84 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x250>)
 801584c:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f04f 0200 	mov.w	r2, #0
 8015856:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

	pid[0].IntegMax = max_chassis_power + 10;
 801585a:	4b8b      	ldr	r3, [pc, #556]	@ (8015a88 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x254>)
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	330a      	adds	r3, #10
 8015860:	ee07 3a90 	vmov	s15, r3
 8015864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	edc3 7ae4 	vstr	s15, [r3, #912]	@ 0x390
	pid[0].OutputMax = max_chassis_power + 10;
 801586e:	4b86      	ldr	r3, [pc, #536]	@ (8015a88 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x254>)
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	330a      	adds	r3, #10
 8015874:	ee07 3a90 	vmov	s15, r3
 8015878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	edc3 7ae6 	vstr	s15, [r3, #920]	@ 0x398

	pid[0].IntegMin = P_BATTERY_MIN_OUTPUT;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	4a81      	ldr	r2, [pc, #516]	@ (8015a8c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x258>)
 8015886:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
	pid[0].OutputMin = P_BATTERY_MIN_OUTPUT;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	4a7f      	ldr	r2, [pc, #508]	@ (8015a8c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x258>)
 801588e:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c

	pid[1].ArmPID_Instance.Kp = P_CHASSIS_KP;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f04f 0200 	mov.w	r2, #0
 8015898:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
	pid[1].ArmPID_Instance.Ki = P_CHASSIS_KI;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f04f 0200 	mov.w	r2, #0
 80158a2:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
	pid[1].ArmPID_Instance.Kd = P_CHASSIS_KD;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f04f 0200 	mov.w	r2, #0
 80158ac:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0

	pid[1].IntegMax =  0.5f;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80158b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
	pid[1].IntegMin = -  0.5f;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80158c0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
	pid[1].OutputMax =  0.5f;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80158ca:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
	pid[1].OutputMin = - 0.5f;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80158d4:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	4a6d      	ldr	r2, [pc, #436]	@ (8015a90 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x25c>)
 80158dc:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	4a6c      	ldr	r2, [pc, #432]	@ (8015a94 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x260>)
 80158e4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	pid[2].ArmPID_Instance.Kd = I_SUPERCAP_KD;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f04f 0200 	mov.w	r2, #0
 80158ee:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4

	pid[2].IntegMax = 24.0f/19.5f;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	4a68      	ldr	r2, [pc, #416]	@ (8015a98 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x264>)
 80158f6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	pid[2].IntegMin = 0.127f;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	4a67      	ldr	r2, [pc, #412]	@ (8015a9c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x268>)
 80158fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	pid[2].OutputMax = 24.0f/19.5f;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015908:	4a63      	ldr	r2, [pc, #396]	@ (8015a98 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x264>)
 801590a:	601a      	str	r2, [r3, #0]
	pid[2].OutputMin = 0.127f;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8015912:	4a62      	ldr	r2, [pc, #392]	@ (8015a9c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x268>)
 8015914:	601a      	str	r2, [r3, #0]

	pid[3].ArmPID_Instance.Kp = V_SUPERCAPMAX_KP;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 801591c:	4a60      	ldr	r2, [pc, #384]	@ (8015aa0 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x26c>)
 801591e:	601a      	str	r2, [r3, #0]
	pid[3].ArmPID_Instance.Ki = V_SUPERCAPMAX_KI;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8015926:	4a5f      	ldr	r2, [pc, #380]	@ (8015aa4 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x270>)
 8015928:	601a      	str	r2, [r3, #0]
	pid[3].ArmPID_Instance.Kd = V_SUPERCAPMAX_KD;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8015930:	f04f 0200 	mov.w	r2, #0
 8015934:	601a      	str	r2, [r3, #0]

	pid[3].IntegMax = 1.5f;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 801593c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8015940:	601a      	str	r2, [r3, #0]
	pid[3].IntegMin = 1.005f;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f503 6386 	add.w	r3, r3, #1072	@ 0x430
 8015948:	4a57      	ldr	r2, [pc, #348]	@ (8015aa8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x274>)
 801594a:	601a      	str	r2, [r3, #0]
	pid[3].OutputMax = 1.5f;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f203 4334 	addw	r3, r3, #1076	@ 0x434
 8015952:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8015956:	601a      	str	r2, [r3, #0]
	pid[3].OutputMin = 1.005f;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 801595e:	4a52      	ldr	r2, [pc, #328]	@ (8015aa8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x274>)
 8015960:	601a      	str	r2, [r3, #0]

	pid[4].ArmPID_Instance.Kp = V_SUPERCAPMIN_KP;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f203 4354 	addw	r3, r3, #1108	@ 0x454
 8015968:	4a4d      	ldr	r2, [pc, #308]	@ (8015aa0 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x26c>)
 801596a:	601a      	str	r2, [r3, #0]
	pid[4].ArmPID_Instance.Ki = V_SUPERCAPMIN_KI;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 8015972:	4a4c      	ldr	r2, [pc, #304]	@ (8015aa4 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x270>)
 8015974:	601a      	str	r2, [r3, #0]
	pid[4].ArmPID_Instance.Kd = V_SUPERCAPMIN_KD;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f203 435c 	addw	r3, r3, #1116	@ 0x45c
 801597c:	f04f 0200 	mov.w	r2, #0
 8015980:	601a      	str	r2, [r3, #0]

	pid[4].IntegMax = 0.179f;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 8015988:	4a48      	ldr	r2, [pc, #288]	@ (8015aac <_ZN24supercap_control_manager21setup_pid_controllersEv+0x278>)
 801598a:	601a      	str	r2, [r3, #0]
	pid[4].IntegMin = 0.129f;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8015992:	4a47      	ldr	r2, [pc, #284]	@ (8015ab0 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x27c>)
 8015994:	601a      	str	r2, [r3, #0]
	pid[4].OutputMax = 0.179f;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 801599c:	4a43      	ldr	r2, [pc, #268]	@ (8015aac <_ZN24supercap_control_manager21setup_pid_controllersEv+0x278>)
 801599e:	601a      	str	r2, [r3, #0]
	pid[4].OutputMin = 0.129f;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 80159a6:	4a42      	ldr	r2, [pc, #264]	@ (8015ab0 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x27c>)
 80159a8:	601a      	str	r2, [r3, #0]

	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80159b0:	2101      	movs	r1, #1
 80159b2:	4618      	mov	r0, r3
 80159b4:	f000 fe74 	bl	80166a0 <arm_pid_init_f32>
	pid[0].ArmPID_Instance.state[2] = pid[0].IntegMax;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f8d3 2390 	ldr.w	r2, [r3, #912]	@ 0x390
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

	arm_pid_init_f32(&(pid[1].ArmPID_Instance), 1);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 80159ca:	2101      	movs	r1, #1
 80159cc:	4618      	mov	r0, r3
 80159ce:	f000 fe67 	bl	80166a0 <arm_pid_init_f32>

	arm_pid_init_f32(&(pid[2].ArmPID_Instance), 1);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 80159d8:	2101      	movs	r1, #1
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 fe60 	bl	80166a0 <arm_pid_init_f32>

	osDelay(100);
 80159e0:	2064      	movs	r0, #100	@ 0x64
 80159e2:	f7f6 f8e3 	bl	800bbac <osDelay>

	float initDutyRatio = this->get_compensated_adc(this->ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	899b      	ldrh	r3, [r3, #12]
 80159ec:	2201      	movs	r2, #1
 80159ee:	4619      	mov	r1, r3
 80159f0:	f7ff fecc 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 80159f4:	eeb0 8a40 	vmov.f32	s16, s0
				this->get_compensated_adc(this->ADC_filtered_data[adc_names::V_bat], V_bat);
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	89db      	ldrh	r3, [r3, #14]
 80159fe:	2202      	movs	r2, #2
 8015a00:	4619      	mov	r1, r3
 8015a02:	f7ff fec3 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8015a06:	eeb0 7a40 	vmov.f32	s14, s0
 8015a0a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015a0e:	edc7 7a03 	vstr	s15, [r7, #12]

	pid[2].ArmPID_Instance.state[2] = initDutyRatio;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	68fa      	ldr	r2, [r7, #12]
 8015a16:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8

	arm_pid_init_f32(&(pid[3].ArmPID_Instance), 1);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8015a20:	2101      	movs	r1, #1
 8015a22:	4618      	mov	r0, r3
 8015a24:	f000 fe3c 	bl	80166a0 <arm_pid_init_f32>
	pid[3].ArmPID_Instance.state[2] = pid[3].IntegMax;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8015a2e:	681a      	ldr	r2, [r3, #0]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8015a36:	601a      	str	r2, [r3, #0]

	arm_pid_init_f32(&(pid[4].ArmPID_Instance), 1);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 8015a3e:	2101      	movs	r1, #1
 8015a40:	4618      	mov	r0, r3
 8015a42:	f000 fe2d 	bl	80166a0 <arm_pid_init_f32>
	pid[4].ArmPID_Instance.state[2] = pid[4].IntegMin;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 8015a54:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = start_gates_pwm(initDutyRatio);
 8015a56:	ed97 0a03 	vldr	s0, [r7, #12]
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f000 f91c 	bl	8015c98 <_ZN24supercap_control_manager15start_gates_pwmEf>
 8015a60:	4603      	mov	r3, r0
 8015a62:	72fb      	strb	r3, [r7, #11]
	is_init = true;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2201      	movs	r2, #1
 8015a68:	f883 2365 	strb.w	r2, [r3, #869]	@ 0x365

//
	in_loop = true;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2201      	movs	r2, #1
 8015a70:	f883 2478 	strb.w	r2, [r3, #1144]	@ 0x478
}
 8015a74:	bf00      	nop
 8015a76:	3710      	adds	r7, #16
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	ecbd 8b02 	vpop	{d8}
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	3d4ccccd 	.word	0x3d4ccccd
 8015a84:	3c03126f 	.word	0x3c03126f
 8015a88:	20000030 	.word	0x20000030
 8015a8c:	c34d0000 	.word	0xc34d0000
 8015a90:	3a378034 	.word	0x3a378034
 8015a94:	3a22877f 	.word	0x3a22877f
 8015a98:	3f9d89d9 	.word	0x3f9d89d9
 8015a9c:	3e020c4a 	.word	0x3e020c4a
 8015aa0:	3a83126f 	.word	0x3a83126f
 8015aa4:	3b23d70a 	.word	0x3b23d70a
 8015aa8:	3f80a3d7 	.word	0x3f80a3d7
 8015aac:	3e374bc7 	.word	0x3e374bc7
 8015ab0:	3e041893 	.word	0x3e041893

08015ab4 <_ZN24supercap_control_manager11loop_updateEfffff>:

 void supercap_control_manager::loop_update(float Icap_, float Ibat_, float Vcap_, float Ichassis_, float Vbat_){
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b08e      	sub	sp, #56	@ 0x38
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6178      	str	r0, [r7, #20]
 8015abc:	ed87 0a04 	vstr	s0, [r7, #16]
 8015ac0:	edc7 0a03 	vstr	s1, [r7, #12]
 8015ac4:	ed87 1a02 	vstr	s2, [r7, #8]
 8015ac8:	edc7 1a01 	vstr	s3, [r7, #4]
 8015acc:	ed87 2a00 	vstr	s4, [r7]
//	float ref_pmm_power = get_pid()
	if (in_loop){
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	f893 3478 	ldrb.w	r3, [r3, #1144]	@ 0x478
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	f000 80bd 	beq.w	8015c56 <_ZN24supercap_control_manager11loop_updateEfffff+0x1a2>
		update_pid_maxpow();
 8015adc:	6978      	ldr	r0, [r7, #20]
 8015ade:	f7ff fe89 	bl	80157f4 <_ZN24supercap_control_manager17update_pid_maxpowEv>
		float ref_Pchassis = get_PID(&pid[pid_names::P_bat], max_chassis_power, Vbat_*Ibat_, 0);
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015ae8:	4a5d      	ldr	r2, [pc, #372]	@ (8015c60 <_ZN24supercap_control_manager11loop_updateEfffff+0x1ac>)
 8015aea:	7812      	ldrb	r2, [r2, #0]
 8015aec:	ee07 2a90 	vmov	s15, r2
 8015af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015af4:	ed97 7a00 	vldr	s14, [r7]
 8015af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8015afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b00:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8015c64 <_ZN24supercap_control_manager11loop_updateEfffff+0x1b0>
 8015b04:	eef0 0a67 	vmov.f32	s1, s15
 8015b08:	eeb0 0a66 	vmov.f32	s0, s13
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	6978      	ldr	r0, [r7, #20]
 8015b10:	f000 f988 	bl	8015e24 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff>
 8015b14:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

		float temp = ref_Pchassis/Vcap_;
 8015b18:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8015b1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8015b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b24:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		if(temp > MAX_CAP_CURRENT)
 8015b28:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015b2c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b38:	dd02      	ble.n	8015b40 <_ZN24supercap_control_manager11loop_updateEfffff+0x8c>
			temp = MAX_CAP_CURRENT;
 8015b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8015c68 <_ZN24supercap_control_manager11loop_updateEfffff+0x1b4>)
 8015b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b3e:	e00a      	b.n	8015b56 <_ZN24supercap_control_manager11loop_updateEfffff+0xa2>
		else if (temp < -MAX_CAP_CURRENT)
 8015b40:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015b44:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8015b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b50:	d501      	bpl.n	8015b56 <_ZN24supercap_control_manager11loop_updateEfffff+0xa2>
			temp = -MAX_CAP_CURRENT;
 8015b52:	4b46      	ldr	r3, [pc, #280]	@ (8015c6c <_ZN24supercap_control_manager11loop_updateEfffff+0x1b8>)
 8015b54:	637b      	str	r3, [r7, #52]	@ 0x34

		float model = ref_Pchassis / (Vcap_ + ESR_VALUE * (temp-I_supercap_last));
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8015b5c:	edd3 7a00 	vldr	s15, [r3]
 8015b60:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8015b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b68:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8015c70 <_ZN24supercap_control_manager11loop_updateEfffff+0x1bc>
 8015b6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8015b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b78:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8015b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b80:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		float ref_icap = get_PID_FF(&pid[pid_names::P_chassis], ref_Pchassis, Vbat_*Ichassis_, model);
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8015b8a:	ed97 7a00 	vldr	s14, [r7]
 8015b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8015b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b96:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8015b9a:	eef0 0a67 	vmov.f32	s1, s15
 8015b9e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6978      	ldr	r0, [r7, #20]
 8015ba6:	f000 f9cb 	bl	8015f40 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff>
 8015baa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

		I_supercap_last = ref_icap;
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8015bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bb6:	601a      	str	r2, [r3, #0]

		float ref_duty_ratio = get_PID(&pid[pid_names::I_capa], ref_icap, Icap_, 0);
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8015bbe:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 8015c64 <_ZN24supercap_control_manager11loop_updateEfffff+0x1b0>
 8015bc2:	edd7 0a04 	vldr	s1, [r7, #16]
 8015bc6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8015bca:	4619      	mov	r1, r3
 8015bcc:	6978      	ldr	r0, [r7, #20]
 8015bce:	f000 f929 	bl	8015e24 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff>
 8015bd2:	ed87 0a08 	vstr	s0, [r7, #32]
		float Vcapmax_ratio = get_PID(&pid[pid_names::V_cap_max], 21.5, Vcap_, 0);
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8015bdc:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8015c64 <_ZN24supercap_control_manager11loop_updateEfffff+0x1b0>
 8015be0:	edd7 0a02 	vldr	s1, [r7, #8]
 8015be4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8015c74 <_ZN24supercap_control_manager11loop_updateEfffff+0x1c0>
 8015be8:	4619      	mov	r1, r3
 8015bea:	6978      	ldr	r0, [r7, #20]
 8015bec:	f000 f91a 	bl	8015e24 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff>
 8015bf0:	ed87 0a07 	vstr	s0, [r7, #28]
		float Vcapmin_ratio = get_PID(&pid[pid_names::V_cap_min], 3.0, Vcap_, 0);
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	f203 433c 	addw	r3, r3, #1084	@ 0x43c
 8015bfa:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8015c64 <_ZN24supercap_control_manager11loop_updateEfffff+0x1b0>
 8015bfe:	edd7 0a02 	vldr	s1, [r7, #8]
 8015c02:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8015c06:	4619      	mov	r1, r3
 8015c08:	6978      	ldr	r0, [r7, #20]
 8015c0a:	f000 f90b 	bl	8015e24 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff>
 8015c0e:	ed87 0a06 	vstr	s0, [r7, #24]

		float out_duty_ratio = 0.0;
 8015c12:	f04f 0300 	mov.w	r3, #0
 8015c16:	633b      	str	r3, [r7, #48]	@ 0x30
		if(ref_duty_ratio > Vcapmax_ratio)
 8015c18:	ed97 7a08 	vldr	s14, [r7, #32]
 8015c1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c28:	dd02      	ble.n	8015c30 <_ZN24supercap_control_manager11loop_updateEfffff+0x17c>
			out_duty_ratio = Vcapmax_ratio;
 8015c2a:	69fb      	ldr	r3, [r7, #28]
 8015c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c2e:	e00d      	b.n	8015c4c <_ZN24supercap_control_manager11loop_updateEfffff+0x198>
		else if (ref_duty_ratio < Vcapmin_ratio)
 8015c30:	ed97 7a08 	vldr	s14, [r7, #32]
 8015c34:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c40:	d502      	bpl.n	8015c48 <_ZN24supercap_control_manager11loop_updateEfffff+0x194>
			out_duty_ratio = Vcapmin_ratio;
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c46:	e001      	b.n	8015c4c <_ZN24supercap_control_manager11loop_updateEfffff+0x198>
		else out_duty_ratio = ref_duty_ratio;
 8015c48:	6a3b      	ldr	r3, [r7, #32]
 8015c4a:	633b      	str	r3, [r7, #48]	@ 0x30

		update_dutyCycle(out_duty_ratio);
 8015c4c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8015c50:	6978      	ldr	r0, [r7, #20]
 8015c52:	f000 f861 	bl	8015d18 <_ZN24supercap_control_manager16update_dutyCycleEf>
	}
}
 8015c56:	bf00      	nop
 8015c58:	3738      	adds	r7, #56	@ 0x38
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	20000030 	.word	0x20000030
 8015c64:	00000000 	.word	0x00000000
 8015c68:	41200000 	.word	0x41200000
 8015c6c:	c1200000 	.word	0xc1200000
 8015c70:	3df5c28f 	.word	0x3df5c28f
 8015c74:	41ac0000 	.word	0x41ac0000

08015c78 <_ZN24supercap_control_manager9stop_loopEv>:

 HAL_StatusTypeDef supercap_control_manager::stop_loop(){
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b082      	sub	sp, #8
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]

	in_loop = false;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	f883 2478 	strb.w	r2, [r3, #1144]	@ 0x478
	stop_gates_pwm();
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f000 f81d 	bl	8015cc8 <_ZN24supercap_control_manager14stop_gates_pwmEv>
	return HAL_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3708      	adds	r7, #8
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <_ZN24supercap_control_manager15start_gates_pwmEf>:

 HAL_StatusTypeDef supercap_control_manager::start_gates_pwm(float init_duty_cycle){
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	ed87 0a00 	vstr	s0, [r7]
	update_dutyCycle(init_duty_cycle);
 8015ca4:	ed97 0a00 	vldr	s0, [r7]
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f000 f835 	bl	8015d18 <_ZN24supercap_control_manager16update_dutyCycleEf>
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 8015cae:	f240 3103 	movw	r1, #771	@ 0x303
 8015cb2:	4804      	ldr	r0, [pc, #16]	@ (8015cc4 <_ZN24supercap_control_manager15start_gates_pwmEf+0x2c>)
 8015cb4:	f7f1 ff4f 	bl	8007b56 <HAL_HRTIM_WaveformOutputStart>
 8015cb8:	4603      	mov	r3, r0
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3708      	adds	r7, #8
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	20000514 	.word	0x20000514

08015cc8 <_ZN24supercap_control_manager14stop_gates_pwmEv>:

 HAL_StatusTypeDef supercap_control_manager::stop_gates_pwm(){
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]

	return HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 8015cd0:	f240 3103 	movw	r1, #771	@ 0x303
 8015cd4:	4803      	ldr	r0, [pc, #12]	@ (8015ce4 <_ZN24supercap_control_manager14stop_gates_pwmEv+0x1c>)
 8015cd6:	f7f1 ff6b 	bl	8007bb0 <HAL_HRTIM_WaveformOutputStop>
 8015cda:	4603      	mov	r3, r0
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	20000514 	.word	0x20000514

08015ce8 <_ZN24supercap_control_manager11silent_modeEv>:

 void supercap_control_manager::silent_mode(){
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
	 if(current_mode != silent){
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f893 334e 	ldrb.w	r3, [r3, #846]	@ 0x34e
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d00a      	beq.n	8015d10 <_ZN24supercap_control_manager11silent_modeEv+0x28>
		 stop_loop();
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f7ff ffbc 	bl	8015c78 <_ZN24supercap_control_manager9stop_loopEv>
		 current_mode = silent;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f883 234e 	strb.w	r2, [r3, #846]	@ 0x34e
		 in_loop = false;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	f883 2478 	strb.w	r2, [r3, #1144]	@ 0x478
	 }
 }
 8015d10:	bf00      	nop
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <_ZN24supercap_control_manager16update_dutyCycleEf>:

 void supercap_control_manager::update_dutyCycle(float dutyCycle){
 8015d18:	b480      	push	{r7}
 8015d1a:	b087      	sub	sp, #28
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	ed87 0a00 	vstr	s0, [r7]
	float D_chassis,D_cap;
	if(dutyCycle>0.0f && dutyCycle<=1.0f)
 8015d24:	edd7 7a00 	vldr	s15, [r7]
 8015d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d30:	dd13      	ble.n	8015d5a <_ZN24supercap_control_manager16update_dutyCycleEf+0x42>
 8015d32:	edd7 7a00 	vldr	s15, [r7]
 8015d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d42:	d80a      	bhi.n	8015d5a <_ZN24supercap_control_manager16update_dutyCycleEf+0x42>
	{
		D_cap = 0.9f;
 8015d44:	4b33      	ldr	r3, [pc, #204]	@ (8015e14 <_ZN24supercap_control_manager16update_dutyCycleEf+0xfc>)
 8015d46:	613b      	str	r3, [r7, #16]
		D_chassis  = dutyCycle * 0.9f;
 8015d48:	edd7 7a00 	vldr	s15, [r7]
 8015d4c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015e18 <_ZN24supercap_control_manager16update_dutyCycleEf+0x100>
 8015d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d54:	edc7 7a05 	vstr	s15, [r7, #20]
 8015d58:	e012      	b.n	8015d80 <_ZN24supercap_control_manager16update_dutyCycleEf+0x68>
	}
	else if(dutyCycle > 1.0f)
 8015d5a:	edd7 7a00 	vldr	s15, [r7]
 8015d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6a:	dd09      	ble.n	8015d80 <_ZN24supercap_control_manager16update_dutyCycleEf+0x68>
	{
		D_chassis  = 0.9f;
 8015d6c:	4b29      	ldr	r3, [pc, #164]	@ (8015e14 <_ZN24supercap_control_manager16update_dutyCycleEf+0xfc>)
 8015d6e:	617b      	str	r3, [r7, #20]
		D_cap = 0.9f / dutyCycle;
 8015d70:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8015e18 <_ZN24supercap_control_manager16update_dutyCycleEf+0x100>
 8015d74:	ed97 7a00 	vldr	s14, [r7]
 8015d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015d7c:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	uint16_t TA_CmpOffset = (uint16_t)(34000*D_cap);
 8015d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8015d84:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8015e1c <_ZN24supercap_control_manager16update_dutyCycleEf+0x104>
 8015d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015d90:	ee17 3a90 	vmov	r3, s15
 8015d94:	81fb      	strh	r3, [r7, #14]
	uint16_t TA_CmpOffsetHalf = (uint16_t)(TA_CmpOffset / 2);
 8015d96:	89fb      	ldrh	r3, [r7, #14]
 8015d98:	085b      	lsrs	r3, r3, #1
 8015d9a:	81bb      	strh	r3, [r7, #12]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, 17000 - TA_CmpOffsetHalf - (TA_CmpOffset%2));
 8015d9c:	89bb      	ldrh	r3, [r7, #12]
 8015d9e:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 8015da2:	3368      	adds	r3, #104	@ 0x68
 8015da4:	89fa      	ldrh	r2, [r7, #14]
 8015da6:	f002 0201 	and.w	r2, r2, #1
 8015daa:	1a9a      	subs	r2, r3, r2
 8015dac:	4b1c      	ldr	r3, [pc, #112]	@ (8015e20 <_ZN24supercap_control_manager16update_dutyCycleEf+0x108>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, 17000 + TA_CmpOffsetHalf);
 8015db4:	89bb      	ldrh	r3, [r7, #12]
 8015db6:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 8015dba:	3368      	adds	r3, #104	@ 0x68
 8015dbc:	4a18      	ldr	r2, [pc, #96]	@ (8015e20 <_ZN24supercap_control_manager16update_dutyCycleEf+0x108>)
 8015dbe:	6812      	ldr	r2, [r2, #0]
 8015dc0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

	uint16_t TE_CmpOffset = (uint16_t)(34000*D_chassis);
 8015dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8015dc8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8015e1c <_ZN24supercap_control_manager16update_dutyCycleEf+0x104>
 8015dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015dd4:	ee17 3a90 	vmov	r3, s15
 8015dd8:	817b      	strh	r3, [r7, #10]
	uint16_t TE_CmpOffsetHalf = (uint16_t)(TE_CmpOffset / 2);
 8015dda:	897b      	ldrh	r3, [r7, #10]
 8015ddc:	085b      	lsrs	r3, r3, #1
 8015dde:	813b      	strh	r3, [r7, #8]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, 17000 - TE_CmpOffsetHalf - (TE_CmpOffset%2));
 8015de0:	893b      	ldrh	r3, [r7, #8]
 8015de2:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 8015de6:	3368      	adds	r3, #104	@ 0x68
 8015de8:	897a      	ldrh	r2, [r7, #10]
 8015dea:	f002 0201 	and.w	r2, r2, #1
 8015dee:	1a9a      	subs	r2, r3, r2
 8015df0:	4b0b      	ldr	r3, [pc, #44]	@ (8015e20 <_ZN24supercap_control_manager16update_dutyCycleEf+0x108>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, 17000 + TE_CmpOffsetHalf);
 8015df8:	893b      	ldrh	r3, [r7, #8]
 8015dfa:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 8015dfe:	3368      	adds	r3, #104	@ 0x68
 8015e00:	4a07      	ldr	r2, [pc, #28]	@ (8015e20 <_ZN24supercap_control_manager16update_dutyCycleEf+0x108>)
 8015e02:	6812      	ldr	r2, [r2, #0]
 8015e04:	f8c2 32a4 	str.w	r3, [r2, #676]	@ 0x2a4

}
 8015e08:	bf00      	nop
 8015e0a:	371c      	adds	r7, #28
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr
 8015e14:	3f666666 	.word	0x3f666666
 8015e18:	3f666666 	.word	0x3f666666
 8015e1c:	4704d000 	.word	0x4704d000
 8015e20:	20000514 	.word	0x20000514

08015e24 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff>:

 float supercap_control_manager::get_PID(LoopCtrl_PID* pid_struct, float ref, float feedback, float ff_model){
 8015e24:	b480      	push	{r7}
 8015e26:	b08d      	sub	sp, #52	@ 0x34
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6178      	str	r0, [r7, #20]
 8015e2c:	6139      	str	r1, [r7, #16]
 8015e2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8015e32:	edc7 0a02 	vstr	s1, [r7, #8]
 8015e36:	ed87 1a01 	vstr	s2, [r7, #4]
	float error = ref - feedback;
 8015e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8015e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8015e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e46:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8015e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e50:	623b      	str	r3, [r7, #32]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8015e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e54:	ed93 7a00 	vldr	s14, [r3]
 8015e58:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8015e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e62:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8015e70:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8015e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e76:	edd3 6a02 	vldr	s13, [r3, #8]
 8015e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8015e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e8a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8015e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e92:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Update state */
    S->state[1] = S->state[0];
 8015e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e98:	68da      	ldr	r2, [r3, #12]
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8015e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea0:	6a3a      	ldr	r2, [r7, #32]
 8015ea2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea6:	69fa      	ldr	r2, [r7, #28]
 8015ea8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8015eaa:	edd7 7a07 	vldr	s15, [r7, #28]
 8015eae:	ed97 7a01 	vldr	s14, [r7, #4]
 8015eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015eb6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	ed93 7a05 	vldr	s14, [r3, #20]
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8015ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ece:	dd04      	ble.n	8015eda <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0xb6>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	615a      	str	r2, [r3, #20]
 8015ed8:	e00e      	b.n	8015ef8 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0xd4>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	ed93 7a05 	vldr	s14, [r3, #20]
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8015ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	d503      	bpl.n	8015ef8 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0xd4>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	615a      	str	r2, [r3, #20]

	if(output > pid_struct->OutputMax)
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8015efe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0a:	dd02      	ble.n	8015f12 <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0xee>
		return pid_struct->OutputMax;
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f10:	e00d      	b.n	8015f2e <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0x10a>
	else if(output < pid_struct->OutputMin)
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8015f18:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	d502      	bpl.n	8015f2c <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0x108>
		return pid_struct->OutputMin;
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f2a:	e000      	b.n	8015f2e <_ZN24supercap_control_manager7get_PIDEP12LoopCtrl_PIDfff+0x10a>
	else
		return output;
 8015f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8015f2e:	ee07 3a90 	vmov	s15, r3
 8015f32:	eeb0 0a67 	vmov.f32	s0, s15
 8015f36:	3734      	adds	r7, #52	@ 0x34
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff>:

 float supercap_control_manager::get_PID_FF(LoopCtrl_PID* pid_struct, float ref, float feedback, float ff_model){
 8015f40:	b480      	push	{r7}
 8015f42:	b08d      	sub	sp, #52	@ 0x34
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6178      	str	r0, [r7, #20]
 8015f48:	6139      	str	r1, [r7, #16]
 8015f4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8015f4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8015f52:	ed87 1a01 	vstr	s2, [r7, #4]
    float error = ref - feedback;
 8015f56:	ed97 7a03 	vldr	s14, [r7, #12]
 8015f5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8015f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f62:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error);
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	623b      	str	r3, [r7, #32]
 8015f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6c:	61fb      	str	r3, [r7, #28]
    out = (S->A0 * in) +
 8015f6e:	6a3b      	ldr	r3, [r7, #32]
 8015f70:	ed93 7a00 	vldr	s14, [r3]
 8015f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8015f78:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015f82:	6a3b      	ldr	r3, [r7, #32]
 8015f84:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8015f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8015f90:	6a3b      	ldr	r3, [r7, #32]
 8015f92:	edd3 6a02 	vldr	s13, [r3, #8]
 8015f96:	6a3b      	ldr	r3, [r7, #32]
 8015f98:	edd3 7a04 	vldr	s15, [r3, #16]
 8015f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8015faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fae:	edc7 7a06 	vstr	s15, [r7, #24]
    S->state[1] = S->state[0];
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	68da      	ldr	r2, [r3, #12]
 8015fb6:	6a3b      	ldr	r3, [r7, #32]
 8015fb8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8015fba:	6a3b      	ldr	r3, [r7, #32]
 8015fbc:	69fa      	ldr	r2, [r7, #28]
 8015fbe:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	69ba      	ldr	r2, [r7, #24]
 8015fc4:	615a      	str	r2, [r3, #20]
    return (out);
 8015fc6:	69bb      	ldr	r3, [r7, #24]
 8015fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	float temp = 0;
 8015fca:	f04f 0300 	mov.w	r3, #0
 8015fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	ed93 7a05 	vldr	s14, [r3, #20]
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8015fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe4:	dd04      	ble.n	8015ff0 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0xb0>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	615a      	str	r2, [r3, #20]
 8015fee:	e00e      	b.n	801600e <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0xce>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	ed93 7a05 	vldr	s14, [r3, #20]
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8015ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016004:	d503      	bpl.n	801600e <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0xce>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	615a      	str	r2, [r3, #20]

	if(output > pid_struct->OutputMax)
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8016014:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8016018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016020:	dd03      	ble.n	801602a <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0xea>
		temp = pid_struct->OutputMax;
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016028:	e00f      	b.n	801604a <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x10a>
	else if(output < pid_struct->OutputMin)
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8016030:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8016034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801603c:	d503      	bpl.n	8016046 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x106>
		temp = pid_struct->OutputMin;
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016044:	e001      	b.n	801604a <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x10a>
	else
		temp = output;
 8016046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016048:	62fb      	str	r3, [r7, #44]	@ 0x2c

	temp += ff_model;
 801604a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801604e:	edd7 7a01 	vldr	s15, [r7, #4]
 8016052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016056:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	if(temp > MAX_CAP_CURRENT)
 801605a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801605e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8016062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801606a:	dd01      	ble.n	8016070 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x130>
		return MAX_CAP_CURRENT;
 801606c:	4b0b      	ldr	r3, [pc, #44]	@ (801609c <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x15c>)
 801606e:	e00b      	b.n	8016088 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x148>
	else if(temp < -MAX_CAP_CURRENT)
 8016070:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8016074:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8016078:	eef4 7ac7 	vcmpe.f32	s15, s14
 801607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016080:	d501      	bpl.n	8016086 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x146>
		return -MAX_CAP_CURRENT;
 8016082:	4b07      	ldr	r3, [pc, #28]	@ (80160a0 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x160>)
 8016084:	e000      	b.n	8016088 <_ZN24supercap_control_manager10get_PID_FFEP12LoopCtrl_PIDfff+0x148>
	else
		return temp;
 8016086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016088:	ee07 3a90 	vmov	s15, r3
 801608c:	eeb0 0a67 	vmov.f32	s0, s15
 8016090:	3734      	adds	r7, #52	@ 0x34
 8016092:	46bd      	mov	sp, r7
 8016094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016098:	4770      	bx	lr
 801609a:	bf00      	nop
 801609c:	41200000 	.word	0x41200000
 80160a0:	c1200000 	.word	0xc1200000

080160a4 <_ZN24supercap_control_manager17all_safety_checksEv>:

void supercap_control_manager::set_ref_chassis_power(float ref_power_){
	ref_power = ref_power_;
}

 void supercap_control_manager::all_safety_checks(){
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
	if(is_init){
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f893 3365 	ldrb.w	r3, [r3, #869]	@ 0x365
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d005      	beq.n	80160c2 <_ZN24supercap_control_manager17all_safety_checksEv+0x1e>
		safety_check_voltages();
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 f838 	bl	801612c <_ZN24supercap_control_manager21safety_check_voltagesEv>
		safety_check_currents();
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f913 	bl	80162e8 <_ZN24supercap_control_manager21safety_check_currentsEv>
//		safety_check_powers();
	//	safety_check_temp();
	}
}
 80160c2:	bf00      	nop
 80160c4:	3708      	adds	r7, #8
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}

080160ca <_ZN24supercap_control_manager19safety_change_levelEhh>:

 void supercap_control_manager::safety_change_level(uint8_t Item, uint8_t Level)
 {
 80160ca:	b480      	push	{r7}
 80160cc:	b083      	sub	sp, #12
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
 80160d2:	460b      	mov	r3, r1
 80160d4:	70fb      	strb	r3, [r7, #3]
 80160d6:	4613      	mov	r3, r2
 80160d8:	70bb      	strb	r3, [r7, #2]
 	if((safetyItemLevel[Item]<=warning && safetyItemLevel[Item]!=Level)
 80160da:	78fb      	ldrb	r3, [r7, #3]
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	4413      	add	r3, r2
 80160e0:	f893 3345 	ldrb.w	r3, [r3, #837]	@ 0x345
 80160e4:	2b01      	cmp	r3, #1
 80160e6:	d807      	bhi.n	80160f8 <_ZN24supercap_control_manager19safety_change_levelEhh+0x2e>
 80160e8:	78fb      	ldrb	r3, [r7, #3]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	4413      	add	r3, r2
 80160ee:	f893 3345 	ldrb.w	r3, [r3, #837]	@ 0x345
 80160f2:	78ba      	ldrb	r2, [r7, #2]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d109      	bne.n	801610c <_ZN24supercap_control_manager19safety_change_levelEhh+0x42>
 	|| (safetyItemLevel[Item]==runAway && Level==itsJoever))
 80160f8:	78fb      	ldrb	r3, [r7, #3]
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	4413      	add	r3, r2
 80160fe:	f893 3345 	ldrb.w	r3, [r3, #837]	@ 0x345
 8016102:	2b03      	cmp	r3, #3
 8016104:	d10c      	bne.n	8016120 <_ZN24supercap_control_manager19safety_change_levelEhh+0x56>
 8016106:	78bb      	ldrb	r3, [r7, #2]
 8016108:	2b04      	cmp	r3, #4
 801610a:	d109      	bne.n	8016120 <_ZN24supercap_control_manager19safety_change_levelEhh+0x56>
 	{
 		safetyItemLevel[Item] = Level;
 801610c:	78fb      	ldrb	r3, [r7, #3]
 801610e:	687a      	ldr	r2, [r7, #4]
 8016110:	4413      	add	r3, r2
 8016112:	78ba      	ldrb	r2, [r7, #2]
 8016114:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
 		safetyChangeTrigger = true;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2201      	movs	r2, #1
 801611c:	f883 234d 	strb.w	r2, [r3, #845]	@ 0x34d
 	}
 }
 8016120:	bf00      	nop
 8016122:	370c      	adds	r7, #12
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <_ZN24supercap_control_manager21safety_check_voltagesEv>:

 void supercap_control_manager::safety_check_voltages(){
 801612c:	b580      	push	{r7, lr}
 801612e:	b086      	sub	sp, #24
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
	float V_bat_ = get_compensated_adc(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	89db      	ldrh	r3, [r3, #14]
 801613a:	2202      	movs	r2, #2
 801613c:	4619      	mov	r1, r3
 801613e:	f7ff fb25 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8016142:	ed87 0a05 	vstr	s0, [r7, #20]
	float V_cap_ = get_compensated_adc(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	899b      	ldrh	r3, [r3, #12]
 801614c:	2201      	movs	r2, #1
 801614e:	4619      	mov	r1, r3
 8016150:	f7ff fb1c 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 8016154:	ed87 0a04 	vstr	s0, [r7, #16]

	if(V_bat_ > MAX_PMM_VOLTAGE or V_bat_ < MIN_PMM_VOLTAGE) Vbat_counter = 1000;
 8016158:	edd7 7a05 	vldr	s15, [r7, #20]
 801615c:	eeb3 7a0c 	vmov.f32	s14, #60	@ 0x41e00000  28.0
 8016160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016168:	dc08      	bgt.n	801617c <_ZN24supercap_control_manager21safety_check_voltagesEv+0x50>
 801616a:	edd7 7a05 	vldr	s15, [r7, #20]
 801616e:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8016172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801617a:	d505      	bpl.n	8016188 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x5c>
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016182:	f8a3 2350 	strh.w	r2, [r3, #848]	@ 0x350
 8016186:	e00c      	b.n	80161a2 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x76>
	else
	if(Vbat_counter > 0) Vbat_counter--;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 801618e:	2b00      	cmp	r3, #0
 8016190:	d007      	beq.n	80161a2 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x76>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 8016198:	3b01      	subs	r3, #1
 801619a:	b29a      	uxth	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8a3 2350 	strh.w	r2, [r3, #848]	@ 0x350

	if(Vbat_counter == 0 and Vbat_status != safe) Vbat_status = safe;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d109      	bne.n	80161c0 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x94>
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d004      	beq.n	80161c0 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x94>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2200      	movs	r2, #0
 80161ba:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362
 80161be:	e00d      	b.n	80161dc <_ZN24supercap_control_manager21safety_check_voltagesEv+0xb0>
	else
	if (Vbat_counter > 0 and Vbat_status != wtf) Vbat_status = wtf;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d008      	beq.n	80161dc <_ZN24supercap_control_manager21safety_check_voltagesEv+0xb0>
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 80161d0:	2b02      	cmp	r3, #2
 80161d2:	d003      	beq.n	80161dc <_ZN24supercap_control_manager21safety_check_voltagesEv+0xb0>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2202      	movs	r2, #2
 80161d8:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362

	if(V_cap_ > 26.0f || V_cap_ < SUPERCAP_MIN_VOLTAGE)
 80161dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80161e0:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80161e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80161e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ec:	dc08      	bgt.n	8016200 <_ZN24supercap_control_manager21safety_check_voltagesEv+0xd4>
 80161ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80161f2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80162e4 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x1b8>
 80161f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80161fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161fe:	d50f      	bpl.n	8016220 <_ZN24supercap_control_manager21safety_check_voltagesEv+0xf4>
	{
		if(Vcap_counter<650)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8016206:	f240 2289 	movw	r2, #649	@ 0x289
 801620a:	4293      	cmp	r3, r2
 801620c:	d815      	bhi.n	801623a <_ZN24supercap_control_manager21safety_check_voltagesEv+0x10e>
		{
			Vcap_counter++;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8016214:	3301      	adds	r3, #1
 8016216:	b29a      	uxth	r2, r3
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8a3 2352 	strh.w	r2, [r3, #850]	@ 0x352
		if(Vcap_counter<650)
 801621e:	e00c      	b.n	801623a <_ZN24supercap_control_manager21safety_check_voltagesEv+0x10e>
		}
	}
	else if(Vcap_counter>0)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8016226:	2b00      	cmp	r3, #0
 8016228:	d007      	beq.n	801623a <_ZN24supercap_control_manager21safety_check_voltagesEv+0x10e>
	{
		Vcap_counter--;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8016230:	3b01      	subs	r3, #1
 8016232:	b29a      	uxth	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8a3 2352 	strh.w	r2, [r3, #850]	@ 0x352
	}

	if(Vcap_counter==0 && Vcap_status != safe)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8016240:	2b00      	cmp	r3, #0
 8016242:	d109      	bne.n	8016258 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x12c>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 801624a:	2b00      	cmp	r3, #0
 801624c:	d004      	beq.n	8016258 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x12c>
	{
		Vcap_status = safe;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2200      	movs	r2, #0
 8016252:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363
 8016256:	e00f      	b.n	8016278 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x14c>
	}
	else if(Vcap_counter==650 && Vcap_status != wtf)
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 801625e:	f240 228a 	movw	r2, #650	@ 0x28a
 8016262:	4293      	cmp	r3, r2
 8016264:	d108      	bne.n	8016278 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x14c>
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 801626c:	2b02      	cmp	r3, #2
 801626e:	d003      	beq.n	8016278 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x14c>
	{
		Vcap_status = wtf;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2202      	movs	r2, #2
 8016274:	f883 2363 	strb.w	r2, [r3, #867]	@ 0x363
	}
	uint8_t OutputLevel = (Vbat_status>Vcap_status ? Vbat_status : Vcap_status);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f893 2362 	ldrb.w	r2, [r3, #866]	@ 0x362
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 8016284:	429a      	cmp	r2, r3
 8016286:	d903      	bls.n	8016290 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x164>
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 801628e:	e002      	b.n	8016296 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x16a>
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f893 3363 	ldrb.w	r3, [r3, #867]	@ 0x363
 8016296:	73fb      	strb	r3, [r7, #15]
	if(OutputLevel== safe && safetyItemLevel[voltageErr]!= safe)
 8016298:	7bfb      	ldrb	r3, [r7, #15]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d109      	bne.n	80162b2 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x186>
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f893 3349 	ldrb.w	r3, [r3, #841]	@ 0x349
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d004      	beq.n	80162b2 <_ZN24supercap_control_manager21safety_check_voltagesEv+0x186>
	{
		safety_change_level(voltageErr, safe);
 80162a8:	2200      	movs	r2, #0
 80162aa:	2104      	movs	r1, #4
 80162ac:	6878      	ldr	r0, [r7, #4]
 80162ae:	f7ff ff0c 	bl	80160ca <_ZN24supercap_control_manager19safety_change_levelEhh>
//		Safety_TryUserCtrlMode();
		;
	}
	if(OutputLevel==wtf && safetyItemLevel[voltageErr]!=wtf)
 80162b2:	7bfb      	ldrb	r3, [r7, #15]
 80162b4:	2b02      	cmp	r3, #2
 80162b6:	d110      	bne.n	80162da <_ZN24supercap_control_manager21safety_check_voltagesEv+0x1ae>
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f893 3349 	ldrb.w	r3, [r3, #841]	@ 0x349
 80162be:	2b02      	cmp	r3, #2
 80162c0:	d00b      	beq.n	80162da <_ZN24supercap_control_manager21safety_check_voltagesEv+0x1ae>
  __ASM volatile ("cpsid i" : : : "memory");
 80162c2:	b672      	cpsid	i
}
 80162c4:	bf00      	nop
	{
		__disable_irq();
		silent_mode();
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7ff fd0e 	bl	8015ce8 <_ZN24supercap_control_manager11silent_modeEv>
  __ASM volatile ("cpsie i" : : : "memory");
 80162cc:	b662      	cpsie	i
}
 80162ce:	bf00      	nop
//		Mode_EN = 0U;
		__enable_irq();
		safety_change_level(voltageErr, warning);
 80162d0:	2201      	movs	r2, #1
 80162d2:	2104      	movs	r1, #4
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f7ff fef8 	bl	80160ca <_ZN24supercap_control_manager19safety_change_levelEhh>
	}
}
 80162da:	bf00      	nop
 80162dc:	3718      	adds	r7, #24
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	403e147b 	.word	0x403e147b

080162e8 <_ZN24supercap_control_manager21safety_check_currentsEv>:

 void supercap_control_manager::safety_check_currents(){
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b088      	sub	sp, #32
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]

	if(safetyItemLevel[currentErr] != itsJoever)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f893 334a 	ldrb.w	r3, [r3, #842]	@ 0x34a
 80162f6:	2b04      	cmp	r3, #4
 80162f8:	f000 81cd 	beq.w	8016696 <_ZN24supercap_control_manager21safety_check_currentsEv+0x3ae>
	{
		float I_cap_ = get_compensated_adc(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	895b      	ldrh	r3, [r3, #10]
 8016302:	2200      	movs	r2, #0
 8016304:	4619      	mov	r1, r3
 8016306:	f7ff fa41 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 801630a:	ed87 0a07 	vstr	s0, [r7, #28]
		float I_chassis_= get_compensated_adc(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	8a1b      	ldrh	r3, [r3, #16]
 8016314:	2203      	movs	r2, #3
 8016316:	4619      	mov	r1, r3
 8016318:	f7ff fa38 	bl	801578c <_ZN11adc_manager19get_compensated_adcEt9adc_names>
 801631c:	ed87 0a06 	vstr	s0, [r7, #24]
		float GetIsource = (I_chassis_>=0.0f ? I_chassis_ : ((-1.0f)*I_chassis_));
 8016320:	edd7 7a06 	vldr	s15, [r7, #24]
 8016324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801632c:	db02      	blt.n	8016334 <_ZN24supercap_control_manager21safety_check_currentsEv+0x4c>
 801632e:	edd7 7a06 	vldr	s15, [r7, #24]
 8016332:	e003      	b.n	801633c <_ZN24supercap_control_manager21safety_check_currentsEv+0x54>
 8016334:	edd7 7a06 	vldr	s15, [r7, #24]
 8016338:	eef1 7a67 	vneg.f32	s15, s15
 801633c:	edc7 7a05 	vstr	s15, [r7, #20]
		float GetIcap    = (I_cap_>=0.0f    ? I_cap_    : ((-1.0f)*I_cap_));
 8016340:	edd7 7a07 	vldr	s15, [r7, #28]
 8016344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801634c:	db02      	blt.n	8016354 <_ZN24supercap_control_manager21safety_check_currentsEv+0x6c>
 801634e:	edd7 7a07 	vldr	s15, [r7, #28]
 8016352:	e003      	b.n	801635c <_ZN24supercap_control_manager21safety_check_currentsEv+0x74>
 8016354:	edd7 7a07 	vldr	s15, [r7, #28]
 8016358:	eef1 7a67 	vneg.f32	s15, s15
 801635c:	edc7 7a04 	vstr	s15, [r7, #16]

		if(GetIsource<SUPERCAP_CURRENT_SAFETY_MAX && I_chassis_counter>0)
 8016360:	edd7 7a05 	vldr	s15, [r7, #20]
 8016364:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8016368:	eef4 7ac7 	vcmpe.f32	s15, s14
 801636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016370:	d50d      	bpl.n	801638e <_ZN24supercap_control_manager21safety_check_currentsEv+0xa6>
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016378:	2b00      	cmp	r3, #0
 801637a:	d008      	beq.n	801638e <_ZN24supercap_control_manager21safety_check_currentsEv+0xa6>
		{
			I_chassis_counter--;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016382:	3b01      	subs	r3, #1
 8016384:	b29a      	uxth	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
 801638c:	e02c      	b.n	80163e8 <_ZN24supercap_control_manager21safety_check_currentsEv+0x100>
		}
		else if(GetIsource>=SUPERCAP_CURRENT_SAFETY_MAX && GetIsource<13.5f && I_chassis_counter<100)
 801638e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016392:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8016396:	eef4 7ac7 	vcmpe.f32	s15, s14
 801639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801639e:	db16      	blt.n	80163ce <_ZN24supercap_control_manager21safety_check_currentsEv+0xe6>
 80163a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80163a4:	eeb2 7a0b 	vmov.f32	s14, #43	@ 0x41580000  13.5
 80163a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80163ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b0:	d50d      	bpl.n	80163ce <_ZN24supercap_control_manager21safety_check_currentsEv+0xe6>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 80163b8:	2b63      	cmp	r3, #99	@ 0x63
 80163ba:	d808      	bhi.n	80163ce <_ZN24supercap_control_manager21safety_check_currentsEv+0xe6>
		{
			I_chassis_counter++;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 80163c2:	3301      	adds	r3, #1
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
 80163cc:	e00c      	b.n	80163e8 <_ZN24supercap_control_manager21safety_check_currentsEv+0x100>
		}
		else if(GetIsource>=13.5f)
 80163ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80163d2:	eeb2 7a0b 	vmov.f32	s14, #43	@ 0x41580000  13.5
 80163d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80163da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163de:	db03      	blt.n	80163e8 <_ZN24supercap_control_manager21safety_check_currentsEv+0x100>
		{
			I_chassis_counter=100;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2264      	movs	r2, #100	@ 0x64
 80163e4:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
		}

		if(I_chassis_counter==0 && I_chassis_status!=safe)
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d109      	bne.n	8016406 <_ZN24supercap_control_manager21safety_check_currentsEv+0x11e>
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d004      	beq.n	8016406 <_ZN24supercap_control_manager21safety_check_currentsEv+0x11e>
		{
			I_chassis_status = safe;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2200      	movs	r2, #0
 8016400:	f8a3 2368 	strh.w	r2, [r3, #872]	@ 0x368
 8016404:	e021      	b.n	801644a <_ZN24supercap_control_manager21safety_check_currentsEv+0x162>
		}
		else if(I_chassis_counter>0 && I_chassis_counter<100 && I_chassis_status<warning)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 801640c:	2b00      	cmp	r3, #0
 801640e:	d00e      	beq.n	801642e <_ZN24supercap_control_manager21safety_check_currentsEv+0x146>
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016416:	2b63      	cmp	r3, #99	@ 0x63
 8016418:	d809      	bhi.n	801642e <_ZN24supercap_control_manager21safety_check_currentsEv+0x146>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 8016420:	2b00      	cmp	r3, #0
 8016422:	d104      	bne.n	801642e <_ZN24supercap_control_manager21safety_check_currentsEv+0x146>
		{
			I_chassis_status = warning;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2201      	movs	r2, #1
 8016428:	f8a3 2368 	strh.w	r2, [r3, #872]	@ 0x368
 801642c:	e00d      	b.n	801644a <_ZN24supercap_control_manager21safety_check_currentsEv+0x162>
		}
		else if(I_chassis_counter==100 && I_chassis_status < wtf)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016434:	2b64      	cmp	r3, #100	@ 0x64
 8016436:	d108      	bne.n	801644a <_ZN24supercap_control_manager21safety_check_currentsEv+0x162>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 801643e:	2b01      	cmp	r3, #1
 8016440:	d803      	bhi.n	801644a <_ZN24supercap_control_manager21safety_check_currentsEv+0x162>
		{
			I_chassis_status = wtf;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2202      	movs	r2, #2
 8016446:	f8a3 2368 	strh.w	r2, [r3, #872]	@ 0x368
		}

		if(I_chassis_status == wtf && I_chassis_counter < 150)
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 8016450:	2b02      	cmp	r3, #2
 8016452:	d10d      	bne.n	8016470 <_ZN24supercap_control_manager21safety_check_currentsEv+0x188>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 801645a:	2b95      	cmp	r3, #149	@ 0x95
 801645c:	d808      	bhi.n	8016470 <_ZN24supercap_control_manager21safety_check_currentsEv+0x188>
		{
			I_chassis_counter++;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016464:	3301      	adds	r3, #1
 8016466:	b29a      	uxth	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
 801646e:	e011      	b.n	8016494 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1ac>
		}
		else if(I_chassis_status < wtf && I_chassis_counter>0)
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 8016476:	2b01      	cmp	r3, #1
 8016478:	d80c      	bhi.n	8016494 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1ac>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8016480:	2b00      	cmp	r3, #0
 8016482:	d007      	beq.n	8016494 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1ac>
		{
			I_chassis_counter--;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 801648a:	3b01      	subs	r3, #1
 801648c:	b29a      	uxth	r2, r3
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f8a3 2358 	strh.w	r2, [r3, #856]	@ 0x358
		}

		if(I_chassis_counter==150)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 801649a:	2b96      	cmp	r3, #150	@ 0x96
 801649c:	d103      	bne.n	80164a6 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1be>
		{
			I_chassis_status = itsJoever;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2204      	movs	r2, #4
 80164a2:	f8a3 2368 	strh.w	r2, [r3, #872]	@ 0x368
		}

		if(GetIcap<SUPERCAP_CURRENT_SAFETY_MAX && I_cap_counter>0)
 80164a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80164aa:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80164ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b6:	d50d      	bpl.n	80164d4 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1ec>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d008      	beq.n	80164d4 <_ZN24supercap_control_manager21safety_check_currentsEv+0x1ec>
		{
			I_cap_counter--;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 80164c8:	3b01      	subs	r3, #1
 80164ca:	b29a      	uxth	r2, r3
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f8a3 2356 	strh.w	r2, [r3, #854]	@ 0x356
 80164d2:	e02c      	b.n	801652e <_ZN24supercap_control_manager21safety_check_currentsEv+0x246>
		}
		else if(GetIcap>=SUPERCAP_CURRENT_SAFETY_MAX && GetIcap<13.5f && I_cap_counter<100)
 80164d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80164d8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80164dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e4:	db16      	blt.n	8016514 <_ZN24supercap_control_manager21safety_check_currentsEv+0x22c>
 80164e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80164ea:	eeb2 7a0b 	vmov.f32	s14, #43	@ 0x41580000  13.5
 80164ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164f6:	d50d      	bpl.n	8016514 <_ZN24supercap_control_manager21safety_check_currentsEv+0x22c>
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 80164fe:	2b63      	cmp	r3, #99	@ 0x63
 8016500:	d808      	bhi.n	8016514 <_ZN24supercap_control_manager21safety_check_currentsEv+0x22c>
		{
			I_cap_counter++;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 8016508:	3301      	adds	r3, #1
 801650a:	b29a      	uxth	r2, r3
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	f8a3 2356 	strh.w	r2, [r3, #854]	@ 0x356
 8016512:	e00c      	b.n	801652e <_ZN24supercap_control_manager21safety_check_currentsEv+0x246>
		}
		else if(GetIcap>=13.5f)
 8016514:	edd7 7a04 	vldr	s15, [r7, #16]
 8016518:	eeb2 7a0b 	vmov.f32	s14, #43	@ 0x41580000  13.5
 801651c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016524:	db03      	blt.n	801652e <_ZN24supercap_control_manager21safety_check_currentsEv+0x246>
		{
			I_cap_counter=100;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2264      	movs	r2, #100	@ 0x64
 801652a:	f8a3 2356 	strh.w	r2, [r3, #854]	@ 0x356
		}

		if(I_cap_counter==0 && I_cap_status!=safe)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 8016534:	2b00      	cmp	r3, #0
 8016536:	d109      	bne.n	801654c <_ZN24supercap_control_manager21safety_check_currentsEv+0x264>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 801653e:	2b00      	cmp	r3, #0
 8016540:	d004      	beq.n	801654c <_ZN24supercap_control_manager21safety_check_currentsEv+0x264>
		{
			I_cap_status = safe;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2200      	movs	r2, #0
 8016546:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
 801654a:	e021      	b.n	8016590 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2a8>
		}
		else if(I_cap_counter>0 && I_cap_counter < 100 && I_cap_status < warning)
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00e      	beq.n	8016574 <_ZN24supercap_control_manager21safety_check_currentsEv+0x28c>
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 801655c:	2b63      	cmp	r3, #99	@ 0x63
 801655e:	d809      	bhi.n	8016574 <_ZN24supercap_control_manager21safety_check_currentsEv+0x28c>
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 8016566:	2b00      	cmp	r3, #0
 8016568:	d104      	bne.n	8016574 <_ZN24supercap_control_manager21safety_check_currentsEv+0x28c>
		{
			I_cap_status = warning;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
 8016572:	e00d      	b.n	8016590 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2a8>
		}
		else if(I_cap_counter==100 && I_cap_status < wtf)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f8b3 3356 	ldrh.w	r3, [r3, #854]	@ 0x356
 801657a:	2b64      	cmp	r3, #100	@ 0x64
 801657c:	d108      	bne.n	8016590 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2a8>
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 8016584:	2b01      	cmp	r3, #1
 8016586:	d803      	bhi.n	8016590 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2a8>
		{
			I_cap_status = wtf;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2202      	movs	r2, #2
 801658c:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
		}

		if(I_cap_status == wtf && I_cap_force_counter<150)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 8016596:	2b02      	cmp	r3, #2
 8016598:	d10d      	bne.n	80165b6 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2ce>
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f8b3 335e 	ldrh.w	r3, [r3, #862]	@ 0x35e
 80165a0:	2b95      	cmp	r3, #149	@ 0x95
 80165a2:	d808      	bhi.n	80165b6 <_ZN24supercap_control_manager21safety_check_currentsEv+0x2ce>
		{
			I_cap_force_counter++;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8b3 335e 	ldrh.w	r3, [r3, #862]	@ 0x35e
 80165aa:	3301      	adds	r3, #1
 80165ac:	b29a      	uxth	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
 80165b4:	e011      	b.n	80165da <_ZN24supercap_control_manager21safety_check_currentsEv+0x2f2>
		}
		else if(I_cap_status < wtf && I_cap_force_counter>0)
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 80165bc:	2b01      	cmp	r3, #1
 80165be:	d80c      	bhi.n	80165da <_ZN24supercap_control_manager21safety_check_currentsEv+0x2f2>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8b3 335e 	ldrh.w	r3, [r3, #862]	@ 0x35e
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d007      	beq.n	80165da <_ZN24supercap_control_manager21safety_check_currentsEv+0x2f2>
		{
			I_cap_force_counter--;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8b3 335e 	ldrh.w	r3, [r3, #862]	@ 0x35e
 80165d0:	3b01      	subs	r3, #1
 80165d2:	b29a      	uxth	r2, r3
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		}

		if(I_cap_force_counter==150)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8b3 335e 	ldrh.w	r3, [r3, #862]	@ 0x35e
 80165e0:	2b96      	cmp	r3, #150	@ 0x96
 80165e2:	d103      	bne.n	80165ec <_ZN24supercap_control_manager21safety_check_currentsEv+0x304>
		{
			I_cap_status = itsJoever;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2204      	movs	r2, #4
 80165e8:	f8a3 2366 	strh.w	r2, [r3, #870]	@ 0x366
		}


		uint8_t OutputLevel = (I_chassis_status>=I_cap_status ? I_chassis_status : I_cap_status);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8b3 2368 	ldrh.w	r2, [r3, #872]	@ 0x368
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d304      	bcc.n	8016606 <_ZN24supercap_control_manager21safety_check_currentsEv+0x31e>
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f8b3 3368 	ldrh.w	r3, [r3, #872]	@ 0x368
 8016602:	b2db      	uxtb	r3, r3
 8016604:	e003      	b.n	801660e <_ZN24supercap_control_manager21safety_check_currentsEv+0x326>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f8b3 3366 	ldrh.w	r3, [r3, #870]	@ 0x366
 801660c:	b2db      	uxtb	r3, r3
 801660e:	73fb      	strb	r3, [r7, #15]
		if(safetyItemLevel[currentErr] != OutputLevel)
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f893 334a 	ldrb.w	r3, [r3, #842]	@ 0x34a
 8016616:	7bfa      	ldrb	r2, [r7, #15]
 8016618:	429a      	cmp	r2, r3
 801661a:	d03c      	beq.n	8016696 <_ZN24supercap_control_manager21safety_check_currentsEv+0x3ae>
		{
			switch(safetyItemLevel[currentErr])
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f893 334a 	ldrb.w	r3, [r3, #842]	@ 0x34a
 8016622:	2b01      	cmp	r3, #1
 8016624:	dc02      	bgt.n	801662c <_ZN24supercap_control_manager21safety_check_currentsEv+0x344>
 8016626:	2b00      	cmp	r3, #0
 8016628:	da03      	bge.n	8016632 <_ZN24supercap_control_manager21safety_check_currentsEv+0x34a>
 801662a:	e02e      	b.n	801668a <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a2>
 801662c:	2b02      	cmp	r3, #2
 801662e:	d01e      	beq.n	801666e <_ZN24supercap_control_manager21safety_check_currentsEv+0x386>
 8016630:	e02b      	b.n	801668a <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a2>
			{
				case safe:
				case warning:
				{
					switch(OutputLevel)
 8016632:	7bfb      	ldrb	r3, [r7, #15]
 8016634:	2b04      	cmp	r3, #4
 8016636:	d010      	beq.n	801665a <_ZN24supercap_control_manager21safety_check_currentsEv+0x372>
 8016638:	2b04      	cmp	r3, #4
 801663a:	dc23      	bgt.n	8016684 <_ZN24supercap_control_manager21safety_check_currentsEv+0x39c>
 801663c:	2b01      	cmp	r3, #1
 801663e:	dc02      	bgt.n	8016646 <_ZN24supercap_control_manager21safety_check_currentsEv+0x35e>
 8016640:	2b00      	cmp	r3, #0
 8016642:	da12      	bge.n	801666a <_ZN24supercap_control_manager21safety_check_currentsEv+0x382>
						}
						break;
						default:;
					}
				}
				break;
 8016644:	e01e      	b.n	8016684 <_ZN24supercap_control_manager21safety_check_currentsEv+0x39c>
 8016646:	2b02      	cmp	r3, #2
 8016648:	d11c      	bne.n	8016684 <_ZN24supercap_control_manager21safety_check_currentsEv+0x39c>
  __ASM volatile ("cpsid i" : : : "memory");
 801664a:	b672      	cpsid	i
}
 801664c:	bf00      	nop
							silent_mode();
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7ff fb4a 	bl	8015ce8 <_ZN24supercap_control_manager11silent_modeEv>
  __ASM volatile ("cpsie i" : : : "memory");
 8016654:	b662      	cpsie	i
}
 8016656:	bf00      	nop
						break;
 8016658:	e008      	b.n	801666c <_ZN24supercap_control_manager21safety_check_currentsEv+0x384>
  __ASM volatile ("cpsid i" : : : "memory");
 801665a:	b672      	cpsid	i
}
 801665c:	bf00      	nop
							silent_mode();
 801665e:	6878      	ldr	r0, [r7, #4]
 8016660:	f7ff fb42 	bl	8015ce8 <_ZN24supercap_control_manager11silent_modeEv>
  __ASM volatile ("cpsie i" : : : "memory");
 8016664:	b662      	cpsie	i
}
 8016666:	bf00      	nop
						break;
 8016668:	e000      	b.n	801666c <_ZN24supercap_control_manager21safety_check_currentsEv+0x384>
						break;
 801666a:	bf00      	nop
				break;
 801666c:	e00a      	b.n	8016684 <_ZN24supercap_control_manager21safety_check_currentsEv+0x39c>
				case wtf:
				{
					switch(OutputLevel)
 801666e:	7bfb      	ldrb	r3, [r7, #15]
 8016670:	2b01      	cmp	r3, #1
 8016672:	dc02      	bgt.n	801667a <_ZN24supercap_control_manager21safety_check_currentsEv+0x392>
 8016674:	2b00      	cmp	r3, #0
 8016676:	da03      	bge.n	8016680 <_ZN24supercap_control_manager21safety_check_currentsEv+0x398>
						}
						break;
						default:;
					}
				}
				break;
 8016678:	e006      	b.n	8016688 <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a0>
 801667a:	2b04      	cmp	r3, #4
 801667c:	d104      	bne.n	8016688 <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a0>
						break;
 801667e:	e000      	b.n	8016682 <_ZN24supercap_control_manager21safety_check_currentsEv+0x39a>
						break;
 8016680:	bf00      	nop
				break;
 8016682:	e001      	b.n	8016688 <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a0>
				break;
 8016684:	bf00      	nop
 8016686:	e000      	b.n	801668a <_ZN24supercap_control_manager21safety_check_currentsEv+0x3a2>
				break;
 8016688:	bf00      	nop
				default:;
			}

			safety_change_level(currentErr, OutputLevel);
 801668a:	7bfb      	ldrb	r3, [r7, #15]
 801668c:	461a      	mov	r2, r3
 801668e:	2105      	movs	r1, #5
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7ff fd1a 	bl	80160ca <_ZN24supercap_control_manager19safety_change_levelEhh>
		}
	}
}
 8016696:	bf00      	nop
 8016698:	3720      	adds	r7, #32
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
	...

080166a0 <arm_pid_init_f32>:
 80166a0:	edd0 6a08 	vldr	s13, [r0, #32]
 80166a4:	edd0 7a06 	vldr	s15, [r0, #24]
 80166a8:	ed90 7a07 	vldr	s14, [r0, #28]
 80166ac:	edc0 6a02 	vstr	s13, [r0, #8]
 80166b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80166b4:	ee36 6aa6 	vadd.f32	s12, s13, s13
 80166b8:	eef1 7a67 	vneg.f32	s15, s15
 80166bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80166c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80166c4:	ed80 7a00 	vstr	s14, [r0]
 80166c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80166cc:	b901      	cbnz	r1, 80166d0 <arm_pid_init_f32+0x30>
 80166ce:	4770      	bx	lr
 80166d0:	2300      	movs	r3, #0
 80166d2:	60c3      	str	r3, [r0, #12]
 80166d4:	6103      	str	r3, [r0, #16]
 80166d6:	6143      	str	r3, [r0, #20]
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop

080166dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80166dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80166de:	2400      	movs	r4, #0
 80166e0:	2310      	movs	r3, #16
 80166e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80166e6:	6803      	ldr	r3, [r0, #0]
 80166e8:	4615      	mov	r5, r2
 80166ea:	699e      	ldr	r6, [r3, #24]
 80166ec:	6812      	ldr	r2, [r2, #0]
 80166ee:	466b      	mov	r3, sp
 80166f0:	e9cd 4400 	strd	r4, r4, [sp]
 80166f4:	47b0      	blx	r6
 80166f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80166fa:	f003 0306 	and.w	r3, r3, #6
 80166fe:	2b06      	cmp	r3, #6
 8016700:	bf03      	ittte	eq
 8016702:	9b00      	ldreq	r3, [sp, #0]
 8016704:	602b      	streq	r3, [r5, #0]
 8016706:	2001      	moveq	r0, #1
 8016708:	4620      	movne	r0, r4
 801670a:	b004      	add	sp, #16
 801670c:	bd70      	pop	{r4, r5, r6, pc}

0801670e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801670e:	9800      	ldr	r0, [sp, #0]
 8016710:	4290      	cmp	r0, r2
 8016712:	bf0c      	ite	eq
 8016714:	2006      	moveq	r0, #6
 8016716:	2001      	movne	r0, #1
 8016718:	4770      	bx	lr
	...

0801671c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801671c:	b510      	push	{r4, lr}
 801671e:	4b03      	ldr	r3, [pc, #12]	@ (801672c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8016720:	6003      	str	r3, [r0, #0]
 8016722:	4604      	mov	r4, r0
 8016724:	f000 f9bd 	bl	8016aa2 <_ZNSt9type_infoD1Ev>
 8016728:	4620      	mov	r0, r4
 801672a:	bd10      	pop	{r4, pc}
 801672c:	0801a248 	.word	0x0801a248

08016730 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	f7ff fff2 	bl	801671c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8016738:	4620      	mov	r0, r4
 801673a:	2108      	movs	r1, #8
 801673c:	f000 f844 	bl	80167c8 <_ZdlPvj>
 8016740:	4620      	mov	r0, r4
 8016742:	bd10      	pop	{r4, pc}

08016744 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8016744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016748:	461f      	mov	r7, r3
 801674a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801674e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016752:	4598      	cmp	r8, r3
 8016754:	4606      	mov	r6, r0
 8016756:	4615      	mov	r5, r2
 8016758:	d107      	bne.n	801676a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801675a:	9907      	ldr	r1, [sp, #28]
 801675c:	f000 f9a6 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016760:	b118      	cbz	r0, 801676a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8016762:	7165      	strb	r5, [r4, #5]
 8016764:	2000      	movs	r0, #0
 8016766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801676a:	4639      	mov	r1, r7
 801676c:	4630      	mov	r0, r6
 801676e:	f000 f99d 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016772:	2800      	cmp	r0, #0
 8016774:	d0f6      	beq.n	8016764 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8016776:	2301      	movs	r3, #1
 8016778:	f8c4 8000 	str.w	r8, [r4]
 801677c:	7125      	strb	r5, [r4, #4]
 801677e:	71a3      	strb	r3, [r4, #6]
 8016780:	e7f0      	b.n	8016764 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08016782 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8016782:	b538      	push	{r3, r4, r5, lr}
 8016784:	4615      	mov	r5, r2
 8016786:	461c      	mov	r4, r3
 8016788:	f000 f990 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 801678c:	b120      	cbz	r0, 8016798 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801678e:	2308      	movs	r3, #8
 8016790:	60e3      	str	r3, [r4, #12]
 8016792:	2306      	movs	r3, #6
 8016794:	6025      	str	r5, [r4, #0]
 8016796:	7123      	strb	r3, [r4, #4]
 8016798:	bd38      	pop	{r3, r4, r5, pc}

0801679a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801679a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801679e:	4605      	mov	r5, r0
 80167a0:	460c      	mov	r4, r1
 80167a2:	4616      	mov	r6, r2
 80167a4:	461f      	mov	r7, r3
 80167a6:	f000 f981 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 80167aa:	b948      	cbnz	r0, 80167c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80167ac:	2f03      	cmp	r7, #3
 80167ae:	d807      	bhi.n	80167c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	4632      	mov	r2, r6
 80167b4:	4629      	mov	r1, r5
 80167b6:	4620      	mov	r0, r4
 80167b8:	695b      	ldr	r3, [r3, #20]
 80167ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167be:	4718      	bx	r3
 80167c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167c4 <_ZdlPv>:
 80167c4:	f000 bc68 	b.w	8017098 <free>

080167c8 <_ZdlPvj>:
 80167c8:	f7ff bffc 	b.w	80167c4 <_ZdlPv>

080167cc <__dynamic_cast>:
 80167cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167d0:	460f      	mov	r7, r1
 80167d2:	b088      	sub	sp, #32
 80167d4:	4616      	mov	r6, r2
 80167d6:	461d      	mov	r5, r3
 80167d8:	4604      	mov	r4, r0
 80167da:	b918      	cbnz	r0, 80167e4 <__dynamic_cast+0x18>
 80167dc:	2000      	movs	r0, #0
 80167de:	b008      	add	sp, #32
 80167e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e4:	6802      	ldr	r2, [r0, #0]
 80167e6:	f852 3c08 	ldr.w	r3, [r2, #-8]
 80167ea:	f852 cc04 	ldr.w	ip, [r2, #-4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80167f4:	18c1      	adds	r1, r0, r3
 80167f6:	58c3      	ldr	r3, [r0, r3]
 80167f8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80167fc:	2210      	movs	r2, #16
 80167fe:	4560      	cmp	r0, ip
 8016800:	9207      	str	r2, [sp, #28]
 8016802:	d1eb      	bne.n	80167dc <__dynamic_cast+0x10>
 8016804:	aa05      	add	r2, sp, #20
 8016806:	6803      	ldr	r3, [r0, #0]
 8016808:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801680c:	e9cd 1700 	strd	r1, r7, [sp]
 8016810:	2206      	movs	r2, #6
 8016812:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016816:	4629      	mov	r1, r5
 8016818:	4633      	mov	r3, r6
 801681a:	47c0      	blx	r8
 801681c:	9805      	ldr	r0, [sp, #20]
 801681e:	2800      	cmp	r0, #0
 8016820:	d0dc      	beq.n	80167dc <__dynamic_cast+0x10>
 8016822:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8016826:	f001 0306 	and.w	r3, r1, #6
 801682a:	2b06      	cmp	r3, #6
 801682c:	d0d7      	beq.n	80167de <__dynamic_cast+0x12>
 801682e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016832:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8016836:	401a      	ands	r2, r3
 8016838:	f002 0206 	and.w	r2, r2, #6
 801683c:	2a06      	cmp	r2, #6
 801683e:	d0ce      	beq.n	80167de <__dynamic_cast+0x12>
 8016840:	f003 0305 	and.w	r3, r3, #5
 8016844:	2b04      	cmp	r3, #4
 8016846:	d0c9      	beq.n	80167dc <__dynamic_cast+0x10>
 8016848:	2900      	cmp	r1, #0
 801684a:	d1c7      	bne.n	80167dc <__dynamic_cast+0x10>
 801684c:	2d00      	cmp	r5, #0
 801684e:	db04      	blt.n	801685a <__dynamic_cast+0x8e>
 8016850:	4428      	add	r0, r5
 8016852:	4284      	cmp	r4, r0
 8016854:	d1c2      	bne.n	80167dc <__dynamic_cast+0x10>
 8016856:	9805      	ldr	r0, [sp, #20]
 8016858:	e7c1      	b.n	80167de <__dynamic_cast+0x12>
 801685a:	1cab      	adds	r3, r5, #2
 801685c:	d0be      	beq.n	80167dc <__dynamic_cast+0x10>
 801685e:	6833      	ldr	r3, [r6, #0]
 8016860:	9400      	str	r4, [sp, #0]
 8016862:	6a1c      	ldr	r4, [r3, #32]
 8016864:	4602      	mov	r2, r0
 8016866:	463b      	mov	r3, r7
 8016868:	4629      	mov	r1, r5
 801686a:	4630      	mov	r0, r6
 801686c:	47a0      	blx	r4
 801686e:	f000 0006 	and.w	r0, r0, #6
 8016872:	2806      	cmp	r0, #6
 8016874:	e7ee      	b.n	8016854 <__dynamic_cast+0x88>

08016876 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
 8016876:	2001      	movs	r0, #1
 8016878:	4770      	bx	lr
	...

0801687c <_ZN10__cxxabiv120__function_type_infoD1Ev>:
 801687c:	b510      	push	{r4, lr}
 801687e:	4b03      	ldr	r3, [pc, #12]	@ (801688c <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
 8016880:	6003      	str	r3, [r0, #0]
 8016882:	4604      	mov	r4, r0
 8016884:	f000 f90d 	bl	8016aa2 <_ZNSt9type_infoD1Ev>
 8016888:	4620      	mov	r0, r4
 801688a:	bd10      	pop	{r4, pc}
 801688c:	0801a2a8 	.word	0x0801a2a8

08016890 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
 8016890:	b510      	push	{r4, lr}
 8016892:	4604      	mov	r4, r0
 8016894:	f7ff fff2 	bl	801687c <_ZN10__cxxabiv120__function_type_infoD1Ev>
 8016898:	4620      	mov	r0, r4
 801689a:	2108      	movs	r1, #8
 801689c:	f7ff ff94 	bl	80167c8 <_ZdlPvj>
 80168a0:	4620      	mov	r0, r4
 80168a2:	bd10      	pop	{r4, pc}

080168a4 <_ZSt11_Hash_bytesPKvjj>:
 80168a4:	b570      	push	{r4, r5, r6, lr}
 80168a6:	4c18      	ldr	r4, [pc, #96]	@ (8016908 <_ZSt11_Hash_bytesPKvjj+0x64>)
 80168a8:	404a      	eors	r2, r1
 80168aa:	460d      	mov	r5, r1
 80168ac:	1846      	adds	r6, r0, r1
 80168ae:	2d03      	cmp	r5, #3
 80168b0:	eba6 0305 	sub.w	r3, r6, r5
 80168b4:	d817      	bhi.n	80168e6 <_ZSt11_Hash_bytesPKvjj+0x42>
 80168b6:	088b      	lsrs	r3, r1, #2
 80168b8:	f06f 0503 	mvn.w	r5, #3
 80168bc:	436b      	muls	r3, r5
 80168be:	4419      	add	r1, r3
 80168c0:	2902      	cmp	r1, #2
 80168c2:	eba0 0003 	sub.w	r0, r0, r3
 80168c6:	d01a      	beq.n	80168fe <_ZSt11_Hash_bytesPKvjj+0x5a>
 80168c8:	2903      	cmp	r1, #3
 80168ca:	d015      	beq.n	80168f8 <_ZSt11_Hash_bytesPKvjj+0x54>
 80168cc:	2901      	cmp	r1, #1
 80168ce:	d103      	bne.n	80168d8 <_ZSt11_Hash_bytesPKvjj+0x34>
 80168d0:	7803      	ldrb	r3, [r0, #0]
 80168d2:	4053      	eors	r3, r2
 80168d4:	fb04 f203 	mul.w	r2, r4, r3
 80168d8:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 80168dc:	fb04 f002 	mul.w	r0, r4, r2
 80168e0:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 80168e4:	bd70      	pop	{r4, r5, r6, pc}
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	4363      	muls	r3, r4
 80168ea:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 80168ee:	4362      	muls	r2, r4
 80168f0:	4363      	muls	r3, r4
 80168f2:	405a      	eors	r2, r3
 80168f4:	3d04      	subs	r5, #4
 80168f6:	e7da      	b.n	80168ae <_ZSt11_Hash_bytesPKvjj+0xa>
 80168f8:	7883      	ldrb	r3, [r0, #2]
 80168fa:	ea82 4203 	eor.w	r2, r2, r3, lsl #16
 80168fe:	7843      	ldrb	r3, [r0, #1]
 8016900:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
 8016904:	e7e4      	b.n	80168d0 <_ZSt11_Hash_bytesPKvjj+0x2c>
 8016906:	bf00      	nop
 8016908:	5bd1e995 	.word	0x5bd1e995

0801690c <_Znwj>:
 801690c:	2801      	cmp	r0, #1
 801690e:	bf38      	it	cc
 8016910:	2001      	movcc	r0, #1
 8016912:	b510      	push	{r4, lr}
 8016914:	4604      	mov	r4, r0
 8016916:	4620      	mov	r0, r4
 8016918:	f000 fbb6 	bl	8017088 <malloc>
 801691c:	b100      	cbz	r0, 8016920 <_Znwj+0x14>
 801691e:	bd10      	pop	{r4, pc}
 8016920:	f000 fb1e 	bl	8016f60 <_ZSt15get_new_handlerv>
 8016924:	b908      	cbnz	r0, 801692a <_Znwj+0x1e>
 8016926:	f000 fba7 	bl	8017078 <abort>
 801692a:	4780      	blx	r0
 801692c:	e7f3      	b.n	8016916 <_Znwj+0xa>

0801692e <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 801692e:	2001      	movs	r0, #1
 8016930:	4770      	bx	lr
	...

08016934 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8016934:	b510      	push	{r4, lr}
 8016936:	4b03      	ldr	r3, [pc, #12]	@ (8016944 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8016938:	6003      	str	r3, [r0, #0]
 801693a:	4604      	mov	r4, r0
 801693c:	f000 fb22 	bl	8016f84 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8016940:	4620      	mov	r0, r4
 8016942:	bd10      	pop	{r4, pc}
 8016944:	0801a2f8 	.word	0x0801a2f8

08016948 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8016948:	b510      	push	{r4, lr}
 801694a:	4604      	mov	r4, r0
 801694c:	f7ff fff2 	bl	8016934 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 8016950:	4620      	mov	r0, r4
 8016952:	2110      	movs	r1, #16
 8016954:	f7ff ff38 	bl	80167c8 <_ZdlPvj>
 8016958:	4620      	mov	r0, r4
 801695a:	bd10      	pop	{r4, pc}

0801695c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 801695c:	2b01      	cmp	r3, #1
 801695e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016962:	4606      	mov	r6, r0
 8016964:	460c      	mov	r4, r1
 8016966:	68c0      	ldr	r0, [r0, #12]
 8016968:	4617      	mov	r7, r2
 801696a:	461d      	mov	r5, r3
 801696c:	d803      	bhi.n	8016976 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 801696e:	490b      	ldr	r1, [pc, #44]	@ (801699c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 8016970:	f000 f89c 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016974:	b948      	cbnz	r0, 801698a <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 8016976:	68f0      	ldr	r0, [r6, #12]
 8016978:	68e1      	ldr	r1, [r4, #12]
 801697a:	6803      	ldr	r3, [r0, #0]
 801697c:	691e      	ldr	r6, [r3, #16]
 801697e:	463a      	mov	r2, r7
 8016980:	1cab      	adds	r3, r5, #2
 8016982:	46b4      	mov	ip, r6
 8016984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016988:	4760      	bx	ip
 801698a:	68e0      	ldr	r0, [r4, #12]
 801698c:	6803      	ldr	r3, [r0, #0]
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	4798      	blx	r3
 8016992:	f080 0001 	eor.w	r0, r0, #1
 8016996:	b2c0      	uxtb	r0, r0
 8016998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801699c:	0801a454 	.word	0x0801a454

080169a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80169a0:	b510      	push	{r4, lr}
 80169a2:	4b03      	ldr	r3, [pc, #12]	@ (80169b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80169a4:	6003      	str	r3, [r0, #0]
 80169a6:	4604      	mov	r4, r0
 80169a8:	f7ff feb8 	bl	801671c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80169ac:	4620      	mov	r0, r4
 80169ae:	bd10      	pop	{r4, pc}
 80169b0:	0801a350 	.word	0x0801a350

080169b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80169b4:	b510      	push	{r4, lr}
 80169b6:	4604      	mov	r4, r0
 80169b8:	f7ff fff2 	bl	80169a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80169bc:	4620      	mov	r0, r4
 80169be:	210c      	movs	r1, #12
 80169c0:	f7ff ff02 	bl	80167c8 <_ZdlPvj>
 80169c4:	4620      	mov	r0, r4
 80169c6:	bd10      	pop	{r4, pc}

080169c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80169c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80169d0:	4590      	cmp	r8, r2
 80169d2:	4606      	mov	r6, r0
 80169d4:	460f      	mov	r7, r1
 80169d6:	4615      	mov	r5, r2
 80169d8:	461c      	mov	r4, r3
 80169da:	d00b      	beq.n	80169f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80169dc:	68b0      	ldr	r0, [r6, #8]
 80169de:	6803      	ldr	r3, [r0, #0]
 80169e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80169e4:	6a1e      	ldr	r6, [r3, #32]
 80169e6:	462a      	mov	r2, r5
 80169e8:	4623      	mov	r3, r4
 80169ea:	4639      	mov	r1, r7
 80169ec:	46b4      	mov	ip, r6
 80169ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169f2:	4760      	bx	ip
 80169f4:	4619      	mov	r1, r3
 80169f6:	f000 f859 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d0ee      	beq.n	80169dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80169fe:	2006      	movs	r0, #6
 8016a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8016a04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a08:	460d      	mov	r5, r1
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8016a10:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8016a14:	4681      	mov	r9, r0
 8016a16:	4617      	mov	r7, r2
 8016a18:	4698      	mov	r8, r3
 8016a1a:	f000 f847 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016a1e:	b190      	cbz	r0, 8016a46 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8016a20:	2d00      	cmp	r5, #0
 8016a22:	6034      	str	r4, [r6, #0]
 8016a24:	7137      	strb	r7, [r6, #4]
 8016a26:	db09      	blt.n	8016a3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8016a28:	442c      	add	r4, r5
 8016a2a:	45a2      	cmp	sl, r4
 8016a2c:	bf14      	ite	ne
 8016a2e:	2401      	movne	r4, #1
 8016a30:	2406      	moveq	r4, #6
 8016a32:	71b4      	strb	r4, [r6, #6]
 8016a34:	2000      	movs	r0, #0
 8016a36:	b001      	add	sp, #4
 8016a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3c:	3502      	adds	r5, #2
 8016a3e:	d1f9      	bne.n	8016a34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8016a40:	2301      	movs	r3, #1
 8016a42:	71b3      	strb	r3, [r6, #6]
 8016a44:	e7f6      	b.n	8016a34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8016a46:	4554      	cmp	r4, sl
 8016a48:	d106      	bne.n	8016a58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8016a4a:	4659      	mov	r1, fp
 8016a4c:	4648      	mov	r0, r9
 8016a4e:	f000 f82d 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016a52:	b108      	cbz	r0, 8016a58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8016a54:	7177      	strb	r7, [r6, #5]
 8016a56:	e7ed      	b.n	8016a34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8016a58:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8016a5c:	6803      	ldr	r3, [r0, #0]
 8016a5e:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8016a62:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8016a66:	69dc      	ldr	r4, [r3, #28]
 8016a68:	463a      	mov	r2, r7
 8016a6a:	4643      	mov	r3, r8
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	46a4      	mov	ip, r4
 8016a70:	b001      	add	sp, #4
 8016a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a76:	4760      	bx	ip

08016a78 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8016a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a7c:	4607      	mov	r7, r0
 8016a7e:	460c      	mov	r4, r1
 8016a80:	4615      	mov	r5, r2
 8016a82:	461e      	mov	r6, r3
 8016a84:	f7ff fe7d 	bl	8016782 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8016a88:	b948      	cbnz	r0, 8016a9e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8016a8a:	68b8      	ldr	r0, [r7, #8]
 8016a8c:	6803      	ldr	r3, [r0, #0]
 8016a8e:	699f      	ldr	r7, [r3, #24]
 8016a90:	462a      	mov	r2, r5
 8016a92:	4633      	mov	r3, r6
 8016a94:	4621      	mov	r1, r4
 8016a96:	46bc      	mov	ip, r7
 8016a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a9c:	4760      	bx	ip
 8016a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016aa2 <_ZNSt9type_infoD1Ev>:
 8016aa2:	4770      	bx	lr

08016aa4 <_ZNKSt9type_info14__is_pointer_pEv>:
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	4770      	bx	lr

08016aa8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8016aa8:	2000      	movs	r0, #0
 8016aaa:	4770      	bx	lr

08016aac <_ZNKSt9type_info7__equalERKS_>:
 8016aac:	4281      	cmp	r1, r0
 8016aae:	b508      	push	{r3, lr}
 8016ab0:	d00e      	beq.n	8016ad0 <_ZNKSt9type_info7__equalERKS_+0x24>
 8016ab2:	6840      	ldr	r0, [r0, #4]
 8016ab4:	7803      	ldrb	r3, [r0, #0]
 8016ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ab8:	d00c      	beq.n	8016ad4 <_ZNKSt9type_info7__equalERKS_+0x28>
 8016aba:	6849      	ldr	r1, [r1, #4]
 8016abc:	780b      	ldrb	r3, [r1, #0]
 8016abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ac0:	bf08      	it	eq
 8016ac2:	3101      	addeq	r1, #1
 8016ac4:	f7e9 fbac 	bl	8000220 <strcmp>
 8016ac8:	fab0 f080 	clz	r0, r0
 8016acc:	0940      	lsrs	r0, r0, #5
 8016ace:	bd08      	pop	{r3, pc}
 8016ad0:	2001      	movs	r0, #1
 8016ad2:	e7fc      	b.n	8016ace <_ZNKSt9type_info7__equalERKS_+0x22>
 8016ad4:	2000      	movs	r0, #0
 8016ad6:	e7fa      	b.n	8016ace <_ZNKSt9type_info7__equalERKS_+0x22>

08016ad8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8016ad8:	f7ff bfe8 	b.w	8016aac <_ZNKSt9type_info7__equalERKS_>

08016adc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8016adc:	b510      	push	{r4, lr}
 8016ade:	4b03      	ldr	r3, [pc, #12]	@ (8016aec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8016ae0:	6003      	str	r3, [r0, #0]
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	f7ff fe1a 	bl	801671c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8016ae8:	4620      	mov	r0, r4
 8016aea:	bd10      	pop	{r4, pc}
 8016aec:	0801a3c8 	.word	0x0801a3c8

08016af0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8016af0:	b510      	push	{r4, lr}
 8016af2:	4604      	mov	r4, r0
 8016af4:	f7ff fff2 	bl	8016adc <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8016af8:	4620      	mov	r0, r4
 8016afa:	2118      	movs	r1, #24
 8016afc:	f7ff fe64 	bl	80167c8 <_ZdlPvj>
 8016b00:	4620      	mov	r0, r4
 8016b02:	bd10      	pop	{r4, pc}

08016b04 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8016b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016b0c:	4552      	cmp	r2, sl
 8016b0e:	4604      	mov	r4, r0
 8016b10:	4688      	mov	r8, r1
 8016b12:	4616      	mov	r6, r2
 8016b14:	4699      	mov	r9, r3
 8016b16:	d005      	beq.n	8016b24 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x20>
 8016b18:	68e7      	ldr	r7, [r4, #12]
 8016b1a:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8016b1e:	b947      	cbnz	r7, 8016b32 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2e>
 8016b20:	2001      	movs	r0, #1
 8016b22:	e022      	b.n	8016b6a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8016b24:	4619      	mov	r1, r3
 8016b26:	f7ff ffc1 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	d0f4      	beq.n	8016b18 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8016b2e:	2006      	movs	r0, #6
 8016b30:	e01b      	b.n	8016b6a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8016b32:	68e5      	ldr	r5, [r4, #12]
 8016b34:	07ab      	lsls	r3, r5, #30
 8016b36:	d51b      	bpl.n	8016b70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8016b38:	122a      	asrs	r2, r5, #8
 8016b3a:	f015 0501 	ands.w	r5, r5, #1
 8016b3e:	d004      	beq.n	8016b4a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x46>
 8016b40:	f118 0f03 	cmn.w	r8, #3
 8016b44:	d014      	beq.n	8016b70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8016b46:	6833      	ldr	r3, [r6, #0]
 8016b48:	589a      	ldr	r2, [r3, r2]
 8016b4a:	68a0      	ldr	r0, [r4, #8]
 8016b4c:	6803      	ldr	r3, [r0, #0]
 8016b4e:	f8cd a000 	str.w	sl, [sp]
 8016b52:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8016b56:	4432      	add	r2, r6
 8016b58:	464b      	mov	r3, r9
 8016b5a:	4641      	mov	r1, r8
 8016b5c:	47d8      	blx	fp
 8016b5e:	2803      	cmp	r0, #3
 8016b60:	d906      	bls.n	8016b70 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8016b62:	b115      	cbz	r5, 8016b6a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
 8016b64:	f040 0001 	orr.w	r0, r0, #1
 8016b68:	b2c0      	uxtb	r0, r0
 8016b6a:	b003      	add	sp, #12
 8016b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b70:	3f01      	subs	r7, #1
 8016b72:	3c08      	subs	r4, #8
 8016b74:	e7d3      	b.n	8016b1e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

08016b76 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8016b76:	b4f0      	push	{r4, r5, r6, r7}
 8016b78:	1e0d      	subs	r5, r1, #0
 8016b7a:	9c04      	ldr	r4, [sp, #16]
 8016b7c:	4616      	mov	r6, r2
 8016b7e:	db06      	blt.n	8016b8e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x18>
 8016b80:	442e      	add	r6, r5
 8016b82:	42b4      	cmp	r4, r6
 8016b84:	bf14      	ite	ne
 8016b86:	2001      	movne	r0, #1
 8016b88:	2006      	moveq	r0, #6
 8016b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8016b8c:	4770      	bx	lr
 8016b8e:	3502      	adds	r5, #2
 8016b90:	d005      	beq.n	8016b9e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x28>
 8016b92:	6805      	ldr	r5, [r0, #0]
 8016b94:	9404      	str	r4, [sp, #16]
 8016b96:	6a2c      	ldr	r4, [r5, #32]
 8016b98:	46a4      	mov	ip, r4
 8016b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8016b9c:	4760      	bx	ip
 8016b9e:	2001      	movs	r0, #1
 8016ba0:	e7f3      	b.n	8016b8a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x14>

08016ba2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8016ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba6:	b091      	sub	sp, #68	@ 0x44
 8016ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bac:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8016bae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016bb0:	68a3      	ldr	r3, [r4, #8]
 8016bb2:	06db      	lsls	r3, r3, #27
 8016bb4:	bf44      	itt	mi
 8016bb6:	6883      	ldrmi	r3, [r0, #8]
 8016bb8:	60a3      	strmi	r3, [r4, #8]
 8016bba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	4681      	mov	r9, r0
 8016bc0:	460f      	mov	r7, r1
 8016bc2:	d108      	bne.n	8016bd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8016bc4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016bc6:	f7ff ff71 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016bca:	b120      	cbz	r0, 8016bd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8016bcc:	9b05      	ldr	r3, [sp, #20]
 8016bce:	7163      	strb	r3, [r4, #5]
 8016bd0:	f04f 0800 	mov.w	r8, #0
 8016bd4:	e082      	b.n	8016cdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 8016bd6:	9906      	ldr	r1, [sp, #24]
 8016bd8:	4648      	mov	r0, r9
 8016bda:	f7ff ff67 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016bde:	b198      	cbz	r0, 8016c08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
 8016be0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016be2:	6023      	str	r3, [r4, #0]
 8016be4:	2f00      	cmp	r7, #0
 8016be6:	9b05      	ldr	r3, [sp, #20]
 8016be8:	7123      	strb	r3, [r4, #4]
 8016bea:	db08      	blt.n	8016bfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5c>
 8016bec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016bee:	441f      	add	r7, r3
 8016bf0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016bf2:	42bb      	cmp	r3, r7
 8016bf4:	bf14      	ite	ne
 8016bf6:	2701      	movne	r7, #1
 8016bf8:	2706      	moveq	r7, #6
 8016bfa:	71a7      	strb	r7, [r4, #6]
 8016bfc:	e7e8      	b.n	8016bd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8016bfe:	3702      	adds	r7, #2
 8016c00:	d1e6      	bne.n	8016bd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8016c02:	2301      	movs	r3, #1
 8016c04:	71a3      	strb	r3, [r4, #6]
 8016c06:	e7e3      	b.n	8016bd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8016c08:	2f00      	cmp	r7, #0
 8016c0a:	bfa9      	itett	ge
 8016c0c:	9b1c      	ldrge	r3, [sp, #112]	@ 0x70
 8016c0e:	9007      	strlt	r0, [sp, #28]
 8016c10:	1bdb      	subge	r3, r3, r7
 8016c12:	9307      	strge	r3, [sp, #28]
 8016c14:	f04f 0c02 	mov.w	ip, #2
 8016c18:	2301      	movs	r3, #1
 8016c1a:	e9cd c308 	strd	ip, r3, [sp, #32]
 8016c1e:	9b05      	ldr	r3, [sp, #20]
 8016c20:	f04f 0800 	mov.w	r8, #0
 8016c24:	f043 0301 	orr.w	r3, r3, #1
 8016c28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8016c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c2e:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8016c32:	eb09 0bca 	add.w	fp, r9, sl, lsl #3
 8016c36:	f1ba 0f00 	cmp.w	sl, #0
 8016c3a:	d109      	bne.n	8016c50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xae>
 8016c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d04c      	beq.n	8016cdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 8016c42:	9b08      	ldr	r3, [sp, #32]
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d049      	beq.n	8016cdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 8016c48:	2301      	movs	r3, #1
 8016c4a:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 8016c4e:	e7ee      	b.n	8016c2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 8016c50:	2300      	movs	r3, #0
 8016c52:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 8016c56:	f8db 300c 	ldr.w	r3, [fp, #12]
 8016c5a:	68a5      	ldr	r5, [r4, #8]
 8016c5c:	950f      	str	r5, [sp, #60]	@ 0x3c
 8016c5e:	07de      	lsls	r6, r3, #31
 8016c60:	bf43      	ittte	mi
 8016c62:	981a      	ldrmi	r0, [sp, #104]	@ 0x68
 8016c64:	9a0b      	ldrmi	r2, [sp, #44]	@ 0x2c
 8016c66:	6800      	ldrmi	r0, [r0, #0]
 8016c68:	9a05      	ldrpl	r2, [sp, #20]
 8016c6a:	ea4f 2123 	mov.w	r1, r3, asr #8
 8016c6e:	bf48      	it	mi
 8016c70:	5841      	ldrmi	r1, [r0, r1]
 8016c72:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8016c74:	4401      	add	r1, r0
 8016c76:	9807      	ldr	r0, [sp, #28]
 8016c78:	b138      	cbz	r0, 8016c8a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe8>
 8016c7a:	4288      	cmp	r0, r1
 8016c7c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8016c7e:	bf2c      	ite	cs
 8016c80:	2000      	movcs	r0, #0
 8016c82:	2001      	movcc	r0, #1
 8016c84:	42b0      	cmp	r0, r6
 8016c86:	f000 80b3 	beq.w	8016df0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8016c8a:	0798      	lsls	r0, r3, #30
 8016c8c:	d406      	bmi.n	8016c9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfa>
 8016c8e:	1cbb      	adds	r3, r7, #2
 8016c90:	d102      	bne.n	8016c98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf6>
 8016c92:	07ae      	lsls	r6, r5, #30
 8016c94:	f000 80ae 	beq.w	8016df4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8016c98:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 8016c9c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8016ca0:	ad0d      	add	r5, sp, #52	@ 0x34
 8016ca2:	6803      	ldr	r3, [r0, #0]
 8016ca4:	9503      	str	r5, [sp, #12]
 8016ca6:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8016ca8:	9502      	str	r5, [sp, #8]
 8016caa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016cac:	e9cd 1500 	strd	r1, r5, [sp]
 8016cb0:	4639      	mov	r1, r7
 8016cb2:	69dd      	ldr	r5, [r3, #28]
 8016cb4:	9b06      	ldr	r3, [sp, #24]
 8016cb6:	47a8      	blx	r5
 8016cb8:	7963      	ldrb	r3, [r4, #5]
 8016cba:	f89d 2039 	ldrb.w	r2, [sp, #57]	@ 0x39
 8016cbe:	f89d 503a 	ldrb.w	r5, [sp, #58]	@ 0x3a
 8016cc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	2d06      	cmp	r5, #6
 8016cc8:	7163      	strb	r3, [r4, #5]
 8016cca:	d001      	beq.n	8016cd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12e>
 8016ccc:	2d02      	cmp	r5, #2
 8016cce:	d109      	bne.n	8016ce4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x142>
 8016cd0:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8016cd4:	6021      	str	r1, [r4, #0]
 8016cd6:	7123      	strb	r3, [r4, #4]
 8016cd8:	71a5      	strb	r5, [r4, #6]
 8016cda:	4680      	mov	r8, r0
 8016cdc:	4640      	mov	r0, r8
 8016cde:	b011      	add	sp, #68	@ 0x44
 8016ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce4:	6822      	ldr	r2, [r4, #0]
 8016ce6:	f1b8 0f00 	cmp.w	r8, #0
 8016cea:	d113      	bne.n	8016d14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x172>
 8016cec:	b9a2      	cbnz	r2, 8016d18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 8016cee:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8016cf2:	6021      	str	r1, [r4, #0]
 8016cf4:	7122      	strb	r2, [r4, #4]
 8016cf6:	b121      	cbz	r1, 8016d02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8016cf8:	b11b      	cbz	r3, 8016d02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8016cfa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016cfe:	07dd      	lsls	r5, r3, #31
 8016d00:	d5eb      	bpl.n	8016cda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8016d02:	7963      	ldrb	r3, [r4, #5]
 8016d04:	2b04      	cmp	r3, #4
 8016d06:	d0e8      	beq.n	8016cda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8016d08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d0c:	f1ab 0b08 	sub.w	fp, fp, #8
 8016d10:	4680      	mov	r8, r0
 8016d12:	e790      	b.n	8016c36 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
 8016d14:	2a00      	cmp	r2, #0
 8016d16:	d037      	beq.n	8016d88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e6>
 8016d18:	428a      	cmp	r2, r1
 8016d1a:	d106      	bne.n	8016d2a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8016d1c:	7923      	ldrb	r3, [r4, #4]
 8016d1e:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8016d22:	4313      	orrs	r3, r2
 8016d24:	7123      	strb	r3, [r4, #4]
 8016d26:	4640      	mov	r0, r8
 8016d28:	e7eb      	b.n	8016d02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8016d2a:	b909      	cbnz	r1, 8016d30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18e>
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	d0fa      	beq.n	8016d26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8016d30:	2b03      	cmp	r3, #3
 8016d32:	79a6      	ldrb	r6, [r4, #6]
 8016d34:	d904      	bls.n	8016d40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19e>
 8016d36:	07d9      	lsls	r1, r3, #31
 8016d38:	d529      	bpl.n	8016d8e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 8016d3a:	68a3      	ldr	r3, [r4, #8]
 8016d3c:	079b      	lsls	r3, r3, #30
 8016d3e:	d526      	bpl.n	8016d8e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 8016d40:	b97e      	cbnz	r6, 8016d62 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c0>
 8016d42:	2d03      	cmp	r5, #3
 8016d44:	d905      	bls.n	8016d52 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 8016d46:	07ee      	lsls	r6, r5, #31
 8016d48:	d541      	bpl.n	8016dce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8016d4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016d4e:	0798      	lsls	r0, r3, #30
 8016d50:	d53d      	bpl.n	8016dce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8016d52:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	9806      	ldr	r0, [sp, #24]
 8016d58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016d5a:	4639      	mov	r1, r7
 8016d5c:	f7ff ff0b 	bl	8016b76 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8016d60:	4606      	mov	r6, r0
 8016d62:	b9e5      	cbnz	r5, 8016d9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8016d64:	2e03      	cmp	r6, #3
 8016d66:	d905      	bls.n	8016d74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d2>
 8016d68:	07f1      	lsls	r1, r6, #31
 8016d6a:	d532      	bpl.n	8016dd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8016d6c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016d70:	079a      	lsls	r2, r3, #30
 8016d72:	d52e      	bpl.n	8016dd2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8016d74:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016d76:	9300      	str	r3, [sp, #0]
 8016d78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016d7c:	9806      	ldr	r0, [sp, #24]
 8016d7e:	4639      	mov	r1, r7
 8016d80:	f7ff fef9 	bl	8016b76 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8016d84:	4605      	mov	r5, r0
 8016d86:	e00a      	b.n	8016d9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8016d88:	2900      	cmp	r1, #0
 8016d8a:	d1d1      	bne.n	8016d30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18e>
 8016d8c:	e7cb      	b.n	8016d26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8016d8e:	2e01      	cmp	r6, #1
 8016d90:	bf38      	it	cc
 8016d92:	2601      	movcc	r6, #1
 8016d94:	2d01      	cmp	r5, #1
 8016d96:	bf38      	it	cc
 8016d98:	2501      	movcc	r5, #1
 8016d9a:	b2f6      	uxtb	r6, r6
 8016d9c:	b2ed      	uxtb	r5, r5
 8016d9e:	ea85 0306 	eor.w	r3, r5, r6
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	2b03      	cmp	r3, #3
 8016da6:	d916      	bls.n	8016dd6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8016da8:	2d03      	cmp	r5, #3
 8016daa:	bf81      	itttt	hi
 8016dac:	9b0d      	ldrhi	r3, [sp, #52]	@ 0x34
 8016dae:	6023      	strhi	r3, [r4, #0]
 8016db0:	462e      	movhi	r6, r5
 8016db2:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	@ 0x38
 8016db6:	bf86      	itte	hi
 8016db8:	7123      	strbhi	r3, [r4, #4]
 8016dba:	2000      	movhi	r0, #0
 8016dbc:	4640      	movls	r0, r8
 8016dbe:	07b3      	lsls	r3, r6, #30
 8016dc0:	71a6      	strb	r6, [r4, #6]
 8016dc2:	d402      	bmi.n	8016dca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8016dc4:	f016 0601 	ands.w	r6, r6, #1
 8016dc8:	d19b      	bne.n	8016d02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8016dca:	2000      	movs	r0, #0
 8016dcc:	e785      	b.n	8016cda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8016dce:	2601      	movs	r6, #1
 8016dd0:	e7e5      	b.n	8016d9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8016dd2:	2501      	movs	r5, #1
 8016dd4:	e7e3      	b.n	8016d9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 8016dd6:	4035      	ands	r5, r6
 8016dd8:	b2ed      	uxtb	r5, r5
 8016dda:	2300      	movs	r3, #0
 8016ddc:	2d03      	cmp	r5, #3
 8016dde:	6023      	str	r3, [r4, #0]
 8016de0:	d903      	bls.n	8016dea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 8016de2:	2302      	movs	r3, #2
 8016de4:	71a3      	strb	r3, [r4, #6]
 8016de6:	2001      	movs	r0, #1
 8016de8:	e777      	b.n	8016cda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8016dea:	2001      	movs	r0, #1
 8016dec:	71a0      	strb	r0, [r4, #6]
 8016dee:	e788      	b.n	8016d02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 8016df0:	2301      	movs	r3, #1
 8016df2:	930a      	str	r3, [sp, #40]	@ 0x28
 8016df4:	4640      	mov	r0, r8
 8016df6:	e787      	b.n	8016d08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>

08016df8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8016df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dfc:	b08b      	sub	sp, #44	@ 0x2c
 8016dfe:	4605      	mov	r5, r0
 8016e00:	9104      	str	r1, [sp, #16]
 8016e02:	9201      	str	r2, [sp, #4]
 8016e04:	461c      	mov	r4, r3
 8016e06:	f7ff fcbc 	bl	8016782 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	d162      	bne.n	8016ed4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8016e0e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8016e12:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8016e16:	f019 0f10 	tst.w	r9, #16
 8016e1a:	bf18      	it	ne
 8016e1c:	f8d5 9008 	ldrne.w	r9, [r5, #8]
 8016e20:	f009 0301 	and.w	r3, r9, #1
 8016e24:	eb05 07c8 	add.w	r7, r5, r8, lsl #3
 8016e28:	f04f 0a00 	mov.w	sl, #0
 8016e2c:	9305      	str	r3, [sp, #20]
 8016e2e:	f10d 0b18 	add.w	fp, sp, #24
 8016e32:	f1b8 0f00 	cmp.w	r8, #0
 8016e36:	d104      	bne.n	8016e42 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x4a>
 8016e38:	7920      	ldrb	r0, [r4, #4]
 8016e3a:	3800      	subs	r0, #0
 8016e3c:	bf18      	it	ne
 8016e3e:	2001      	movne	r0, #1
 8016e40:	e049      	b.n	8016ed6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	f8cd a018 	str.w	sl, [sp, #24]
 8016e48:	f002 0301 	and.w	r3, r2, #1
 8016e4c:	9302      	str	r3, [sp, #8]
 8016e4e:	f002 0302 	and.w	r3, r2, #2
 8016e52:	9303      	str	r3, [sp, #12]
 8016e54:	9903      	ldr	r1, [sp, #12]
 8016e56:	9b05      	ldr	r3, [sp, #20]
 8016e58:	f88d a01c 	strb.w	sl, [sp, #28]
 8016e5c:	430b      	orrs	r3, r1
 8016e5e:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 8016e62:	d103      	bne.n	8016e6c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x74>
 8016e64:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e68:	3f08      	subs	r7, #8
 8016e6a:	e7e2      	b.n	8016e32 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3a>
 8016e6c:	9b01      	ldr	r3, [sp, #4]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d034      	beq.n	8016edc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8016e72:	9b02      	ldr	r3, [sp, #8]
 8016e74:	1212      	asrs	r2, r2, #8
 8016e76:	b113      	cbz	r3, 8016e7e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 8016e78:	9b01      	ldr	r3, [sp, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	589a      	ldr	r2, [r3, r2]
 8016e7e:	9b01      	ldr	r3, [sp, #4]
 8016e80:	441a      	add	r2, r3
 8016e82:	68b8      	ldr	r0, [r7, #8]
 8016e84:	9904      	ldr	r1, [sp, #16]
 8016e86:	6803      	ldr	r3, [r0, #0]
 8016e88:	699b      	ldr	r3, [r3, #24]
 8016e8a:	461e      	mov	r6, r3
 8016e8c:	465b      	mov	r3, fp
 8016e8e:	47b0      	blx	r6
 8016e90:	2800      	cmp	r0, #0
 8016e92:	d0e7      	beq.n	8016e64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8016e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e96:	2b08      	cmp	r3, #8
 8016e98:	d103      	bne.n	8016ea2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xaa>
 8016e9a:	9b02      	ldr	r3, [sp, #8]
 8016e9c:	b10b      	cbz	r3, 8016ea2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xaa>
 8016e9e:	68bb      	ldr	r3, [r7, #8]
 8016ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ea2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016ea6:	2b03      	cmp	r3, #3
 8016ea8:	d905      	bls.n	8016eb6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xbe>
 8016eaa:	9a03      	ldr	r2, [sp, #12]
 8016eac:	b91a      	cbnz	r2, 8016eb6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xbe>
 8016eae:	f023 0302 	bic.w	r3, r3, #2
 8016eb2:	f88d 301c 	strb.w	r3, [sp, #28]
 8016eb6:	68e1      	ldr	r1, [r4, #12]
 8016eb8:	b9c1      	cbnz	r1, 8016eec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf4>
 8016eba:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8016ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016ec2:	7923      	ldrb	r3, [r4, #4]
 8016ec4:	2b03      	cmp	r3, #3
 8016ec6:	d905      	bls.n	8016ed4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8016ec8:	079a      	lsls	r2, r3, #30
 8016eca:	d509      	bpl.n	8016ee0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe8>
 8016ecc:	68ab      	ldr	r3, [r5, #8]
 8016ece:	f013 0f01 	tst.w	r3, #1
 8016ed2:	d1c7      	bne.n	8016e64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8016ed4:	2001      	movs	r0, #1
 8016ed6:	b00b      	add	sp, #44	@ 0x2c
 8016ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016edc:	9a01      	ldr	r2, [sp, #4]
 8016ede:	e7d0      	b.n	8016e82 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x8a>
 8016ee0:	07db      	lsls	r3, r3, #31
 8016ee2:	d5f7      	bpl.n	8016ed4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8016ee4:	68ab      	ldr	r3, [r5, #8]
 8016ee6:	f013 0f02 	tst.w	r3, #2
 8016eea:	e7f2      	b.n	8016ed2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xda>
 8016eec:	6823      	ldr	r3, [r4, #0]
 8016eee:	9a06      	ldr	r2, [sp, #24]
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	d004      	beq.n	8016efe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	6023      	str	r3, [r4, #0]
 8016ef8:	2302      	movs	r3, #2
 8016efa:	7123      	strb	r3, [r4, #4]
 8016efc:	e7ea      	b.n	8016ed4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8016efe:	b12b      	cbz	r3, 8016f0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x114>
 8016f00:	7923      	ldrb	r3, [r4, #4]
 8016f02:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8016f06:	4313      	orrs	r3, r2
 8016f08:	7123      	strb	r3, [r4, #4]
 8016f0a:	e7ab      	b.n	8016e64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8016f0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f0e:	2808      	cmp	r0, #8
 8016f10:	d0f2      	beq.n	8016ef8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x100>
 8016f12:	2908      	cmp	r1, #8
 8016f14:	d0f0      	beq.n	8016ef8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x100>
 8016f16:	f7ff fdc9 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d1f0      	bne.n	8016f00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x108>
 8016f1e:	e7eb      	b.n	8016ef8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x100>

08016f20 <_ZSt17__throw_bad_allocv>:
 8016f20:	b508      	push	{r3, lr}
 8016f22:	f000 f8a9 	bl	8017078 <abort>

08016f26 <_ZSt28__throw_bad_array_new_lengthv>:
 8016f26:	b508      	push	{r3, lr}
 8016f28:	f000 f8a6 	bl	8017078 <abort>

08016f2c <_ZSt20__throw_length_errorPKc>:
 8016f2c:	b508      	push	{r3, lr}
 8016f2e:	f000 f8a3 	bl	8017078 <abort>

08016f32 <_ZSt25__throw_bad_function_callv>:
 8016f32:	b508      	push	{r3, lr}
 8016f34:	f000 f8a0 	bl	8017078 <abort>

08016f38 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	4b03      	ldr	r3, [pc, #12]	@ (8016f48 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8016f3c:	6003      	str	r3, [r0, #0]
 8016f3e:	4604      	mov	r4, r0
 8016f40:	f7ff fdaf 	bl	8016aa2 <_ZNSt9type_infoD1Ev>
 8016f44:	4620      	mov	r0, r4
 8016f46:	bd10      	pop	{r4, pc}
 8016f48:	0801a434 	.word	0x0801a434

08016f4c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	4604      	mov	r4, r0
 8016f50:	f7ff fff2 	bl	8016f38 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 8016f54:	4620      	mov	r0, r4
 8016f56:	2108      	movs	r1, #8
 8016f58:	f7ff fc36 	bl	80167c8 <_ZdlPvj>
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	bd10      	pop	{r4, pc}

08016f60 <_ZSt15get_new_handlerv>:
 8016f60:	4b02      	ldr	r3, [pc, #8]	@ (8016f6c <_ZSt15get_new_handlerv+0xc>)
 8016f62:	6818      	ldr	r0, [r3, #0]
 8016f64:	f3bf 8f5b 	dmb	ish
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	20010abc 	.word	0x20010abc

08016f70 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8016f70:	68c0      	ldr	r0, [r0, #12]
 8016f72:	68c9      	ldr	r1, [r1, #12]
 8016f74:	b410      	push	{r4}
 8016f76:	6804      	ldr	r4, [r0, #0]
 8016f78:	6924      	ldr	r4, [r4, #16]
 8016f7a:	3302      	adds	r3, #2
 8016f7c:	46a4      	mov	ip, r4
 8016f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f82:	4760      	bx	ip

08016f84 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 8016f84:	b510      	push	{r4, lr}
 8016f86:	4b03      	ldr	r3, [pc, #12]	@ (8016f94 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 8016f88:	6003      	str	r3, [r0, #0]
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	f7ff fd89 	bl	8016aa2 <_ZNSt9type_infoD1Ev>
 8016f90:	4620      	mov	r0, r4
 8016f92:	bd10      	pop	{r4, pc}
 8016f94:	0801a494 	.word	0x0801a494

08016f98 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 8016f98:	b510      	push	{r4, lr}
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	f7ff fff2 	bl	8016f84 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	2110      	movs	r1, #16
 8016fa4:	f7ff fc10 	bl	80167c8 <_ZdlPvj>
 8016fa8:	4620      	mov	r0, r4
 8016faa:	bd10      	pop	{r4, pc}

08016fac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8016fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	4616      	mov	r6, r2
 8016fb6:	461f      	mov	r7, r3
 8016fb8:	f7ff fd78 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016fbc:	4681      	mov	r9, r0
 8016fbe:	4680      	mov	r8, r0
 8016fc0:	b968      	cbnz	r0, 8016fde <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 8016fc2:	4928      	ldr	r1, [pc, #160]	@ (8017064 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>)
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f7ff fd71 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016fca:	b1f0      	cbz	r0, 801700a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 8016fcc:	6823      	ldr	r3, [r4, #0]
 8016fce:	4926      	ldr	r1, [pc, #152]	@ (8017068 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 8016fd0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016fd4:	f7ff fd6a 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016fd8:	b130      	cbz	r0, 8016fe8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3c>
 8016fda:	f8c6 9000 	str.w	r9, [r6]
 8016fde:	f04f 0801 	mov.w	r8, #1
 8016fe2:	4640      	mov	r0, r8
 8016fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	4920      	ldr	r1, [pc, #128]	@ (801706c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 8016fec:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016ff0:	f7ff fd5c 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 8016ff4:	b148      	cbz	r0, 801700a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5e>
 8016ff6:	68e0      	ldr	r0, [r4, #12]
 8016ff8:	6803      	ldr	r3, [r0, #0]
 8016ffa:	68db      	ldr	r3, [r3, #12]
 8016ffc:	4798      	blx	r3
 8016ffe:	b110      	cbz	r0, 8017006 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5a>
 8017000:	4b1b      	ldr	r3, [pc, #108]	@ (8017070 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 8017002:	6033      	str	r3, [r6, #0]
 8017004:	e7eb      	b.n	8016fde <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 8017006:	4b1b      	ldr	r3, [pc, #108]	@ (8017074 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 8017008:	e7fb      	b.n	8017002 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x56>
 801700a:	682a      	ldr	r2, [r5, #0]
 801700c:	6823      	ldr	r3, [r4, #0]
 801700e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017012:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017016:	f7ff fd49 	bl	8016aac <_ZNKSt9type_info7__equalERKS_>
 801701a:	b300      	cbz	r0, 801705e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb2>
 801701c:	07fa      	lsls	r2, r7, #31
 801701e:	d5e0      	bpl.n	8016fe2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x36>
 8017020:	68ab      	ldr	r3, [r5, #8]
 8017022:	68a1      	ldr	r1, [r4, #8]
 8017024:	f003 0060 	and.w	r0, r3, #96	@ 0x60
 8017028:	f001 0260 	and.w	r2, r1, #96	@ 0x60
 801702c:	ea30 0c02 	bics.w	ip, r0, r2
 8017030:	bf18      	it	ne
 8017032:	4013      	andne	r3, r2
 8017034:	ea23 0301 	bic.w	r3, r3, r1
 8017038:	ea22 0200 	bic.w	r2, r2, r0
 801703c:	431a      	orrs	r2, r3
 801703e:	d1d0      	bne.n	8016fe2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x36>
 8017040:	07cb      	lsls	r3, r1, #31
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8017048:	bf58      	it	pl
 801704a:	f027 0701 	bicpl.w	r7, r7, #1
 801704e:	463b      	mov	r3, r7
 8017050:	4632      	mov	r2, r6
 8017052:	4629      	mov	r1, r5
 8017054:	4620      	mov	r0, r4
 8017056:	46f4      	mov	ip, lr
 8017058:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801705c:	4760      	bx	ip
 801705e:	4680      	mov	r8, r0
 8017060:	e7bf      	b.n	8016fe2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x36>
 8017062:	bf00      	nop
 8017064:	0801a44c 	.word	0x0801a44c
 8017068:	0801a2e4 	.word	0x0801a2e4
 801706c:	0801a4ec 	.word	0x0801a4ec
 8017070:	0801a4b4 	.word	0x0801a4b4
 8017074:	0801a4b0 	.word	0x0801a4b0

08017078 <abort>:
 8017078:	b508      	push	{r3, lr}
 801707a:	2006      	movs	r0, #6
 801707c:	f000 fe6a 	bl	8017d54 <raise>
 8017080:	2001      	movs	r0, #1
 8017082:	f7eb fb53 	bl	800272c <_exit>
	...

08017088 <malloc>:
 8017088:	4b02      	ldr	r3, [pc, #8]	@ (8017094 <malloc+0xc>)
 801708a:	4601      	mov	r1, r0
 801708c:	6818      	ldr	r0, [r3, #0]
 801708e:	f000 b82d 	b.w	80170ec <_malloc_r>
 8017092:	bf00      	nop
 8017094:	20000040 	.word	0x20000040

08017098 <free>:
 8017098:	4b02      	ldr	r3, [pc, #8]	@ (80170a4 <free+0xc>)
 801709a:	4601      	mov	r1, r0
 801709c:	6818      	ldr	r0, [r3, #0]
 801709e:	f001 bdaf 	b.w	8018c00 <_free_r>
 80170a2:	bf00      	nop
 80170a4:	20000040 	.word	0x20000040

080170a8 <sbrk_aligned>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	4e0f      	ldr	r6, [pc, #60]	@ (80170e8 <sbrk_aligned+0x40>)
 80170ac:	460c      	mov	r4, r1
 80170ae:	6831      	ldr	r1, [r6, #0]
 80170b0:	4605      	mov	r5, r0
 80170b2:	b911      	cbnz	r1, 80170ba <sbrk_aligned+0x12>
 80170b4:	f000 fef8 	bl	8017ea8 <_sbrk_r>
 80170b8:	6030      	str	r0, [r6, #0]
 80170ba:	4621      	mov	r1, r4
 80170bc:	4628      	mov	r0, r5
 80170be:	f000 fef3 	bl	8017ea8 <_sbrk_r>
 80170c2:	1c43      	adds	r3, r0, #1
 80170c4:	d103      	bne.n	80170ce <sbrk_aligned+0x26>
 80170c6:	f04f 34ff 	mov.w	r4, #4294967295
 80170ca:	4620      	mov	r0, r4
 80170cc:	bd70      	pop	{r4, r5, r6, pc}
 80170ce:	1cc4      	adds	r4, r0, #3
 80170d0:	f024 0403 	bic.w	r4, r4, #3
 80170d4:	42a0      	cmp	r0, r4
 80170d6:	d0f8      	beq.n	80170ca <sbrk_aligned+0x22>
 80170d8:	1a21      	subs	r1, r4, r0
 80170da:	4628      	mov	r0, r5
 80170dc:	f000 fee4 	bl	8017ea8 <_sbrk_r>
 80170e0:	3001      	adds	r0, #1
 80170e2:	d1f2      	bne.n	80170ca <sbrk_aligned+0x22>
 80170e4:	e7ef      	b.n	80170c6 <sbrk_aligned+0x1e>
 80170e6:	bf00      	nop
 80170e8:	20010ac0 	.word	0x20010ac0

080170ec <_malloc_r>:
 80170ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170f0:	1ccd      	adds	r5, r1, #3
 80170f2:	f025 0503 	bic.w	r5, r5, #3
 80170f6:	3508      	adds	r5, #8
 80170f8:	2d0c      	cmp	r5, #12
 80170fa:	bf38      	it	cc
 80170fc:	250c      	movcc	r5, #12
 80170fe:	2d00      	cmp	r5, #0
 8017100:	4606      	mov	r6, r0
 8017102:	db01      	blt.n	8017108 <_malloc_r+0x1c>
 8017104:	42a9      	cmp	r1, r5
 8017106:	d904      	bls.n	8017112 <_malloc_r+0x26>
 8017108:	230c      	movs	r3, #12
 801710a:	6033      	str	r3, [r6, #0]
 801710c:	2000      	movs	r0, #0
 801710e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80171e8 <_malloc_r+0xfc>
 8017116:	f000 f869 	bl	80171ec <__malloc_lock>
 801711a:	f8d8 3000 	ldr.w	r3, [r8]
 801711e:	461c      	mov	r4, r3
 8017120:	bb44      	cbnz	r4, 8017174 <_malloc_r+0x88>
 8017122:	4629      	mov	r1, r5
 8017124:	4630      	mov	r0, r6
 8017126:	f7ff ffbf 	bl	80170a8 <sbrk_aligned>
 801712a:	1c43      	adds	r3, r0, #1
 801712c:	4604      	mov	r4, r0
 801712e:	d158      	bne.n	80171e2 <_malloc_r+0xf6>
 8017130:	f8d8 4000 	ldr.w	r4, [r8]
 8017134:	4627      	mov	r7, r4
 8017136:	2f00      	cmp	r7, #0
 8017138:	d143      	bne.n	80171c2 <_malloc_r+0xd6>
 801713a:	2c00      	cmp	r4, #0
 801713c:	d04b      	beq.n	80171d6 <_malloc_r+0xea>
 801713e:	6823      	ldr	r3, [r4, #0]
 8017140:	4639      	mov	r1, r7
 8017142:	4630      	mov	r0, r6
 8017144:	eb04 0903 	add.w	r9, r4, r3
 8017148:	f000 feae 	bl	8017ea8 <_sbrk_r>
 801714c:	4581      	cmp	r9, r0
 801714e:	d142      	bne.n	80171d6 <_malloc_r+0xea>
 8017150:	6821      	ldr	r1, [r4, #0]
 8017152:	1a6d      	subs	r5, r5, r1
 8017154:	4629      	mov	r1, r5
 8017156:	4630      	mov	r0, r6
 8017158:	f7ff ffa6 	bl	80170a8 <sbrk_aligned>
 801715c:	3001      	adds	r0, #1
 801715e:	d03a      	beq.n	80171d6 <_malloc_r+0xea>
 8017160:	6823      	ldr	r3, [r4, #0]
 8017162:	442b      	add	r3, r5
 8017164:	6023      	str	r3, [r4, #0]
 8017166:	f8d8 3000 	ldr.w	r3, [r8]
 801716a:	685a      	ldr	r2, [r3, #4]
 801716c:	bb62      	cbnz	r2, 80171c8 <_malloc_r+0xdc>
 801716e:	f8c8 7000 	str.w	r7, [r8]
 8017172:	e00f      	b.n	8017194 <_malloc_r+0xa8>
 8017174:	6822      	ldr	r2, [r4, #0]
 8017176:	1b52      	subs	r2, r2, r5
 8017178:	d420      	bmi.n	80171bc <_malloc_r+0xd0>
 801717a:	2a0b      	cmp	r2, #11
 801717c:	d917      	bls.n	80171ae <_malloc_r+0xc2>
 801717e:	1961      	adds	r1, r4, r5
 8017180:	42a3      	cmp	r3, r4
 8017182:	6025      	str	r5, [r4, #0]
 8017184:	bf18      	it	ne
 8017186:	6059      	strne	r1, [r3, #4]
 8017188:	6863      	ldr	r3, [r4, #4]
 801718a:	bf08      	it	eq
 801718c:	f8c8 1000 	streq.w	r1, [r8]
 8017190:	5162      	str	r2, [r4, r5]
 8017192:	604b      	str	r3, [r1, #4]
 8017194:	4630      	mov	r0, r6
 8017196:	f000 f82f 	bl	80171f8 <__malloc_unlock>
 801719a:	f104 000b 	add.w	r0, r4, #11
 801719e:	1d23      	adds	r3, r4, #4
 80171a0:	f020 0007 	bic.w	r0, r0, #7
 80171a4:	1ac2      	subs	r2, r0, r3
 80171a6:	bf1c      	itt	ne
 80171a8:	1a1b      	subne	r3, r3, r0
 80171aa:	50a3      	strne	r3, [r4, r2]
 80171ac:	e7af      	b.n	801710e <_malloc_r+0x22>
 80171ae:	6862      	ldr	r2, [r4, #4]
 80171b0:	42a3      	cmp	r3, r4
 80171b2:	bf0c      	ite	eq
 80171b4:	f8c8 2000 	streq.w	r2, [r8]
 80171b8:	605a      	strne	r2, [r3, #4]
 80171ba:	e7eb      	b.n	8017194 <_malloc_r+0xa8>
 80171bc:	4623      	mov	r3, r4
 80171be:	6864      	ldr	r4, [r4, #4]
 80171c0:	e7ae      	b.n	8017120 <_malloc_r+0x34>
 80171c2:	463c      	mov	r4, r7
 80171c4:	687f      	ldr	r7, [r7, #4]
 80171c6:	e7b6      	b.n	8017136 <_malloc_r+0x4a>
 80171c8:	461a      	mov	r2, r3
 80171ca:	685b      	ldr	r3, [r3, #4]
 80171cc:	42a3      	cmp	r3, r4
 80171ce:	d1fb      	bne.n	80171c8 <_malloc_r+0xdc>
 80171d0:	2300      	movs	r3, #0
 80171d2:	6053      	str	r3, [r2, #4]
 80171d4:	e7de      	b.n	8017194 <_malloc_r+0xa8>
 80171d6:	230c      	movs	r3, #12
 80171d8:	6033      	str	r3, [r6, #0]
 80171da:	4630      	mov	r0, r6
 80171dc:	f000 f80c 	bl	80171f8 <__malloc_unlock>
 80171e0:	e794      	b.n	801710c <_malloc_r+0x20>
 80171e2:	6005      	str	r5, [r0, #0]
 80171e4:	e7d6      	b.n	8017194 <_malloc_r+0xa8>
 80171e6:	bf00      	nop
 80171e8:	20010ac4 	.word	0x20010ac4

080171ec <__malloc_lock>:
 80171ec:	4801      	ldr	r0, [pc, #4]	@ (80171f4 <__malloc_lock+0x8>)
 80171ee:	f000 bea8 	b.w	8017f42 <__retarget_lock_acquire_recursive>
 80171f2:	bf00      	nop
 80171f4:	20010c08 	.word	0x20010c08

080171f8 <__malloc_unlock>:
 80171f8:	4801      	ldr	r0, [pc, #4]	@ (8017200 <__malloc_unlock+0x8>)
 80171fa:	f000 bea3 	b.w	8017f44 <__retarget_lock_release_recursive>
 80171fe:	bf00      	nop
 8017200:	20010c08 	.word	0x20010c08

08017204 <__cvt>:
 8017204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017208:	ec57 6b10 	vmov	r6, r7, d0
 801720c:	2f00      	cmp	r7, #0
 801720e:	460c      	mov	r4, r1
 8017210:	4619      	mov	r1, r3
 8017212:	463b      	mov	r3, r7
 8017214:	bfbb      	ittet	lt
 8017216:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801721a:	461f      	movlt	r7, r3
 801721c:	2300      	movge	r3, #0
 801721e:	232d      	movlt	r3, #45	@ 0x2d
 8017220:	700b      	strb	r3, [r1, #0]
 8017222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017224:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8017228:	4691      	mov	r9, r2
 801722a:	f023 0820 	bic.w	r8, r3, #32
 801722e:	bfbc      	itt	lt
 8017230:	4632      	movlt	r2, r6
 8017232:	4616      	movlt	r6, r2
 8017234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017238:	d005      	beq.n	8017246 <__cvt+0x42>
 801723a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801723e:	d100      	bne.n	8017242 <__cvt+0x3e>
 8017240:	3401      	adds	r4, #1
 8017242:	2102      	movs	r1, #2
 8017244:	e000      	b.n	8017248 <__cvt+0x44>
 8017246:	2103      	movs	r1, #3
 8017248:	ab03      	add	r3, sp, #12
 801724a:	9301      	str	r3, [sp, #4]
 801724c:	ab02      	add	r3, sp, #8
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	ec47 6b10 	vmov	d0, r6, r7
 8017254:	4653      	mov	r3, sl
 8017256:	4622      	mov	r2, r4
 8017258:	f000 ff0e 	bl	8018078 <_dtoa_r>
 801725c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017260:	4605      	mov	r5, r0
 8017262:	d119      	bne.n	8017298 <__cvt+0x94>
 8017264:	f019 0f01 	tst.w	r9, #1
 8017268:	d00e      	beq.n	8017288 <__cvt+0x84>
 801726a:	eb00 0904 	add.w	r9, r0, r4
 801726e:	2200      	movs	r2, #0
 8017270:	2300      	movs	r3, #0
 8017272:	4630      	mov	r0, r6
 8017274:	4639      	mov	r1, r7
 8017276:	f7e9 fc5f 	bl	8000b38 <__aeabi_dcmpeq>
 801727a:	b108      	cbz	r0, 8017280 <__cvt+0x7c>
 801727c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017280:	2230      	movs	r2, #48	@ 0x30
 8017282:	9b03      	ldr	r3, [sp, #12]
 8017284:	454b      	cmp	r3, r9
 8017286:	d31e      	bcc.n	80172c6 <__cvt+0xc2>
 8017288:	9b03      	ldr	r3, [sp, #12]
 801728a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801728c:	1b5b      	subs	r3, r3, r5
 801728e:	4628      	mov	r0, r5
 8017290:	6013      	str	r3, [r2, #0]
 8017292:	b004      	add	sp, #16
 8017294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801729c:	eb00 0904 	add.w	r9, r0, r4
 80172a0:	d1e5      	bne.n	801726e <__cvt+0x6a>
 80172a2:	7803      	ldrb	r3, [r0, #0]
 80172a4:	2b30      	cmp	r3, #48	@ 0x30
 80172a6:	d10a      	bne.n	80172be <__cvt+0xba>
 80172a8:	2200      	movs	r2, #0
 80172aa:	2300      	movs	r3, #0
 80172ac:	4630      	mov	r0, r6
 80172ae:	4639      	mov	r1, r7
 80172b0:	f7e9 fc42 	bl	8000b38 <__aeabi_dcmpeq>
 80172b4:	b918      	cbnz	r0, 80172be <__cvt+0xba>
 80172b6:	f1c4 0401 	rsb	r4, r4, #1
 80172ba:	f8ca 4000 	str.w	r4, [sl]
 80172be:	f8da 3000 	ldr.w	r3, [sl]
 80172c2:	4499      	add	r9, r3
 80172c4:	e7d3      	b.n	801726e <__cvt+0x6a>
 80172c6:	1c59      	adds	r1, r3, #1
 80172c8:	9103      	str	r1, [sp, #12]
 80172ca:	701a      	strb	r2, [r3, #0]
 80172cc:	e7d9      	b.n	8017282 <__cvt+0x7e>

080172ce <__exponent>:
 80172ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172d0:	2900      	cmp	r1, #0
 80172d2:	bfba      	itte	lt
 80172d4:	4249      	neglt	r1, r1
 80172d6:	232d      	movlt	r3, #45	@ 0x2d
 80172d8:	232b      	movge	r3, #43	@ 0x2b
 80172da:	2909      	cmp	r1, #9
 80172dc:	7002      	strb	r2, [r0, #0]
 80172de:	7043      	strb	r3, [r0, #1]
 80172e0:	dd29      	ble.n	8017336 <__exponent+0x68>
 80172e2:	f10d 0307 	add.w	r3, sp, #7
 80172e6:	461d      	mov	r5, r3
 80172e8:	270a      	movs	r7, #10
 80172ea:	461a      	mov	r2, r3
 80172ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80172f0:	fb07 1416 	mls	r4, r7, r6, r1
 80172f4:	3430      	adds	r4, #48	@ 0x30
 80172f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80172fa:	460c      	mov	r4, r1
 80172fc:	2c63      	cmp	r4, #99	@ 0x63
 80172fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8017302:	4631      	mov	r1, r6
 8017304:	dcf1      	bgt.n	80172ea <__exponent+0x1c>
 8017306:	3130      	adds	r1, #48	@ 0x30
 8017308:	1e94      	subs	r4, r2, #2
 801730a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801730e:	1c41      	adds	r1, r0, #1
 8017310:	4623      	mov	r3, r4
 8017312:	42ab      	cmp	r3, r5
 8017314:	d30a      	bcc.n	801732c <__exponent+0x5e>
 8017316:	f10d 0309 	add.w	r3, sp, #9
 801731a:	1a9b      	subs	r3, r3, r2
 801731c:	42ac      	cmp	r4, r5
 801731e:	bf88      	it	hi
 8017320:	2300      	movhi	r3, #0
 8017322:	3302      	adds	r3, #2
 8017324:	4403      	add	r3, r0
 8017326:	1a18      	subs	r0, r3, r0
 8017328:	b003      	add	sp, #12
 801732a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801732c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017330:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017334:	e7ed      	b.n	8017312 <__exponent+0x44>
 8017336:	2330      	movs	r3, #48	@ 0x30
 8017338:	3130      	adds	r1, #48	@ 0x30
 801733a:	7083      	strb	r3, [r0, #2]
 801733c:	70c1      	strb	r1, [r0, #3]
 801733e:	1d03      	adds	r3, r0, #4
 8017340:	e7f1      	b.n	8017326 <__exponent+0x58>
	...

08017344 <_printf_float>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	b08d      	sub	sp, #52	@ 0x34
 801734a:	460c      	mov	r4, r1
 801734c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017350:	4616      	mov	r6, r2
 8017352:	461f      	mov	r7, r3
 8017354:	4605      	mov	r5, r0
 8017356:	f000 fd05 	bl	8017d64 <_localeconv_r>
 801735a:	6803      	ldr	r3, [r0, #0]
 801735c:	9304      	str	r3, [sp, #16]
 801735e:	4618      	mov	r0, r3
 8017360:	f7e8 ffbe 	bl	80002e0 <strlen>
 8017364:	2300      	movs	r3, #0
 8017366:	930a      	str	r3, [sp, #40]	@ 0x28
 8017368:	f8d8 3000 	ldr.w	r3, [r8]
 801736c:	9005      	str	r0, [sp, #20]
 801736e:	3307      	adds	r3, #7
 8017370:	f023 0307 	bic.w	r3, r3, #7
 8017374:	f103 0208 	add.w	r2, r3, #8
 8017378:	f894 a018 	ldrb.w	sl, [r4, #24]
 801737c:	f8d4 b000 	ldr.w	fp, [r4]
 8017380:	f8c8 2000 	str.w	r2, [r8]
 8017384:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017388:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801738c:	9307      	str	r3, [sp, #28]
 801738e:	f8cd 8018 	str.w	r8, [sp, #24]
 8017392:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8017396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801739a:	4b9c      	ldr	r3, [pc, #624]	@ (801760c <_printf_float+0x2c8>)
 801739c:	f04f 32ff 	mov.w	r2, #4294967295
 80173a0:	f7e9 fbfc 	bl	8000b9c <__aeabi_dcmpun>
 80173a4:	bb70      	cbnz	r0, 8017404 <_printf_float+0xc0>
 80173a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173aa:	4b98      	ldr	r3, [pc, #608]	@ (801760c <_printf_float+0x2c8>)
 80173ac:	f04f 32ff 	mov.w	r2, #4294967295
 80173b0:	f7e9 fbd6 	bl	8000b60 <__aeabi_dcmple>
 80173b4:	bb30      	cbnz	r0, 8017404 <_printf_float+0xc0>
 80173b6:	2200      	movs	r2, #0
 80173b8:	2300      	movs	r3, #0
 80173ba:	4640      	mov	r0, r8
 80173bc:	4649      	mov	r1, r9
 80173be:	f7e9 fbc5 	bl	8000b4c <__aeabi_dcmplt>
 80173c2:	b110      	cbz	r0, 80173ca <_printf_float+0x86>
 80173c4:	232d      	movs	r3, #45	@ 0x2d
 80173c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80173ca:	4a91      	ldr	r2, [pc, #580]	@ (8017610 <_printf_float+0x2cc>)
 80173cc:	4b91      	ldr	r3, [pc, #580]	@ (8017614 <_printf_float+0x2d0>)
 80173ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80173d2:	bf94      	ite	ls
 80173d4:	4690      	movls	r8, r2
 80173d6:	4698      	movhi	r8, r3
 80173d8:	2303      	movs	r3, #3
 80173da:	6123      	str	r3, [r4, #16]
 80173dc:	f02b 0304 	bic.w	r3, fp, #4
 80173e0:	6023      	str	r3, [r4, #0]
 80173e2:	f04f 0900 	mov.w	r9, #0
 80173e6:	9700      	str	r7, [sp, #0]
 80173e8:	4633      	mov	r3, r6
 80173ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80173ec:	4621      	mov	r1, r4
 80173ee:	4628      	mov	r0, r5
 80173f0:	f000 f9d2 	bl	8017798 <_printf_common>
 80173f4:	3001      	adds	r0, #1
 80173f6:	f040 808d 	bne.w	8017514 <_printf_float+0x1d0>
 80173fa:	f04f 30ff 	mov.w	r0, #4294967295
 80173fe:	b00d      	add	sp, #52	@ 0x34
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	4642      	mov	r2, r8
 8017406:	464b      	mov	r3, r9
 8017408:	4640      	mov	r0, r8
 801740a:	4649      	mov	r1, r9
 801740c:	f7e9 fbc6 	bl	8000b9c <__aeabi_dcmpun>
 8017410:	b140      	cbz	r0, 8017424 <_printf_float+0xe0>
 8017412:	464b      	mov	r3, r9
 8017414:	2b00      	cmp	r3, #0
 8017416:	bfbc      	itt	lt
 8017418:	232d      	movlt	r3, #45	@ 0x2d
 801741a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801741e:	4a7e      	ldr	r2, [pc, #504]	@ (8017618 <_printf_float+0x2d4>)
 8017420:	4b7e      	ldr	r3, [pc, #504]	@ (801761c <_printf_float+0x2d8>)
 8017422:	e7d4      	b.n	80173ce <_printf_float+0x8a>
 8017424:	6863      	ldr	r3, [r4, #4]
 8017426:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801742a:	9206      	str	r2, [sp, #24]
 801742c:	1c5a      	adds	r2, r3, #1
 801742e:	d13b      	bne.n	80174a8 <_printf_float+0x164>
 8017430:	2306      	movs	r3, #6
 8017432:	6063      	str	r3, [r4, #4]
 8017434:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017438:	2300      	movs	r3, #0
 801743a:	6022      	str	r2, [r4, #0]
 801743c:	9303      	str	r3, [sp, #12]
 801743e:	ab0a      	add	r3, sp, #40	@ 0x28
 8017440:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017444:	ab09      	add	r3, sp, #36	@ 0x24
 8017446:	9300      	str	r3, [sp, #0]
 8017448:	6861      	ldr	r1, [r4, #4]
 801744a:	ec49 8b10 	vmov	d0, r8, r9
 801744e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017452:	4628      	mov	r0, r5
 8017454:	f7ff fed6 	bl	8017204 <__cvt>
 8017458:	9b06      	ldr	r3, [sp, #24]
 801745a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801745c:	2b47      	cmp	r3, #71	@ 0x47
 801745e:	4680      	mov	r8, r0
 8017460:	d129      	bne.n	80174b6 <_printf_float+0x172>
 8017462:	1cc8      	adds	r0, r1, #3
 8017464:	db02      	blt.n	801746c <_printf_float+0x128>
 8017466:	6863      	ldr	r3, [r4, #4]
 8017468:	4299      	cmp	r1, r3
 801746a:	dd41      	ble.n	80174f0 <_printf_float+0x1ac>
 801746c:	f1aa 0a02 	sub.w	sl, sl, #2
 8017470:	fa5f fa8a 	uxtb.w	sl, sl
 8017474:	3901      	subs	r1, #1
 8017476:	4652      	mov	r2, sl
 8017478:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801747c:	9109      	str	r1, [sp, #36]	@ 0x24
 801747e:	f7ff ff26 	bl	80172ce <__exponent>
 8017482:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017484:	1813      	adds	r3, r2, r0
 8017486:	2a01      	cmp	r2, #1
 8017488:	4681      	mov	r9, r0
 801748a:	6123      	str	r3, [r4, #16]
 801748c:	dc02      	bgt.n	8017494 <_printf_float+0x150>
 801748e:	6822      	ldr	r2, [r4, #0]
 8017490:	07d2      	lsls	r2, r2, #31
 8017492:	d501      	bpl.n	8017498 <_printf_float+0x154>
 8017494:	3301      	adds	r3, #1
 8017496:	6123      	str	r3, [r4, #16]
 8017498:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801749c:	2b00      	cmp	r3, #0
 801749e:	d0a2      	beq.n	80173e6 <_printf_float+0xa2>
 80174a0:	232d      	movs	r3, #45	@ 0x2d
 80174a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80174a6:	e79e      	b.n	80173e6 <_printf_float+0xa2>
 80174a8:	9a06      	ldr	r2, [sp, #24]
 80174aa:	2a47      	cmp	r2, #71	@ 0x47
 80174ac:	d1c2      	bne.n	8017434 <_printf_float+0xf0>
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d1c0      	bne.n	8017434 <_printf_float+0xf0>
 80174b2:	2301      	movs	r3, #1
 80174b4:	e7bd      	b.n	8017432 <_printf_float+0xee>
 80174b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80174ba:	d9db      	bls.n	8017474 <_printf_float+0x130>
 80174bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80174c0:	d118      	bne.n	80174f4 <_printf_float+0x1b0>
 80174c2:	2900      	cmp	r1, #0
 80174c4:	6863      	ldr	r3, [r4, #4]
 80174c6:	dd0b      	ble.n	80174e0 <_printf_float+0x19c>
 80174c8:	6121      	str	r1, [r4, #16]
 80174ca:	b913      	cbnz	r3, 80174d2 <_printf_float+0x18e>
 80174cc:	6822      	ldr	r2, [r4, #0]
 80174ce:	07d0      	lsls	r0, r2, #31
 80174d0:	d502      	bpl.n	80174d8 <_printf_float+0x194>
 80174d2:	3301      	adds	r3, #1
 80174d4:	440b      	add	r3, r1
 80174d6:	6123      	str	r3, [r4, #16]
 80174d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80174da:	f04f 0900 	mov.w	r9, #0
 80174de:	e7db      	b.n	8017498 <_printf_float+0x154>
 80174e0:	b913      	cbnz	r3, 80174e8 <_printf_float+0x1a4>
 80174e2:	6822      	ldr	r2, [r4, #0]
 80174e4:	07d2      	lsls	r2, r2, #31
 80174e6:	d501      	bpl.n	80174ec <_printf_float+0x1a8>
 80174e8:	3302      	adds	r3, #2
 80174ea:	e7f4      	b.n	80174d6 <_printf_float+0x192>
 80174ec:	2301      	movs	r3, #1
 80174ee:	e7f2      	b.n	80174d6 <_printf_float+0x192>
 80174f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80174f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174f6:	4299      	cmp	r1, r3
 80174f8:	db05      	blt.n	8017506 <_printf_float+0x1c2>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	6121      	str	r1, [r4, #16]
 80174fe:	07d8      	lsls	r0, r3, #31
 8017500:	d5ea      	bpl.n	80174d8 <_printf_float+0x194>
 8017502:	1c4b      	adds	r3, r1, #1
 8017504:	e7e7      	b.n	80174d6 <_printf_float+0x192>
 8017506:	2900      	cmp	r1, #0
 8017508:	bfd4      	ite	le
 801750a:	f1c1 0202 	rsble	r2, r1, #2
 801750e:	2201      	movgt	r2, #1
 8017510:	4413      	add	r3, r2
 8017512:	e7e0      	b.n	80174d6 <_printf_float+0x192>
 8017514:	6823      	ldr	r3, [r4, #0]
 8017516:	055a      	lsls	r2, r3, #21
 8017518:	d407      	bmi.n	801752a <_printf_float+0x1e6>
 801751a:	6923      	ldr	r3, [r4, #16]
 801751c:	4642      	mov	r2, r8
 801751e:	4631      	mov	r1, r6
 8017520:	4628      	mov	r0, r5
 8017522:	47b8      	blx	r7
 8017524:	3001      	adds	r0, #1
 8017526:	d12b      	bne.n	8017580 <_printf_float+0x23c>
 8017528:	e767      	b.n	80173fa <_printf_float+0xb6>
 801752a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801752e:	f240 80dd 	bls.w	80176ec <_printf_float+0x3a8>
 8017532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017536:	2200      	movs	r2, #0
 8017538:	2300      	movs	r3, #0
 801753a:	f7e9 fafd 	bl	8000b38 <__aeabi_dcmpeq>
 801753e:	2800      	cmp	r0, #0
 8017540:	d033      	beq.n	80175aa <_printf_float+0x266>
 8017542:	4a37      	ldr	r2, [pc, #220]	@ (8017620 <_printf_float+0x2dc>)
 8017544:	2301      	movs	r3, #1
 8017546:	4631      	mov	r1, r6
 8017548:	4628      	mov	r0, r5
 801754a:	47b8      	blx	r7
 801754c:	3001      	adds	r0, #1
 801754e:	f43f af54 	beq.w	80173fa <_printf_float+0xb6>
 8017552:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017556:	4543      	cmp	r3, r8
 8017558:	db02      	blt.n	8017560 <_printf_float+0x21c>
 801755a:	6823      	ldr	r3, [r4, #0]
 801755c:	07d8      	lsls	r0, r3, #31
 801755e:	d50f      	bpl.n	8017580 <_printf_float+0x23c>
 8017560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017564:	4631      	mov	r1, r6
 8017566:	4628      	mov	r0, r5
 8017568:	47b8      	blx	r7
 801756a:	3001      	adds	r0, #1
 801756c:	f43f af45 	beq.w	80173fa <_printf_float+0xb6>
 8017570:	f04f 0900 	mov.w	r9, #0
 8017574:	f108 38ff 	add.w	r8, r8, #4294967295
 8017578:	f104 0a1a 	add.w	sl, r4, #26
 801757c:	45c8      	cmp	r8, r9
 801757e:	dc09      	bgt.n	8017594 <_printf_float+0x250>
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	079b      	lsls	r3, r3, #30
 8017584:	f100 8103 	bmi.w	801778e <_printf_float+0x44a>
 8017588:	68e0      	ldr	r0, [r4, #12]
 801758a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801758c:	4298      	cmp	r0, r3
 801758e:	bfb8      	it	lt
 8017590:	4618      	movlt	r0, r3
 8017592:	e734      	b.n	80173fe <_printf_float+0xba>
 8017594:	2301      	movs	r3, #1
 8017596:	4652      	mov	r2, sl
 8017598:	4631      	mov	r1, r6
 801759a:	4628      	mov	r0, r5
 801759c:	47b8      	blx	r7
 801759e:	3001      	adds	r0, #1
 80175a0:	f43f af2b 	beq.w	80173fa <_printf_float+0xb6>
 80175a4:	f109 0901 	add.w	r9, r9, #1
 80175a8:	e7e8      	b.n	801757c <_printf_float+0x238>
 80175aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	dc39      	bgt.n	8017624 <_printf_float+0x2e0>
 80175b0:	4a1b      	ldr	r2, [pc, #108]	@ (8017620 <_printf_float+0x2dc>)
 80175b2:	2301      	movs	r3, #1
 80175b4:	4631      	mov	r1, r6
 80175b6:	4628      	mov	r0, r5
 80175b8:	47b8      	blx	r7
 80175ba:	3001      	adds	r0, #1
 80175bc:	f43f af1d 	beq.w	80173fa <_printf_float+0xb6>
 80175c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80175c4:	ea59 0303 	orrs.w	r3, r9, r3
 80175c8:	d102      	bne.n	80175d0 <_printf_float+0x28c>
 80175ca:	6823      	ldr	r3, [r4, #0]
 80175cc:	07d9      	lsls	r1, r3, #31
 80175ce:	d5d7      	bpl.n	8017580 <_printf_float+0x23c>
 80175d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175d4:	4631      	mov	r1, r6
 80175d6:	4628      	mov	r0, r5
 80175d8:	47b8      	blx	r7
 80175da:	3001      	adds	r0, #1
 80175dc:	f43f af0d 	beq.w	80173fa <_printf_float+0xb6>
 80175e0:	f04f 0a00 	mov.w	sl, #0
 80175e4:	f104 0b1a 	add.w	fp, r4, #26
 80175e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175ea:	425b      	negs	r3, r3
 80175ec:	4553      	cmp	r3, sl
 80175ee:	dc01      	bgt.n	80175f4 <_printf_float+0x2b0>
 80175f0:	464b      	mov	r3, r9
 80175f2:	e793      	b.n	801751c <_printf_float+0x1d8>
 80175f4:	2301      	movs	r3, #1
 80175f6:	465a      	mov	r2, fp
 80175f8:	4631      	mov	r1, r6
 80175fa:	4628      	mov	r0, r5
 80175fc:	47b8      	blx	r7
 80175fe:	3001      	adds	r0, #1
 8017600:	f43f aefb 	beq.w	80173fa <_printf_float+0xb6>
 8017604:	f10a 0a01 	add.w	sl, sl, #1
 8017608:	e7ee      	b.n	80175e8 <_printf_float+0x2a4>
 801760a:	bf00      	nop
 801760c:	7fefffff 	.word	0x7fefffff
 8017610:	0801a4f8 	.word	0x0801a4f8
 8017614:	0801a4fc 	.word	0x0801a4fc
 8017618:	0801a500 	.word	0x0801a500
 801761c:	0801a504 	.word	0x0801a504
 8017620:	0801a508 	.word	0x0801a508
 8017624:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017626:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801762a:	4553      	cmp	r3, sl
 801762c:	bfa8      	it	ge
 801762e:	4653      	movge	r3, sl
 8017630:	2b00      	cmp	r3, #0
 8017632:	4699      	mov	r9, r3
 8017634:	dc36      	bgt.n	80176a4 <_printf_float+0x360>
 8017636:	f04f 0b00 	mov.w	fp, #0
 801763a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801763e:	f104 021a 	add.w	r2, r4, #26
 8017642:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017644:	9306      	str	r3, [sp, #24]
 8017646:	eba3 0309 	sub.w	r3, r3, r9
 801764a:	455b      	cmp	r3, fp
 801764c:	dc31      	bgt.n	80176b2 <_printf_float+0x36e>
 801764e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017650:	459a      	cmp	sl, r3
 8017652:	dc3a      	bgt.n	80176ca <_printf_float+0x386>
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	07da      	lsls	r2, r3, #31
 8017658:	d437      	bmi.n	80176ca <_printf_float+0x386>
 801765a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801765c:	ebaa 0903 	sub.w	r9, sl, r3
 8017660:	9b06      	ldr	r3, [sp, #24]
 8017662:	ebaa 0303 	sub.w	r3, sl, r3
 8017666:	4599      	cmp	r9, r3
 8017668:	bfa8      	it	ge
 801766a:	4699      	movge	r9, r3
 801766c:	f1b9 0f00 	cmp.w	r9, #0
 8017670:	dc33      	bgt.n	80176da <_printf_float+0x396>
 8017672:	f04f 0800 	mov.w	r8, #0
 8017676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801767a:	f104 0b1a 	add.w	fp, r4, #26
 801767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017680:	ebaa 0303 	sub.w	r3, sl, r3
 8017684:	eba3 0309 	sub.w	r3, r3, r9
 8017688:	4543      	cmp	r3, r8
 801768a:	f77f af79 	ble.w	8017580 <_printf_float+0x23c>
 801768e:	2301      	movs	r3, #1
 8017690:	465a      	mov	r2, fp
 8017692:	4631      	mov	r1, r6
 8017694:	4628      	mov	r0, r5
 8017696:	47b8      	blx	r7
 8017698:	3001      	adds	r0, #1
 801769a:	f43f aeae 	beq.w	80173fa <_printf_float+0xb6>
 801769e:	f108 0801 	add.w	r8, r8, #1
 80176a2:	e7ec      	b.n	801767e <_printf_float+0x33a>
 80176a4:	4642      	mov	r2, r8
 80176a6:	4631      	mov	r1, r6
 80176a8:	4628      	mov	r0, r5
 80176aa:	47b8      	blx	r7
 80176ac:	3001      	adds	r0, #1
 80176ae:	d1c2      	bne.n	8017636 <_printf_float+0x2f2>
 80176b0:	e6a3      	b.n	80173fa <_printf_float+0xb6>
 80176b2:	2301      	movs	r3, #1
 80176b4:	4631      	mov	r1, r6
 80176b6:	4628      	mov	r0, r5
 80176b8:	9206      	str	r2, [sp, #24]
 80176ba:	47b8      	blx	r7
 80176bc:	3001      	adds	r0, #1
 80176be:	f43f ae9c 	beq.w	80173fa <_printf_float+0xb6>
 80176c2:	9a06      	ldr	r2, [sp, #24]
 80176c4:	f10b 0b01 	add.w	fp, fp, #1
 80176c8:	e7bb      	b.n	8017642 <_printf_float+0x2fe>
 80176ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80176ce:	4631      	mov	r1, r6
 80176d0:	4628      	mov	r0, r5
 80176d2:	47b8      	blx	r7
 80176d4:	3001      	adds	r0, #1
 80176d6:	d1c0      	bne.n	801765a <_printf_float+0x316>
 80176d8:	e68f      	b.n	80173fa <_printf_float+0xb6>
 80176da:	9a06      	ldr	r2, [sp, #24]
 80176dc:	464b      	mov	r3, r9
 80176de:	4442      	add	r2, r8
 80176e0:	4631      	mov	r1, r6
 80176e2:	4628      	mov	r0, r5
 80176e4:	47b8      	blx	r7
 80176e6:	3001      	adds	r0, #1
 80176e8:	d1c3      	bne.n	8017672 <_printf_float+0x32e>
 80176ea:	e686      	b.n	80173fa <_printf_float+0xb6>
 80176ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80176f0:	f1ba 0f01 	cmp.w	sl, #1
 80176f4:	dc01      	bgt.n	80176fa <_printf_float+0x3b6>
 80176f6:	07db      	lsls	r3, r3, #31
 80176f8:	d536      	bpl.n	8017768 <_printf_float+0x424>
 80176fa:	2301      	movs	r3, #1
 80176fc:	4642      	mov	r2, r8
 80176fe:	4631      	mov	r1, r6
 8017700:	4628      	mov	r0, r5
 8017702:	47b8      	blx	r7
 8017704:	3001      	adds	r0, #1
 8017706:	f43f ae78 	beq.w	80173fa <_printf_float+0xb6>
 801770a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801770e:	4631      	mov	r1, r6
 8017710:	4628      	mov	r0, r5
 8017712:	47b8      	blx	r7
 8017714:	3001      	adds	r0, #1
 8017716:	f43f ae70 	beq.w	80173fa <_printf_float+0xb6>
 801771a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801771e:	2200      	movs	r2, #0
 8017720:	2300      	movs	r3, #0
 8017722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017726:	f7e9 fa07 	bl	8000b38 <__aeabi_dcmpeq>
 801772a:	b9c0      	cbnz	r0, 801775e <_printf_float+0x41a>
 801772c:	4653      	mov	r3, sl
 801772e:	f108 0201 	add.w	r2, r8, #1
 8017732:	4631      	mov	r1, r6
 8017734:	4628      	mov	r0, r5
 8017736:	47b8      	blx	r7
 8017738:	3001      	adds	r0, #1
 801773a:	d10c      	bne.n	8017756 <_printf_float+0x412>
 801773c:	e65d      	b.n	80173fa <_printf_float+0xb6>
 801773e:	2301      	movs	r3, #1
 8017740:	465a      	mov	r2, fp
 8017742:	4631      	mov	r1, r6
 8017744:	4628      	mov	r0, r5
 8017746:	47b8      	blx	r7
 8017748:	3001      	adds	r0, #1
 801774a:	f43f ae56 	beq.w	80173fa <_printf_float+0xb6>
 801774e:	f108 0801 	add.w	r8, r8, #1
 8017752:	45d0      	cmp	r8, sl
 8017754:	dbf3      	blt.n	801773e <_printf_float+0x3fa>
 8017756:	464b      	mov	r3, r9
 8017758:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801775c:	e6df      	b.n	801751e <_printf_float+0x1da>
 801775e:	f04f 0800 	mov.w	r8, #0
 8017762:	f104 0b1a 	add.w	fp, r4, #26
 8017766:	e7f4      	b.n	8017752 <_printf_float+0x40e>
 8017768:	2301      	movs	r3, #1
 801776a:	4642      	mov	r2, r8
 801776c:	e7e1      	b.n	8017732 <_printf_float+0x3ee>
 801776e:	2301      	movs	r3, #1
 8017770:	464a      	mov	r2, r9
 8017772:	4631      	mov	r1, r6
 8017774:	4628      	mov	r0, r5
 8017776:	47b8      	blx	r7
 8017778:	3001      	adds	r0, #1
 801777a:	f43f ae3e 	beq.w	80173fa <_printf_float+0xb6>
 801777e:	f108 0801 	add.w	r8, r8, #1
 8017782:	68e3      	ldr	r3, [r4, #12]
 8017784:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017786:	1a5b      	subs	r3, r3, r1
 8017788:	4543      	cmp	r3, r8
 801778a:	dcf0      	bgt.n	801776e <_printf_float+0x42a>
 801778c:	e6fc      	b.n	8017588 <_printf_float+0x244>
 801778e:	f04f 0800 	mov.w	r8, #0
 8017792:	f104 0919 	add.w	r9, r4, #25
 8017796:	e7f4      	b.n	8017782 <_printf_float+0x43e>

08017798 <_printf_common>:
 8017798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801779c:	4616      	mov	r6, r2
 801779e:	4698      	mov	r8, r3
 80177a0:	688a      	ldr	r2, [r1, #8]
 80177a2:	690b      	ldr	r3, [r1, #16]
 80177a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80177a8:	4293      	cmp	r3, r2
 80177aa:	bfb8      	it	lt
 80177ac:	4613      	movlt	r3, r2
 80177ae:	6033      	str	r3, [r6, #0]
 80177b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80177b4:	4607      	mov	r7, r0
 80177b6:	460c      	mov	r4, r1
 80177b8:	b10a      	cbz	r2, 80177be <_printf_common+0x26>
 80177ba:	3301      	adds	r3, #1
 80177bc:	6033      	str	r3, [r6, #0]
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	0699      	lsls	r1, r3, #26
 80177c2:	bf42      	ittt	mi
 80177c4:	6833      	ldrmi	r3, [r6, #0]
 80177c6:	3302      	addmi	r3, #2
 80177c8:	6033      	strmi	r3, [r6, #0]
 80177ca:	6825      	ldr	r5, [r4, #0]
 80177cc:	f015 0506 	ands.w	r5, r5, #6
 80177d0:	d106      	bne.n	80177e0 <_printf_common+0x48>
 80177d2:	f104 0a19 	add.w	sl, r4, #25
 80177d6:	68e3      	ldr	r3, [r4, #12]
 80177d8:	6832      	ldr	r2, [r6, #0]
 80177da:	1a9b      	subs	r3, r3, r2
 80177dc:	42ab      	cmp	r3, r5
 80177de:	dc26      	bgt.n	801782e <_printf_common+0x96>
 80177e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80177e4:	6822      	ldr	r2, [r4, #0]
 80177e6:	3b00      	subs	r3, #0
 80177e8:	bf18      	it	ne
 80177ea:	2301      	movne	r3, #1
 80177ec:	0692      	lsls	r2, r2, #26
 80177ee:	d42b      	bmi.n	8017848 <_printf_common+0xb0>
 80177f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80177f4:	4641      	mov	r1, r8
 80177f6:	4638      	mov	r0, r7
 80177f8:	47c8      	blx	r9
 80177fa:	3001      	adds	r0, #1
 80177fc:	d01e      	beq.n	801783c <_printf_common+0xa4>
 80177fe:	6823      	ldr	r3, [r4, #0]
 8017800:	6922      	ldr	r2, [r4, #16]
 8017802:	f003 0306 	and.w	r3, r3, #6
 8017806:	2b04      	cmp	r3, #4
 8017808:	bf02      	ittt	eq
 801780a:	68e5      	ldreq	r5, [r4, #12]
 801780c:	6833      	ldreq	r3, [r6, #0]
 801780e:	1aed      	subeq	r5, r5, r3
 8017810:	68a3      	ldr	r3, [r4, #8]
 8017812:	bf0c      	ite	eq
 8017814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017818:	2500      	movne	r5, #0
 801781a:	4293      	cmp	r3, r2
 801781c:	bfc4      	itt	gt
 801781e:	1a9b      	subgt	r3, r3, r2
 8017820:	18ed      	addgt	r5, r5, r3
 8017822:	2600      	movs	r6, #0
 8017824:	341a      	adds	r4, #26
 8017826:	42b5      	cmp	r5, r6
 8017828:	d11a      	bne.n	8017860 <_printf_common+0xc8>
 801782a:	2000      	movs	r0, #0
 801782c:	e008      	b.n	8017840 <_printf_common+0xa8>
 801782e:	2301      	movs	r3, #1
 8017830:	4652      	mov	r2, sl
 8017832:	4641      	mov	r1, r8
 8017834:	4638      	mov	r0, r7
 8017836:	47c8      	blx	r9
 8017838:	3001      	adds	r0, #1
 801783a:	d103      	bne.n	8017844 <_printf_common+0xac>
 801783c:	f04f 30ff 	mov.w	r0, #4294967295
 8017840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017844:	3501      	adds	r5, #1
 8017846:	e7c6      	b.n	80177d6 <_printf_common+0x3e>
 8017848:	18e1      	adds	r1, r4, r3
 801784a:	1c5a      	adds	r2, r3, #1
 801784c:	2030      	movs	r0, #48	@ 0x30
 801784e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017852:	4422      	add	r2, r4
 8017854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801785c:	3302      	adds	r3, #2
 801785e:	e7c7      	b.n	80177f0 <_printf_common+0x58>
 8017860:	2301      	movs	r3, #1
 8017862:	4622      	mov	r2, r4
 8017864:	4641      	mov	r1, r8
 8017866:	4638      	mov	r0, r7
 8017868:	47c8      	blx	r9
 801786a:	3001      	adds	r0, #1
 801786c:	d0e6      	beq.n	801783c <_printf_common+0xa4>
 801786e:	3601      	adds	r6, #1
 8017870:	e7d9      	b.n	8017826 <_printf_common+0x8e>
	...

08017874 <_printf_i>:
 8017874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017878:	7e0f      	ldrb	r7, [r1, #24]
 801787a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801787c:	2f78      	cmp	r7, #120	@ 0x78
 801787e:	4691      	mov	r9, r2
 8017880:	4680      	mov	r8, r0
 8017882:	460c      	mov	r4, r1
 8017884:	469a      	mov	sl, r3
 8017886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801788a:	d807      	bhi.n	801789c <_printf_i+0x28>
 801788c:	2f62      	cmp	r7, #98	@ 0x62
 801788e:	d80a      	bhi.n	80178a6 <_printf_i+0x32>
 8017890:	2f00      	cmp	r7, #0
 8017892:	f000 80d2 	beq.w	8017a3a <_printf_i+0x1c6>
 8017896:	2f58      	cmp	r7, #88	@ 0x58
 8017898:	f000 80b9 	beq.w	8017a0e <_printf_i+0x19a>
 801789c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80178a4:	e03a      	b.n	801791c <_printf_i+0xa8>
 80178a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80178aa:	2b15      	cmp	r3, #21
 80178ac:	d8f6      	bhi.n	801789c <_printf_i+0x28>
 80178ae:	a101      	add	r1, pc, #4	@ (adr r1, 80178b4 <_printf_i+0x40>)
 80178b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80178b4:	0801790d 	.word	0x0801790d
 80178b8:	08017921 	.word	0x08017921
 80178bc:	0801789d 	.word	0x0801789d
 80178c0:	0801789d 	.word	0x0801789d
 80178c4:	0801789d 	.word	0x0801789d
 80178c8:	0801789d 	.word	0x0801789d
 80178cc:	08017921 	.word	0x08017921
 80178d0:	0801789d 	.word	0x0801789d
 80178d4:	0801789d 	.word	0x0801789d
 80178d8:	0801789d 	.word	0x0801789d
 80178dc:	0801789d 	.word	0x0801789d
 80178e0:	08017a21 	.word	0x08017a21
 80178e4:	0801794b 	.word	0x0801794b
 80178e8:	080179db 	.word	0x080179db
 80178ec:	0801789d 	.word	0x0801789d
 80178f0:	0801789d 	.word	0x0801789d
 80178f4:	08017a43 	.word	0x08017a43
 80178f8:	0801789d 	.word	0x0801789d
 80178fc:	0801794b 	.word	0x0801794b
 8017900:	0801789d 	.word	0x0801789d
 8017904:	0801789d 	.word	0x0801789d
 8017908:	080179e3 	.word	0x080179e3
 801790c:	6833      	ldr	r3, [r6, #0]
 801790e:	1d1a      	adds	r2, r3, #4
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	6032      	str	r2, [r6, #0]
 8017914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801791c:	2301      	movs	r3, #1
 801791e:	e09d      	b.n	8017a5c <_printf_i+0x1e8>
 8017920:	6833      	ldr	r3, [r6, #0]
 8017922:	6820      	ldr	r0, [r4, #0]
 8017924:	1d19      	adds	r1, r3, #4
 8017926:	6031      	str	r1, [r6, #0]
 8017928:	0606      	lsls	r6, r0, #24
 801792a:	d501      	bpl.n	8017930 <_printf_i+0xbc>
 801792c:	681d      	ldr	r5, [r3, #0]
 801792e:	e003      	b.n	8017938 <_printf_i+0xc4>
 8017930:	0645      	lsls	r5, r0, #25
 8017932:	d5fb      	bpl.n	801792c <_printf_i+0xb8>
 8017934:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017938:	2d00      	cmp	r5, #0
 801793a:	da03      	bge.n	8017944 <_printf_i+0xd0>
 801793c:	232d      	movs	r3, #45	@ 0x2d
 801793e:	426d      	negs	r5, r5
 8017940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017944:	4859      	ldr	r0, [pc, #356]	@ (8017aac <_printf_i+0x238>)
 8017946:	230a      	movs	r3, #10
 8017948:	e011      	b.n	801796e <_printf_i+0xfa>
 801794a:	6821      	ldr	r1, [r4, #0]
 801794c:	6833      	ldr	r3, [r6, #0]
 801794e:	0608      	lsls	r0, r1, #24
 8017950:	f853 5b04 	ldr.w	r5, [r3], #4
 8017954:	d402      	bmi.n	801795c <_printf_i+0xe8>
 8017956:	0649      	lsls	r1, r1, #25
 8017958:	bf48      	it	mi
 801795a:	b2ad      	uxthmi	r5, r5
 801795c:	2f6f      	cmp	r7, #111	@ 0x6f
 801795e:	4853      	ldr	r0, [pc, #332]	@ (8017aac <_printf_i+0x238>)
 8017960:	6033      	str	r3, [r6, #0]
 8017962:	bf14      	ite	ne
 8017964:	230a      	movne	r3, #10
 8017966:	2308      	moveq	r3, #8
 8017968:	2100      	movs	r1, #0
 801796a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801796e:	6866      	ldr	r6, [r4, #4]
 8017970:	60a6      	str	r6, [r4, #8]
 8017972:	2e00      	cmp	r6, #0
 8017974:	bfa2      	ittt	ge
 8017976:	6821      	ldrge	r1, [r4, #0]
 8017978:	f021 0104 	bicge.w	r1, r1, #4
 801797c:	6021      	strge	r1, [r4, #0]
 801797e:	b90d      	cbnz	r5, 8017984 <_printf_i+0x110>
 8017980:	2e00      	cmp	r6, #0
 8017982:	d04b      	beq.n	8017a1c <_printf_i+0x1a8>
 8017984:	4616      	mov	r6, r2
 8017986:	fbb5 f1f3 	udiv	r1, r5, r3
 801798a:	fb03 5711 	mls	r7, r3, r1, r5
 801798e:	5dc7      	ldrb	r7, [r0, r7]
 8017990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017994:	462f      	mov	r7, r5
 8017996:	42bb      	cmp	r3, r7
 8017998:	460d      	mov	r5, r1
 801799a:	d9f4      	bls.n	8017986 <_printf_i+0x112>
 801799c:	2b08      	cmp	r3, #8
 801799e:	d10b      	bne.n	80179b8 <_printf_i+0x144>
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	07df      	lsls	r7, r3, #31
 80179a4:	d508      	bpl.n	80179b8 <_printf_i+0x144>
 80179a6:	6923      	ldr	r3, [r4, #16]
 80179a8:	6861      	ldr	r1, [r4, #4]
 80179aa:	4299      	cmp	r1, r3
 80179ac:	bfde      	ittt	le
 80179ae:	2330      	movle	r3, #48	@ 0x30
 80179b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80179b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80179b8:	1b92      	subs	r2, r2, r6
 80179ba:	6122      	str	r2, [r4, #16]
 80179bc:	f8cd a000 	str.w	sl, [sp]
 80179c0:	464b      	mov	r3, r9
 80179c2:	aa03      	add	r2, sp, #12
 80179c4:	4621      	mov	r1, r4
 80179c6:	4640      	mov	r0, r8
 80179c8:	f7ff fee6 	bl	8017798 <_printf_common>
 80179cc:	3001      	adds	r0, #1
 80179ce:	d14a      	bne.n	8017a66 <_printf_i+0x1f2>
 80179d0:	f04f 30ff 	mov.w	r0, #4294967295
 80179d4:	b004      	add	sp, #16
 80179d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179da:	6823      	ldr	r3, [r4, #0]
 80179dc:	f043 0320 	orr.w	r3, r3, #32
 80179e0:	6023      	str	r3, [r4, #0]
 80179e2:	4833      	ldr	r0, [pc, #204]	@ (8017ab0 <_printf_i+0x23c>)
 80179e4:	2778      	movs	r7, #120	@ 0x78
 80179e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80179ea:	6823      	ldr	r3, [r4, #0]
 80179ec:	6831      	ldr	r1, [r6, #0]
 80179ee:	061f      	lsls	r7, r3, #24
 80179f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80179f4:	d402      	bmi.n	80179fc <_printf_i+0x188>
 80179f6:	065f      	lsls	r7, r3, #25
 80179f8:	bf48      	it	mi
 80179fa:	b2ad      	uxthmi	r5, r5
 80179fc:	6031      	str	r1, [r6, #0]
 80179fe:	07d9      	lsls	r1, r3, #31
 8017a00:	bf44      	itt	mi
 8017a02:	f043 0320 	orrmi.w	r3, r3, #32
 8017a06:	6023      	strmi	r3, [r4, #0]
 8017a08:	b11d      	cbz	r5, 8017a12 <_printf_i+0x19e>
 8017a0a:	2310      	movs	r3, #16
 8017a0c:	e7ac      	b.n	8017968 <_printf_i+0xf4>
 8017a0e:	4827      	ldr	r0, [pc, #156]	@ (8017aac <_printf_i+0x238>)
 8017a10:	e7e9      	b.n	80179e6 <_printf_i+0x172>
 8017a12:	6823      	ldr	r3, [r4, #0]
 8017a14:	f023 0320 	bic.w	r3, r3, #32
 8017a18:	6023      	str	r3, [r4, #0]
 8017a1a:	e7f6      	b.n	8017a0a <_printf_i+0x196>
 8017a1c:	4616      	mov	r6, r2
 8017a1e:	e7bd      	b.n	801799c <_printf_i+0x128>
 8017a20:	6833      	ldr	r3, [r6, #0]
 8017a22:	6825      	ldr	r5, [r4, #0]
 8017a24:	6961      	ldr	r1, [r4, #20]
 8017a26:	1d18      	adds	r0, r3, #4
 8017a28:	6030      	str	r0, [r6, #0]
 8017a2a:	062e      	lsls	r6, r5, #24
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	d501      	bpl.n	8017a34 <_printf_i+0x1c0>
 8017a30:	6019      	str	r1, [r3, #0]
 8017a32:	e002      	b.n	8017a3a <_printf_i+0x1c6>
 8017a34:	0668      	lsls	r0, r5, #25
 8017a36:	d5fb      	bpl.n	8017a30 <_printf_i+0x1bc>
 8017a38:	8019      	strh	r1, [r3, #0]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	6123      	str	r3, [r4, #16]
 8017a3e:	4616      	mov	r6, r2
 8017a40:	e7bc      	b.n	80179bc <_printf_i+0x148>
 8017a42:	6833      	ldr	r3, [r6, #0]
 8017a44:	1d1a      	adds	r2, r3, #4
 8017a46:	6032      	str	r2, [r6, #0]
 8017a48:	681e      	ldr	r6, [r3, #0]
 8017a4a:	6862      	ldr	r2, [r4, #4]
 8017a4c:	2100      	movs	r1, #0
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f7e8 fbf6 	bl	8000240 <memchr>
 8017a54:	b108      	cbz	r0, 8017a5a <_printf_i+0x1e6>
 8017a56:	1b80      	subs	r0, r0, r6
 8017a58:	6060      	str	r0, [r4, #4]
 8017a5a:	6863      	ldr	r3, [r4, #4]
 8017a5c:	6123      	str	r3, [r4, #16]
 8017a5e:	2300      	movs	r3, #0
 8017a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a64:	e7aa      	b.n	80179bc <_printf_i+0x148>
 8017a66:	6923      	ldr	r3, [r4, #16]
 8017a68:	4632      	mov	r2, r6
 8017a6a:	4649      	mov	r1, r9
 8017a6c:	4640      	mov	r0, r8
 8017a6e:	47d0      	blx	sl
 8017a70:	3001      	adds	r0, #1
 8017a72:	d0ad      	beq.n	80179d0 <_printf_i+0x15c>
 8017a74:	6823      	ldr	r3, [r4, #0]
 8017a76:	079b      	lsls	r3, r3, #30
 8017a78:	d413      	bmi.n	8017aa2 <_printf_i+0x22e>
 8017a7a:	68e0      	ldr	r0, [r4, #12]
 8017a7c:	9b03      	ldr	r3, [sp, #12]
 8017a7e:	4298      	cmp	r0, r3
 8017a80:	bfb8      	it	lt
 8017a82:	4618      	movlt	r0, r3
 8017a84:	e7a6      	b.n	80179d4 <_printf_i+0x160>
 8017a86:	2301      	movs	r3, #1
 8017a88:	4632      	mov	r2, r6
 8017a8a:	4649      	mov	r1, r9
 8017a8c:	4640      	mov	r0, r8
 8017a8e:	47d0      	blx	sl
 8017a90:	3001      	adds	r0, #1
 8017a92:	d09d      	beq.n	80179d0 <_printf_i+0x15c>
 8017a94:	3501      	adds	r5, #1
 8017a96:	68e3      	ldr	r3, [r4, #12]
 8017a98:	9903      	ldr	r1, [sp, #12]
 8017a9a:	1a5b      	subs	r3, r3, r1
 8017a9c:	42ab      	cmp	r3, r5
 8017a9e:	dcf2      	bgt.n	8017a86 <_printf_i+0x212>
 8017aa0:	e7eb      	b.n	8017a7a <_printf_i+0x206>
 8017aa2:	2500      	movs	r5, #0
 8017aa4:	f104 0619 	add.w	r6, r4, #25
 8017aa8:	e7f5      	b.n	8017a96 <_printf_i+0x222>
 8017aaa:	bf00      	nop
 8017aac:	0801a50a 	.word	0x0801a50a
 8017ab0:	0801a51b 	.word	0x0801a51b

08017ab4 <std>:
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	b510      	push	{r4, lr}
 8017ab8:	4604      	mov	r4, r0
 8017aba:	e9c0 3300 	strd	r3, r3, [r0]
 8017abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ac2:	6083      	str	r3, [r0, #8]
 8017ac4:	8181      	strh	r1, [r0, #12]
 8017ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8017ac8:	81c2      	strh	r2, [r0, #14]
 8017aca:	6183      	str	r3, [r0, #24]
 8017acc:	4619      	mov	r1, r3
 8017ace:	2208      	movs	r2, #8
 8017ad0:	305c      	adds	r0, #92	@ 0x5c
 8017ad2:	f000 f90e 	bl	8017cf2 <memset>
 8017ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8017b0c <std+0x58>)
 8017ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8017ada:	4b0d      	ldr	r3, [pc, #52]	@ (8017b10 <std+0x5c>)
 8017adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017ade:	4b0d      	ldr	r3, [pc, #52]	@ (8017b14 <std+0x60>)
 8017ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8017b18 <std+0x64>)
 8017ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8017ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8017b1c <std+0x68>)
 8017ae8:	6224      	str	r4, [r4, #32]
 8017aea:	429c      	cmp	r4, r3
 8017aec:	d006      	beq.n	8017afc <std+0x48>
 8017aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017af2:	4294      	cmp	r4, r2
 8017af4:	d002      	beq.n	8017afc <std+0x48>
 8017af6:	33d0      	adds	r3, #208	@ 0xd0
 8017af8:	429c      	cmp	r4, r3
 8017afa:	d105      	bne.n	8017b08 <std+0x54>
 8017afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b04:	f000 ba1c 	b.w	8017f40 <__retarget_lock_init_recursive>
 8017b08:	bd10      	pop	{r4, pc}
 8017b0a:	bf00      	nop
 8017b0c:	08017c39 	.word	0x08017c39
 8017b10:	08017c5b 	.word	0x08017c5b
 8017b14:	08017c93 	.word	0x08017c93
 8017b18:	08017cb7 	.word	0x08017cb7
 8017b1c:	20010ac8 	.word	0x20010ac8

08017b20 <stdio_exit_handler>:
 8017b20:	4a02      	ldr	r2, [pc, #8]	@ (8017b2c <stdio_exit_handler+0xc>)
 8017b22:	4903      	ldr	r1, [pc, #12]	@ (8017b30 <stdio_exit_handler+0x10>)
 8017b24:	4803      	ldr	r0, [pc, #12]	@ (8017b34 <stdio_exit_handler+0x14>)
 8017b26:	f000 b869 	b.w	8017bfc <_fwalk_sglue>
 8017b2a:	bf00      	nop
 8017b2c:	20000034 	.word	0x20000034
 8017b30:	080194a1 	.word	0x080194a1
 8017b34:	20000044 	.word	0x20000044

08017b38 <cleanup_stdio>:
 8017b38:	6841      	ldr	r1, [r0, #4]
 8017b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8017b6c <cleanup_stdio+0x34>)
 8017b3c:	4299      	cmp	r1, r3
 8017b3e:	b510      	push	{r4, lr}
 8017b40:	4604      	mov	r4, r0
 8017b42:	d001      	beq.n	8017b48 <cleanup_stdio+0x10>
 8017b44:	f001 fcac 	bl	80194a0 <_fflush_r>
 8017b48:	68a1      	ldr	r1, [r4, #8]
 8017b4a:	4b09      	ldr	r3, [pc, #36]	@ (8017b70 <cleanup_stdio+0x38>)
 8017b4c:	4299      	cmp	r1, r3
 8017b4e:	d002      	beq.n	8017b56 <cleanup_stdio+0x1e>
 8017b50:	4620      	mov	r0, r4
 8017b52:	f001 fca5 	bl	80194a0 <_fflush_r>
 8017b56:	68e1      	ldr	r1, [r4, #12]
 8017b58:	4b06      	ldr	r3, [pc, #24]	@ (8017b74 <cleanup_stdio+0x3c>)
 8017b5a:	4299      	cmp	r1, r3
 8017b5c:	d004      	beq.n	8017b68 <cleanup_stdio+0x30>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b64:	f001 bc9c 	b.w	80194a0 <_fflush_r>
 8017b68:	bd10      	pop	{r4, pc}
 8017b6a:	bf00      	nop
 8017b6c:	20010ac8 	.word	0x20010ac8
 8017b70:	20010b30 	.word	0x20010b30
 8017b74:	20010b98 	.word	0x20010b98

08017b78 <global_stdio_init.part.0>:
 8017b78:	b510      	push	{r4, lr}
 8017b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8017ba8 <global_stdio_init.part.0+0x30>)
 8017b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8017bac <global_stdio_init.part.0+0x34>)
 8017b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8017bb0 <global_stdio_init.part.0+0x38>)
 8017b80:	601a      	str	r2, [r3, #0]
 8017b82:	4620      	mov	r0, r4
 8017b84:	2200      	movs	r2, #0
 8017b86:	2104      	movs	r1, #4
 8017b88:	f7ff ff94 	bl	8017ab4 <std>
 8017b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017b90:	2201      	movs	r2, #1
 8017b92:	2109      	movs	r1, #9
 8017b94:	f7ff ff8e 	bl	8017ab4 <std>
 8017b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017b9c:	2202      	movs	r2, #2
 8017b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ba2:	2112      	movs	r1, #18
 8017ba4:	f7ff bf86 	b.w	8017ab4 <std>
 8017ba8:	20010c00 	.word	0x20010c00
 8017bac:	20010ac8 	.word	0x20010ac8
 8017bb0:	08017b21 	.word	0x08017b21

08017bb4 <__sfp_lock_acquire>:
 8017bb4:	4801      	ldr	r0, [pc, #4]	@ (8017bbc <__sfp_lock_acquire+0x8>)
 8017bb6:	f000 b9c4 	b.w	8017f42 <__retarget_lock_acquire_recursive>
 8017bba:	bf00      	nop
 8017bbc:	20010c09 	.word	0x20010c09

08017bc0 <__sfp_lock_release>:
 8017bc0:	4801      	ldr	r0, [pc, #4]	@ (8017bc8 <__sfp_lock_release+0x8>)
 8017bc2:	f000 b9bf 	b.w	8017f44 <__retarget_lock_release_recursive>
 8017bc6:	bf00      	nop
 8017bc8:	20010c09 	.word	0x20010c09

08017bcc <__sinit>:
 8017bcc:	b510      	push	{r4, lr}
 8017bce:	4604      	mov	r4, r0
 8017bd0:	f7ff fff0 	bl	8017bb4 <__sfp_lock_acquire>
 8017bd4:	6a23      	ldr	r3, [r4, #32]
 8017bd6:	b11b      	cbz	r3, 8017be0 <__sinit+0x14>
 8017bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bdc:	f7ff bff0 	b.w	8017bc0 <__sfp_lock_release>
 8017be0:	4b04      	ldr	r3, [pc, #16]	@ (8017bf4 <__sinit+0x28>)
 8017be2:	6223      	str	r3, [r4, #32]
 8017be4:	4b04      	ldr	r3, [pc, #16]	@ (8017bf8 <__sinit+0x2c>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d1f5      	bne.n	8017bd8 <__sinit+0xc>
 8017bec:	f7ff ffc4 	bl	8017b78 <global_stdio_init.part.0>
 8017bf0:	e7f2      	b.n	8017bd8 <__sinit+0xc>
 8017bf2:	bf00      	nop
 8017bf4:	08017b39 	.word	0x08017b39
 8017bf8:	20010c00 	.word	0x20010c00

08017bfc <_fwalk_sglue>:
 8017bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c00:	4607      	mov	r7, r0
 8017c02:	4688      	mov	r8, r1
 8017c04:	4614      	mov	r4, r2
 8017c06:	2600      	movs	r6, #0
 8017c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8017c10:	d505      	bpl.n	8017c1e <_fwalk_sglue+0x22>
 8017c12:	6824      	ldr	r4, [r4, #0]
 8017c14:	2c00      	cmp	r4, #0
 8017c16:	d1f7      	bne.n	8017c08 <_fwalk_sglue+0xc>
 8017c18:	4630      	mov	r0, r6
 8017c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c1e:	89ab      	ldrh	r3, [r5, #12]
 8017c20:	2b01      	cmp	r3, #1
 8017c22:	d907      	bls.n	8017c34 <_fwalk_sglue+0x38>
 8017c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c28:	3301      	adds	r3, #1
 8017c2a:	d003      	beq.n	8017c34 <_fwalk_sglue+0x38>
 8017c2c:	4629      	mov	r1, r5
 8017c2e:	4638      	mov	r0, r7
 8017c30:	47c0      	blx	r8
 8017c32:	4306      	orrs	r6, r0
 8017c34:	3568      	adds	r5, #104	@ 0x68
 8017c36:	e7e9      	b.n	8017c0c <_fwalk_sglue+0x10>

08017c38 <__sread>:
 8017c38:	b510      	push	{r4, lr}
 8017c3a:	460c      	mov	r4, r1
 8017c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c40:	f000 f90c 	bl	8017e5c <_read_r>
 8017c44:	2800      	cmp	r0, #0
 8017c46:	bfab      	itete	ge
 8017c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8017c4c:	181b      	addge	r3, r3, r0
 8017c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017c52:	bfac      	ite	ge
 8017c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017c56:	81a3      	strhlt	r3, [r4, #12]
 8017c58:	bd10      	pop	{r4, pc}

08017c5a <__swrite>:
 8017c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c5e:	461f      	mov	r7, r3
 8017c60:	898b      	ldrh	r3, [r1, #12]
 8017c62:	05db      	lsls	r3, r3, #23
 8017c64:	4605      	mov	r5, r0
 8017c66:	460c      	mov	r4, r1
 8017c68:	4616      	mov	r6, r2
 8017c6a:	d505      	bpl.n	8017c78 <__swrite+0x1e>
 8017c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c70:	2302      	movs	r3, #2
 8017c72:	2200      	movs	r2, #0
 8017c74:	f000 f8e0 	bl	8017e38 <_lseek_r>
 8017c78:	89a3      	ldrh	r3, [r4, #12]
 8017c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c82:	81a3      	strh	r3, [r4, #12]
 8017c84:	4632      	mov	r2, r6
 8017c86:	463b      	mov	r3, r7
 8017c88:	4628      	mov	r0, r5
 8017c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c8e:	f000 b91b 	b.w	8017ec8 <_write_r>

08017c92 <__sseek>:
 8017c92:	b510      	push	{r4, lr}
 8017c94:	460c      	mov	r4, r1
 8017c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c9a:	f000 f8cd 	bl	8017e38 <_lseek_r>
 8017c9e:	1c43      	adds	r3, r0, #1
 8017ca0:	89a3      	ldrh	r3, [r4, #12]
 8017ca2:	bf15      	itete	ne
 8017ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017cae:	81a3      	strheq	r3, [r4, #12]
 8017cb0:	bf18      	it	ne
 8017cb2:	81a3      	strhne	r3, [r4, #12]
 8017cb4:	bd10      	pop	{r4, pc}

08017cb6 <__sclose>:
 8017cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cba:	f000 b857 	b.w	8017d6c <_close_r>

08017cbe <memmove>:
 8017cbe:	4288      	cmp	r0, r1
 8017cc0:	b510      	push	{r4, lr}
 8017cc2:	eb01 0402 	add.w	r4, r1, r2
 8017cc6:	d902      	bls.n	8017cce <memmove+0x10>
 8017cc8:	4284      	cmp	r4, r0
 8017cca:	4623      	mov	r3, r4
 8017ccc:	d807      	bhi.n	8017cde <memmove+0x20>
 8017cce:	1e43      	subs	r3, r0, #1
 8017cd0:	42a1      	cmp	r1, r4
 8017cd2:	d008      	beq.n	8017ce6 <memmove+0x28>
 8017cd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cdc:	e7f8      	b.n	8017cd0 <memmove+0x12>
 8017cde:	4402      	add	r2, r0
 8017ce0:	4601      	mov	r1, r0
 8017ce2:	428a      	cmp	r2, r1
 8017ce4:	d100      	bne.n	8017ce8 <memmove+0x2a>
 8017ce6:	bd10      	pop	{r4, pc}
 8017ce8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cf0:	e7f7      	b.n	8017ce2 <memmove+0x24>

08017cf2 <memset>:
 8017cf2:	4402      	add	r2, r0
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d100      	bne.n	8017cfc <memset+0xa>
 8017cfa:	4770      	bx	lr
 8017cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8017d00:	e7f9      	b.n	8017cf6 <memset+0x4>

08017d02 <_raise_r>:
 8017d02:	291f      	cmp	r1, #31
 8017d04:	b538      	push	{r3, r4, r5, lr}
 8017d06:	4605      	mov	r5, r0
 8017d08:	460c      	mov	r4, r1
 8017d0a:	d904      	bls.n	8017d16 <_raise_r+0x14>
 8017d0c:	2316      	movs	r3, #22
 8017d0e:	6003      	str	r3, [r0, #0]
 8017d10:	f04f 30ff 	mov.w	r0, #4294967295
 8017d14:	bd38      	pop	{r3, r4, r5, pc}
 8017d16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017d18:	b112      	cbz	r2, 8017d20 <_raise_r+0x1e>
 8017d1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d1e:	b94b      	cbnz	r3, 8017d34 <_raise_r+0x32>
 8017d20:	4628      	mov	r0, r5
 8017d22:	f000 f8bf 	bl	8017ea4 <_getpid_r>
 8017d26:	4622      	mov	r2, r4
 8017d28:	4601      	mov	r1, r0
 8017d2a:	4628      	mov	r0, r5
 8017d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d30:	f000 b8a6 	b.w	8017e80 <_kill_r>
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d00a      	beq.n	8017d4e <_raise_r+0x4c>
 8017d38:	1c59      	adds	r1, r3, #1
 8017d3a:	d103      	bne.n	8017d44 <_raise_r+0x42>
 8017d3c:	2316      	movs	r3, #22
 8017d3e:	6003      	str	r3, [r0, #0]
 8017d40:	2001      	movs	r0, #1
 8017d42:	e7e7      	b.n	8017d14 <_raise_r+0x12>
 8017d44:	2100      	movs	r1, #0
 8017d46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	4798      	blx	r3
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e7e0      	b.n	8017d14 <_raise_r+0x12>
	...

08017d54 <raise>:
 8017d54:	4b02      	ldr	r3, [pc, #8]	@ (8017d60 <raise+0xc>)
 8017d56:	4601      	mov	r1, r0
 8017d58:	6818      	ldr	r0, [r3, #0]
 8017d5a:	f7ff bfd2 	b.w	8017d02 <_raise_r>
 8017d5e:	bf00      	nop
 8017d60:	20000040 	.word	0x20000040

08017d64 <_localeconv_r>:
 8017d64:	4800      	ldr	r0, [pc, #0]	@ (8017d68 <_localeconv_r+0x4>)
 8017d66:	4770      	bx	lr
 8017d68:	20000180 	.word	0x20000180

08017d6c <_close_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4d06      	ldr	r5, [pc, #24]	@ (8017d88 <_close_r+0x1c>)
 8017d70:	2300      	movs	r3, #0
 8017d72:	4604      	mov	r4, r0
 8017d74:	4608      	mov	r0, r1
 8017d76:	602b      	str	r3, [r5, #0]
 8017d78:	f7ea fd1c 	bl	80027b4 <_close>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_close_r+0x1a>
 8017d80:	682b      	ldr	r3, [r5, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_close_r+0x1a>
 8017d84:	6023      	str	r3, [r4, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	20010c04 	.word	0x20010c04

08017d8c <_reclaim_reent>:
 8017d8c:	4b29      	ldr	r3, [pc, #164]	@ (8017e34 <_reclaim_reent+0xa8>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4283      	cmp	r3, r0
 8017d92:	b570      	push	{r4, r5, r6, lr}
 8017d94:	4604      	mov	r4, r0
 8017d96:	d04b      	beq.n	8017e30 <_reclaim_reent+0xa4>
 8017d98:	69c3      	ldr	r3, [r0, #28]
 8017d9a:	b1ab      	cbz	r3, 8017dc8 <_reclaim_reent+0x3c>
 8017d9c:	68db      	ldr	r3, [r3, #12]
 8017d9e:	b16b      	cbz	r3, 8017dbc <_reclaim_reent+0x30>
 8017da0:	2500      	movs	r5, #0
 8017da2:	69e3      	ldr	r3, [r4, #28]
 8017da4:	68db      	ldr	r3, [r3, #12]
 8017da6:	5959      	ldr	r1, [r3, r5]
 8017da8:	2900      	cmp	r1, #0
 8017daa:	d13b      	bne.n	8017e24 <_reclaim_reent+0x98>
 8017dac:	3504      	adds	r5, #4
 8017dae:	2d80      	cmp	r5, #128	@ 0x80
 8017db0:	d1f7      	bne.n	8017da2 <_reclaim_reent+0x16>
 8017db2:	69e3      	ldr	r3, [r4, #28]
 8017db4:	4620      	mov	r0, r4
 8017db6:	68d9      	ldr	r1, [r3, #12]
 8017db8:	f000 ff22 	bl	8018c00 <_free_r>
 8017dbc:	69e3      	ldr	r3, [r4, #28]
 8017dbe:	6819      	ldr	r1, [r3, #0]
 8017dc0:	b111      	cbz	r1, 8017dc8 <_reclaim_reent+0x3c>
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	f000 ff1c 	bl	8018c00 <_free_r>
 8017dc8:	6961      	ldr	r1, [r4, #20]
 8017dca:	b111      	cbz	r1, 8017dd2 <_reclaim_reent+0x46>
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f000 ff17 	bl	8018c00 <_free_r>
 8017dd2:	69e1      	ldr	r1, [r4, #28]
 8017dd4:	b111      	cbz	r1, 8017ddc <_reclaim_reent+0x50>
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f000 ff12 	bl	8018c00 <_free_r>
 8017ddc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017dde:	b111      	cbz	r1, 8017de6 <_reclaim_reent+0x5a>
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 ff0d 	bl	8018c00 <_free_r>
 8017de6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017de8:	b111      	cbz	r1, 8017df0 <_reclaim_reent+0x64>
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 ff08 	bl	8018c00 <_free_r>
 8017df0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017df2:	b111      	cbz	r1, 8017dfa <_reclaim_reent+0x6e>
 8017df4:	4620      	mov	r0, r4
 8017df6:	f000 ff03 	bl	8018c00 <_free_r>
 8017dfa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017dfc:	b111      	cbz	r1, 8017e04 <_reclaim_reent+0x78>
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f000 fefe 	bl	8018c00 <_free_r>
 8017e04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017e06:	b111      	cbz	r1, 8017e0e <_reclaim_reent+0x82>
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f000 fef9 	bl	8018c00 <_free_r>
 8017e0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017e10:	b111      	cbz	r1, 8017e18 <_reclaim_reent+0x8c>
 8017e12:	4620      	mov	r0, r4
 8017e14:	f000 fef4 	bl	8018c00 <_free_r>
 8017e18:	6a23      	ldr	r3, [r4, #32]
 8017e1a:	b14b      	cbz	r3, 8017e30 <_reclaim_reent+0xa4>
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e22:	4718      	bx	r3
 8017e24:	680e      	ldr	r6, [r1, #0]
 8017e26:	4620      	mov	r0, r4
 8017e28:	f000 feea 	bl	8018c00 <_free_r>
 8017e2c:	4631      	mov	r1, r6
 8017e2e:	e7bb      	b.n	8017da8 <_reclaim_reent+0x1c>
 8017e30:	bd70      	pop	{r4, r5, r6, pc}
 8017e32:	bf00      	nop
 8017e34:	20000040 	.word	0x20000040

08017e38 <_lseek_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4d07      	ldr	r5, [pc, #28]	@ (8017e58 <_lseek_r+0x20>)
 8017e3c:	4604      	mov	r4, r0
 8017e3e:	4608      	mov	r0, r1
 8017e40:	4611      	mov	r1, r2
 8017e42:	2200      	movs	r2, #0
 8017e44:	602a      	str	r2, [r5, #0]
 8017e46:	461a      	mov	r2, r3
 8017e48:	f7ea fcdb 	bl	8002802 <_lseek>
 8017e4c:	1c43      	adds	r3, r0, #1
 8017e4e:	d102      	bne.n	8017e56 <_lseek_r+0x1e>
 8017e50:	682b      	ldr	r3, [r5, #0]
 8017e52:	b103      	cbz	r3, 8017e56 <_lseek_r+0x1e>
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	bd38      	pop	{r3, r4, r5, pc}
 8017e58:	20010c04 	.word	0x20010c04

08017e5c <_read_r>:
 8017e5c:	b538      	push	{r3, r4, r5, lr}
 8017e5e:	4d07      	ldr	r5, [pc, #28]	@ (8017e7c <_read_r+0x20>)
 8017e60:	4604      	mov	r4, r0
 8017e62:	4608      	mov	r0, r1
 8017e64:	4611      	mov	r1, r2
 8017e66:	2200      	movs	r2, #0
 8017e68:	602a      	str	r2, [r5, #0]
 8017e6a:	461a      	mov	r2, r3
 8017e6c:	f7ea fc69 	bl	8002742 <_read>
 8017e70:	1c43      	adds	r3, r0, #1
 8017e72:	d102      	bne.n	8017e7a <_read_r+0x1e>
 8017e74:	682b      	ldr	r3, [r5, #0]
 8017e76:	b103      	cbz	r3, 8017e7a <_read_r+0x1e>
 8017e78:	6023      	str	r3, [r4, #0]
 8017e7a:	bd38      	pop	{r3, r4, r5, pc}
 8017e7c:	20010c04 	.word	0x20010c04

08017e80 <_kill_r>:
 8017e80:	b538      	push	{r3, r4, r5, lr}
 8017e82:	4d07      	ldr	r5, [pc, #28]	@ (8017ea0 <_kill_r+0x20>)
 8017e84:	2300      	movs	r3, #0
 8017e86:	4604      	mov	r4, r0
 8017e88:	4608      	mov	r0, r1
 8017e8a:	4611      	mov	r1, r2
 8017e8c:	602b      	str	r3, [r5, #0]
 8017e8e:	f7ea fc3d 	bl	800270c <_kill>
 8017e92:	1c43      	adds	r3, r0, #1
 8017e94:	d102      	bne.n	8017e9c <_kill_r+0x1c>
 8017e96:	682b      	ldr	r3, [r5, #0]
 8017e98:	b103      	cbz	r3, 8017e9c <_kill_r+0x1c>
 8017e9a:	6023      	str	r3, [r4, #0]
 8017e9c:	bd38      	pop	{r3, r4, r5, pc}
 8017e9e:	bf00      	nop
 8017ea0:	20010c04 	.word	0x20010c04

08017ea4 <_getpid_r>:
 8017ea4:	f7ea bc2a 	b.w	80026fc <_getpid>

08017ea8 <_sbrk_r>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	4d06      	ldr	r5, [pc, #24]	@ (8017ec4 <_sbrk_r+0x1c>)
 8017eac:	2300      	movs	r3, #0
 8017eae:	4604      	mov	r4, r0
 8017eb0:	4608      	mov	r0, r1
 8017eb2:	602b      	str	r3, [r5, #0]
 8017eb4:	f7ea fcb2 	bl	800281c <_sbrk>
 8017eb8:	1c43      	adds	r3, r0, #1
 8017eba:	d102      	bne.n	8017ec2 <_sbrk_r+0x1a>
 8017ebc:	682b      	ldr	r3, [r5, #0]
 8017ebe:	b103      	cbz	r3, 8017ec2 <_sbrk_r+0x1a>
 8017ec0:	6023      	str	r3, [r4, #0]
 8017ec2:	bd38      	pop	{r3, r4, r5, pc}
 8017ec4:	20010c04 	.word	0x20010c04

08017ec8 <_write_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4d07      	ldr	r5, [pc, #28]	@ (8017ee8 <_write_r+0x20>)
 8017ecc:	4604      	mov	r4, r0
 8017ece:	4608      	mov	r0, r1
 8017ed0:	4611      	mov	r1, r2
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	602a      	str	r2, [r5, #0]
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	f7ea fc50 	bl	800277c <_write>
 8017edc:	1c43      	adds	r3, r0, #1
 8017ede:	d102      	bne.n	8017ee6 <_write_r+0x1e>
 8017ee0:	682b      	ldr	r3, [r5, #0]
 8017ee2:	b103      	cbz	r3, 8017ee6 <_write_r+0x1e>
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	bd38      	pop	{r3, r4, r5, pc}
 8017ee8:	20010c04 	.word	0x20010c04

08017eec <__errno>:
 8017eec:	4b01      	ldr	r3, [pc, #4]	@ (8017ef4 <__errno+0x8>)
 8017eee:	6818      	ldr	r0, [r3, #0]
 8017ef0:	4770      	bx	lr
 8017ef2:	bf00      	nop
 8017ef4:	20000040 	.word	0x20000040

08017ef8 <__libc_init_array>:
 8017ef8:	b570      	push	{r4, r5, r6, lr}
 8017efa:	4d0d      	ldr	r5, [pc, #52]	@ (8017f30 <__libc_init_array+0x38>)
 8017efc:	4c0d      	ldr	r4, [pc, #52]	@ (8017f34 <__libc_init_array+0x3c>)
 8017efe:	1b64      	subs	r4, r4, r5
 8017f00:	10a4      	asrs	r4, r4, #2
 8017f02:	2600      	movs	r6, #0
 8017f04:	42a6      	cmp	r6, r4
 8017f06:	d109      	bne.n	8017f1c <__libc_init_array+0x24>
 8017f08:	4d0b      	ldr	r5, [pc, #44]	@ (8017f38 <__libc_init_array+0x40>)
 8017f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8017f3c <__libc_init_array+0x44>)
 8017f0c:	f001 fdae 	bl	8019a6c <_init>
 8017f10:	1b64      	subs	r4, r4, r5
 8017f12:	10a4      	asrs	r4, r4, #2
 8017f14:	2600      	movs	r6, #0
 8017f16:	42a6      	cmp	r6, r4
 8017f18:	d105      	bne.n	8017f26 <__libc_init_array+0x2e>
 8017f1a:	bd70      	pop	{r4, r5, r6, pc}
 8017f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f20:	4798      	blx	r3
 8017f22:	3601      	adds	r6, #1
 8017f24:	e7ee      	b.n	8017f04 <__libc_init_array+0xc>
 8017f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f2a:	4798      	blx	r3
 8017f2c:	3601      	adds	r6, #1
 8017f2e:	e7f2      	b.n	8017f16 <__libc_init_array+0x1e>
 8017f30:	0801a870 	.word	0x0801a870
 8017f34:	0801a870 	.word	0x0801a870
 8017f38:	0801a870 	.word	0x0801a870
 8017f3c:	0801a87c 	.word	0x0801a87c

08017f40 <__retarget_lock_init_recursive>:
 8017f40:	4770      	bx	lr

08017f42 <__retarget_lock_acquire_recursive>:
 8017f42:	4770      	bx	lr

08017f44 <__retarget_lock_release_recursive>:
 8017f44:	4770      	bx	lr

08017f46 <memcpy>:
 8017f46:	440a      	add	r2, r1
 8017f48:	4291      	cmp	r1, r2
 8017f4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f4e:	d100      	bne.n	8017f52 <memcpy+0xc>
 8017f50:	4770      	bx	lr
 8017f52:	b510      	push	{r4, lr}
 8017f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f5c:	4291      	cmp	r1, r2
 8017f5e:	d1f9      	bne.n	8017f54 <memcpy+0xe>
 8017f60:	bd10      	pop	{r4, pc}

08017f62 <quorem>:
 8017f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f66:	6903      	ldr	r3, [r0, #16]
 8017f68:	690c      	ldr	r4, [r1, #16]
 8017f6a:	42a3      	cmp	r3, r4
 8017f6c:	4607      	mov	r7, r0
 8017f6e:	db7e      	blt.n	801806e <quorem+0x10c>
 8017f70:	3c01      	subs	r4, #1
 8017f72:	f101 0814 	add.w	r8, r1, #20
 8017f76:	00a3      	lsls	r3, r4, #2
 8017f78:	f100 0514 	add.w	r5, r0, #20
 8017f7c:	9300      	str	r3, [sp, #0]
 8017f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f82:	9301      	str	r3, [sp, #4]
 8017f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017f94:	fbb2 f6f3 	udiv	r6, r2, r3
 8017f98:	d32e      	bcc.n	8017ff8 <quorem+0x96>
 8017f9a:	f04f 0a00 	mov.w	sl, #0
 8017f9e:	46c4      	mov	ip, r8
 8017fa0:	46ae      	mov	lr, r5
 8017fa2:	46d3      	mov	fp, sl
 8017fa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017fa8:	b298      	uxth	r0, r3
 8017faa:	fb06 a000 	mla	r0, r6, r0, sl
 8017fae:	0c02      	lsrs	r2, r0, #16
 8017fb0:	0c1b      	lsrs	r3, r3, #16
 8017fb2:	fb06 2303 	mla	r3, r6, r3, r2
 8017fb6:	f8de 2000 	ldr.w	r2, [lr]
 8017fba:	b280      	uxth	r0, r0
 8017fbc:	b292      	uxth	r2, r2
 8017fbe:	1a12      	subs	r2, r2, r0
 8017fc0:	445a      	add	r2, fp
 8017fc2:	f8de 0000 	ldr.w	r0, [lr]
 8017fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017fca:	b29b      	uxth	r3, r3
 8017fcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017fd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017fd4:	b292      	uxth	r2, r2
 8017fd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017fda:	45e1      	cmp	r9, ip
 8017fdc:	f84e 2b04 	str.w	r2, [lr], #4
 8017fe0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017fe4:	d2de      	bcs.n	8017fa4 <quorem+0x42>
 8017fe6:	9b00      	ldr	r3, [sp, #0]
 8017fe8:	58eb      	ldr	r3, [r5, r3]
 8017fea:	b92b      	cbnz	r3, 8017ff8 <quorem+0x96>
 8017fec:	9b01      	ldr	r3, [sp, #4]
 8017fee:	3b04      	subs	r3, #4
 8017ff0:	429d      	cmp	r5, r3
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	d32f      	bcc.n	8018056 <quorem+0xf4>
 8017ff6:	613c      	str	r4, [r7, #16]
 8017ff8:	4638      	mov	r0, r7
 8017ffa:	f001 f8c5 	bl	8019188 <__mcmp>
 8017ffe:	2800      	cmp	r0, #0
 8018000:	db25      	blt.n	801804e <quorem+0xec>
 8018002:	4629      	mov	r1, r5
 8018004:	2000      	movs	r0, #0
 8018006:	f858 2b04 	ldr.w	r2, [r8], #4
 801800a:	f8d1 c000 	ldr.w	ip, [r1]
 801800e:	fa1f fe82 	uxth.w	lr, r2
 8018012:	fa1f f38c 	uxth.w	r3, ip
 8018016:	eba3 030e 	sub.w	r3, r3, lr
 801801a:	4403      	add	r3, r0
 801801c:	0c12      	lsrs	r2, r2, #16
 801801e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018022:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8018026:	b29b      	uxth	r3, r3
 8018028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801802c:	45c1      	cmp	r9, r8
 801802e:	f841 3b04 	str.w	r3, [r1], #4
 8018032:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018036:	d2e6      	bcs.n	8018006 <quorem+0xa4>
 8018038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801803c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018040:	b922      	cbnz	r2, 801804c <quorem+0xea>
 8018042:	3b04      	subs	r3, #4
 8018044:	429d      	cmp	r5, r3
 8018046:	461a      	mov	r2, r3
 8018048:	d30b      	bcc.n	8018062 <quorem+0x100>
 801804a:	613c      	str	r4, [r7, #16]
 801804c:	3601      	adds	r6, #1
 801804e:	4630      	mov	r0, r6
 8018050:	b003      	add	sp, #12
 8018052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018056:	6812      	ldr	r2, [r2, #0]
 8018058:	3b04      	subs	r3, #4
 801805a:	2a00      	cmp	r2, #0
 801805c:	d1cb      	bne.n	8017ff6 <quorem+0x94>
 801805e:	3c01      	subs	r4, #1
 8018060:	e7c6      	b.n	8017ff0 <quorem+0x8e>
 8018062:	6812      	ldr	r2, [r2, #0]
 8018064:	3b04      	subs	r3, #4
 8018066:	2a00      	cmp	r2, #0
 8018068:	d1ef      	bne.n	801804a <quorem+0xe8>
 801806a:	3c01      	subs	r4, #1
 801806c:	e7ea      	b.n	8018044 <quorem+0xe2>
 801806e:	2000      	movs	r0, #0
 8018070:	e7ee      	b.n	8018050 <quorem+0xee>
 8018072:	0000      	movs	r0, r0
 8018074:	0000      	movs	r0, r0
	...

08018078 <_dtoa_r>:
 8018078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	69c7      	ldr	r7, [r0, #28]
 801807e:	b099      	sub	sp, #100	@ 0x64
 8018080:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018084:	ec55 4b10 	vmov	r4, r5, d0
 8018088:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801808a:	9109      	str	r1, [sp, #36]	@ 0x24
 801808c:	4683      	mov	fp, r0
 801808e:	920e      	str	r2, [sp, #56]	@ 0x38
 8018090:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018092:	b97f      	cbnz	r7, 80180b4 <_dtoa_r+0x3c>
 8018094:	2010      	movs	r0, #16
 8018096:	f7fe fff7 	bl	8017088 <malloc>
 801809a:	4602      	mov	r2, r0
 801809c:	f8cb 001c 	str.w	r0, [fp, #28]
 80180a0:	b920      	cbnz	r0, 80180ac <_dtoa_r+0x34>
 80180a2:	4ba7      	ldr	r3, [pc, #668]	@ (8018340 <_dtoa_r+0x2c8>)
 80180a4:	21ef      	movs	r1, #239	@ 0xef
 80180a6:	48a7      	ldr	r0, [pc, #668]	@ (8018344 <_dtoa_r+0x2cc>)
 80180a8:	f001 fa22 	bl	80194f0 <__assert_func>
 80180ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80180b0:	6007      	str	r7, [r0, #0]
 80180b2:	60c7      	str	r7, [r0, #12]
 80180b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80180b8:	6819      	ldr	r1, [r3, #0]
 80180ba:	b159      	cbz	r1, 80180d4 <_dtoa_r+0x5c>
 80180bc:	685a      	ldr	r2, [r3, #4]
 80180be:	604a      	str	r2, [r1, #4]
 80180c0:	2301      	movs	r3, #1
 80180c2:	4093      	lsls	r3, r2
 80180c4:	608b      	str	r3, [r1, #8]
 80180c6:	4658      	mov	r0, fp
 80180c8:	f000 fe24 	bl	8018d14 <_Bfree>
 80180cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80180d0:	2200      	movs	r2, #0
 80180d2:	601a      	str	r2, [r3, #0]
 80180d4:	1e2b      	subs	r3, r5, #0
 80180d6:	bfb9      	ittee	lt
 80180d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80180dc:	9303      	strlt	r3, [sp, #12]
 80180de:	2300      	movge	r3, #0
 80180e0:	6033      	strge	r3, [r6, #0]
 80180e2:	9f03      	ldr	r7, [sp, #12]
 80180e4:	4b98      	ldr	r3, [pc, #608]	@ (8018348 <_dtoa_r+0x2d0>)
 80180e6:	bfbc      	itt	lt
 80180e8:	2201      	movlt	r2, #1
 80180ea:	6032      	strlt	r2, [r6, #0]
 80180ec:	43bb      	bics	r3, r7
 80180ee:	d112      	bne.n	8018116 <_dtoa_r+0x9e>
 80180f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80180f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80180f6:	6013      	str	r3, [r2, #0]
 80180f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80180fc:	4323      	orrs	r3, r4
 80180fe:	f000 854d 	beq.w	8018b9c <_dtoa_r+0xb24>
 8018102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018104:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801835c <_dtoa_r+0x2e4>
 8018108:	2b00      	cmp	r3, #0
 801810a:	f000 854f 	beq.w	8018bac <_dtoa_r+0xb34>
 801810e:	f10a 0303 	add.w	r3, sl, #3
 8018112:	f000 bd49 	b.w	8018ba8 <_dtoa_r+0xb30>
 8018116:	ed9d 7b02 	vldr	d7, [sp, #8]
 801811a:	2200      	movs	r2, #0
 801811c:	ec51 0b17 	vmov	r0, r1, d7
 8018120:	2300      	movs	r3, #0
 8018122:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018126:	f7e8 fd07 	bl	8000b38 <__aeabi_dcmpeq>
 801812a:	4680      	mov	r8, r0
 801812c:	b158      	cbz	r0, 8018146 <_dtoa_r+0xce>
 801812e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018130:	2301      	movs	r3, #1
 8018132:	6013      	str	r3, [r2, #0]
 8018134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018136:	b113      	cbz	r3, 801813e <_dtoa_r+0xc6>
 8018138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801813a:	4b84      	ldr	r3, [pc, #528]	@ (801834c <_dtoa_r+0x2d4>)
 801813c:	6013      	str	r3, [r2, #0]
 801813e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8018360 <_dtoa_r+0x2e8>
 8018142:	f000 bd33 	b.w	8018bac <_dtoa_r+0xb34>
 8018146:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801814a:	aa16      	add	r2, sp, #88	@ 0x58
 801814c:	a917      	add	r1, sp, #92	@ 0x5c
 801814e:	4658      	mov	r0, fp
 8018150:	f001 f8ca 	bl	80192e8 <__d2b>
 8018154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018158:	4681      	mov	r9, r0
 801815a:	2e00      	cmp	r6, #0
 801815c:	d077      	beq.n	801824e <_dtoa_r+0x1d6>
 801815e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018160:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8018164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801816c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8018174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018178:	4619      	mov	r1, r3
 801817a:	2200      	movs	r2, #0
 801817c:	4b74      	ldr	r3, [pc, #464]	@ (8018350 <_dtoa_r+0x2d8>)
 801817e:	f7e8 f8bb 	bl	80002f8 <__aeabi_dsub>
 8018182:	a369      	add	r3, pc, #420	@ (adr r3, 8018328 <_dtoa_r+0x2b0>)
 8018184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018188:	f7e8 fa6e 	bl	8000668 <__aeabi_dmul>
 801818c:	a368      	add	r3, pc, #416	@ (adr r3, 8018330 <_dtoa_r+0x2b8>)
 801818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018192:	f7e8 f8b3 	bl	80002fc <__adddf3>
 8018196:	4604      	mov	r4, r0
 8018198:	4630      	mov	r0, r6
 801819a:	460d      	mov	r5, r1
 801819c:	f7e8 f9fa 	bl	8000594 <__aeabi_i2d>
 80181a0:	a365      	add	r3, pc, #404	@ (adr r3, 8018338 <_dtoa_r+0x2c0>)
 80181a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a6:	f7e8 fa5f 	bl	8000668 <__aeabi_dmul>
 80181aa:	4602      	mov	r2, r0
 80181ac:	460b      	mov	r3, r1
 80181ae:	4620      	mov	r0, r4
 80181b0:	4629      	mov	r1, r5
 80181b2:	f7e8 f8a3 	bl	80002fc <__adddf3>
 80181b6:	4604      	mov	r4, r0
 80181b8:	460d      	mov	r5, r1
 80181ba:	f7e8 fd05 	bl	8000bc8 <__aeabi_d2iz>
 80181be:	2200      	movs	r2, #0
 80181c0:	4607      	mov	r7, r0
 80181c2:	2300      	movs	r3, #0
 80181c4:	4620      	mov	r0, r4
 80181c6:	4629      	mov	r1, r5
 80181c8:	f7e8 fcc0 	bl	8000b4c <__aeabi_dcmplt>
 80181cc:	b140      	cbz	r0, 80181e0 <_dtoa_r+0x168>
 80181ce:	4638      	mov	r0, r7
 80181d0:	f7e8 f9e0 	bl	8000594 <__aeabi_i2d>
 80181d4:	4622      	mov	r2, r4
 80181d6:	462b      	mov	r3, r5
 80181d8:	f7e8 fcae 	bl	8000b38 <__aeabi_dcmpeq>
 80181dc:	b900      	cbnz	r0, 80181e0 <_dtoa_r+0x168>
 80181de:	3f01      	subs	r7, #1
 80181e0:	2f16      	cmp	r7, #22
 80181e2:	d851      	bhi.n	8018288 <_dtoa_r+0x210>
 80181e4:	4b5b      	ldr	r3, [pc, #364]	@ (8018354 <_dtoa_r+0x2dc>)
 80181e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80181ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80181f2:	f7e8 fcab 	bl	8000b4c <__aeabi_dcmplt>
 80181f6:	2800      	cmp	r0, #0
 80181f8:	d048      	beq.n	801828c <_dtoa_r+0x214>
 80181fa:	3f01      	subs	r7, #1
 80181fc:	2300      	movs	r3, #0
 80181fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8018200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018202:	1b9b      	subs	r3, r3, r6
 8018204:	1e5a      	subs	r2, r3, #1
 8018206:	bf44      	itt	mi
 8018208:	f1c3 0801 	rsbmi	r8, r3, #1
 801820c:	2300      	movmi	r3, #0
 801820e:	9208      	str	r2, [sp, #32]
 8018210:	bf54      	ite	pl
 8018212:	f04f 0800 	movpl.w	r8, #0
 8018216:	9308      	strmi	r3, [sp, #32]
 8018218:	2f00      	cmp	r7, #0
 801821a:	db39      	blt.n	8018290 <_dtoa_r+0x218>
 801821c:	9b08      	ldr	r3, [sp, #32]
 801821e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8018220:	443b      	add	r3, r7
 8018222:	9308      	str	r3, [sp, #32]
 8018224:	2300      	movs	r3, #0
 8018226:	930a      	str	r3, [sp, #40]	@ 0x28
 8018228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801822a:	2b09      	cmp	r3, #9
 801822c:	d864      	bhi.n	80182f8 <_dtoa_r+0x280>
 801822e:	2b05      	cmp	r3, #5
 8018230:	bfc4      	itt	gt
 8018232:	3b04      	subgt	r3, #4
 8018234:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8018236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018238:	f1a3 0302 	sub.w	r3, r3, #2
 801823c:	bfcc      	ite	gt
 801823e:	2400      	movgt	r4, #0
 8018240:	2401      	movle	r4, #1
 8018242:	2b03      	cmp	r3, #3
 8018244:	d863      	bhi.n	801830e <_dtoa_r+0x296>
 8018246:	e8df f003 	tbb	[pc, r3]
 801824a:	372a      	.short	0x372a
 801824c:	5535      	.short	0x5535
 801824e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8018252:	441e      	add	r6, r3
 8018254:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018258:	2b20      	cmp	r3, #32
 801825a:	bfc1      	itttt	gt
 801825c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018260:	409f      	lslgt	r7, r3
 8018262:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018266:	fa24 f303 	lsrgt.w	r3, r4, r3
 801826a:	bfd6      	itet	le
 801826c:	f1c3 0320 	rsble	r3, r3, #32
 8018270:	ea47 0003 	orrgt.w	r0, r7, r3
 8018274:	fa04 f003 	lslle.w	r0, r4, r3
 8018278:	f7e8 f97c 	bl	8000574 <__aeabi_ui2d>
 801827c:	2201      	movs	r2, #1
 801827e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018282:	3e01      	subs	r6, #1
 8018284:	9214      	str	r2, [sp, #80]	@ 0x50
 8018286:	e777      	b.n	8018178 <_dtoa_r+0x100>
 8018288:	2301      	movs	r3, #1
 801828a:	e7b8      	b.n	80181fe <_dtoa_r+0x186>
 801828c:	9012      	str	r0, [sp, #72]	@ 0x48
 801828e:	e7b7      	b.n	8018200 <_dtoa_r+0x188>
 8018290:	427b      	negs	r3, r7
 8018292:	930a      	str	r3, [sp, #40]	@ 0x28
 8018294:	2300      	movs	r3, #0
 8018296:	eba8 0807 	sub.w	r8, r8, r7
 801829a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801829c:	e7c4      	b.n	8018228 <_dtoa_r+0x1b0>
 801829e:	2300      	movs	r3, #0
 80182a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	dc35      	bgt.n	8018314 <_dtoa_r+0x29c>
 80182a8:	2301      	movs	r3, #1
 80182aa:	9300      	str	r3, [sp, #0]
 80182ac:	9307      	str	r3, [sp, #28]
 80182ae:	461a      	mov	r2, r3
 80182b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80182b2:	e00b      	b.n	80182cc <_dtoa_r+0x254>
 80182b4:	2301      	movs	r3, #1
 80182b6:	e7f3      	b.n	80182a0 <_dtoa_r+0x228>
 80182b8:	2300      	movs	r3, #0
 80182ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182be:	18fb      	adds	r3, r7, r3
 80182c0:	9300      	str	r3, [sp, #0]
 80182c2:	3301      	adds	r3, #1
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	9307      	str	r3, [sp, #28]
 80182c8:	bfb8      	it	lt
 80182ca:	2301      	movlt	r3, #1
 80182cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80182d0:	2100      	movs	r1, #0
 80182d2:	2204      	movs	r2, #4
 80182d4:	f102 0514 	add.w	r5, r2, #20
 80182d8:	429d      	cmp	r5, r3
 80182da:	d91f      	bls.n	801831c <_dtoa_r+0x2a4>
 80182dc:	6041      	str	r1, [r0, #4]
 80182de:	4658      	mov	r0, fp
 80182e0:	f000 fcd8 	bl	8018c94 <_Balloc>
 80182e4:	4682      	mov	sl, r0
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d13c      	bne.n	8018364 <_dtoa_r+0x2ec>
 80182ea:	4b1b      	ldr	r3, [pc, #108]	@ (8018358 <_dtoa_r+0x2e0>)
 80182ec:	4602      	mov	r2, r0
 80182ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80182f2:	e6d8      	b.n	80180a6 <_dtoa_r+0x2e>
 80182f4:	2301      	movs	r3, #1
 80182f6:	e7e0      	b.n	80182ba <_dtoa_r+0x242>
 80182f8:	2401      	movs	r4, #1
 80182fa:	2300      	movs	r3, #0
 80182fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80182fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018300:	f04f 33ff 	mov.w	r3, #4294967295
 8018304:	9300      	str	r3, [sp, #0]
 8018306:	9307      	str	r3, [sp, #28]
 8018308:	2200      	movs	r2, #0
 801830a:	2312      	movs	r3, #18
 801830c:	e7d0      	b.n	80182b0 <_dtoa_r+0x238>
 801830e:	2301      	movs	r3, #1
 8018310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018312:	e7f5      	b.n	8018300 <_dtoa_r+0x288>
 8018314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	9307      	str	r3, [sp, #28]
 801831a:	e7d7      	b.n	80182cc <_dtoa_r+0x254>
 801831c:	3101      	adds	r1, #1
 801831e:	0052      	lsls	r2, r2, #1
 8018320:	e7d8      	b.n	80182d4 <_dtoa_r+0x25c>
 8018322:	bf00      	nop
 8018324:	f3af 8000 	nop.w
 8018328:	636f4361 	.word	0x636f4361
 801832c:	3fd287a7 	.word	0x3fd287a7
 8018330:	8b60c8b3 	.word	0x8b60c8b3
 8018334:	3fc68a28 	.word	0x3fc68a28
 8018338:	509f79fb 	.word	0x509f79fb
 801833c:	3fd34413 	.word	0x3fd34413
 8018340:	0801a539 	.word	0x0801a539
 8018344:	0801a550 	.word	0x0801a550
 8018348:	7ff00000 	.word	0x7ff00000
 801834c:	0801a509 	.word	0x0801a509
 8018350:	3ff80000 	.word	0x3ff80000
 8018354:	0801a648 	.word	0x0801a648
 8018358:	0801a5a8 	.word	0x0801a5a8
 801835c:	0801a535 	.word	0x0801a535
 8018360:	0801a508 	.word	0x0801a508
 8018364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8018368:	6018      	str	r0, [r3, #0]
 801836a:	9b07      	ldr	r3, [sp, #28]
 801836c:	2b0e      	cmp	r3, #14
 801836e:	f200 80a4 	bhi.w	80184ba <_dtoa_r+0x442>
 8018372:	2c00      	cmp	r4, #0
 8018374:	f000 80a1 	beq.w	80184ba <_dtoa_r+0x442>
 8018378:	2f00      	cmp	r7, #0
 801837a:	dd33      	ble.n	80183e4 <_dtoa_r+0x36c>
 801837c:	4bad      	ldr	r3, [pc, #692]	@ (8018634 <_dtoa_r+0x5bc>)
 801837e:	f007 020f 	and.w	r2, r7, #15
 8018382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018386:	ed93 7b00 	vldr	d7, [r3]
 801838a:	05f8      	lsls	r0, r7, #23
 801838c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018394:	d516      	bpl.n	80183c4 <_dtoa_r+0x34c>
 8018396:	4ba8      	ldr	r3, [pc, #672]	@ (8018638 <_dtoa_r+0x5c0>)
 8018398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801839c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80183a0:	f7e8 fa8c 	bl	80008bc <__aeabi_ddiv>
 80183a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183a8:	f004 040f 	and.w	r4, r4, #15
 80183ac:	2603      	movs	r6, #3
 80183ae:	4da2      	ldr	r5, [pc, #648]	@ (8018638 <_dtoa_r+0x5c0>)
 80183b0:	b954      	cbnz	r4, 80183c8 <_dtoa_r+0x350>
 80183b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80183b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183ba:	f7e8 fa7f 	bl	80008bc <__aeabi_ddiv>
 80183be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183c2:	e028      	b.n	8018416 <_dtoa_r+0x39e>
 80183c4:	2602      	movs	r6, #2
 80183c6:	e7f2      	b.n	80183ae <_dtoa_r+0x336>
 80183c8:	07e1      	lsls	r1, r4, #31
 80183ca:	d508      	bpl.n	80183de <_dtoa_r+0x366>
 80183cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80183d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80183d4:	f7e8 f948 	bl	8000668 <__aeabi_dmul>
 80183d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80183dc:	3601      	adds	r6, #1
 80183de:	1064      	asrs	r4, r4, #1
 80183e0:	3508      	adds	r5, #8
 80183e2:	e7e5      	b.n	80183b0 <_dtoa_r+0x338>
 80183e4:	f000 80d2 	beq.w	801858c <_dtoa_r+0x514>
 80183e8:	427c      	negs	r4, r7
 80183ea:	4b92      	ldr	r3, [pc, #584]	@ (8018634 <_dtoa_r+0x5bc>)
 80183ec:	4d92      	ldr	r5, [pc, #584]	@ (8018638 <_dtoa_r+0x5c0>)
 80183ee:	f004 020f 	and.w	r2, r4, #15
 80183f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80183fe:	f7e8 f933 	bl	8000668 <__aeabi_dmul>
 8018402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018406:	1124      	asrs	r4, r4, #4
 8018408:	2300      	movs	r3, #0
 801840a:	2602      	movs	r6, #2
 801840c:	2c00      	cmp	r4, #0
 801840e:	f040 80b2 	bne.w	8018576 <_dtoa_r+0x4fe>
 8018412:	2b00      	cmp	r3, #0
 8018414:	d1d3      	bne.n	80183be <_dtoa_r+0x346>
 8018416:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018418:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801841c:	2b00      	cmp	r3, #0
 801841e:	f000 80b7 	beq.w	8018590 <_dtoa_r+0x518>
 8018422:	4b86      	ldr	r3, [pc, #536]	@ (801863c <_dtoa_r+0x5c4>)
 8018424:	2200      	movs	r2, #0
 8018426:	4620      	mov	r0, r4
 8018428:	4629      	mov	r1, r5
 801842a:	f7e8 fb8f 	bl	8000b4c <__aeabi_dcmplt>
 801842e:	2800      	cmp	r0, #0
 8018430:	f000 80ae 	beq.w	8018590 <_dtoa_r+0x518>
 8018434:	9b07      	ldr	r3, [sp, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	f000 80aa 	beq.w	8018590 <_dtoa_r+0x518>
 801843c:	9b00      	ldr	r3, [sp, #0]
 801843e:	2b00      	cmp	r3, #0
 8018440:	dd37      	ble.n	80184b2 <_dtoa_r+0x43a>
 8018442:	1e7b      	subs	r3, r7, #1
 8018444:	9304      	str	r3, [sp, #16]
 8018446:	4620      	mov	r0, r4
 8018448:	4b7d      	ldr	r3, [pc, #500]	@ (8018640 <_dtoa_r+0x5c8>)
 801844a:	2200      	movs	r2, #0
 801844c:	4629      	mov	r1, r5
 801844e:	f7e8 f90b 	bl	8000668 <__aeabi_dmul>
 8018452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018456:	9c00      	ldr	r4, [sp, #0]
 8018458:	3601      	adds	r6, #1
 801845a:	4630      	mov	r0, r6
 801845c:	f7e8 f89a 	bl	8000594 <__aeabi_i2d>
 8018460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018464:	f7e8 f900 	bl	8000668 <__aeabi_dmul>
 8018468:	4b76      	ldr	r3, [pc, #472]	@ (8018644 <_dtoa_r+0x5cc>)
 801846a:	2200      	movs	r2, #0
 801846c:	f7e7 ff46 	bl	80002fc <__adddf3>
 8018470:	4605      	mov	r5, r0
 8018472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018476:	2c00      	cmp	r4, #0
 8018478:	f040 808d 	bne.w	8018596 <_dtoa_r+0x51e>
 801847c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018480:	4b71      	ldr	r3, [pc, #452]	@ (8018648 <_dtoa_r+0x5d0>)
 8018482:	2200      	movs	r2, #0
 8018484:	f7e7 ff38 	bl	80002f8 <__aeabi_dsub>
 8018488:	4602      	mov	r2, r0
 801848a:	460b      	mov	r3, r1
 801848c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018490:	462a      	mov	r2, r5
 8018492:	4633      	mov	r3, r6
 8018494:	f7e8 fb78 	bl	8000b88 <__aeabi_dcmpgt>
 8018498:	2800      	cmp	r0, #0
 801849a:	f040 828b 	bne.w	80189b4 <_dtoa_r+0x93c>
 801849e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184a2:	462a      	mov	r2, r5
 80184a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80184a8:	f7e8 fb50 	bl	8000b4c <__aeabi_dcmplt>
 80184ac:	2800      	cmp	r0, #0
 80184ae:	f040 8128 	bne.w	8018702 <_dtoa_r+0x68a>
 80184b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80184b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80184ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f2c0 815a 	blt.w	8018776 <_dtoa_r+0x6fe>
 80184c2:	2f0e      	cmp	r7, #14
 80184c4:	f300 8157 	bgt.w	8018776 <_dtoa_r+0x6fe>
 80184c8:	4b5a      	ldr	r3, [pc, #360]	@ (8018634 <_dtoa_r+0x5bc>)
 80184ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80184ce:	ed93 7b00 	vldr	d7, [r3]
 80184d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	ed8d 7b00 	vstr	d7, [sp]
 80184da:	da03      	bge.n	80184e4 <_dtoa_r+0x46c>
 80184dc:	9b07      	ldr	r3, [sp, #28]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	f340 8101 	ble.w	80186e6 <_dtoa_r+0x66e>
 80184e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80184e8:	4656      	mov	r6, sl
 80184ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184ee:	4620      	mov	r0, r4
 80184f0:	4629      	mov	r1, r5
 80184f2:	f7e8 f9e3 	bl	80008bc <__aeabi_ddiv>
 80184f6:	f7e8 fb67 	bl	8000bc8 <__aeabi_d2iz>
 80184fa:	4680      	mov	r8, r0
 80184fc:	f7e8 f84a 	bl	8000594 <__aeabi_i2d>
 8018500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018504:	f7e8 f8b0 	bl	8000668 <__aeabi_dmul>
 8018508:	4602      	mov	r2, r0
 801850a:	460b      	mov	r3, r1
 801850c:	4620      	mov	r0, r4
 801850e:	4629      	mov	r1, r5
 8018510:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018514:	f7e7 fef0 	bl	80002f8 <__aeabi_dsub>
 8018518:	f806 4b01 	strb.w	r4, [r6], #1
 801851c:	9d07      	ldr	r5, [sp, #28]
 801851e:	eba6 040a 	sub.w	r4, r6, sl
 8018522:	42a5      	cmp	r5, r4
 8018524:	4602      	mov	r2, r0
 8018526:	460b      	mov	r3, r1
 8018528:	f040 8117 	bne.w	801875a <_dtoa_r+0x6e2>
 801852c:	f7e7 fee6 	bl	80002fc <__adddf3>
 8018530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018534:	4604      	mov	r4, r0
 8018536:	460d      	mov	r5, r1
 8018538:	f7e8 fb26 	bl	8000b88 <__aeabi_dcmpgt>
 801853c:	2800      	cmp	r0, #0
 801853e:	f040 80f9 	bne.w	8018734 <_dtoa_r+0x6bc>
 8018542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018546:	4620      	mov	r0, r4
 8018548:	4629      	mov	r1, r5
 801854a:	f7e8 faf5 	bl	8000b38 <__aeabi_dcmpeq>
 801854e:	b118      	cbz	r0, 8018558 <_dtoa_r+0x4e0>
 8018550:	f018 0f01 	tst.w	r8, #1
 8018554:	f040 80ee 	bne.w	8018734 <_dtoa_r+0x6bc>
 8018558:	4649      	mov	r1, r9
 801855a:	4658      	mov	r0, fp
 801855c:	f000 fbda 	bl	8018d14 <_Bfree>
 8018560:	2300      	movs	r3, #0
 8018562:	7033      	strb	r3, [r6, #0]
 8018564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018566:	3701      	adds	r7, #1
 8018568:	601f      	str	r7, [r3, #0]
 801856a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801856c:	2b00      	cmp	r3, #0
 801856e:	f000 831d 	beq.w	8018bac <_dtoa_r+0xb34>
 8018572:	601e      	str	r6, [r3, #0]
 8018574:	e31a      	b.n	8018bac <_dtoa_r+0xb34>
 8018576:	07e2      	lsls	r2, r4, #31
 8018578:	d505      	bpl.n	8018586 <_dtoa_r+0x50e>
 801857a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801857e:	f7e8 f873 	bl	8000668 <__aeabi_dmul>
 8018582:	3601      	adds	r6, #1
 8018584:	2301      	movs	r3, #1
 8018586:	1064      	asrs	r4, r4, #1
 8018588:	3508      	adds	r5, #8
 801858a:	e73f      	b.n	801840c <_dtoa_r+0x394>
 801858c:	2602      	movs	r6, #2
 801858e:	e742      	b.n	8018416 <_dtoa_r+0x39e>
 8018590:	9c07      	ldr	r4, [sp, #28]
 8018592:	9704      	str	r7, [sp, #16]
 8018594:	e761      	b.n	801845a <_dtoa_r+0x3e2>
 8018596:	4b27      	ldr	r3, [pc, #156]	@ (8018634 <_dtoa_r+0x5bc>)
 8018598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801859a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801859e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80185a2:	4454      	add	r4, sl
 80185a4:	2900      	cmp	r1, #0
 80185a6:	d053      	beq.n	8018650 <_dtoa_r+0x5d8>
 80185a8:	4928      	ldr	r1, [pc, #160]	@ (801864c <_dtoa_r+0x5d4>)
 80185aa:	2000      	movs	r0, #0
 80185ac:	f7e8 f986 	bl	80008bc <__aeabi_ddiv>
 80185b0:	4633      	mov	r3, r6
 80185b2:	462a      	mov	r2, r5
 80185b4:	f7e7 fea0 	bl	80002f8 <__aeabi_dsub>
 80185b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80185bc:	4656      	mov	r6, sl
 80185be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185c2:	f7e8 fb01 	bl	8000bc8 <__aeabi_d2iz>
 80185c6:	4605      	mov	r5, r0
 80185c8:	f7e7 ffe4 	bl	8000594 <__aeabi_i2d>
 80185cc:	4602      	mov	r2, r0
 80185ce:	460b      	mov	r3, r1
 80185d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80185d4:	f7e7 fe90 	bl	80002f8 <__aeabi_dsub>
 80185d8:	3530      	adds	r5, #48	@ 0x30
 80185da:	4602      	mov	r2, r0
 80185dc:	460b      	mov	r3, r1
 80185de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185e2:	f806 5b01 	strb.w	r5, [r6], #1
 80185e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80185ea:	f7e8 faaf 	bl	8000b4c <__aeabi_dcmplt>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d171      	bne.n	80186d6 <_dtoa_r+0x65e>
 80185f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f6:	4911      	ldr	r1, [pc, #68]	@ (801863c <_dtoa_r+0x5c4>)
 80185f8:	2000      	movs	r0, #0
 80185fa:	f7e7 fe7d 	bl	80002f8 <__aeabi_dsub>
 80185fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8018602:	f7e8 faa3 	bl	8000b4c <__aeabi_dcmplt>
 8018606:	2800      	cmp	r0, #0
 8018608:	f040 8095 	bne.w	8018736 <_dtoa_r+0x6be>
 801860c:	42a6      	cmp	r6, r4
 801860e:	f43f af50 	beq.w	80184b2 <_dtoa_r+0x43a>
 8018612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018616:	4b0a      	ldr	r3, [pc, #40]	@ (8018640 <_dtoa_r+0x5c8>)
 8018618:	2200      	movs	r2, #0
 801861a:	f7e8 f825 	bl	8000668 <__aeabi_dmul>
 801861e:	4b08      	ldr	r3, [pc, #32]	@ (8018640 <_dtoa_r+0x5c8>)
 8018620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8018624:	2200      	movs	r2, #0
 8018626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801862a:	f7e8 f81d 	bl	8000668 <__aeabi_dmul>
 801862e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018632:	e7c4      	b.n	80185be <_dtoa_r+0x546>
 8018634:	0801a648 	.word	0x0801a648
 8018638:	0801a620 	.word	0x0801a620
 801863c:	3ff00000 	.word	0x3ff00000
 8018640:	40240000 	.word	0x40240000
 8018644:	401c0000 	.word	0x401c0000
 8018648:	40140000 	.word	0x40140000
 801864c:	3fe00000 	.word	0x3fe00000
 8018650:	4631      	mov	r1, r6
 8018652:	4628      	mov	r0, r5
 8018654:	f7e8 f808 	bl	8000668 <__aeabi_dmul>
 8018658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801865c:	9415      	str	r4, [sp, #84]	@ 0x54
 801865e:	4656      	mov	r6, sl
 8018660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018664:	f7e8 fab0 	bl	8000bc8 <__aeabi_d2iz>
 8018668:	4605      	mov	r5, r0
 801866a:	f7e7 ff93 	bl	8000594 <__aeabi_i2d>
 801866e:	4602      	mov	r2, r0
 8018670:	460b      	mov	r3, r1
 8018672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018676:	f7e7 fe3f 	bl	80002f8 <__aeabi_dsub>
 801867a:	3530      	adds	r5, #48	@ 0x30
 801867c:	f806 5b01 	strb.w	r5, [r6], #1
 8018680:	4602      	mov	r2, r0
 8018682:	460b      	mov	r3, r1
 8018684:	42a6      	cmp	r6, r4
 8018686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801868a:	f04f 0200 	mov.w	r2, #0
 801868e:	d124      	bne.n	80186da <_dtoa_r+0x662>
 8018690:	4bac      	ldr	r3, [pc, #688]	@ (8018944 <_dtoa_r+0x8cc>)
 8018692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8018696:	f7e7 fe31 	bl	80002fc <__adddf3>
 801869a:	4602      	mov	r2, r0
 801869c:	460b      	mov	r3, r1
 801869e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186a2:	f7e8 fa71 	bl	8000b88 <__aeabi_dcmpgt>
 80186a6:	2800      	cmp	r0, #0
 80186a8:	d145      	bne.n	8018736 <_dtoa_r+0x6be>
 80186aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80186ae:	49a5      	ldr	r1, [pc, #660]	@ (8018944 <_dtoa_r+0x8cc>)
 80186b0:	2000      	movs	r0, #0
 80186b2:	f7e7 fe21 	bl	80002f8 <__aeabi_dsub>
 80186b6:	4602      	mov	r2, r0
 80186b8:	460b      	mov	r3, r1
 80186ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186be:	f7e8 fa45 	bl	8000b4c <__aeabi_dcmplt>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	f43f aef5 	beq.w	80184b2 <_dtoa_r+0x43a>
 80186c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80186ca:	1e73      	subs	r3, r6, #1
 80186cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80186ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80186d2:	2b30      	cmp	r3, #48	@ 0x30
 80186d4:	d0f8      	beq.n	80186c8 <_dtoa_r+0x650>
 80186d6:	9f04      	ldr	r7, [sp, #16]
 80186d8:	e73e      	b.n	8018558 <_dtoa_r+0x4e0>
 80186da:	4b9b      	ldr	r3, [pc, #620]	@ (8018948 <_dtoa_r+0x8d0>)
 80186dc:	f7e7 ffc4 	bl	8000668 <__aeabi_dmul>
 80186e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186e4:	e7bc      	b.n	8018660 <_dtoa_r+0x5e8>
 80186e6:	d10c      	bne.n	8018702 <_dtoa_r+0x68a>
 80186e8:	4b98      	ldr	r3, [pc, #608]	@ (801894c <_dtoa_r+0x8d4>)
 80186ea:	2200      	movs	r2, #0
 80186ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80186f0:	f7e7 ffba 	bl	8000668 <__aeabi_dmul>
 80186f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80186f8:	f7e8 fa3c 	bl	8000b74 <__aeabi_dcmpge>
 80186fc:	2800      	cmp	r0, #0
 80186fe:	f000 8157 	beq.w	80189b0 <_dtoa_r+0x938>
 8018702:	2400      	movs	r4, #0
 8018704:	4625      	mov	r5, r4
 8018706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018708:	43db      	mvns	r3, r3
 801870a:	9304      	str	r3, [sp, #16]
 801870c:	4656      	mov	r6, sl
 801870e:	2700      	movs	r7, #0
 8018710:	4621      	mov	r1, r4
 8018712:	4658      	mov	r0, fp
 8018714:	f000 fafe 	bl	8018d14 <_Bfree>
 8018718:	2d00      	cmp	r5, #0
 801871a:	d0dc      	beq.n	80186d6 <_dtoa_r+0x65e>
 801871c:	b12f      	cbz	r7, 801872a <_dtoa_r+0x6b2>
 801871e:	42af      	cmp	r7, r5
 8018720:	d003      	beq.n	801872a <_dtoa_r+0x6b2>
 8018722:	4639      	mov	r1, r7
 8018724:	4658      	mov	r0, fp
 8018726:	f000 faf5 	bl	8018d14 <_Bfree>
 801872a:	4629      	mov	r1, r5
 801872c:	4658      	mov	r0, fp
 801872e:	f000 faf1 	bl	8018d14 <_Bfree>
 8018732:	e7d0      	b.n	80186d6 <_dtoa_r+0x65e>
 8018734:	9704      	str	r7, [sp, #16]
 8018736:	4633      	mov	r3, r6
 8018738:	461e      	mov	r6, r3
 801873a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801873e:	2a39      	cmp	r2, #57	@ 0x39
 8018740:	d107      	bne.n	8018752 <_dtoa_r+0x6da>
 8018742:	459a      	cmp	sl, r3
 8018744:	d1f8      	bne.n	8018738 <_dtoa_r+0x6c0>
 8018746:	9a04      	ldr	r2, [sp, #16]
 8018748:	3201      	adds	r2, #1
 801874a:	9204      	str	r2, [sp, #16]
 801874c:	2230      	movs	r2, #48	@ 0x30
 801874e:	f88a 2000 	strb.w	r2, [sl]
 8018752:	781a      	ldrb	r2, [r3, #0]
 8018754:	3201      	adds	r2, #1
 8018756:	701a      	strb	r2, [r3, #0]
 8018758:	e7bd      	b.n	80186d6 <_dtoa_r+0x65e>
 801875a:	4b7b      	ldr	r3, [pc, #492]	@ (8018948 <_dtoa_r+0x8d0>)
 801875c:	2200      	movs	r2, #0
 801875e:	f7e7 ff83 	bl	8000668 <__aeabi_dmul>
 8018762:	2200      	movs	r2, #0
 8018764:	2300      	movs	r3, #0
 8018766:	4604      	mov	r4, r0
 8018768:	460d      	mov	r5, r1
 801876a:	f7e8 f9e5 	bl	8000b38 <__aeabi_dcmpeq>
 801876e:	2800      	cmp	r0, #0
 8018770:	f43f aebb 	beq.w	80184ea <_dtoa_r+0x472>
 8018774:	e6f0      	b.n	8018558 <_dtoa_r+0x4e0>
 8018776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018778:	2a00      	cmp	r2, #0
 801877a:	f000 80db 	beq.w	8018934 <_dtoa_r+0x8bc>
 801877e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018780:	2a01      	cmp	r2, #1
 8018782:	f300 80bf 	bgt.w	8018904 <_dtoa_r+0x88c>
 8018786:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018788:	2a00      	cmp	r2, #0
 801878a:	f000 80b7 	beq.w	80188fc <_dtoa_r+0x884>
 801878e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8018792:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018794:	4646      	mov	r6, r8
 8018796:	9a08      	ldr	r2, [sp, #32]
 8018798:	2101      	movs	r1, #1
 801879a:	441a      	add	r2, r3
 801879c:	4658      	mov	r0, fp
 801879e:	4498      	add	r8, r3
 80187a0:	9208      	str	r2, [sp, #32]
 80187a2:	f000 fb6b 	bl	8018e7c <__i2b>
 80187a6:	4605      	mov	r5, r0
 80187a8:	b15e      	cbz	r6, 80187c2 <_dtoa_r+0x74a>
 80187aa:	9b08      	ldr	r3, [sp, #32]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	dd08      	ble.n	80187c2 <_dtoa_r+0x74a>
 80187b0:	42b3      	cmp	r3, r6
 80187b2:	9a08      	ldr	r2, [sp, #32]
 80187b4:	bfa8      	it	ge
 80187b6:	4633      	movge	r3, r6
 80187b8:	eba8 0803 	sub.w	r8, r8, r3
 80187bc:	1af6      	subs	r6, r6, r3
 80187be:	1ad3      	subs	r3, r2, r3
 80187c0:	9308      	str	r3, [sp, #32]
 80187c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187c4:	b1f3      	cbz	r3, 8018804 <_dtoa_r+0x78c>
 80187c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	f000 80b7 	beq.w	801893c <_dtoa_r+0x8c4>
 80187ce:	b18c      	cbz	r4, 80187f4 <_dtoa_r+0x77c>
 80187d0:	4629      	mov	r1, r5
 80187d2:	4622      	mov	r2, r4
 80187d4:	4658      	mov	r0, fp
 80187d6:	f000 fc11 	bl	8018ffc <__pow5mult>
 80187da:	464a      	mov	r2, r9
 80187dc:	4601      	mov	r1, r0
 80187de:	4605      	mov	r5, r0
 80187e0:	4658      	mov	r0, fp
 80187e2:	f000 fb61 	bl	8018ea8 <__multiply>
 80187e6:	4649      	mov	r1, r9
 80187e8:	9004      	str	r0, [sp, #16]
 80187ea:	4658      	mov	r0, fp
 80187ec:	f000 fa92 	bl	8018d14 <_Bfree>
 80187f0:	9b04      	ldr	r3, [sp, #16]
 80187f2:	4699      	mov	r9, r3
 80187f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187f6:	1b1a      	subs	r2, r3, r4
 80187f8:	d004      	beq.n	8018804 <_dtoa_r+0x78c>
 80187fa:	4649      	mov	r1, r9
 80187fc:	4658      	mov	r0, fp
 80187fe:	f000 fbfd 	bl	8018ffc <__pow5mult>
 8018802:	4681      	mov	r9, r0
 8018804:	2101      	movs	r1, #1
 8018806:	4658      	mov	r0, fp
 8018808:	f000 fb38 	bl	8018e7c <__i2b>
 801880c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801880e:	4604      	mov	r4, r0
 8018810:	2b00      	cmp	r3, #0
 8018812:	f000 81cf 	beq.w	8018bb4 <_dtoa_r+0xb3c>
 8018816:	461a      	mov	r2, r3
 8018818:	4601      	mov	r1, r0
 801881a:	4658      	mov	r0, fp
 801881c:	f000 fbee 	bl	8018ffc <__pow5mult>
 8018820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018822:	2b01      	cmp	r3, #1
 8018824:	4604      	mov	r4, r0
 8018826:	f300 8095 	bgt.w	8018954 <_dtoa_r+0x8dc>
 801882a:	9b02      	ldr	r3, [sp, #8]
 801882c:	2b00      	cmp	r3, #0
 801882e:	f040 8087 	bne.w	8018940 <_dtoa_r+0x8c8>
 8018832:	9b03      	ldr	r3, [sp, #12]
 8018834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018838:	2b00      	cmp	r3, #0
 801883a:	f040 8089 	bne.w	8018950 <_dtoa_r+0x8d8>
 801883e:	9b03      	ldr	r3, [sp, #12]
 8018840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018844:	0d1b      	lsrs	r3, r3, #20
 8018846:	051b      	lsls	r3, r3, #20
 8018848:	b12b      	cbz	r3, 8018856 <_dtoa_r+0x7de>
 801884a:	9b08      	ldr	r3, [sp, #32]
 801884c:	3301      	adds	r3, #1
 801884e:	9308      	str	r3, [sp, #32]
 8018850:	f108 0801 	add.w	r8, r8, #1
 8018854:	2301      	movs	r3, #1
 8018856:	930a      	str	r3, [sp, #40]	@ 0x28
 8018858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801885a:	2b00      	cmp	r3, #0
 801885c:	f000 81b0 	beq.w	8018bc0 <_dtoa_r+0xb48>
 8018860:	6923      	ldr	r3, [r4, #16]
 8018862:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018866:	6918      	ldr	r0, [r3, #16]
 8018868:	f000 fabc 	bl	8018de4 <__hi0bits>
 801886c:	f1c0 0020 	rsb	r0, r0, #32
 8018870:	9b08      	ldr	r3, [sp, #32]
 8018872:	4418      	add	r0, r3
 8018874:	f010 001f 	ands.w	r0, r0, #31
 8018878:	d077      	beq.n	801896a <_dtoa_r+0x8f2>
 801887a:	f1c0 0320 	rsb	r3, r0, #32
 801887e:	2b04      	cmp	r3, #4
 8018880:	dd6b      	ble.n	801895a <_dtoa_r+0x8e2>
 8018882:	9b08      	ldr	r3, [sp, #32]
 8018884:	f1c0 001c 	rsb	r0, r0, #28
 8018888:	4403      	add	r3, r0
 801888a:	4480      	add	r8, r0
 801888c:	4406      	add	r6, r0
 801888e:	9308      	str	r3, [sp, #32]
 8018890:	f1b8 0f00 	cmp.w	r8, #0
 8018894:	dd05      	ble.n	80188a2 <_dtoa_r+0x82a>
 8018896:	4649      	mov	r1, r9
 8018898:	4642      	mov	r2, r8
 801889a:	4658      	mov	r0, fp
 801889c:	f000 fc08 	bl	80190b0 <__lshift>
 80188a0:	4681      	mov	r9, r0
 80188a2:	9b08      	ldr	r3, [sp, #32]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	dd05      	ble.n	80188b4 <_dtoa_r+0x83c>
 80188a8:	4621      	mov	r1, r4
 80188aa:	461a      	mov	r2, r3
 80188ac:	4658      	mov	r0, fp
 80188ae:	f000 fbff 	bl	80190b0 <__lshift>
 80188b2:	4604      	mov	r4, r0
 80188b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d059      	beq.n	801896e <_dtoa_r+0x8f6>
 80188ba:	4621      	mov	r1, r4
 80188bc:	4648      	mov	r0, r9
 80188be:	f000 fc63 	bl	8019188 <__mcmp>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	da53      	bge.n	801896e <_dtoa_r+0x8f6>
 80188c6:	1e7b      	subs	r3, r7, #1
 80188c8:	9304      	str	r3, [sp, #16]
 80188ca:	4649      	mov	r1, r9
 80188cc:	2300      	movs	r3, #0
 80188ce:	220a      	movs	r2, #10
 80188d0:	4658      	mov	r0, fp
 80188d2:	f000 fa41 	bl	8018d58 <__multadd>
 80188d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80188d8:	4681      	mov	r9, r0
 80188da:	2b00      	cmp	r3, #0
 80188dc:	f000 8172 	beq.w	8018bc4 <_dtoa_r+0xb4c>
 80188e0:	2300      	movs	r3, #0
 80188e2:	4629      	mov	r1, r5
 80188e4:	220a      	movs	r2, #10
 80188e6:	4658      	mov	r0, fp
 80188e8:	f000 fa36 	bl	8018d58 <__multadd>
 80188ec:	9b00      	ldr	r3, [sp, #0]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	4605      	mov	r5, r0
 80188f2:	dc67      	bgt.n	80189c4 <_dtoa_r+0x94c>
 80188f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188f6:	2b02      	cmp	r3, #2
 80188f8:	dc41      	bgt.n	801897e <_dtoa_r+0x906>
 80188fa:	e063      	b.n	80189c4 <_dtoa_r+0x94c>
 80188fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80188fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8018902:	e746      	b.n	8018792 <_dtoa_r+0x71a>
 8018904:	9b07      	ldr	r3, [sp, #28]
 8018906:	1e5c      	subs	r4, r3, #1
 8018908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801890a:	42a3      	cmp	r3, r4
 801890c:	bfbf      	itttt	lt
 801890e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8018910:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8018912:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8018914:	1ae3      	sublt	r3, r4, r3
 8018916:	bfb4      	ite	lt
 8018918:	18d2      	addlt	r2, r2, r3
 801891a:	1b1c      	subge	r4, r3, r4
 801891c:	9b07      	ldr	r3, [sp, #28]
 801891e:	bfbc      	itt	lt
 8018920:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8018922:	2400      	movlt	r4, #0
 8018924:	2b00      	cmp	r3, #0
 8018926:	bfb5      	itete	lt
 8018928:	eba8 0603 	sublt.w	r6, r8, r3
 801892c:	9b07      	ldrge	r3, [sp, #28]
 801892e:	2300      	movlt	r3, #0
 8018930:	4646      	movge	r6, r8
 8018932:	e730      	b.n	8018796 <_dtoa_r+0x71e>
 8018934:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018938:	4646      	mov	r6, r8
 801893a:	e735      	b.n	80187a8 <_dtoa_r+0x730>
 801893c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801893e:	e75c      	b.n	80187fa <_dtoa_r+0x782>
 8018940:	2300      	movs	r3, #0
 8018942:	e788      	b.n	8018856 <_dtoa_r+0x7de>
 8018944:	3fe00000 	.word	0x3fe00000
 8018948:	40240000 	.word	0x40240000
 801894c:	40140000 	.word	0x40140000
 8018950:	9b02      	ldr	r3, [sp, #8]
 8018952:	e780      	b.n	8018856 <_dtoa_r+0x7de>
 8018954:	2300      	movs	r3, #0
 8018956:	930a      	str	r3, [sp, #40]	@ 0x28
 8018958:	e782      	b.n	8018860 <_dtoa_r+0x7e8>
 801895a:	d099      	beq.n	8018890 <_dtoa_r+0x818>
 801895c:	9a08      	ldr	r2, [sp, #32]
 801895e:	331c      	adds	r3, #28
 8018960:	441a      	add	r2, r3
 8018962:	4498      	add	r8, r3
 8018964:	441e      	add	r6, r3
 8018966:	9208      	str	r2, [sp, #32]
 8018968:	e792      	b.n	8018890 <_dtoa_r+0x818>
 801896a:	4603      	mov	r3, r0
 801896c:	e7f6      	b.n	801895c <_dtoa_r+0x8e4>
 801896e:	9b07      	ldr	r3, [sp, #28]
 8018970:	9704      	str	r7, [sp, #16]
 8018972:	2b00      	cmp	r3, #0
 8018974:	dc20      	bgt.n	80189b8 <_dtoa_r+0x940>
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801897a:	2b02      	cmp	r3, #2
 801897c:	dd1e      	ble.n	80189bc <_dtoa_r+0x944>
 801897e:	9b00      	ldr	r3, [sp, #0]
 8018980:	2b00      	cmp	r3, #0
 8018982:	f47f aec0 	bne.w	8018706 <_dtoa_r+0x68e>
 8018986:	4621      	mov	r1, r4
 8018988:	2205      	movs	r2, #5
 801898a:	4658      	mov	r0, fp
 801898c:	f000 f9e4 	bl	8018d58 <__multadd>
 8018990:	4601      	mov	r1, r0
 8018992:	4604      	mov	r4, r0
 8018994:	4648      	mov	r0, r9
 8018996:	f000 fbf7 	bl	8019188 <__mcmp>
 801899a:	2800      	cmp	r0, #0
 801899c:	f77f aeb3 	ble.w	8018706 <_dtoa_r+0x68e>
 80189a0:	4656      	mov	r6, sl
 80189a2:	2331      	movs	r3, #49	@ 0x31
 80189a4:	f806 3b01 	strb.w	r3, [r6], #1
 80189a8:	9b04      	ldr	r3, [sp, #16]
 80189aa:	3301      	adds	r3, #1
 80189ac:	9304      	str	r3, [sp, #16]
 80189ae:	e6ae      	b.n	801870e <_dtoa_r+0x696>
 80189b0:	9c07      	ldr	r4, [sp, #28]
 80189b2:	9704      	str	r7, [sp, #16]
 80189b4:	4625      	mov	r5, r4
 80189b6:	e7f3      	b.n	80189a0 <_dtoa_r+0x928>
 80189b8:	9b07      	ldr	r3, [sp, #28]
 80189ba:	9300      	str	r3, [sp, #0]
 80189bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189be:	2b00      	cmp	r3, #0
 80189c0:	f000 8104 	beq.w	8018bcc <_dtoa_r+0xb54>
 80189c4:	2e00      	cmp	r6, #0
 80189c6:	dd05      	ble.n	80189d4 <_dtoa_r+0x95c>
 80189c8:	4629      	mov	r1, r5
 80189ca:	4632      	mov	r2, r6
 80189cc:	4658      	mov	r0, fp
 80189ce:	f000 fb6f 	bl	80190b0 <__lshift>
 80189d2:	4605      	mov	r5, r0
 80189d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d05a      	beq.n	8018a90 <_dtoa_r+0xa18>
 80189da:	6869      	ldr	r1, [r5, #4]
 80189dc:	4658      	mov	r0, fp
 80189de:	f000 f959 	bl	8018c94 <_Balloc>
 80189e2:	4606      	mov	r6, r0
 80189e4:	b928      	cbnz	r0, 80189f2 <_dtoa_r+0x97a>
 80189e6:	4b84      	ldr	r3, [pc, #528]	@ (8018bf8 <_dtoa_r+0xb80>)
 80189e8:	4602      	mov	r2, r0
 80189ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80189ee:	f7ff bb5a 	b.w	80180a6 <_dtoa_r+0x2e>
 80189f2:	692a      	ldr	r2, [r5, #16]
 80189f4:	3202      	adds	r2, #2
 80189f6:	0092      	lsls	r2, r2, #2
 80189f8:	f105 010c 	add.w	r1, r5, #12
 80189fc:	300c      	adds	r0, #12
 80189fe:	f7ff faa2 	bl	8017f46 <memcpy>
 8018a02:	2201      	movs	r2, #1
 8018a04:	4631      	mov	r1, r6
 8018a06:	4658      	mov	r0, fp
 8018a08:	f000 fb52 	bl	80190b0 <__lshift>
 8018a0c:	f10a 0301 	add.w	r3, sl, #1
 8018a10:	9307      	str	r3, [sp, #28]
 8018a12:	9b00      	ldr	r3, [sp, #0]
 8018a14:	4453      	add	r3, sl
 8018a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018a18:	9b02      	ldr	r3, [sp, #8]
 8018a1a:	f003 0301 	and.w	r3, r3, #1
 8018a1e:	462f      	mov	r7, r5
 8018a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8018a22:	4605      	mov	r5, r0
 8018a24:	9b07      	ldr	r3, [sp, #28]
 8018a26:	4621      	mov	r1, r4
 8018a28:	3b01      	subs	r3, #1
 8018a2a:	4648      	mov	r0, r9
 8018a2c:	9300      	str	r3, [sp, #0]
 8018a2e:	f7ff fa98 	bl	8017f62 <quorem>
 8018a32:	4639      	mov	r1, r7
 8018a34:	9002      	str	r0, [sp, #8]
 8018a36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018a3a:	4648      	mov	r0, r9
 8018a3c:	f000 fba4 	bl	8019188 <__mcmp>
 8018a40:	462a      	mov	r2, r5
 8018a42:	9008      	str	r0, [sp, #32]
 8018a44:	4621      	mov	r1, r4
 8018a46:	4658      	mov	r0, fp
 8018a48:	f000 fbba 	bl	80191c0 <__mdiff>
 8018a4c:	68c2      	ldr	r2, [r0, #12]
 8018a4e:	4606      	mov	r6, r0
 8018a50:	bb02      	cbnz	r2, 8018a94 <_dtoa_r+0xa1c>
 8018a52:	4601      	mov	r1, r0
 8018a54:	4648      	mov	r0, r9
 8018a56:	f000 fb97 	bl	8019188 <__mcmp>
 8018a5a:	4602      	mov	r2, r0
 8018a5c:	4631      	mov	r1, r6
 8018a5e:	4658      	mov	r0, fp
 8018a60:	920e      	str	r2, [sp, #56]	@ 0x38
 8018a62:	f000 f957 	bl	8018d14 <_Bfree>
 8018a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a6a:	9e07      	ldr	r6, [sp, #28]
 8018a6c:	ea43 0102 	orr.w	r1, r3, r2
 8018a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a72:	4319      	orrs	r1, r3
 8018a74:	d110      	bne.n	8018a98 <_dtoa_r+0xa20>
 8018a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018a7a:	d029      	beq.n	8018ad0 <_dtoa_r+0xa58>
 8018a7c:	9b08      	ldr	r3, [sp, #32]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	dd02      	ble.n	8018a88 <_dtoa_r+0xa10>
 8018a82:	9b02      	ldr	r3, [sp, #8]
 8018a84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018a88:	9b00      	ldr	r3, [sp, #0]
 8018a8a:	f883 8000 	strb.w	r8, [r3]
 8018a8e:	e63f      	b.n	8018710 <_dtoa_r+0x698>
 8018a90:	4628      	mov	r0, r5
 8018a92:	e7bb      	b.n	8018a0c <_dtoa_r+0x994>
 8018a94:	2201      	movs	r2, #1
 8018a96:	e7e1      	b.n	8018a5c <_dtoa_r+0x9e4>
 8018a98:	9b08      	ldr	r3, [sp, #32]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	db04      	blt.n	8018aa8 <_dtoa_r+0xa30>
 8018a9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018aa0:	430b      	orrs	r3, r1
 8018aa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018aa4:	430b      	orrs	r3, r1
 8018aa6:	d120      	bne.n	8018aea <_dtoa_r+0xa72>
 8018aa8:	2a00      	cmp	r2, #0
 8018aaa:	dded      	ble.n	8018a88 <_dtoa_r+0xa10>
 8018aac:	4649      	mov	r1, r9
 8018aae:	2201      	movs	r2, #1
 8018ab0:	4658      	mov	r0, fp
 8018ab2:	f000 fafd 	bl	80190b0 <__lshift>
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	4681      	mov	r9, r0
 8018aba:	f000 fb65 	bl	8019188 <__mcmp>
 8018abe:	2800      	cmp	r0, #0
 8018ac0:	dc03      	bgt.n	8018aca <_dtoa_r+0xa52>
 8018ac2:	d1e1      	bne.n	8018a88 <_dtoa_r+0xa10>
 8018ac4:	f018 0f01 	tst.w	r8, #1
 8018ac8:	d0de      	beq.n	8018a88 <_dtoa_r+0xa10>
 8018aca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018ace:	d1d8      	bne.n	8018a82 <_dtoa_r+0xa0a>
 8018ad0:	9a00      	ldr	r2, [sp, #0]
 8018ad2:	2339      	movs	r3, #57	@ 0x39
 8018ad4:	7013      	strb	r3, [r2, #0]
 8018ad6:	4633      	mov	r3, r6
 8018ad8:	461e      	mov	r6, r3
 8018ada:	3b01      	subs	r3, #1
 8018adc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018ae0:	2a39      	cmp	r2, #57	@ 0x39
 8018ae2:	d052      	beq.n	8018b8a <_dtoa_r+0xb12>
 8018ae4:	3201      	adds	r2, #1
 8018ae6:	701a      	strb	r2, [r3, #0]
 8018ae8:	e612      	b.n	8018710 <_dtoa_r+0x698>
 8018aea:	2a00      	cmp	r2, #0
 8018aec:	dd07      	ble.n	8018afe <_dtoa_r+0xa86>
 8018aee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018af2:	d0ed      	beq.n	8018ad0 <_dtoa_r+0xa58>
 8018af4:	9a00      	ldr	r2, [sp, #0]
 8018af6:	f108 0301 	add.w	r3, r8, #1
 8018afa:	7013      	strb	r3, [r2, #0]
 8018afc:	e608      	b.n	8018710 <_dtoa_r+0x698>
 8018afe:	9b07      	ldr	r3, [sp, #28]
 8018b00:	9a07      	ldr	r2, [sp, #28]
 8018b02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8018b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b08:	4293      	cmp	r3, r2
 8018b0a:	d028      	beq.n	8018b5e <_dtoa_r+0xae6>
 8018b0c:	4649      	mov	r1, r9
 8018b0e:	2300      	movs	r3, #0
 8018b10:	220a      	movs	r2, #10
 8018b12:	4658      	mov	r0, fp
 8018b14:	f000 f920 	bl	8018d58 <__multadd>
 8018b18:	42af      	cmp	r7, r5
 8018b1a:	4681      	mov	r9, r0
 8018b1c:	f04f 0300 	mov.w	r3, #0
 8018b20:	f04f 020a 	mov.w	r2, #10
 8018b24:	4639      	mov	r1, r7
 8018b26:	4658      	mov	r0, fp
 8018b28:	d107      	bne.n	8018b3a <_dtoa_r+0xac2>
 8018b2a:	f000 f915 	bl	8018d58 <__multadd>
 8018b2e:	4607      	mov	r7, r0
 8018b30:	4605      	mov	r5, r0
 8018b32:	9b07      	ldr	r3, [sp, #28]
 8018b34:	3301      	adds	r3, #1
 8018b36:	9307      	str	r3, [sp, #28]
 8018b38:	e774      	b.n	8018a24 <_dtoa_r+0x9ac>
 8018b3a:	f000 f90d 	bl	8018d58 <__multadd>
 8018b3e:	4629      	mov	r1, r5
 8018b40:	4607      	mov	r7, r0
 8018b42:	2300      	movs	r3, #0
 8018b44:	220a      	movs	r2, #10
 8018b46:	4658      	mov	r0, fp
 8018b48:	f000 f906 	bl	8018d58 <__multadd>
 8018b4c:	4605      	mov	r5, r0
 8018b4e:	e7f0      	b.n	8018b32 <_dtoa_r+0xaba>
 8018b50:	9b00      	ldr	r3, [sp, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	bfcc      	ite	gt
 8018b56:	461e      	movgt	r6, r3
 8018b58:	2601      	movle	r6, #1
 8018b5a:	4456      	add	r6, sl
 8018b5c:	2700      	movs	r7, #0
 8018b5e:	4649      	mov	r1, r9
 8018b60:	2201      	movs	r2, #1
 8018b62:	4658      	mov	r0, fp
 8018b64:	f000 faa4 	bl	80190b0 <__lshift>
 8018b68:	4621      	mov	r1, r4
 8018b6a:	4681      	mov	r9, r0
 8018b6c:	f000 fb0c 	bl	8019188 <__mcmp>
 8018b70:	2800      	cmp	r0, #0
 8018b72:	dcb0      	bgt.n	8018ad6 <_dtoa_r+0xa5e>
 8018b74:	d102      	bne.n	8018b7c <_dtoa_r+0xb04>
 8018b76:	f018 0f01 	tst.w	r8, #1
 8018b7a:	d1ac      	bne.n	8018ad6 <_dtoa_r+0xa5e>
 8018b7c:	4633      	mov	r3, r6
 8018b7e:	461e      	mov	r6, r3
 8018b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b84:	2a30      	cmp	r2, #48	@ 0x30
 8018b86:	d0fa      	beq.n	8018b7e <_dtoa_r+0xb06>
 8018b88:	e5c2      	b.n	8018710 <_dtoa_r+0x698>
 8018b8a:	459a      	cmp	sl, r3
 8018b8c:	d1a4      	bne.n	8018ad8 <_dtoa_r+0xa60>
 8018b8e:	9b04      	ldr	r3, [sp, #16]
 8018b90:	3301      	adds	r3, #1
 8018b92:	9304      	str	r3, [sp, #16]
 8018b94:	2331      	movs	r3, #49	@ 0x31
 8018b96:	f88a 3000 	strb.w	r3, [sl]
 8018b9a:	e5b9      	b.n	8018710 <_dtoa_r+0x698>
 8018b9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018b9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018bfc <_dtoa_r+0xb84>
 8018ba2:	b11b      	cbz	r3, 8018bac <_dtoa_r+0xb34>
 8018ba4:	f10a 0308 	add.w	r3, sl, #8
 8018ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018baa:	6013      	str	r3, [r2, #0]
 8018bac:	4650      	mov	r0, sl
 8018bae:	b019      	add	sp, #100	@ 0x64
 8018bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	f77f ae37 	ble.w	801882a <_dtoa_r+0x7b2>
 8018bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8018bc0:	2001      	movs	r0, #1
 8018bc2:	e655      	b.n	8018870 <_dtoa_r+0x7f8>
 8018bc4:	9b00      	ldr	r3, [sp, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	f77f aed6 	ble.w	8018978 <_dtoa_r+0x900>
 8018bcc:	4656      	mov	r6, sl
 8018bce:	4621      	mov	r1, r4
 8018bd0:	4648      	mov	r0, r9
 8018bd2:	f7ff f9c6 	bl	8017f62 <quorem>
 8018bd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018bda:	f806 8b01 	strb.w	r8, [r6], #1
 8018bde:	9b00      	ldr	r3, [sp, #0]
 8018be0:	eba6 020a 	sub.w	r2, r6, sl
 8018be4:	4293      	cmp	r3, r2
 8018be6:	ddb3      	ble.n	8018b50 <_dtoa_r+0xad8>
 8018be8:	4649      	mov	r1, r9
 8018bea:	2300      	movs	r3, #0
 8018bec:	220a      	movs	r2, #10
 8018bee:	4658      	mov	r0, fp
 8018bf0:	f000 f8b2 	bl	8018d58 <__multadd>
 8018bf4:	4681      	mov	r9, r0
 8018bf6:	e7ea      	b.n	8018bce <_dtoa_r+0xb56>
 8018bf8:	0801a5a8 	.word	0x0801a5a8
 8018bfc:	0801a52c 	.word	0x0801a52c

08018c00 <_free_r>:
 8018c00:	b538      	push	{r3, r4, r5, lr}
 8018c02:	4605      	mov	r5, r0
 8018c04:	2900      	cmp	r1, #0
 8018c06:	d041      	beq.n	8018c8c <_free_r+0x8c>
 8018c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c0c:	1f0c      	subs	r4, r1, #4
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	bfb8      	it	lt
 8018c12:	18e4      	addlt	r4, r4, r3
 8018c14:	f7fe faea 	bl	80171ec <__malloc_lock>
 8018c18:	4a1d      	ldr	r2, [pc, #116]	@ (8018c90 <_free_r+0x90>)
 8018c1a:	6813      	ldr	r3, [r2, #0]
 8018c1c:	b933      	cbnz	r3, 8018c2c <_free_r+0x2c>
 8018c1e:	6063      	str	r3, [r4, #4]
 8018c20:	6014      	str	r4, [r2, #0]
 8018c22:	4628      	mov	r0, r5
 8018c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c28:	f7fe bae6 	b.w	80171f8 <__malloc_unlock>
 8018c2c:	42a3      	cmp	r3, r4
 8018c2e:	d908      	bls.n	8018c42 <_free_r+0x42>
 8018c30:	6820      	ldr	r0, [r4, #0]
 8018c32:	1821      	adds	r1, r4, r0
 8018c34:	428b      	cmp	r3, r1
 8018c36:	bf01      	itttt	eq
 8018c38:	6819      	ldreq	r1, [r3, #0]
 8018c3a:	685b      	ldreq	r3, [r3, #4]
 8018c3c:	1809      	addeq	r1, r1, r0
 8018c3e:	6021      	streq	r1, [r4, #0]
 8018c40:	e7ed      	b.n	8018c1e <_free_r+0x1e>
 8018c42:	461a      	mov	r2, r3
 8018c44:	685b      	ldr	r3, [r3, #4]
 8018c46:	b10b      	cbz	r3, 8018c4c <_free_r+0x4c>
 8018c48:	42a3      	cmp	r3, r4
 8018c4a:	d9fa      	bls.n	8018c42 <_free_r+0x42>
 8018c4c:	6811      	ldr	r1, [r2, #0]
 8018c4e:	1850      	adds	r0, r2, r1
 8018c50:	42a0      	cmp	r0, r4
 8018c52:	d10b      	bne.n	8018c6c <_free_r+0x6c>
 8018c54:	6820      	ldr	r0, [r4, #0]
 8018c56:	4401      	add	r1, r0
 8018c58:	1850      	adds	r0, r2, r1
 8018c5a:	4283      	cmp	r3, r0
 8018c5c:	6011      	str	r1, [r2, #0]
 8018c5e:	d1e0      	bne.n	8018c22 <_free_r+0x22>
 8018c60:	6818      	ldr	r0, [r3, #0]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	6053      	str	r3, [r2, #4]
 8018c66:	4408      	add	r0, r1
 8018c68:	6010      	str	r0, [r2, #0]
 8018c6a:	e7da      	b.n	8018c22 <_free_r+0x22>
 8018c6c:	d902      	bls.n	8018c74 <_free_r+0x74>
 8018c6e:	230c      	movs	r3, #12
 8018c70:	602b      	str	r3, [r5, #0]
 8018c72:	e7d6      	b.n	8018c22 <_free_r+0x22>
 8018c74:	6820      	ldr	r0, [r4, #0]
 8018c76:	1821      	adds	r1, r4, r0
 8018c78:	428b      	cmp	r3, r1
 8018c7a:	bf04      	itt	eq
 8018c7c:	6819      	ldreq	r1, [r3, #0]
 8018c7e:	685b      	ldreq	r3, [r3, #4]
 8018c80:	6063      	str	r3, [r4, #4]
 8018c82:	bf04      	itt	eq
 8018c84:	1809      	addeq	r1, r1, r0
 8018c86:	6021      	streq	r1, [r4, #0]
 8018c88:	6054      	str	r4, [r2, #4]
 8018c8a:	e7ca      	b.n	8018c22 <_free_r+0x22>
 8018c8c:	bd38      	pop	{r3, r4, r5, pc}
 8018c8e:	bf00      	nop
 8018c90:	20010ac4 	.word	0x20010ac4

08018c94 <_Balloc>:
 8018c94:	b570      	push	{r4, r5, r6, lr}
 8018c96:	69c6      	ldr	r6, [r0, #28]
 8018c98:	4604      	mov	r4, r0
 8018c9a:	460d      	mov	r5, r1
 8018c9c:	b976      	cbnz	r6, 8018cbc <_Balloc+0x28>
 8018c9e:	2010      	movs	r0, #16
 8018ca0:	f7fe f9f2 	bl	8017088 <malloc>
 8018ca4:	4602      	mov	r2, r0
 8018ca6:	61e0      	str	r0, [r4, #28]
 8018ca8:	b920      	cbnz	r0, 8018cb4 <_Balloc+0x20>
 8018caa:	4b18      	ldr	r3, [pc, #96]	@ (8018d0c <_Balloc+0x78>)
 8018cac:	4818      	ldr	r0, [pc, #96]	@ (8018d10 <_Balloc+0x7c>)
 8018cae:	216b      	movs	r1, #107	@ 0x6b
 8018cb0:	f000 fc1e 	bl	80194f0 <__assert_func>
 8018cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018cb8:	6006      	str	r6, [r0, #0]
 8018cba:	60c6      	str	r6, [r0, #12]
 8018cbc:	69e6      	ldr	r6, [r4, #28]
 8018cbe:	68f3      	ldr	r3, [r6, #12]
 8018cc0:	b183      	cbz	r3, 8018ce4 <_Balloc+0x50>
 8018cc2:	69e3      	ldr	r3, [r4, #28]
 8018cc4:	68db      	ldr	r3, [r3, #12]
 8018cc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018cca:	b9b8      	cbnz	r0, 8018cfc <_Balloc+0x68>
 8018ccc:	2101      	movs	r1, #1
 8018cce:	fa01 f605 	lsl.w	r6, r1, r5
 8018cd2:	1d72      	adds	r2, r6, #5
 8018cd4:	0092      	lsls	r2, r2, #2
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	f000 fc28 	bl	801952c <_calloc_r>
 8018cdc:	b160      	cbz	r0, 8018cf8 <_Balloc+0x64>
 8018cde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018ce2:	e00e      	b.n	8018d02 <_Balloc+0x6e>
 8018ce4:	2221      	movs	r2, #33	@ 0x21
 8018ce6:	2104      	movs	r1, #4
 8018ce8:	4620      	mov	r0, r4
 8018cea:	f000 fc1f 	bl	801952c <_calloc_r>
 8018cee:	69e3      	ldr	r3, [r4, #28]
 8018cf0:	60f0      	str	r0, [r6, #12]
 8018cf2:	68db      	ldr	r3, [r3, #12]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d1e4      	bne.n	8018cc2 <_Balloc+0x2e>
 8018cf8:	2000      	movs	r0, #0
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	6802      	ldr	r2, [r0, #0]
 8018cfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d02:	2300      	movs	r3, #0
 8018d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d08:	e7f7      	b.n	8018cfa <_Balloc+0x66>
 8018d0a:	bf00      	nop
 8018d0c:	0801a539 	.word	0x0801a539
 8018d10:	0801a5b9 	.word	0x0801a5b9

08018d14 <_Bfree>:
 8018d14:	b570      	push	{r4, r5, r6, lr}
 8018d16:	69c6      	ldr	r6, [r0, #28]
 8018d18:	4605      	mov	r5, r0
 8018d1a:	460c      	mov	r4, r1
 8018d1c:	b976      	cbnz	r6, 8018d3c <_Bfree+0x28>
 8018d1e:	2010      	movs	r0, #16
 8018d20:	f7fe f9b2 	bl	8017088 <malloc>
 8018d24:	4602      	mov	r2, r0
 8018d26:	61e8      	str	r0, [r5, #28]
 8018d28:	b920      	cbnz	r0, 8018d34 <_Bfree+0x20>
 8018d2a:	4b09      	ldr	r3, [pc, #36]	@ (8018d50 <_Bfree+0x3c>)
 8018d2c:	4809      	ldr	r0, [pc, #36]	@ (8018d54 <_Bfree+0x40>)
 8018d2e:	218f      	movs	r1, #143	@ 0x8f
 8018d30:	f000 fbde 	bl	80194f0 <__assert_func>
 8018d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d38:	6006      	str	r6, [r0, #0]
 8018d3a:	60c6      	str	r6, [r0, #12]
 8018d3c:	b13c      	cbz	r4, 8018d4e <_Bfree+0x3a>
 8018d3e:	69eb      	ldr	r3, [r5, #28]
 8018d40:	6862      	ldr	r2, [r4, #4]
 8018d42:	68db      	ldr	r3, [r3, #12]
 8018d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d48:	6021      	str	r1, [r4, #0]
 8018d4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018d4e:	bd70      	pop	{r4, r5, r6, pc}
 8018d50:	0801a539 	.word	0x0801a539
 8018d54:	0801a5b9 	.word	0x0801a5b9

08018d58 <__multadd>:
 8018d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d5c:	690d      	ldr	r5, [r1, #16]
 8018d5e:	4607      	mov	r7, r0
 8018d60:	460c      	mov	r4, r1
 8018d62:	461e      	mov	r6, r3
 8018d64:	f101 0c14 	add.w	ip, r1, #20
 8018d68:	2000      	movs	r0, #0
 8018d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8018d6e:	b299      	uxth	r1, r3
 8018d70:	fb02 6101 	mla	r1, r2, r1, r6
 8018d74:	0c1e      	lsrs	r6, r3, #16
 8018d76:	0c0b      	lsrs	r3, r1, #16
 8018d78:	fb02 3306 	mla	r3, r2, r6, r3
 8018d7c:	b289      	uxth	r1, r1
 8018d7e:	3001      	adds	r0, #1
 8018d80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018d84:	4285      	cmp	r5, r0
 8018d86:	f84c 1b04 	str.w	r1, [ip], #4
 8018d8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018d8e:	dcec      	bgt.n	8018d6a <__multadd+0x12>
 8018d90:	b30e      	cbz	r6, 8018dd6 <__multadd+0x7e>
 8018d92:	68a3      	ldr	r3, [r4, #8]
 8018d94:	42ab      	cmp	r3, r5
 8018d96:	dc19      	bgt.n	8018dcc <__multadd+0x74>
 8018d98:	6861      	ldr	r1, [r4, #4]
 8018d9a:	4638      	mov	r0, r7
 8018d9c:	3101      	adds	r1, #1
 8018d9e:	f7ff ff79 	bl	8018c94 <_Balloc>
 8018da2:	4680      	mov	r8, r0
 8018da4:	b928      	cbnz	r0, 8018db2 <__multadd+0x5a>
 8018da6:	4602      	mov	r2, r0
 8018da8:	4b0c      	ldr	r3, [pc, #48]	@ (8018ddc <__multadd+0x84>)
 8018daa:	480d      	ldr	r0, [pc, #52]	@ (8018de0 <__multadd+0x88>)
 8018dac:	21ba      	movs	r1, #186	@ 0xba
 8018dae:	f000 fb9f 	bl	80194f0 <__assert_func>
 8018db2:	6922      	ldr	r2, [r4, #16]
 8018db4:	3202      	adds	r2, #2
 8018db6:	f104 010c 	add.w	r1, r4, #12
 8018dba:	0092      	lsls	r2, r2, #2
 8018dbc:	300c      	adds	r0, #12
 8018dbe:	f7ff f8c2 	bl	8017f46 <memcpy>
 8018dc2:	4621      	mov	r1, r4
 8018dc4:	4638      	mov	r0, r7
 8018dc6:	f7ff ffa5 	bl	8018d14 <_Bfree>
 8018dca:	4644      	mov	r4, r8
 8018dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018dd0:	3501      	adds	r5, #1
 8018dd2:	615e      	str	r6, [r3, #20]
 8018dd4:	6125      	str	r5, [r4, #16]
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ddc:	0801a5a8 	.word	0x0801a5a8
 8018de0:	0801a5b9 	.word	0x0801a5b9

08018de4 <__hi0bits>:
 8018de4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018de8:	4603      	mov	r3, r0
 8018dea:	bf36      	itet	cc
 8018dec:	0403      	lslcc	r3, r0, #16
 8018dee:	2000      	movcs	r0, #0
 8018df0:	2010      	movcc	r0, #16
 8018df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018df6:	bf3c      	itt	cc
 8018df8:	021b      	lslcc	r3, r3, #8
 8018dfa:	3008      	addcc	r0, #8
 8018dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018e00:	bf3c      	itt	cc
 8018e02:	011b      	lslcc	r3, r3, #4
 8018e04:	3004      	addcc	r0, #4
 8018e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018e0a:	bf3c      	itt	cc
 8018e0c:	009b      	lslcc	r3, r3, #2
 8018e0e:	3002      	addcc	r0, #2
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	db05      	blt.n	8018e20 <__hi0bits+0x3c>
 8018e14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018e18:	f100 0001 	add.w	r0, r0, #1
 8018e1c:	bf08      	it	eq
 8018e1e:	2020      	moveq	r0, #32
 8018e20:	4770      	bx	lr

08018e22 <__lo0bits>:
 8018e22:	6803      	ldr	r3, [r0, #0]
 8018e24:	4602      	mov	r2, r0
 8018e26:	f013 0007 	ands.w	r0, r3, #7
 8018e2a:	d00b      	beq.n	8018e44 <__lo0bits+0x22>
 8018e2c:	07d9      	lsls	r1, r3, #31
 8018e2e:	d421      	bmi.n	8018e74 <__lo0bits+0x52>
 8018e30:	0798      	lsls	r0, r3, #30
 8018e32:	bf49      	itett	mi
 8018e34:	085b      	lsrmi	r3, r3, #1
 8018e36:	089b      	lsrpl	r3, r3, #2
 8018e38:	2001      	movmi	r0, #1
 8018e3a:	6013      	strmi	r3, [r2, #0]
 8018e3c:	bf5c      	itt	pl
 8018e3e:	6013      	strpl	r3, [r2, #0]
 8018e40:	2002      	movpl	r0, #2
 8018e42:	4770      	bx	lr
 8018e44:	b299      	uxth	r1, r3
 8018e46:	b909      	cbnz	r1, 8018e4c <__lo0bits+0x2a>
 8018e48:	0c1b      	lsrs	r3, r3, #16
 8018e4a:	2010      	movs	r0, #16
 8018e4c:	b2d9      	uxtb	r1, r3
 8018e4e:	b909      	cbnz	r1, 8018e54 <__lo0bits+0x32>
 8018e50:	3008      	adds	r0, #8
 8018e52:	0a1b      	lsrs	r3, r3, #8
 8018e54:	0719      	lsls	r1, r3, #28
 8018e56:	bf04      	itt	eq
 8018e58:	091b      	lsreq	r3, r3, #4
 8018e5a:	3004      	addeq	r0, #4
 8018e5c:	0799      	lsls	r1, r3, #30
 8018e5e:	bf04      	itt	eq
 8018e60:	089b      	lsreq	r3, r3, #2
 8018e62:	3002      	addeq	r0, #2
 8018e64:	07d9      	lsls	r1, r3, #31
 8018e66:	d403      	bmi.n	8018e70 <__lo0bits+0x4e>
 8018e68:	085b      	lsrs	r3, r3, #1
 8018e6a:	f100 0001 	add.w	r0, r0, #1
 8018e6e:	d003      	beq.n	8018e78 <__lo0bits+0x56>
 8018e70:	6013      	str	r3, [r2, #0]
 8018e72:	4770      	bx	lr
 8018e74:	2000      	movs	r0, #0
 8018e76:	4770      	bx	lr
 8018e78:	2020      	movs	r0, #32
 8018e7a:	4770      	bx	lr

08018e7c <__i2b>:
 8018e7c:	b510      	push	{r4, lr}
 8018e7e:	460c      	mov	r4, r1
 8018e80:	2101      	movs	r1, #1
 8018e82:	f7ff ff07 	bl	8018c94 <_Balloc>
 8018e86:	4602      	mov	r2, r0
 8018e88:	b928      	cbnz	r0, 8018e96 <__i2b+0x1a>
 8018e8a:	4b05      	ldr	r3, [pc, #20]	@ (8018ea0 <__i2b+0x24>)
 8018e8c:	4805      	ldr	r0, [pc, #20]	@ (8018ea4 <__i2b+0x28>)
 8018e8e:	f240 1145 	movw	r1, #325	@ 0x145
 8018e92:	f000 fb2d 	bl	80194f0 <__assert_func>
 8018e96:	2301      	movs	r3, #1
 8018e98:	6144      	str	r4, [r0, #20]
 8018e9a:	6103      	str	r3, [r0, #16]
 8018e9c:	bd10      	pop	{r4, pc}
 8018e9e:	bf00      	nop
 8018ea0:	0801a5a8 	.word	0x0801a5a8
 8018ea4:	0801a5b9 	.word	0x0801a5b9

08018ea8 <__multiply>:
 8018ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eac:	4614      	mov	r4, r2
 8018eae:	690a      	ldr	r2, [r1, #16]
 8018eb0:	6923      	ldr	r3, [r4, #16]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	bfa8      	it	ge
 8018eb6:	4623      	movge	r3, r4
 8018eb8:	460f      	mov	r7, r1
 8018eba:	bfa4      	itt	ge
 8018ebc:	460c      	movge	r4, r1
 8018ebe:	461f      	movge	r7, r3
 8018ec0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018ec4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018ec8:	68a3      	ldr	r3, [r4, #8]
 8018eca:	6861      	ldr	r1, [r4, #4]
 8018ecc:	eb0a 0609 	add.w	r6, sl, r9
 8018ed0:	42b3      	cmp	r3, r6
 8018ed2:	b085      	sub	sp, #20
 8018ed4:	bfb8      	it	lt
 8018ed6:	3101      	addlt	r1, #1
 8018ed8:	f7ff fedc 	bl	8018c94 <_Balloc>
 8018edc:	b930      	cbnz	r0, 8018eec <__multiply+0x44>
 8018ede:	4602      	mov	r2, r0
 8018ee0:	4b44      	ldr	r3, [pc, #272]	@ (8018ff4 <__multiply+0x14c>)
 8018ee2:	4845      	ldr	r0, [pc, #276]	@ (8018ff8 <__multiply+0x150>)
 8018ee4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018ee8:	f000 fb02 	bl	80194f0 <__assert_func>
 8018eec:	f100 0514 	add.w	r5, r0, #20
 8018ef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018ef4:	462b      	mov	r3, r5
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	4543      	cmp	r3, r8
 8018efa:	d321      	bcc.n	8018f40 <__multiply+0x98>
 8018efc:	f107 0114 	add.w	r1, r7, #20
 8018f00:	f104 0214 	add.w	r2, r4, #20
 8018f04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018f08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018f0c:	9302      	str	r3, [sp, #8]
 8018f0e:	1b13      	subs	r3, r2, r4
 8018f10:	3b15      	subs	r3, #21
 8018f12:	f023 0303 	bic.w	r3, r3, #3
 8018f16:	3304      	adds	r3, #4
 8018f18:	f104 0715 	add.w	r7, r4, #21
 8018f1c:	42ba      	cmp	r2, r7
 8018f1e:	bf38      	it	cc
 8018f20:	2304      	movcc	r3, #4
 8018f22:	9301      	str	r3, [sp, #4]
 8018f24:	9b02      	ldr	r3, [sp, #8]
 8018f26:	9103      	str	r1, [sp, #12]
 8018f28:	428b      	cmp	r3, r1
 8018f2a:	d80c      	bhi.n	8018f46 <__multiply+0x9e>
 8018f2c:	2e00      	cmp	r6, #0
 8018f2e:	dd03      	ble.n	8018f38 <__multiply+0x90>
 8018f30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d05b      	beq.n	8018ff0 <__multiply+0x148>
 8018f38:	6106      	str	r6, [r0, #16]
 8018f3a:	b005      	add	sp, #20
 8018f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f40:	f843 2b04 	str.w	r2, [r3], #4
 8018f44:	e7d8      	b.n	8018ef8 <__multiply+0x50>
 8018f46:	f8b1 a000 	ldrh.w	sl, [r1]
 8018f4a:	f1ba 0f00 	cmp.w	sl, #0
 8018f4e:	d024      	beq.n	8018f9a <__multiply+0xf2>
 8018f50:	f104 0e14 	add.w	lr, r4, #20
 8018f54:	46a9      	mov	r9, r5
 8018f56:	f04f 0c00 	mov.w	ip, #0
 8018f5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018f5e:	f8d9 3000 	ldr.w	r3, [r9]
 8018f62:	fa1f fb87 	uxth.w	fp, r7
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	fb0a 330b 	mla	r3, sl, fp, r3
 8018f6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018f70:	f8d9 7000 	ldr.w	r7, [r9]
 8018f74:	4463      	add	r3, ip
 8018f76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018f7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8018f7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018f88:	4572      	cmp	r2, lr
 8018f8a:	f849 3b04 	str.w	r3, [r9], #4
 8018f8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018f92:	d8e2      	bhi.n	8018f5a <__multiply+0xb2>
 8018f94:	9b01      	ldr	r3, [sp, #4]
 8018f96:	f845 c003 	str.w	ip, [r5, r3]
 8018f9a:	9b03      	ldr	r3, [sp, #12]
 8018f9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018fa0:	3104      	adds	r1, #4
 8018fa2:	f1b9 0f00 	cmp.w	r9, #0
 8018fa6:	d021      	beq.n	8018fec <__multiply+0x144>
 8018fa8:	682b      	ldr	r3, [r5, #0]
 8018faa:	f104 0c14 	add.w	ip, r4, #20
 8018fae:	46ae      	mov	lr, r5
 8018fb0:	f04f 0a00 	mov.w	sl, #0
 8018fb4:	f8bc b000 	ldrh.w	fp, [ip]
 8018fb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018fbc:	fb09 770b 	mla	r7, r9, fp, r7
 8018fc0:	4457      	add	r7, sl
 8018fc2:	b29b      	uxth	r3, r3
 8018fc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018fc8:	f84e 3b04 	str.w	r3, [lr], #4
 8018fcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018fd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018fd4:	f8be 3000 	ldrh.w	r3, [lr]
 8018fd8:	fb09 330a 	mla	r3, r9, sl, r3
 8018fdc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018fe0:	4562      	cmp	r2, ip
 8018fe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018fe6:	d8e5      	bhi.n	8018fb4 <__multiply+0x10c>
 8018fe8:	9f01      	ldr	r7, [sp, #4]
 8018fea:	51eb      	str	r3, [r5, r7]
 8018fec:	3504      	adds	r5, #4
 8018fee:	e799      	b.n	8018f24 <__multiply+0x7c>
 8018ff0:	3e01      	subs	r6, #1
 8018ff2:	e79b      	b.n	8018f2c <__multiply+0x84>
 8018ff4:	0801a5a8 	.word	0x0801a5a8
 8018ff8:	0801a5b9 	.word	0x0801a5b9

08018ffc <__pow5mult>:
 8018ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019000:	4615      	mov	r5, r2
 8019002:	f012 0203 	ands.w	r2, r2, #3
 8019006:	4607      	mov	r7, r0
 8019008:	460e      	mov	r6, r1
 801900a:	d007      	beq.n	801901c <__pow5mult+0x20>
 801900c:	4c25      	ldr	r4, [pc, #148]	@ (80190a4 <__pow5mult+0xa8>)
 801900e:	3a01      	subs	r2, #1
 8019010:	2300      	movs	r3, #0
 8019012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019016:	f7ff fe9f 	bl	8018d58 <__multadd>
 801901a:	4606      	mov	r6, r0
 801901c:	10ad      	asrs	r5, r5, #2
 801901e:	d03d      	beq.n	801909c <__pow5mult+0xa0>
 8019020:	69fc      	ldr	r4, [r7, #28]
 8019022:	b97c      	cbnz	r4, 8019044 <__pow5mult+0x48>
 8019024:	2010      	movs	r0, #16
 8019026:	f7fe f82f 	bl	8017088 <malloc>
 801902a:	4602      	mov	r2, r0
 801902c:	61f8      	str	r0, [r7, #28]
 801902e:	b928      	cbnz	r0, 801903c <__pow5mult+0x40>
 8019030:	4b1d      	ldr	r3, [pc, #116]	@ (80190a8 <__pow5mult+0xac>)
 8019032:	481e      	ldr	r0, [pc, #120]	@ (80190ac <__pow5mult+0xb0>)
 8019034:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019038:	f000 fa5a 	bl	80194f0 <__assert_func>
 801903c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019040:	6004      	str	r4, [r0, #0]
 8019042:	60c4      	str	r4, [r0, #12]
 8019044:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801904c:	b94c      	cbnz	r4, 8019062 <__pow5mult+0x66>
 801904e:	f240 2171 	movw	r1, #625	@ 0x271
 8019052:	4638      	mov	r0, r7
 8019054:	f7ff ff12 	bl	8018e7c <__i2b>
 8019058:	2300      	movs	r3, #0
 801905a:	f8c8 0008 	str.w	r0, [r8, #8]
 801905e:	4604      	mov	r4, r0
 8019060:	6003      	str	r3, [r0, #0]
 8019062:	f04f 0900 	mov.w	r9, #0
 8019066:	07eb      	lsls	r3, r5, #31
 8019068:	d50a      	bpl.n	8019080 <__pow5mult+0x84>
 801906a:	4631      	mov	r1, r6
 801906c:	4622      	mov	r2, r4
 801906e:	4638      	mov	r0, r7
 8019070:	f7ff ff1a 	bl	8018ea8 <__multiply>
 8019074:	4631      	mov	r1, r6
 8019076:	4680      	mov	r8, r0
 8019078:	4638      	mov	r0, r7
 801907a:	f7ff fe4b 	bl	8018d14 <_Bfree>
 801907e:	4646      	mov	r6, r8
 8019080:	106d      	asrs	r5, r5, #1
 8019082:	d00b      	beq.n	801909c <__pow5mult+0xa0>
 8019084:	6820      	ldr	r0, [r4, #0]
 8019086:	b938      	cbnz	r0, 8019098 <__pow5mult+0x9c>
 8019088:	4622      	mov	r2, r4
 801908a:	4621      	mov	r1, r4
 801908c:	4638      	mov	r0, r7
 801908e:	f7ff ff0b 	bl	8018ea8 <__multiply>
 8019092:	6020      	str	r0, [r4, #0]
 8019094:	f8c0 9000 	str.w	r9, [r0]
 8019098:	4604      	mov	r4, r0
 801909a:	e7e4      	b.n	8019066 <__pow5mult+0x6a>
 801909c:	4630      	mov	r0, r6
 801909e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190a2:	bf00      	nop
 80190a4:	0801a614 	.word	0x0801a614
 80190a8:	0801a539 	.word	0x0801a539
 80190ac:	0801a5b9 	.word	0x0801a5b9

080190b0 <__lshift>:
 80190b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190b4:	460c      	mov	r4, r1
 80190b6:	6849      	ldr	r1, [r1, #4]
 80190b8:	6923      	ldr	r3, [r4, #16]
 80190ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80190be:	68a3      	ldr	r3, [r4, #8]
 80190c0:	4607      	mov	r7, r0
 80190c2:	4691      	mov	r9, r2
 80190c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80190c8:	f108 0601 	add.w	r6, r8, #1
 80190cc:	42b3      	cmp	r3, r6
 80190ce:	db0b      	blt.n	80190e8 <__lshift+0x38>
 80190d0:	4638      	mov	r0, r7
 80190d2:	f7ff fddf 	bl	8018c94 <_Balloc>
 80190d6:	4605      	mov	r5, r0
 80190d8:	b948      	cbnz	r0, 80190ee <__lshift+0x3e>
 80190da:	4602      	mov	r2, r0
 80190dc:	4b28      	ldr	r3, [pc, #160]	@ (8019180 <__lshift+0xd0>)
 80190de:	4829      	ldr	r0, [pc, #164]	@ (8019184 <__lshift+0xd4>)
 80190e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80190e4:	f000 fa04 	bl	80194f0 <__assert_func>
 80190e8:	3101      	adds	r1, #1
 80190ea:	005b      	lsls	r3, r3, #1
 80190ec:	e7ee      	b.n	80190cc <__lshift+0x1c>
 80190ee:	2300      	movs	r3, #0
 80190f0:	f100 0114 	add.w	r1, r0, #20
 80190f4:	f100 0210 	add.w	r2, r0, #16
 80190f8:	4618      	mov	r0, r3
 80190fa:	4553      	cmp	r3, sl
 80190fc:	db33      	blt.n	8019166 <__lshift+0xb6>
 80190fe:	6920      	ldr	r0, [r4, #16]
 8019100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019104:	f104 0314 	add.w	r3, r4, #20
 8019108:	f019 091f 	ands.w	r9, r9, #31
 801910c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019114:	d02b      	beq.n	801916e <__lshift+0xbe>
 8019116:	f1c9 0e20 	rsb	lr, r9, #32
 801911a:	468a      	mov	sl, r1
 801911c:	2200      	movs	r2, #0
 801911e:	6818      	ldr	r0, [r3, #0]
 8019120:	fa00 f009 	lsl.w	r0, r0, r9
 8019124:	4310      	orrs	r0, r2
 8019126:	f84a 0b04 	str.w	r0, [sl], #4
 801912a:	f853 2b04 	ldr.w	r2, [r3], #4
 801912e:	459c      	cmp	ip, r3
 8019130:	fa22 f20e 	lsr.w	r2, r2, lr
 8019134:	d8f3      	bhi.n	801911e <__lshift+0x6e>
 8019136:	ebac 0304 	sub.w	r3, ip, r4
 801913a:	3b15      	subs	r3, #21
 801913c:	f023 0303 	bic.w	r3, r3, #3
 8019140:	3304      	adds	r3, #4
 8019142:	f104 0015 	add.w	r0, r4, #21
 8019146:	4584      	cmp	ip, r0
 8019148:	bf38      	it	cc
 801914a:	2304      	movcc	r3, #4
 801914c:	50ca      	str	r2, [r1, r3]
 801914e:	b10a      	cbz	r2, 8019154 <__lshift+0xa4>
 8019150:	f108 0602 	add.w	r6, r8, #2
 8019154:	3e01      	subs	r6, #1
 8019156:	4638      	mov	r0, r7
 8019158:	612e      	str	r6, [r5, #16]
 801915a:	4621      	mov	r1, r4
 801915c:	f7ff fdda 	bl	8018d14 <_Bfree>
 8019160:	4628      	mov	r0, r5
 8019162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019166:	f842 0f04 	str.w	r0, [r2, #4]!
 801916a:	3301      	adds	r3, #1
 801916c:	e7c5      	b.n	80190fa <__lshift+0x4a>
 801916e:	3904      	subs	r1, #4
 8019170:	f853 2b04 	ldr.w	r2, [r3], #4
 8019174:	f841 2f04 	str.w	r2, [r1, #4]!
 8019178:	459c      	cmp	ip, r3
 801917a:	d8f9      	bhi.n	8019170 <__lshift+0xc0>
 801917c:	e7ea      	b.n	8019154 <__lshift+0xa4>
 801917e:	bf00      	nop
 8019180:	0801a5a8 	.word	0x0801a5a8
 8019184:	0801a5b9 	.word	0x0801a5b9

08019188 <__mcmp>:
 8019188:	690a      	ldr	r2, [r1, #16]
 801918a:	4603      	mov	r3, r0
 801918c:	6900      	ldr	r0, [r0, #16]
 801918e:	1a80      	subs	r0, r0, r2
 8019190:	b530      	push	{r4, r5, lr}
 8019192:	d10e      	bne.n	80191b2 <__mcmp+0x2a>
 8019194:	3314      	adds	r3, #20
 8019196:	3114      	adds	r1, #20
 8019198:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801919c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80191a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80191a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80191a8:	4295      	cmp	r5, r2
 80191aa:	d003      	beq.n	80191b4 <__mcmp+0x2c>
 80191ac:	d205      	bcs.n	80191ba <__mcmp+0x32>
 80191ae:	f04f 30ff 	mov.w	r0, #4294967295
 80191b2:	bd30      	pop	{r4, r5, pc}
 80191b4:	42a3      	cmp	r3, r4
 80191b6:	d3f3      	bcc.n	80191a0 <__mcmp+0x18>
 80191b8:	e7fb      	b.n	80191b2 <__mcmp+0x2a>
 80191ba:	2001      	movs	r0, #1
 80191bc:	e7f9      	b.n	80191b2 <__mcmp+0x2a>
	...

080191c0 <__mdiff>:
 80191c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191c4:	4689      	mov	r9, r1
 80191c6:	4606      	mov	r6, r0
 80191c8:	4611      	mov	r1, r2
 80191ca:	4648      	mov	r0, r9
 80191cc:	4614      	mov	r4, r2
 80191ce:	f7ff ffdb 	bl	8019188 <__mcmp>
 80191d2:	1e05      	subs	r5, r0, #0
 80191d4:	d112      	bne.n	80191fc <__mdiff+0x3c>
 80191d6:	4629      	mov	r1, r5
 80191d8:	4630      	mov	r0, r6
 80191da:	f7ff fd5b 	bl	8018c94 <_Balloc>
 80191de:	4602      	mov	r2, r0
 80191e0:	b928      	cbnz	r0, 80191ee <__mdiff+0x2e>
 80191e2:	4b3f      	ldr	r3, [pc, #252]	@ (80192e0 <__mdiff+0x120>)
 80191e4:	f240 2137 	movw	r1, #567	@ 0x237
 80191e8:	483e      	ldr	r0, [pc, #248]	@ (80192e4 <__mdiff+0x124>)
 80191ea:	f000 f981 	bl	80194f0 <__assert_func>
 80191ee:	2301      	movs	r3, #1
 80191f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80191f4:	4610      	mov	r0, r2
 80191f6:	b003      	add	sp, #12
 80191f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191fc:	bfbc      	itt	lt
 80191fe:	464b      	movlt	r3, r9
 8019200:	46a1      	movlt	r9, r4
 8019202:	4630      	mov	r0, r6
 8019204:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019208:	bfba      	itte	lt
 801920a:	461c      	movlt	r4, r3
 801920c:	2501      	movlt	r5, #1
 801920e:	2500      	movge	r5, #0
 8019210:	f7ff fd40 	bl	8018c94 <_Balloc>
 8019214:	4602      	mov	r2, r0
 8019216:	b918      	cbnz	r0, 8019220 <__mdiff+0x60>
 8019218:	4b31      	ldr	r3, [pc, #196]	@ (80192e0 <__mdiff+0x120>)
 801921a:	f240 2145 	movw	r1, #581	@ 0x245
 801921e:	e7e3      	b.n	80191e8 <__mdiff+0x28>
 8019220:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019224:	6926      	ldr	r6, [r4, #16]
 8019226:	60c5      	str	r5, [r0, #12]
 8019228:	f109 0310 	add.w	r3, r9, #16
 801922c:	f109 0514 	add.w	r5, r9, #20
 8019230:	f104 0e14 	add.w	lr, r4, #20
 8019234:	f100 0b14 	add.w	fp, r0, #20
 8019238:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801923c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019240:	9301      	str	r3, [sp, #4]
 8019242:	46d9      	mov	r9, fp
 8019244:	f04f 0c00 	mov.w	ip, #0
 8019248:	9b01      	ldr	r3, [sp, #4]
 801924a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801924e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019252:	9301      	str	r3, [sp, #4]
 8019254:	fa1f f38a 	uxth.w	r3, sl
 8019258:	4619      	mov	r1, r3
 801925a:	b283      	uxth	r3, r0
 801925c:	1acb      	subs	r3, r1, r3
 801925e:	0c00      	lsrs	r0, r0, #16
 8019260:	4463      	add	r3, ip
 8019262:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019266:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801926a:	b29b      	uxth	r3, r3
 801926c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019270:	4576      	cmp	r6, lr
 8019272:	f849 3b04 	str.w	r3, [r9], #4
 8019276:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801927a:	d8e5      	bhi.n	8019248 <__mdiff+0x88>
 801927c:	1b33      	subs	r3, r6, r4
 801927e:	3b15      	subs	r3, #21
 8019280:	f023 0303 	bic.w	r3, r3, #3
 8019284:	3415      	adds	r4, #21
 8019286:	3304      	adds	r3, #4
 8019288:	42a6      	cmp	r6, r4
 801928a:	bf38      	it	cc
 801928c:	2304      	movcc	r3, #4
 801928e:	441d      	add	r5, r3
 8019290:	445b      	add	r3, fp
 8019292:	461e      	mov	r6, r3
 8019294:	462c      	mov	r4, r5
 8019296:	4544      	cmp	r4, r8
 8019298:	d30e      	bcc.n	80192b8 <__mdiff+0xf8>
 801929a:	f108 0103 	add.w	r1, r8, #3
 801929e:	1b49      	subs	r1, r1, r5
 80192a0:	f021 0103 	bic.w	r1, r1, #3
 80192a4:	3d03      	subs	r5, #3
 80192a6:	45a8      	cmp	r8, r5
 80192a8:	bf38      	it	cc
 80192aa:	2100      	movcc	r1, #0
 80192ac:	440b      	add	r3, r1
 80192ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80192b2:	b191      	cbz	r1, 80192da <__mdiff+0x11a>
 80192b4:	6117      	str	r7, [r2, #16]
 80192b6:	e79d      	b.n	80191f4 <__mdiff+0x34>
 80192b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80192bc:	46e6      	mov	lr, ip
 80192be:	0c08      	lsrs	r0, r1, #16
 80192c0:	fa1c fc81 	uxtah	ip, ip, r1
 80192c4:	4471      	add	r1, lr
 80192c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80192ca:	b289      	uxth	r1, r1
 80192cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80192d0:	f846 1b04 	str.w	r1, [r6], #4
 80192d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80192d8:	e7dd      	b.n	8019296 <__mdiff+0xd6>
 80192da:	3f01      	subs	r7, #1
 80192dc:	e7e7      	b.n	80192ae <__mdiff+0xee>
 80192de:	bf00      	nop
 80192e0:	0801a5a8 	.word	0x0801a5a8
 80192e4:	0801a5b9 	.word	0x0801a5b9

080192e8 <__d2b>:
 80192e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80192ec:	460f      	mov	r7, r1
 80192ee:	2101      	movs	r1, #1
 80192f0:	ec59 8b10 	vmov	r8, r9, d0
 80192f4:	4616      	mov	r6, r2
 80192f6:	f7ff fccd 	bl	8018c94 <_Balloc>
 80192fa:	4604      	mov	r4, r0
 80192fc:	b930      	cbnz	r0, 801930c <__d2b+0x24>
 80192fe:	4602      	mov	r2, r0
 8019300:	4b23      	ldr	r3, [pc, #140]	@ (8019390 <__d2b+0xa8>)
 8019302:	4824      	ldr	r0, [pc, #144]	@ (8019394 <__d2b+0xac>)
 8019304:	f240 310f 	movw	r1, #783	@ 0x30f
 8019308:	f000 f8f2 	bl	80194f0 <__assert_func>
 801930c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019314:	b10d      	cbz	r5, 801931a <__d2b+0x32>
 8019316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801931a:	9301      	str	r3, [sp, #4]
 801931c:	f1b8 0300 	subs.w	r3, r8, #0
 8019320:	d023      	beq.n	801936a <__d2b+0x82>
 8019322:	4668      	mov	r0, sp
 8019324:	9300      	str	r3, [sp, #0]
 8019326:	f7ff fd7c 	bl	8018e22 <__lo0bits>
 801932a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801932e:	b1d0      	cbz	r0, 8019366 <__d2b+0x7e>
 8019330:	f1c0 0320 	rsb	r3, r0, #32
 8019334:	fa02 f303 	lsl.w	r3, r2, r3
 8019338:	430b      	orrs	r3, r1
 801933a:	40c2      	lsrs	r2, r0
 801933c:	6163      	str	r3, [r4, #20]
 801933e:	9201      	str	r2, [sp, #4]
 8019340:	9b01      	ldr	r3, [sp, #4]
 8019342:	61a3      	str	r3, [r4, #24]
 8019344:	2b00      	cmp	r3, #0
 8019346:	bf0c      	ite	eq
 8019348:	2201      	moveq	r2, #1
 801934a:	2202      	movne	r2, #2
 801934c:	6122      	str	r2, [r4, #16]
 801934e:	b1a5      	cbz	r5, 801937a <__d2b+0x92>
 8019350:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019354:	4405      	add	r5, r0
 8019356:	603d      	str	r5, [r7, #0]
 8019358:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801935c:	6030      	str	r0, [r6, #0]
 801935e:	4620      	mov	r0, r4
 8019360:	b003      	add	sp, #12
 8019362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019366:	6161      	str	r1, [r4, #20]
 8019368:	e7ea      	b.n	8019340 <__d2b+0x58>
 801936a:	a801      	add	r0, sp, #4
 801936c:	f7ff fd59 	bl	8018e22 <__lo0bits>
 8019370:	9b01      	ldr	r3, [sp, #4]
 8019372:	6163      	str	r3, [r4, #20]
 8019374:	3020      	adds	r0, #32
 8019376:	2201      	movs	r2, #1
 8019378:	e7e8      	b.n	801934c <__d2b+0x64>
 801937a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801937e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019382:	6038      	str	r0, [r7, #0]
 8019384:	6918      	ldr	r0, [r3, #16]
 8019386:	f7ff fd2d 	bl	8018de4 <__hi0bits>
 801938a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801938e:	e7e5      	b.n	801935c <__d2b+0x74>
 8019390:	0801a5a8 	.word	0x0801a5a8
 8019394:	0801a5b9 	.word	0x0801a5b9

08019398 <__sflush_r>:
 8019398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193a0:	0716      	lsls	r6, r2, #28
 80193a2:	4605      	mov	r5, r0
 80193a4:	460c      	mov	r4, r1
 80193a6:	d454      	bmi.n	8019452 <__sflush_r+0xba>
 80193a8:	684b      	ldr	r3, [r1, #4]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	dc02      	bgt.n	80193b4 <__sflush_r+0x1c>
 80193ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	dd48      	ble.n	8019446 <__sflush_r+0xae>
 80193b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193b6:	2e00      	cmp	r6, #0
 80193b8:	d045      	beq.n	8019446 <__sflush_r+0xae>
 80193ba:	2300      	movs	r3, #0
 80193bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80193c0:	682f      	ldr	r7, [r5, #0]
 80193c2:	6a21      	ldr	r1, [r4, #32]
 80193c4:	602b      	str	r3, [r5, #0]
 80193c6:	d030      	beq.n	801942a <__sflush_r+0x92>
 80193c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80193ca:	89a3      	ldrh	r3, [r4, #12]
 80193cc:	0759      	lsls	r1, r3, #29
 80193ce:	d505      	bpl.n	80193dc <__sflush_r+0x44>
 80193d0:	6863      	ldr	r3, [r4, #4]
 80193d2:	1ad2      	subs	r2, r2, r3
 80193d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80193d6:	b10b      	cbz	r3, 80193dc <__sflush_r+0x44>
 80193d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80193da:	1ad2      	subs	r2, r2, r3
 80193dc:	2300      	movs	r3, #0
 80193de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193e0:	6a21      	ldr	r1, [r4, #32]
 80193e2:	4628      	mov	r0, r5
 80193e4:	47b0      	blx	r6
 80193e6:	1c43      	adds	r3, r0, #1
 80193e8:	89a3      	ldrh	r3, [r4, #12]
 80193ea:	d106      	bne.n	80193fa <__sflush_r+0x62>
 80193ec:	6829      	ldr	r1, [r5, #0]
 80193ee:	291d      	cmp	r1, #29
 80193f0:	d82b      	bhi.n	801944a <__sflush_r+0xb2>
 80193f2:	4a2a      	ldr	r2, [pc, #168]	@ (801949c <__sflush_r+0x104>)
 80193f4:	410a      	asrs	r2, r1
 80193f6:	07d6      	lsls	r6, r2, #31
 80193f8:	d427      	bmi.n	801944a <__sflush_r+0xb2>
 80193fa:	2200      	movs	r2, #0
 80193fc:	6062      	str	r2, [r4, #4]
 80193fe:	04d9      	lsls	r1, r3, #19
 8019400:	6922      	ldr	r2, [r4, #16]
 8019402:	6022      	str	r2, [r4, #0]
 8019404:	d504      	bpl.n	8019410 <__sflush_r+0x78>
 8019406:	1c42      	adds	r2, r0, #1
 8019408:	d101      	bne.n	801940e <__sflush_r+0x76>
 801940a:	682b      	ldr	r3, [r5, #0]
 801940c:	b903      	cbnz	r3, 8019410 <__sflush_r+0x78>
 801940e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019412:	602f      	str	r7, [r5, #0]
 8019414:	b1b9      	cbz	r1, 8019446 <__sflush_r+0xae>
 8019416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801941a:	4299      	cmp	r1, r3
 801941c:	d002      	beq.n	8019424 <__sflush_r+0x8c>
 801941e:	4628      	mov	r0, r5
 8019420:	f7ff fbee 	bl	8018c00 <_free_r>
 8019424:	2300      	movs	r3, #0
 8019426:	6363      	str	r3, [r4, #52]	@ 0x34
 8019428:	e00d      	b.n	8019446 <__sflush_r+0xae>
 801942a:	2301      	movs	r3, #1
 801942c:	4628      	mov	r0, r5
 801942e:	47b0      	blx	r6
 8019430:	4602      	mov	r2, r0
 8019432:	1c50      	adds	r0, r2, #1
 8019434:	d1c9      	bne.n	80193ca <__sflush_r+0x32>
 8019436:	682b      	ldr	r3, [r5, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d0c6      	beq.n	80193ca <__sflush_r+0x32>
 801943c:	2b1d      	cmp	r3, #29
 801943e:	d001      	beq.n	8019444 <__sflush_r+0xac>
 8019440:	2b16      	cmp	r3, #22
 8019442:	d11e      	bne.n	8019482 <__sflush_r+0xea>
 8019444:	602f      	str	r7, [r5, #0]
 8019446:	2000      	movs	r0, #0
 8019448:	e022      	b.n	8019490 <__sflush_r+0xf8>
 801944a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801944e:	b21b      	sxth	r3, r3
 8019450:	e01b      	b.n	801948a <__sflush_r+0xf2>
 8019452:	690f      	ldr	r7, [r1, #16]
 8019454:	2f00      	cmp	r7, #0
 8019456:	d0f6      	beq.n	8019446 <__sflush_r+0xae>
 8019458:	0793      	lsls	r3, r2, #30
 801945a:	680e      	ldr	r6, [r1, #0]
 801945c:	bf08      	it	eq
 801945e:	694b      	ldreq	r3, [r1, #20]
 8019460:	600f      	str	r7, [r1, #0]
 8019462:	bf18      	it	ne
 8019464:	2300      	movne	r3, #0
 8019466:	eba6 0807 	sub.w	r8, r6, r7
 801946a:	608b      	str	r3, [r1, #8]
 801946c:	f1b8 0f00 	cmp.w	r8, #0
 8019470:	dde9      	ble.n	8019446 <__sflush_r+0xae>
 8019472:	6a21      	ldr	r1, [r4, #32]
 8019474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019476:	4643      	mov	r3, r8
 8019478:	463a      	mov	r2, r7
 801947a:	4628      	mov	r0, r5
 801947c:	47b0      	blx	r6
 801947e:	2800      	cmp	r0, #0
 8019480:	dc08      	bgt.n	8019494 <__sflush_r+0xfc>
 8019482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801948a:	81a3      	strh	r3, [r4, #12]
 801948c:	f04f 30ff 	mov.w	r0, #4294967295
 8019490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019494:	4407      	add	r7, r0
 8019496:	eba8 0800 	sub.w	r8, r8, r0
 801949a:	e7e7      	b.n	801946c <__sflush_r+0xd4>
 801949c:	dfbffffe 	.word	0xdfbffffe

080194a0 <_fflush_r>:
 80194a0:	b538      	push	{r3, r4, r5, lr}
 80194a2:	690b      	ldr	r3, [r1, #16]
 80194a4:	4605      	mov	r5, r0
 80194a6:	460c      	mov	r4, r1
 80194a8:	b913      	cbnz	r3, 80194b0 <_fflush_r+0x10>
 80194aa:	2500      	movs	r5, #0
 80194ac:	4628      	mov	r0, r5
 80194ae:	bd38      	pop	{r3, r4, r5, pc}
 80194b0:	b118      	cbz	r0, 80194ba <_fflush_r+0x1a>
 80194b2:	6a03      	ldr	r3, [r0, #32]
 80194b4:	b90b      	cbnz	r3, 80194ba <_fflush_r+0x1a>
 80194b6:	f7fe fb89 	bl	8017bcc <__sinit>
 80194ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d0f3      	beq.n	80194aa <_fflush_r+0xa>
 80194c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80194c4:	07d0      	lsls	r0, r2, #31
 80194c6:	d404      	bmi.n	80194d2 <_fflush_r+0x32>
 80194c8:	0599      	lsls	r1, r3, #22
 80194ca:	d402      	bmi.n	80194d2 <_fflush_r+0x32>
 80194cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194ce:	f7fe fd38 	bl	8017f42 <__retarget_lock_acquire_recursive>
 80194d2:	4628      	mov	r0, r5
 80194d4:	4621      	mov	r1, r4
 80194d6:	f7ff ff5f 	bl	8019398 <__sflush_r>
 80194da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80194dc:	07da      	lsls	r2, r3, #31
 80194de:	4605      	mov	r5, r0
 80194e0:	d4e4      	bmi.n	80194ac <_fflush_r+0xc>
 80194e2:	89a3      	ldrh	r3, [r4, #12]
 80194e4:	059b      	lsls	r3, r3, #22
 80194e6:	d4e1      	bmi.n	80194ac <_fflush_r+0xc>
 80194e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194ea:	f7fe fd2b 	bl	8017f44 <__retarget_lock_release_recursive>
 80194ee:	e7dd      	b.n	80194ac <_fflush_r+0xc>

080194f0 <__assert_func>:
 80194f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194f2:	4614      	mov	r4, r2
 80194f4:	461a      	mov	r2, r3
 80194f6:	4b09      	ldr	r3, [pc, #36]	@ (801951c <__assert_func+0x2c>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4605      	mov	r5, r0
 80194fc:	68d8      	ldr	r0, [r3, #12]
 80194fe:	b954      	cbnz	r4, 8019516 <__assert_func+0x26>
 8019500:	4b07      	ldr	r3, [pc, #28]	@ (8019520 <__assert_func+0x30>)
 8019502:	461c      	mov	r4, r3
 8019504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019508:	9100      	str	r1, [sp, #0]
 801950a:	462b      	mov	r3, r5
 801950c:	4905      	ldr	r1, [pc, #20]	@ (8019524 <__assert_func+0x34>)
 801950e:	f000 f841 	bl	8019594 <fiprintf>
 8019512:	f7fd fdb1 	bl	8017078 <abort>
 8019516:	4b04      	ldr	r3, [pc, #16]	@ (8019528 <__assert_func+0x38>)
 8019518:	e7f4      	b.n	8019504 <__assert_func+0x14>
 801951a:	bf00      	nop
 801951c:	20000040 	.word	0x20000040
 8019520:	0801a755 	.word	0x0801a755
 8019524:	0801a727 	.word	0x0801a727
 8019528:	0801a71a 	.word	0x0801a71a

0801952c <_calloc_r>:
 801952c:	b570      	push	{r4, r5, r6, lr}
 801952e:	fba1 5402 	umull	r5, r4, r1, r2
 8019532:	b93c      	cbnz	r4, 8019544 <_calloc_r+0x18>
 8019534:	4629      	mov	r1, r5
 8019536:	f7fd fdd9 	bl	80170ec <_malloc_r>
 801953a:	4606      	mov	r6, r0
 801953c:	b928      	cbnz	r0, 801954a <_calloc_r+0x1e>
 801953e:	2600      	movs	r6, #0
 8019540:	4630      	mov	r0, r6
 8019542:	bd70      	pop	{r4, r5, r6, pc}
 8019544:	220c      	movs	r2, #12
 8019546:	6002      	str	r2, [r0, #0]
 8019548:	e7f9      	b.n	801953e <_calloc_r+0x12>
 801954a:	462a      	mov	r2, r5
 801954c:	4621      	mov	r1, r4
 801954e:	f7fe fbd0 	bl	8017cf2 <memset>
 8019552:	e7f5      	b.n	8019540 <_calloc_r+0x14>

08019554 <__ascii_mbtowc>:
 8019554:	b082      	sub	sp, #8
 8019556:	b901      	cbnz	r1, 801955a <__ascii_mbtowc+0x6>
 8019558:	a901      	add	r1, sp, #4
 801955a:	b142      	cbz	r2, 801956e <__ascii_mbtowc+0x1a>
 801955c:	b14b      	cbz	r3, 8019572 <__ascii_mbtowc+0x1e>
 801955e:	7813      	ldrb	r3, [r2, #0]
 8019560:	600b      	str	r3, [r1, #0]
 8019562:	7812      	ldrb	r2, [r2, #0]
 8019564:	1e10      	subs	r0, r2, #0
 8019566:	bf18      	it	ne
 8019568:	2001      	movne	r0, #1
 801956a:	b002      	add	sp, #8
 801956c:	4770      	bx	lr
 801956e:	4610      	mov	r0, r2
 8019570:	e7fb      	b.n	801956a <__ascii_mbtowc+0x16>
 8019572:	f06f 0001 	mvn.w	r0, #1
 8019576:	e7f8      	b.n	801956a <__ascii_mbtowc+0x16>

08019578 <__ascii_wctomb>:
 8019578:	4603      	mov	r3, r0
 801957a:	4608      	mov	r0, r1
 801957c:	b141      	cbz	r1, 8019590 <__ascii_wctomb+0x18>
 801957e:	2aff      	cmp	r2, #255	@ 0xff
 8019580:	d904      	bls.n	801958c <__ascii_wctomb+0x14>
 8019582:	228a      	movs	r2, #138	@ 0x8a
 8019584:	601a      	str	r2, [r3, #0]
 8019586:	f04f 30ff 	mov.w	r0, #4294967295
 801958a:	4770      	bx	lr
 801958c:	700a      	strb	r2, [r1, #0]
 801958e:	2001      	movs	r0, #1
 8019590:	4770      	bx	lr
	...

08019594 <fiprintf>:
 8019594:	b40e      	push	{r1, r2, r3}
 8019596:	b503      	push	{r0, r1, lr}
 8019598:	4601      	mov	r1, r0
 801959a:	ab03      	add	r3, sp, #12
 801959c:	4805      	ldr	r0, [pc, #20]	@ (80195b4 <fiprintf+0x20>)
 801959e:	f853 2b04 	ldr.w	r2, [r3], #4
 80195a2:	6800      	ldr	r0, [r0, #0]
 80195a4:	9301      	str	r3, [sp, #4]
 80195a6:	f000 f831 	bl	801960c <_vfiprintf_r>
 80195aa:	b002      	add	sp, #8
 80195ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80195b0:	b003      	add	sp, #12
 80195b2:	4770      	bx	lr
 80195b4:	20000040 	.word	0x20000040

080195b8 <__sfputc_r>:
 80195b8:	6893      	ldr	r3, [r2, #8]
 80195ba:	3b01      	subs	r3, #1
 80195bc:	2b00      	cmp	r3, #0
 80195be:	b410      	push	{r4}
 80195c0:	6093      	str	r3, [r2, #8]
 80195c2:	da08      	bge.n	80195d6 <__sfputc_r+0x1e>
 80195c4:	6994      	ldr	r4, [r2, #24]
 80195c6:	42a3      	cmp	r3, r4
 80195c8:	db01      	blt.n	80195ce <__sfputc_r+0x16>
 80195ca:	290a      	cmp	r1, #10
 80195cc:	d103      	bne.n	80195d6 <__sfputc_r+0x1e>
 80195ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195d2:	f000 b933 	b.w	801983c <__swbuf_r>
 80195d6:	6813      	ldr	r3, [r2, #0]
 80195d8:	1c58      	adds	r0, r3, #1
 80195da:	6010      	str	r0, [r2, #0]
 80195dc:	7019      	strb	r1, [r3, #0]
 80195de:	4608      	mov	r0, r1
 80195e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195e4:	4770      	bx	lr

080195e6 <__sfputs_r>:
 80195e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195e8:	4606      	mov	r6, r0
 80195ea:	460f      	mov	r7, r1
 80195ec:	4614      	mov	r4, r2
 80195ee:	18d5      	adds	r5, r2, r3
 80195f0:	42ac      	cmp	r4, r5
 80195f2:	d101      	bne.n	80195f8 <__sfputs_r+0x12>
 80195f4:	2000      	movs	r0, #0
 80195f6:	e007      	b.n	8019608 <__sfputs_r+0x22>
 80195f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195fc:	463a      	mov	r2, r7
 80195fe:	4630      	mov	r0, r6
 8019600:	f7ff ffda 	bl	80195b8 <__sfputc_r>
 8019604:	1c43      	adds	r3, r0, #1
 8019606:	d1f3      	bne.n	80195f0 <__sfputs_r+0xa>
 8019608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801960c <_vfiprintf_r>:
 801960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019610:	460d      	mov	r5, r1
 8019612:	b09d      	sub	sp, #116	@ 0x74
 8019614:	4614      	mov	r4, r2
 8019616:	4698      	mov	r8, r3
 8019618:	4606      	mov	r6, r0
 801961a:	b118      	cbz	r0, 8019624 <_vfiprintf_r+0x18>
 801961c:	6a03      	ldr	r3, [r0, #32]
 801961e:	b90b      	cbnz	r3, 8019624 <_vfiprintf_r+0x18>
 8019620:	f7fe fad4 	bl	8017bcc <__sinit>
 8019624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019626:	07d9      	lsls	r1, r3, #31
 8019628:	d405      	bmi.n	8019636 <_vfiprintf_r+0x2a>
 801962a:	89ab      	ldrh	r3, [r5, #12]
 801962c:	059a      	lsls	r2, r3, #22
 801962e:	d402      	bmi.n	8019636 <_vfiprintf_r+0x2a>
 8019630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019632:	f7fe fc86 	bl	8017f42 <__retarget_lock_acquire_recursive>
 8019636:	89ab      	ldrh	r3, [r5, #12]
 8019638:	071b      	lsls	r3, r3, #28
 801963a:	d501      	bpl.n	8019640 <_vfiprintf_r+0x34>
 801963c:	692b      	ldr	r3, [r5, #16]
 801963e:	b99b      	cbnz	r3, 8019668 <_vfiprintf_r+0x5c>
 8019640:	4629      	mov	r1, r5
 8019642:	4630      	mov	r0, r6
 8019644:	f000 f938 	bl	80198b8 <__swsetup_r>
 8019648:	b170      	cbz	r0, 8019668 <_vfiprintf_r+0x5c>
 801964a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801964c:	07dc      	lsls	r4, r3, #31
 801964e:	d504      	bpl.n	801965a <_vfiprintf_r+0x4e>
 8019650:	f04f 30ff 	mov.w	r0, #4294967295
 8019654:	b01d      	add	sp, #116	@ 0x74
 8019656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801965a:	89ab      	ldrh	r3, [r5, #12]
 801965c:	0598      	lsls	r0, r3, #22
 801965e:	d4f7      	bmi.n	8019650 <_vfiprintf_r+0x44>
 8019660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019662:	f7fe fc6f 	bl	8017f44 <__retarget_lock_release_recursive>
 8019666:	e7f3      	b.n	8019650 <_vfiprintf_r+0x44>
 8019668:	2300      	movs	r3, #0
 801966a:	9309      	str	r3, [sp, #36]	@ 0x24
 801966c:	2320      	movs	r3, #32
 801966e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019672:	f8cd 800c 	str.w	r8, [sp, #12]
 8019676:	2330      	movs	r3, #48	@ 0x30
 8019678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019828 <_vfiprintf_r+0x21c>
 801967c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019680:	f04f 0901 	mov.w	r9, #1
 8019684:	4623      	mov	r3, r4
 8019686:	469a      	mov	sl, r3
 8019688:	f813 2b01 	ldrb.w	r2, [r3], #1
 801968c:	b10a      	cbz	r2, 8019692 <_vfiprintf_r+0x86>
 801968e:	2a25      	cmp	r2, #37	@ 0x25
 8019690:	d1f9      	bne.n	8019686 <_vfiprintf_r+0x7a>
 8019692:	ebba 0b04 	subs.w	fp, sl, r4
 8019696:	d00b      	beq.n	80196b0 <_vfiprintf_r+0xa4>
 8019698:	465b      	mov	r3, fp
 801969a:	4622      	mov	r2, r4
 801969c:	4629      	mov	r1, r5
 801969e:	4630      	mov	r0, r6
 80196a0:	f7ff ffa1 	bl	80195e6 <__sfputs_r>
 80196a4:	3001      	adds	r0, #1
 80196a6:	f000 80a7 	beq.w	80197f8 <_vfiprintf_r+0x1ec>
 80196aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196ac:	445a      	add	r2, fp
 80196ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80196b0:	f89a 3000 	ldrb.w	r3, [sl]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	f000 809f 	beq.w	80197f8 <_vfiprintf_r+0x1ec>
 80196ba:	2300      	movs	r3, #0
 80196bc:	f04f 32ff 	mov.w	r2, #4294967295
 80196c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196c4:	f10a 0a01 	add.w	sl, sl, #1
 80196c8:	9304      	str	r3, [sp, #16]
 80196ca:	9307      	str	r3, [sp, #28]
 80196cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80196d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80196d2:	4654      	mov	r4, sl
 80196d4:	2205      	movs	r2, #5
 80196d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196da:	4853      	ldr	r0, [pc, #332]	@ (8019828 <_vfiprintf_r+0x21c>)
 80196dc:	f7e6 fdb0 	bl	8000240 <memchr>
 80196e0:	9a04      	ldr	r2, [sp, #16]
 80196e2:	b9d8      	cbnz	r0, 801971c <_vfiprintf_r+0x110>
 80196e4:	06d1      	lsls	r1, r2, #27
 80196e6:	bf44      	itt	mi
 80196e8:	2320      	movmi	r3, #32
 80196ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196ee:	0713      	lsls	r3, r2, #28
 80196f0:	bf44      	itt	mi
 80196f2:	232b      	movmi	r3, #43	@ 0x2b
 80196f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196f8:	f89a 3000 	ldrb.w	r3, [sl]
 80196fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80196fe:	d015      	beq.n	801972c <_vfiprintf_r+0x120>
 8019700:	9a07      	ldr	r2, [sp, #28]
 8019702:	4654      	mov	r4, sl
 8019704:	2000      	movs	r0, #0
 8019706:	f04f 0c0a 	mov.w	ip, #10
 801970a:	4621      	mov	r1, r4
 801970c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019710:	3b30      	subs	r3, #48	@ 0x30
 8019712:	2b09      	cmp	r3, #9
 8019714:	d94b      	bls.n	80197ae <_vfiprintf_r+0x1a2>
 8019716:	b1b0      	cbz	r0, 8019746 <_vfiprintf_r+0x13a>
 8019718:	9207      	str	r2, [sp, #28]
 801971a:	e014      	b.n	8019746 <_vfiprintf_r+0x13a>
 801971c:	eba0 0308 	sub.w	r3, r0, r8
 8019720:	fa09 f303 	lsl.w	r3, r9, r3
 8019724:	4313      	orrs	r3, r2
 8019726:	9304      	str	r3, [sp, #16]
 8019728:	46a2      	mov	sl, r4
 801972a:	e7d2      	b.n	80196d2 <_vfiprintf_r+0xc6>
 801972c:	9b03      	ldr	r3, [sp, #12]
 801972e:	1d19      	adds	r1, r3, #4
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	9103      	str	r1, [sp, #12]
 8019734:	2b00      	cmp	r3, #0
 8019736:	bfbb      	ittet	lt
 8019738:	425b      	neglt	r3, r3
 801973a:	f042 0202 	orrlt.w	r2, r2, #2
 801973e:	9307      	strge	r3, [sp, #28]
 8019740:	9307      	strlt	r3, [sp, #28]
 8019742:	bfb8      	it	lt
 8019744:	9204      	strlt	r2, [sp, #16]
 8019746:	7823      	ldrb	r3, [r4, #0]
 8019748:	2b2e      	cmp	r3, #46	@ 0x2e
 801974a:	d10a      	bne.n	8019762 <_vfiprintf_r+0x156>
 801974c:	7863      	ldrb	r3, [r4, #1]
 801974e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019750:	d132      	bne.n	80197b8 <_vfiprintf_r+0x1ac>
 8019752:	9b03      	ldr	r3, [sp, #12]
 8019754:	1d1a      	adds	r2, r3, #4
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	9203      	str	r2, [sp, #12]
 801975a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801975e:	3402      	adds	r4, #2
 8019760:	9305      	str	r3, [sp, #20]
 8019762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019838 <_vfiprintf_r+0x22c>
 8019766:	7821      	ldrb	r1, [r4, #0]
 8019768:	2203      	movs	r2, #3
 801976a:	4650      	mov	r0, sl
 801976c:	f7e6 fd68 	bl	8000240 <memchr>
 8019770:	b138      	cbz	r0, 8019782 <_vfiprintf_r+0x176>
 8019772:	9b04      	ldr	r3, [sp, #16]
 8019774:	eba0 000a 	sub.w	r0, r0, sl
 8019778:	2240      	movs	r2, #64	@ 0x40
 801977a:	4082      	lsls	r2, r0
 801977c:	4313      	orrs	r3, r2
 801977e:	3401      	adds	r4, #1
 8019780:	9304      	str	r3, [sp, #16]
 8019782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019786:	4829      	ldr	r0, [pc, #164]	@ (801982c <_vfiprintf_r+0x220>)
 8019788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801978c:	2206      	movs	r2, #6
 801978e:	f7e6 fd57 	bl	8000240 <memchr>
 8019792:	2800      	cmp	r0, #0
 8019794:	d03f      	beq.n	8019816 <_vfiprintf_r+0x20a>
 8019796:	4b26      	ldr	r3, [pc, #152]	@ (8019830 <_vfiprintf_r+0x224>)
 8019798:	bb1b      	cbnz	r3, 80197e2 <_vfiprintf_r+0x1d6>
 801979a:	9b03      	ldr	r3, [sp, #12]
 801979c:	3307      	adds	r3, #7
 801979e:	f023 0307 	bic.w	r3, r3, #7
 80197a2:	3308      	adds	r3, #8
 80197a4:	9303      	str	r3, [sp, #12]
 80197a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197a8:	443b      	add	r3, r7
 80197aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80197ac:	e76a      	b.n	8019684 <_vfiprintf_r+0x78>
 80197ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80197b2:	460c      	mov	r4, r1
 80197b4:	2001      	movs	r0, #1
 80197b6:	e7a8      	b.n	801970a <_vfiprintf_r+0xfe>
 80197b8:	2300      	movs	r3, #0
 80197ba:	3401      	adds	r4, #1
 80197bc:	9305      	str	r3, [sp, #20]
 80197be:	4619      	mov	r1, r3
 80197c0:	f04f 0c0a 	mov.w	ip, #10
 80197c4:	4620      	mov	r0, r4
 80197c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197ca:	3a30      	subs	r2, #48	@ 0x30
 80197cc:	2a09      	cmp	r2, #9
 80197ce:	d903      	bls.n	80197d8 <_vfiprintf_r+0x1cc>
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d0c6      	beq.n	8019762 <_vfiprintf_r+0x156>
 80197d4:	9105      	str	r1, [sp, #20]
 80197d6:	e7c4      	b.n	8019762 <_vfiprintf_r+0x156>
 80197d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80197dc:	4604      	mov	r4, r0
 80197de:	2301      	movs	r3, #1
 80197e0:	e7f0      	b.n	80197c4 <_vfiprintf_r+0x1b8>
 80197e2:	ab03      	add	r3, sp, #12
 80197e4:	9300      	str	r3, [sp, #0]
 80197e6:	462a      	mov	r2, r5
 80197e8:	4b12      	ldr	r3, [pc, #72]	@ (8019834 <_vfiprintf_r+0x228>)
 80197ea:	a904      	add	r1, sp, #16
 80197ec:	4630      	mov	r0, r6
 80197ee:	f7fd fda9 	bl	8017344 <_printf_float>
 80197f2:	4607      	mov	r7, r0
 80197f4:	1c78      	adds	r0, r7, #1
 80197f6:	d1d6      	bne.n	80197a6 <_vfiprintf_r+0x19a>
 80197f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197fa:	07d9      	lsls	r1, r3, #31
 80197fc:	d405      	bmi.n	801980a <_vfiprintf_r+0x1fe>
 80197fe:	89ab      	ldrh	r3, [r5, #12]
 8019800:	059a      	lsls	r2, r3, #22
 8019802:	d402      	bmi.n	801980a <_vfiprintf_r+0x1fe>
 8019804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019806:	f7fe fb9d 	bl	8017f44 <__retarget_lock_release_recursive>
 801980a:	89ab      	ldrh	r3, [r5, #12]
 801980c:	065b      	lsls	r3, r3, #25
 801980e:	f53f af1f 	bmi.w	8019650 <_vfiprintf_r+0x44>
 8019812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019814:	e71e      	b.n	8019654 <_vfiprintf_r+0x48>
 8019816:	ab03      	add	r3, sp, #12
 8019818:	9300      	str	r3, [sp, #0]
 801981a:	462a      	mov	r2, r5
 801981c:	4b05      	ldr	r3, [pc, #20]	@ (8019834 <_vfiprintf_r+0x228>)
 801981e:	a904      	add	r1, sp, #16
 8019820:	4630      	mov	r0, r6
 8019822:	f7fe f827 	bl	8017874 <_printf_i>
 8019826:	e7e4      	b.n	80197f2 <_vfiprintf_r+0x1e6>
 8019828:	0801a857 	.word	0x0801a857
 801982c:	0801a861 	.word	0x0801a861
 8019830:	08017345 	.word	0x08017345
 8019834:	080195e7 	.word	0x080195e7
 8019838:	0801a85d 	.word	0x0801a85d

0801983c <__swbuf_r>:
 801983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983e:	460e      	mov	r6, r1
 8019840:	4614      	mov	r4, r2
 8019842:	4605      	mov	r5, r0
 8019844:	b118      	cbz	r0, 801984e <__swbuf_r+0x12>
 8019846:	6a03      	ldr	r3, [r0, #32]
 8019848:	b90b      	cbnz	r3, 801984e <__swbuf_r+0x12>
 801984a:	f7fe f9bf 	bl	8017bcc <__sinit>
 801984e:	69a3      	ldr	r3, [r4, #24]
 8019850:	60a3      	str	r3, [r4, #8]
 8019852:	89a3      	ldrh	r3, [r4, #12]
 8019854:	071a      	lsls	r2, r3, #28
 8019856:	d501      	bpl.n	801985c <__swbuf_r+0x20>
 8019858:	6923      	ldr	r3, [r4, #16]
 801985a:	b943      	cbnz	r3, 801986e <__swbuf_r+0x32>
 801985c:	4621      	mov	r1, r4
 801985e:	4628      	mov	r0, r5
 8019860:	f000 f82a 	bl	80198b8 <__swsetup_r>
 8019864:	b118      	cbz	r0, 801986e <__swbuf_r+0x32>
 8019866:	f04f 37ff 	mov.w	r7, #4294967295
 801986a:	4638      	mov	r0, r7
 801986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	6922      	ldr	r2, [r4, #16]
 8019872:	1a98      	subs	r0, r3, r2
 8019874:	6963      	ldr	r3, [r4, #20]
 8019876:	b2f6      	uxtb	r6, r6
 8019878:	4283      	cmp	r3, r0
 801987a:	4637      	mov	r7, r6
 801987c:	dc05      	bgt.n	801988a <__swbuf_r+0x4e>
 801987e:	4621      	mov	r1, r4
 8019880:	4628      	mov	r0, r5
 8019882:	f7ff fe0d 	bl	80194a0 <_fflush_r>
 8019886:	2800      	cmp	r0, #0
 8019888:	d1ed      	bne.n	8019866 <__swbuf_r+0x2a>
 801988a:	68a3      	ldr	r3, [r4, #8]
 801988c:	3b01      	subs	r3, #1
 801988e:	60a3      	str	r3, [r4, #8]
 8019890:	6823      	ldr	r3, [r4, #0]
 8019892:	1c5a      	adds	r2, r3, #1
 8019894:	6022      	str	r2, [r4, #0]
 8019896:	701e      	strb	r6, [r3, #0]
 8019898:	6962      	ldr	r2, [r4, #20]
 801989a:	1c43      	adds	r3, r0, #1
 801989c:	429a      	cmp	r2, r3
 801989e:	d004      	beq.n	80198aa <__swbuf_r+0x6e>
 80198a0:	89a3      	ldrh	r3, [r4, #12]
 80198a2:	07db      	lsls	r3, r3, #31
 80198a4:	d5e1      	bpl.n	801986a <__swbuf_r+0x2e>
 80198a6:	2e0a      	cmp	r6, #10
 80198a8:	d1df      	bne.n	801986a <__swbuf_r+0x2e>
 80198aa:	4621      	mov	r1, r4
 80198ac:	4628      	mov	r0, r5
 80198ae:	f7ff fdf7 	bl	80194a0 <_fflush_r>
 80198b2:	2800      	cmp	r0, #0
 80198b4:	d0d9      	beq.n	801986a <__swbuf_r+0x2e>
 80198b6:	e7d6      	b.n	8019866 <__swbuf_r+0x2a>

080198b8 <__swsetup_r>:
 80198b8:	b538      	push	{r3, r4, r5, lr}
 80198ba:	4b29      	ldr	r3, [pc, #164]	@ (8019960 <__swsetup_r+0xa8>)
 80198bc:	4605      	mov	r5, r0
 80198be:	6818      	ldr	r0, [r3, #0]
 80198c0:	460c      	mov	r4, r1
 80198c2:	b118      	cbz	r0, 80198cc <__swsetup_r+0x14>
 80198c4:	6a03      	ldr	r3, [r0, #32]
 80198c6:	b90b      	cbnz	r3, 80198cc <__swsetup_r+0x14>
 80198c8:	f7fe f980 	bl	8017bcc <__sinit>
 80198cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198d0:	0719      	lsls	r1, r3, #28
 80198d2:	d422      	bmi.n	801991a <__swsetup_r+0x62>
 80198d4:	06da      	lsls	r2, r3, #27
 80198d6:	d407      	bmi.n	80198e8 <__swsetup_r+0x30>
 80198d8:	2209      	movs	r2, #9
 80198da:	602a      	str	r2, [r5, #0]
 80198dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198e0:	81a3      	strh	r3, [r4, #12]
 80198e2:	f04f 30ff 	mov.w	r0, #4294967295
 80198e6:	e033      	b.n	8019950 <__swsetup_r+0x98>
 80198e8:	0758      	lsls	r0, r3, #29
 80198ea:	d512      	bpl.n	8019912 <__swsetup_r+0x5a>
 80198ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80198ee:	b141      	cbz	r1, 8019902 <__swsetup_r+0x4a>
 80198f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80198f4:	4299      	cmp	r1, r3
 80198f6:	d002      	beq.n	80198fe <__swsetup_r+0x46>
 80198f8:	4628      	mov	r0, r5
 80198fa:	f7ff f981 	bl	8018c00 <_free_r>
 80198fe:	2300      	movs	r3, #0
 8019900:	6363      	str	r3, [r4, #52]	@ 0x34
 8019902:	89a3      	ldrh	r3, [r4, #12]
 8019904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019908:	81a3      	strh	r3, [r4, #12]
 801990a:	2300      	movs	r3, #0
 801990c:	6063      	str	r3, [r4, #4]
 801990e:	6923      	ldr	r3, [r4, #16]
 8019910:	6023      	str	r3, [r4, #0]
 8019912:	89a3      	ldrh	r3, [r4, #12]
 8019914:	f043 0308 	orr.w	r3, r3, #8
 8019918:	81a3      	strh	r3, [r4, #12]
 801991a:	6923      	ldr	r3, [r4, #16]
 801991c:	b94b      	cbnz	r3, 8019932 <__swsetup_r+0x7a>
 801991e:	89a3      	ldrh	r3, [r4, #12]
 8019920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019928:	d003      	beq.n	8019932 <__swsetup_r+0x7a>
 801992a:	4621      	mov	r1, r4
 801992c:	4628      	mov	r0, r5
 801992e:	f000 f83f 	bl	80199b0 <__smakebuf_r>
 8019932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019936:	f013 0201 	ands.w	r2, r3, #1
 801993a:	d00a      	beq.n	8019952 <__swsetup_r+0x9a>
 801993c:	2200      	movs	r2, #0
 801993e:	60a2      	str	r2, [r4, #8]
 8019940:	6962      	ldr	r2, [r4, #20]
 8019942:	4252      	negs	r2, r2
 8019944:	61a2      	str	r2, [r4, #24]
 8019946:	6922      	ldr	r2, [r4, #16]
 8019948:	b942      	cbnz	r2, 801995c <__swsetup_r+0xa4>
 801994a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801994e:	d1c5      	bne.n	80198dc <__swsetup_r+0x24>
 8019950:	bd38      	pop	{r3, r4, r5, pc}
 8019952:	0799      	lsls	r1, r3, #30
 8019954:	bf58      	it	pl
 8019956:	6962      	ldrpl	r2, [r4, #20]
 8019958:	60a2      	str	r2, [r4, #8]
 801995a:	e7f4      	b.n	8019946 <__swsetup_r+0x8e>
 801995c:	2000      	movs	r0, #0
 801995e:	e7f7      	b.n	8019950 <__swsetup_r+0x98>
 8019960:	20000040 	.word	0x20000040

08019964 <__swhatbuf_r>:
 8019964:	b570      	push	{r4, r5, r6, lr}
 8019966:	460c      	mov	r4, r1
 8019968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801996c:	2900      	cmp	r1, #0
 801996e:	b096      	sub	sp, #88	@ 0x58
 8019970:	4615      	mov	r5, r2
 8019972:	461e      	mov	r6, r3
 8019974:	da0d      	bge.n	8019992 <__swhatbuf_r+0x2e>
 8019976:	89a3      	ldrh	r3, [r4, #12]
 8019978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801997c:	f04f 0100 	mov.w	r1, #0
 8019980:	bf14      	ite	ne
 8019982:	2340      	movne	r3, #64	@ 0x40
 8019984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019988:	2000      	movs	r0, #0
 801998a:	6031      	str	r1, [r6, #0]
 801998c:	602b      	str	r3, [r5, #0]
 801998e:	b016      	add	sp, #88	@ 0x58
 8019990:	bd70      	pop	{r4, r5, r6, pc}
 8019992:	466a      	mov	r2, sp
 8019994:	f000 f848 	bl	8019a28 <_fstat_r>
 8019998:	2800      	cmp	r0, #0
 801999a:	dbec      	blt.n	8019976 <__swhatbuf_r+0x12>
 801999c:	9901      	ldr	r1, [sp, #4]
 801999e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80199a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80199a6:	4259      	negs	r1, r3
 80199a8:	4159      	adcs	r1, r3
 80199aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80199ae:	e7eb      	b.n	8019988 <__swhatbuf_r+0x24>

080199b0 <__smakebuf_r>:
 80199b0:	898b      	ldrh	r3, [r1, #12]
 80199b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199b4:	079d      	lsls	r5, r3, #30
 80199b6:	4606      	mov	r6, r0
 80199b8:	460c      	mov	r4, r1
 80199ba:	d507      	bpl.n	80199cc <__smakebuf_r+0x1c>
 80199bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80199c0:	6023      	str	r3, [r4, #0]
 80199c2:	6123      	str	r3, [r4, #16]
 80199c4:	2301      	movs	r3, #1
 80199c6:	6163      	str	r3, [r4, #20]
 80199c8:	b003      	add	sp, #12
 80199ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199cc:	ab01      	add	r3, sp, #4
 80199ce:	466a      	mov	r2, sp
 80199d0:	f7ff ffc8 	bl	8019964 <__swhatbuf_r>
 80199d4:	9f00      	ldr	r7, [sp, #0]
 80199d6:	4605      	mov	r5, r0
 80199d8:	4639      	mov	r1, r7
 80199da:	4630      	mov	r0, r6
 80199dc:	f7fd fb86 	bl	80170ec <_malloc_r>
 80199e0:	b948      	cbnz	r0, 80199f6 <__smakebuf_r+0x46>
 80199e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199e6:	059a      	lsls	r2, r3, #22
 80199e8:	d4ee      	bmi.n	80199c8 <__smakebuf_r+0x18>
 80199ea:	f023 0303 	bic.w	r3, r3, #3
 80199ee:	f043 0302 	orr.w	r3, r3, #2
 80199f2:	81a3      	strh	r3, [r4, #12]
 80199f4:	e7e2      	b.n	80199bc <__smakebuf_r+0xc>
 80199f6:	89a3      	ldrh	r3, [r4, #12]
 80199f8:	6020      	str	r0, [r4, #0]
 80199fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199fe:	81a3      	strh	r3, [r4, #12]
 8019a00:	9b01      	ldr	r3, [sp, #4]
 8019a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019a06:	b15b      	cbz	r3, 8019a20 <__smakebuf_r+0x70>
 8019a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a0c:	4630      	mov	r0, r6
 8019a0e:	f000 f81d 	bl	8019a4c <_isatty_r>
 8019a12:	b128      	cbz	r0, 8019a20 <__smakebuf_r+0x70>
 8019a14:	89a3      	ldrh	r3, [r4, #12]
 8019a16:	f023 0303 	bic.w	r3, r3, #3
 8019a1a:	f043 0301 	orr.w	r3, r3, #1
 8019a1e:	81a3      	strh	r3, [r4, #12]
 8019a20:	89a3      	ldrh	r3, [r4, #12]
 8019a22:	431d      	orrs	r5, r3
 8019a24:	81a5      	strh	r5, [r4, #12]
 8019a26:	e7cf      	b.n	80199c8 <__smakebuf_r+0x18>

08019a28 <_fstat_r>:
 8019a28:	b538      	push	{r3, r4, r5, lr}
 8019a2a:	4d07      	ldr	r5, [pc, #28]	@ (8019a48 <_fstat_r+0x20>)
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	4604      	mov	r4, r0
 8019a30:	4608      	mov	r0, r1
 8019a32:	4611      	mov	r1, r2
 8019a34:	602b      	str	r3, [r5, #0]
 8019a36:	f7e8 fec9 	bl	80027cc <_fstat>
 8019a3a:	1c43      	adds	r3, r0, #1
 8019a3c:	d102      	bne.n	8019a44 <_fstat_r+0x1c>
 8019a3e:	682b      	ldr	r3, [r5, #0]
 8019a40:	b103      	cbz	r3, 8019a44 <_fstat_r+0x1c>
 8019a42:	6023      	str	r3, [r4, #0]
 8019a44:	bd38      	pop	{r3, r4, r5, pc}
 8019a46:	bf00      	nop
 8019a48:	20010c04 	.word	0x20010c04

08019a4c <_isatty_r>:
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	4d06      	ldr	r5, [pc, #24]	@ (8019a68 <_isatty_r+0x1c>)
 8019a50:	2300      	movs	r3, #0
 8019a52:	4604      	mov	r4, r0
 8019a54:	4608      	mov	r0, r1
 8019a56:	602b      	str	r3, [r5, #0]
 8019a58:	f7e8 fec8 	bl	80027ec <_isatty>
 8019a5c:	1c43      	adds	r3, r0, #1
 8019a5e:	d102      	bne.n	8019a66 <_isatty_r+0x1a>
 8019a60:	682b      	ldr	r3, [r5, #0]
 8019a62:	b103      	cbz	r3, 8019a66 <_isatty_r+0x1a>
 8019a64:	6023      	str	r3, [r4, #0]
 8019a66:	bd38      	pop	{r3, r4, r5, pc}
 8019a68:	20010c04 	.word	0x20010c04

08019a6c <_init>:
 8019a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a6e:	bf00      	nop
 8019a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a72:	bc08      	pop	{r3}
 8019a74:	469e      	mov	lr, r3
 8019a76:	4770      	bx	lr

08019a78 <_fini>:
 8019a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a7a:	bf00      	nop
 8019a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a7e:	bc08      	pop	{r3}
 8019a80:	469e      	mov	lr, r3
 8019a82:	4770      	bx	lr
