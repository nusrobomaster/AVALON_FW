
Avalon_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800ee90  0800ee90  0000fe90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f250  0800f250  000111fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f250  0800f250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f258  0800f258  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f258  0800f258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f260  0800f260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800f268  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  200001fc  0800f464  000111fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  0800f464  000113b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034c03  00000000  00000000  0001122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ffb  00000000  00000000  00045e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  0004be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc1  00000000  00000000  0004e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034488  00000000  00000000  0004fde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000322c9  00000000  00000000  00084271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149ad5  00000000  00000000  000b653a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0020000f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9c4  00000000  00000000  002000c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0020aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0020aae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ee78 	.word	0x0800ee78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800ee78 	.word	0x0800ee78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00c f898 	bl	800d036 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f22:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f28:	4b31      	ldr	r3, [pc, #196]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f50:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f56:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f76:	f002 f9b3 	bl	80032e0 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f80:	f001 f8a4 	bl	80020cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f90:	f003 fe52 	bl	8004c38 <HAL_ADCEx_MultiModeConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f9a:	f001 f897 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_ADC1_Init+0x10c>)
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000fbc:	f002 ff8c 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fc6:	f001 f881 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_ADC1_Init+0x110>)
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000fd8:	f002 ff7e 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fe2:	f001 f873 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	@ 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000218 	.word	0x20000218
 8000ff4:	04300002 	.word	0x04300002
 8000ff8:	08600004 	.word	0x08600004

08000ffc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00c f814 	bl	800d036 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001010:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <MX_ADC2_Init+0x100>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001016:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001036:	2208      	movs	r2, #8
 8001038:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001048:	2203      	movs	r2, #3
 800104a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG3;
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001056:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800105e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001062:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800107a:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800107c:	f002 f930 	bl	80032e0 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001086:	f001 f821 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_ADC2_Init+0x104>)
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001096:	237f      	movs	r3, #127	@ 0x7f
 8001098:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109a:	2304      	movs	r3, #4
 800109c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010a8:	f002 ff16 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010b2:	f001 f80b 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_ADC2_Init+0x108>)
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ba:	230c      	movs	r3, #12
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010c4:	f002 ff08 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80010ce:	f000 fffd 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <MX_ADC2_Init+0x10c>)
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d6:	2312      	movs	r3, #18
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010e0:	f002 fefa 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80010ea:	f000 ffef 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000284 	.word	0x20000284
 80010fc:	50000100 	.word	0x50000100
 8001100:	1d500080 	.word	0x1d500080
 8001104:	21800100 	.word	0x21800100
 8001108:	25b00200 	.word	0x25b00200

0800110c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	@ 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00b ff86 	bl	800d036 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800112a:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800112c:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <MX_ADC3_Init+0xe8>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001132:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001136:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001152:	2204      	movs	r2, #4
 8001154:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800115e:	2201      	movs	r2, #1
 8001160:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001164:	2201      	movs	r2, #1
 8001166:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001192:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001194:	f002 f8a4 	bl	80032e0 <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800119e:	f000 ff95 	bl	80020cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 80011ae:	f003 fd43 	bl	8004c38 <HAL_ADCEx_MultiModeConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011b8:	f000 ff88 	bl	80020cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_ADC3_Init+0xec>)
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c0:	2306      	movs	r3, #6
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c8:	237f      	movs	r3, #127	@ 0x7f
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011cc:	2304      	movs	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 80011da:	f002 fe7d 	bl	8003ed8 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011e4:	f000 ff72 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	@ 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002f0 	.word	0x200002f0
 80011f4:	50000400 	.word	0x50000400
 80011f8:	04300002 	.word	0x04300002

080011fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0a2      	sub	sp, #136	@ 0x88
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	2254      	movs	r2, #84	@ 0x54
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00b ff0a 	bl	800d036 <memset>
  if(adcHandle->Instance==ADC1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800122a:	d172      	bne.n	8001312 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800122c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001230:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001232:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001236:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f008 fa29 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001248:	f000 ff40 	bl	80020cc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800124c:	4b8b      	ldr	r3, [pc, #556]	@ (800147c <HAL_ADC_MspInit+0x280>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a8a      	ldr	r2, [pc, #552]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001254:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001256:	4b89      	ldr	r3, [pc, #548]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10b      	bne.n	8001276 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800125e:	4b88      	ldr	r3, [pc, #544]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a87      	ldr	r2, [pc, #540]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001264:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b85      	ldr	r3, [pc, #532]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a81      	ldr	r2, [pc, #516]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = I_CAP_Pin|V_CAP_Pin;
 800128e:	2303      	movs	r3, #3
 8001290:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f005 f932 	bl	800650c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012a8:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012aa:	4a77      	ldr	r2, [pc, #476]	@ (8001488 <HAL_ADC_MspInit+0x28c>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ae:	4b75      	ldr	r3, [pc, #468]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012b0:	2205      	movs	r2, #5
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b4:	4b73      	ldr	r3, [pc, #460]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ba:	4b72      	ldr	r3, [pc, #456]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012c0:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012d8:	2220      	movs	r2, #32
 80012da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012dc:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012de:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80012e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e4:	4867      	ldr	r0, [pc, #412]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012e6:	f003 ffb1 	bl	800524c <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80012f0:	f000 feec 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a63      	ldr	r2, [pc, #396]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80012fa:	4a62      	ldr	r2, [pc, #392]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2105      	movs	r1, #5
 8001304:	2012      	movs	r0, #18
 8001306:	f003 fe7a 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800130a:	2012      	movs	r0, #18
 800130c:	f003 fe91 	bl	8005032 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001310:	e0af      	b.n	8001472 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5d      	ldr	r2, [pc, #372]	@ (800148c <HAL_ADC_MspInit+0x290>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d171      	bne.n	8001400 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800131c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001320:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001322:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001326:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f008 f9b1 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001338:	f000 fec8 	bl	80020cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800133c:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <HAL_ADC_MspInit+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001344:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800134e:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001354:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b49      	ldr	r3, [pc, #292]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a45      	ldr	r2, [pc, #276]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = V_CHASSIS_Pin|I_SOURCE_Pin|I_CHASSIS_Pin;
 800137e:	230e      	movs	r3, #14
 8001380:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800138e:	4619      	mov	r1, r3
 8001390:	483f      	ldr	r0, [pc, #252]	@ (8001490 <HAL_ADC_MspInit+0x294>)
 8001392:	f005 f8bb 	bl	800650c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001396:	4b3f      	ldr	r3, [pc, #252]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 8001398:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_ADC_MspInit+0x29c>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800139c:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b4:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013bc:	4b35      	ldr	r3, [pc, #212]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013c6:	2220      	movs	r2, #32
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013d2:	4830      	ldr	r0, [pc, #192]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013d4:	f003 ff3a 	bl	800524c <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 80013de:	f000 fe75 	bl	80020cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80013e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2012      	movs	r0, #18
 80013f4:	f003 fe03 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013f8:	2012      	movs	r0, #18
 80013fa:	f003 fe1a 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 80013fe:	e038      	b.n	8001472 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a25      	ldr	r2, [pc, #148]	@ (800149c <HAL_ADC_MspInit+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d133      	bne.n	8001472 <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800140a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800140e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001414:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4618      	mov	r0, r3
 800141c:	f008 f93a 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001426:	f000 fe51 	bl	80020cc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 800145a:	2302      	movs	r3, #2
 800145c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <HAL_ADC_MspInit+0x2a4>)
 800146e:	f005 f84d 	bl	800650c <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3788      	adds	r7, #136	@ 0x88
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000041c 	.word	0x2000041c
 8001480:	40021000 	.word	0x40021000
 8001484:	2000035c 	.word	0x2000035c
 8001488:	40020008 	.word	0x40020008
 800148c:	50000100 	.word	0x50000100
 8001490:	48000800 	.word	0x48000800
 8001494:	200003bc 	.word	0x200003bc
 8001498:	40020408 	.word	0x40020408
 800149c:	50000400 	.word	0x50000400
 80014a0:	48000400 	.word	0x48000400

080014a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <MX_CRC_Init+0x40>)
 80014ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014ce:	f003 fdcb 	bl	8005068 <HAL_CRC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014d8:	f000 fdf8 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000420 	.word	0x20000420
 80014e4:	40023000 	.word	0x40023000

080014e8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_CRC_MspInit+0x38>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10b      	bne.n	8001512 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 80014fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	6493      	str	r3, [r2, #72]	@ 0x48
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023000 	.word	0x40023000
 8001524:	40021000 	.word	0x40021000

08001528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001532:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6493      	str	r3, [r2, #72]	@ 0x48
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_DMA_Init+0x78>)
 800153c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <MX_DMA_Init+0x78>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6493      	str	r3, [r2, #72]	@ 0x48
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6493      	str	r3, [r2, #72]	@ 0x48
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <MX_DMA_Init+0x78>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	200b      	movs	r0, #11
 800157c:	f003 fd3f 	bl	8004ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001580:	200b      	movs	r0, #11
 8001582:	f003 fd56 	bl	8005032 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2038      	movs	r0, #56	@ 0x38
 800158c:	f003 fd37 	bl	8004ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001590:	2038      	movs	r0, #56	@ 0x38
 8001592:	f003 fd4e 	bl	8005032 <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_FDCAN2_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015aa:	4a20      	ldr	r2, [pc, #128]	@ (800162c <MX_FDCAN2_Init+0x88>)
 80015ac:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015d4:	2210      	movs	r2, #16
 80015d6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015da:	2201      	movs	r2, #1
 80015dc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015fe:	2201      	movs	r2, #1
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001616:	f004 f88b 	bl	8005730 <HAL_FDCAN_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001620:	f000 fd54 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000444 	.word	0x20000444
 800162c:	40006800 	.word	0x40006800

08001630 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001636:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <MX_FDCAN3_Init+0x88>)
 8001638:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800164e:	2201      	movs	r2, #1
 8001650:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001654:	2201      	movs	r2, #1
 8001656:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800165a:	2200      	movs	r2, #0
 800165c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001660:	2201      	movs	r2, #1
 8001662:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001666:	2202      	movs	r2, #2
 8001668:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800166c:	22a7      	movs	r2, #167	@ 0xa7
 800166e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001672:	2202      	movs	r2, #2
 8001674:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 5;
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001678:	2205      	movs	r2, #5
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 8;
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800167e:	2208      	movs	r2, #8
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 8;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001684:	2208      	movs	r2, #8
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 8;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800168a:	2208      	movs	r2, #8
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 28;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001690:	221c      	movs	r2, #28
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 8;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001696:	2208      	movs	r2, #8
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 80016a2:	f004 f845 	bl	8005730 <HAL_FDCAN_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 80016ac:	f000 fd0e 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200004a8 	.word	0x200004a8
 80016b8:	40006c00 	.word	0x40006c00

080016bc <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0a0      	sub	sp, #128	@ 0x80
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2254      	movs	r2, #84	@ 0x54
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00b fcaa 	bl	800d036 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001814 <HAL_FDCAN_MspInit+0x158>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d141      	bne.n	8001770 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4618      	mov	r0, r3
 80016fe:	f007 ffc9 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001708:	f000 fce0 	bl	80020cc <Error_Handler>
    }

    /* FDCAN2 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800170c:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a41      	ldr	r2, [pc, #260]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 8001714:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10b      	bne.n	8001736 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a3e      	ldr	r2, [pc, #248]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a38      	ldr	r2, [pc, #224]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b36      	ldr	r3, [pc, #216]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800174e:	2360      	movs	r3, #96	@ 0x60
 8001750:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800175e:	2309      	movs	r3, #9
 8001760:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001766:	4619      	mov	r1, r3
 8001768:	482d      	ldr	r0, [pc, #180]	@ (8001820 <HAL_FDCAN_MspInit+0x164>)
 800176a:	f004 fecf 	bl	800650c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 800176e:	e04d      	b.n	800180c <HAL_FDCAN_MspInit+0x150>
  else if(fdcanHandle->Instance==FDCAN3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2b      	ldr	r2, [pc, #172]	@ (8001824 <HAL_FDCAN_MspInit+0x168>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d148      	bne.n	800180c <HAL_FDCAN_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001784:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4618      	mov	r0, r3
 800178c:	f007 ff82 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_FDCAN_MspInit+0xde>
      Error_Handler();
 8001796:	f000 fc99 	bl	80020cc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 80017a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10b      	bne.n	80017c4 <HAL_FDCAN_MspInit+0x108>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	4a1a      	ldr	r2, [pc, #104]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017dc:	2318      	movs	r3, #24
 80017de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80017ec:	230b      	movs	r3, #11
 80017ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017f4:	4619      	mov	r1, r3
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <HAL_FDCAN_MspInit+0x164>)
 80017f8:	f004 fe88 	bl	800650c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 4, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	2058      	movs	r0, #88	@ 0x58
 8001802:	f003 fbfc 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001806:	2058      	movs	r0, #88	@ 0x58
 8001808:	f003 fc13 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3780      	adds	r7, #128	@ 0x80
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40006800 	.word	0x40006800
 8001818:	2000050c 	.word	0x2000050c
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400
 8001824:	40006c00 	.word	0x40006c00

08001828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2140      	movs	r1, #64	@ 0x40
 80018ba:	4816      	ldr	r0, [pc, #88]	@ (8001914 <MX_GPIO_Init+0xec>)
 80018bc:	f004 ffa8 	bl	8006810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c6:	4814      	ldr	r0, [pc, #80]	@ (8001918 <MX_GPIO_Init+0xf0>)
 80018c8:	f004 ffa2 	bl	8006810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80018cc:	2340      	movs	r3, #64	@ 0x40
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_GPIO_Init+0xec>)
 80018e4:	f004 fe12 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_GPIO_Init+0xf0>)
 8001902:	f004 fe03 	bl	800650c <HAL_GPIO_Init>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	48000800 	.word	0x48000800
 8001918:	48000400 	.word	0x48000400

0800191c <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0ba      	sub	sp, #232	@ 0xe8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001922:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800192c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800193a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800193e:	2260      	movs	r2, #96	@ 0x60
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f00b fb77 	bl	800d036 <memset>
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001948:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800195c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	2224      	movs	r2, #36	@ 0x24
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f00b fb60 	bl	800d036 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2220      	movs	r2, #32
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00b fb5a 	bl	800d036 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001982:	4bcc      	ldr	r3, [pc, #816]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001984:	4acc      	ldr	r2, [pc, #816]	@ (8001cb8 <MX_HRTIM1_Init+0x39c>)
 8001986:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001988:	4bca      	ldr	r3, [pc, #808]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800198e:	4bc9      	ldr	r3, [pc, #804]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001994:	48c7      	ldr	r0, [pc, #796]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001996:	f004 ff6d 	bl	8006874 <HAL_HRTIM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80019a0:	f000 fb94 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80019a4:	210c      	movs	r1, #12
 80019a6:	48c3      	ldr	r0, [pc, #780]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019a8:	f005 f834 	bl	8006a14 <HAL_HRTIM_DLLCalibrationStart>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 80019b2:	f000 fb8b 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80019b6:	210a      	movs	r1, #10
 80019b8:	48be      	ldr	r0, [pc, #760]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019ba:	f005 f883 	bl	8006ac4 <HAL_HRTIM_PollForDLLCalibration>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 80019c4:	f000 fb82 	bl	80020cc <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80019c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERA_CMP3;
 80019d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80019d8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80019dc:	461a      	mov	r2, r3
 80019de:	2101      	movs	r1, #1
 80019e0:	48b4      	ldr	r0, [pc, #720]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019e2:	f005 f8cb 	bl	8006b7c <HAL_HRTIM_ADCTriggerConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 80019ec:	f000 fb6e 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	48af      	ldr	r0, [pc, #700]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019f6:	f005 faad 	bl	8006f54 <HAL_HRTIM_ADCPostScalerConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001a00:	f000 fb64 	bl	80020cc <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 8001a04:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001a0c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 8001a14:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	48a5      	ldr	r0, [pc, #660]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a1e:	f005 f8ad 	bl	8006b7c <HAL_HRTIM_ADCTriggerConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_HRTIM1_Init+0x110>
  {
    Error_Handler();
 8001a28:	f000 fb50 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	48a0      	ldr	r0, [pc, #640]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a32:	f005 fa8f 	bl	8006f54 <HAL_HRTIM_ADCPostScalerConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_HRTIM1_Init+0x124>
  {
    Error_Handler();
 8001a3c:	f000 fb46 	bl	80020cc <Error_Handler>
  }
  pTimeBaseCfg.Period = 34000;
 8001a40:	f248 43d0 	movw	r3, #34000	@ 0x84d0
 8001a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 16;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001a54:	2308      	movs	r3, #8
 8001a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8001a5a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2106      	movs	r1, #6
 8001a62:	4894      	ldr	r0, [pc, #592]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a64:	f005 f862 	bl	8006b2c <HAL_HRTIM_TimeBaseConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_HRTIM1_Init+0x156>
  {
    Error_Handler();
 8001a6e:	f000 fb2d 	bl	80020cc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 8001a72:	2310      	movs	r3, #16
 8001a74:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DMASrcAddress = 0x0000;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.DMADstAddress = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.DMASize = 0x1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001ac4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2106      	movs	r1, #6
 8001acc:	4879      	ldr	r0, [pc, #484]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ace:	f005 fb8b 	bl	80071e8 <HAL_HRTIM_WaveformTimerConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001ad8:	f000 faf8 	bl	80020cc <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001ae8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	4870      	ldr	r0, [pc, #448]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001af2:	f005 f81b 	bl	8006b2c <HAL_HRTIM_TimeBaseConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_HRTIM1_Init+0x1e4>
  {
    Error_Handler();
 8001afc:	f000 fae6 	bl	80020cc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001b00:	2300      	movs	r3, #0
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001b10:	2300      	movs	r3, #0
 8001b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4865      	ldr	r0, [pc, #404]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001b1e:	f005 fbf0 	bl	8007302 <HAL_HRTIM_WaveformTimerControl>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 8001b28:	f000 fad0 	bl	80020cc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001b34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 8001b5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8001b6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001b72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b76:	461a      	mov	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	484e      	ldr	r0, [pc, #312]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001b7c:	f005 fb34 	bl	80071e8 <HAL_HRTIM_WaveformTimerConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_HRTIM1_Init+0x26e>
  {
    Error_Handler();
 8001b86:	f000 faa1 	bl	80020cc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_E;
 8001b90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001b98:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4844      	ldr	r0, [pc, #272]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ba2:	f005 fb21 	bl	80071e8 <HAL_HRTIM_WaveformTimerConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8001bac:	f000 fa8e 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8001bb0:	f646 2340 	movw	r3, #27200	@ 0x6a40
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001bb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	483d      	ldr	r0, [pc, #244]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001bc0:	f005 fc52 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8001bca:	f000 fa7f 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001bce:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001bdc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001be0:	2202      	movs	r2, #2
 8001be2:	2100      	movs	r1, #0
 8001be4:	4833      	ldr	r0, [pc, #204]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001be6:	f005 fc3f 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_HRTIM1_Init+0x2d8>
  {
    Error_Handler();
 8001bf0:	f000 fa6c 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001bf4:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001bfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bfe:	2204      	movs	r2, #4
 8001c00:	2100      	movs	r1, #0
 8001c02:	482c      	ldr	r0, [pc, #176]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c04:	f005 fc30 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_HRTIM1_Init+0x2f6>
  {
    Error_Handler();
 8001c0e:	f000 fa5d 	bl	80020cc <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 220;
 8001c16:	23dc      	movs	r3, #220	@ 0xdc
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 220;
 8001c26:	23dc      	movs	r3, #220	@ 0xdc
 8001c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c40:	f005 fb92 	bl	8007368 <HAL_HRTIM_DeadTimeConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8001c4a:	f000 fa3f 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	461a      	mov	r2, r3
 8001c54:	2104      	movs	r1, #4
 8001c56:	4817      	ldr	r0, [pc, #92]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c58:	f005 fb86 	bl	8007368 <HAL_HRTIM_DeadTimeConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_HRTIM1_Init+0x34a>
  {
    Error_Handler();
 8001c62:	f000 fa33 	bl	80020cc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c8e:	f005 fd59 	bl	8007744 <HAL_HRTIM_WaveformOutputConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_HRTIM1_Init+0x380>
  {
    Error_Handler();
 8001c98:	f000 fa18 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ca6:	f005 fd4d 	bl	8007744 <HAL_HRTIM_WaveformOutputConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <MX_HRTIM1_Init+0x3a4>
 8001cb0:	e004      	b.n	8001cbc <MX_HRTIM1_Init+0x3a0>
 8001cb2:	bf00      	nop
 8001cb4:	20000510 	.word	0x20000510
 8001cb8:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8001cbc:	f000 fa06 	bl	80020cc <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4831      	ldr	r0, [pc, #196]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001cd0:	f005 fd38 	bl	8007744 <HAL_HRTIM_WaveformOutputConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_HRTIM1_Init+0x3c2>
  {
    Error_Handler();
 8001cda:	f000 f9f7 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	482b      	ldr	r0, [pc, #172]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001ce8:	f005 fd2c 	bl	8007744 <HAL_HRTIM_WaveformOutputConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_HRTIM1_Init+0x3da>
  {
    Error_Handler();
 8001cf2:	f000 f9eb 	bl	80020cc <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001cfc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001d00:	461a      	mov	r2, r3
 8001d02:	2104      	movs	r1, #4
 8001d04:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d06:	f004 ff11 	bl	8006b2c <HAL_HRTIM_TimeBaseConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_HRTIM1_Init+0x3f8>
  {
    Error_Handler();
 8001d10:	f000 f9dc 	bl	80020cc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8001d14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d1e:	f005 faf0 	bl	8007302 <HAL_HRTIM_WaveformTimerControl>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_HRTIM1_Init+0x410>
  {
    Error_Handler();
 8001d28:	f000 f9d0 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 3400;
 8001d2c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001d30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d36:	2201      	movs	r2, #1
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d3c:	f005 fb94 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_HRTIM1_Init+0x42e>
  {
    Error_Handler();
 8001d46:	f000 f9c1 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001d4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d54:	2202      	movs	r2, #2
 8001d56:	2104      	movs	r1, #4
 8001d58:	480e      	ldr	r0, [pc, #56]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d5a:	f005 fb85 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_HRTIM1_Init+0x44c>
  {
    Error_Handler();
 8001d64:	f000 f9b2 	bl	80020cc <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001d68:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001d6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d72:	2204      	movs	r2, #4
 8001d74:	2104      	movs	r1, #4
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d78:	f005 fb76 	bl	8007468 <HAL_HRTIM_WaveformCompareConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_HRTIM1_Init+0x46a>
  {
    Error_Handler();
 8001d82:	f000 f9a3 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d88:	f000 f82c 	bl	8001de4 <HAL_HRTIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	37e8      	adds	r7, #232	@ 0xe8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000510 	.word	0x20000510

08001d98 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <HAL_HRTIM_MspInit+0x44>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d113      	bne.n	8001dd2 <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2043      	movs	r0, #67	@ 0x43
 8001dc8:	f003 f919 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001dcc:	2043      	movs	r0, #67	@ 0x43
 8001dce:	f003 f930 	bl	8005032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40016800 	.word	0x40016800
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_HRTIM_MspPostInit+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d13a      	bne.n	8001e7c <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e12:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = BAT_MOS_LOW_Pin|BAT_MOS_HIGH_Pin;
 8001e36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	480e      	ldr	r0, [pc, #56]	@ (8001e8c <HAL_HRTIM_MspPostInit+0xa8>)
 8001e54:	f004 fb5a 	bl	800650c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAP_MOS_LOW_Pin|CAP_MOS_HIGH_Pin;
 8001e58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001e6a:	230d      	movs	r3, #13
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e78:	f004 fb48 	bl	800650c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40016800 	.word	0x40016800
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000800 	.word	0x48000800

08001e90 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>:
	 * @brief Constructor
	 * @param adc_cap Pointer to ADC for capacitor-side sampling
	 * @param adc_bat Pointer to ADC for battery-side sampling
	 * @param adc_temp Pointer to ADC for temperature sensing
	 */
	adc_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp)
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
		: adc_cap_(adc_cap), adc_bat_(adc_bat), adc_temp_(adc_temp) {}
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>:
	 * @brief Constructor for the supercap controller.
	 * @param adc_cap Pointer to ADC for supercap measurements
	 * @param adc_bat Pointer to ADC for battery-side measurements
	 * @param adc_temp Pointer to ADC used for temperature sensing
	 */
	supercap_control_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp) :
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
		adc_manager(adc_cap, adc_bat, adc_temp) {};
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	f7ff ffd9 	bl	8001e90 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_+0x2c>)
 8001ee2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	42700000 	.word	0x42700000

08001ef4 <_ZN24supercap_control_managerD1Ev>:

	/// Destructor (default)
	~supercap_control_manager() {};
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZN7CANCommC1EP19FDCAN_HandleTypeDef>:
public:
    /**
     * @brief Constructor: sets up header configuration for outgoing messages.
     * @param fdcan_ Pointer to FDCAN handle.
     */
    CANComm(FDCAN_HandleTypeDef* fdcan_) : fdcan(fdcan_) { txHeaderConfig(); }
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f009 fa27 	bl	800b36e <_ZN7CANComm14txHeaderConfigEv>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_ZN7CANCommD1Ev>:

    /**
     * @brief Destructor (does nothing but defined for completeness).
     */
    ~CANComm() {}
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f46:	f000 fed2 	bl	8002cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4a:	f000 f857 	bl	8001ffc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4e:	f7ff fc6b 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f52:	f7ff fae9 	bl	8001528 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f56:	f7fe ffc7 	bl	8000ee8 <MX_ADC1_Init>
//  MX_FDCAN1_Init();
  MX_FDCAN2_Init();
 8001f5a:	f7ff fb23 	bl	80015a4 <MX_FDCAN2_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8001f5e:	f000 fc5b 	bl	8002818 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001f62:	f000 fe3f 	bl	8002be4 <MX_USB_PCD_Init>
  MX_FDCAN3_Init();
 8001f66:	f7ff fb63 	bl	8001630 <MX_FDCAN3_Init>
  MX_TIM8_Init();
 8001f6a:	f000 fb31 	bl	80025d0 <MX_TIM8_Init>
  MX_ADC2_Init();
 8001f6e:	f7ff f845 	bl	8000ffc <MX_ADC2_Init>
  MX_SPI2_Init();
 8001f72:	f000 f8f7 	bl	8002164 <MX_SPI2_Init>
  MX_UART4_Init();
 8001f76:	f000 fbb7 	bl	80026e8 <MX_UART4_Init>
  MX_UART5_Init();
 8001f7a:	f000 fc01 	bl	8002780 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001f7e:	f000 fc97 	bl	80028b0 <MX_USART3_UART_Init>
  MX_HRTIM1_Init();
 8001f82:	f7ff fccb 	bl	800191c <MX_HRTIM1_Init>
  MX_ADC3_Init();
 8001f86:	f7ff f8c1 	bl	800110c <MX_ADC3_Init>
  MX_CRC_Init();
 8001f8a:	f7ff fa8b 	bl	80014a4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001f8e:	f000 fad1 	bl	8002534 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 3; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	e009      	b.n	8001fac <main+0x6c>
    HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 8001f98:	2140      	movs	r1, #64	@ 0x40
 8001f9a:	4812      	ldr	r0, [pc, #72]	@ (8001fe4 <main+0xa4>)
 8001f9c:	f004 fc50 	bl	8006840 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001fa0:	2064      	movs	r0, #100	@ 0x64
 8001fa2:	f000 ff15 	bl	8002dd0 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	ddf2      	ble.n	8001f98 <main+0x58>
  }//debug blinker
  HAL_TIM_Base_Start_IT(&htim2);
 8001fb2:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <main+0xa8>)
 8001fb4:	f007 febe 	bl	8009d34 <HAL_TIM_Base_Start_IT>
  initCANComm(&hfdcan3);
 8001fb8:	480c      	ldr	r0, [pc, #48]	@ (8001fec <main+0xac>)
 8001fba:	f009 f989 	bl	800b2d0 <_Z11initCANCommP19FDCAN_HandleTypeDef>

  supercap_controller.adc_init(filter_lengths);
 8001fbe:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <main+0xb0>)
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <main+0xb4>)
 8001fc2:	f009 f8d3 	bl	800b16c <_ZN11adc_manager8adc_initEPh>
  HAL_Delay(1000);
 8001fc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fca:	f000 ff01 	bl	8002dd0 <HAL_Delay>
//  HAL_Delay(100);
  HAL_HRTIM_WaveformCountStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER|HRTIM_TIMERID_TIMER_A|HRTIM_TIMERID_TIMER_E);
 8001fce:	f44f 110c 	mov.w	r1, #2293760	@ 0x230000
 8001fd2:	4809      	ldr	r0, [pc, #36]	@ (8001ff8 <main+0xb8>)
 8001fd4:	f005 fc14 	bl	8007800 <HAL_HRTIM_WaveformCountStart_IT>
////  HAL_Delay(100);
  supercap_controller.init_loop();
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <main+0xb4>)
 8001fda:	f009 faed 	bl	800b5b8 <_ZN24supercap_control_manager9init_loopEv>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <main+0x9e>
 8001fe2:	bf00      	nop
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	20000728 	.word	0x20000728
 8001fec:	200004a8 	.word	0x200004a8
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	2000060c 	.word	0x2000060c
 8001ff8:	20000510 	.word	0x20000510

08001ffc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	@ 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0318 	add.w	r3, r7, #24
 8002006:	2238      	movs	r2, #56	@ 0x38
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f00b f813 	bl	800d036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800201e:	2000      	movs	r0, #0
 8002020:	f006 fd56 	bl	8008ad0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002024:	2329      	movs	r3, #41	@ 0x29
 8002026:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800202c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800202e:	2301      	movs	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002032:	2301      	movs	r3, #1
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002036:	2302      	movs	r3, #2
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203a:	2303      	movs	r3, #3
 800203c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 800203e:	230c      	movs	r3, #12
 8002040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002042:	2355      	movs	r3, #85	@ 0x55
 8002044:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002046:	2302      	movs	r3, #2
 8002048:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800204a:	2302      	movs	r3, #2
 800204c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800204e:	2302      	movs	r3, #2
 8002050:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	4618      	mov	r0, r3
 8002058:	f006 fdee 	bl	8008c38 <HAL_RCC_OscConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800206c:	f000 f82e 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002070:	230f      	movs	r3, #15
 8002072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002074:	2303      	movs	r3, #3
 8002076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2104      	movs	r1, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f007 f8e7 	bl	800925c <HAL_RCC_ClockConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800209e:	f000 f815 	bl	80020cc <Error_Handler>
  }
}
 80020a2:	bf00      	nop
 80020a4:	3750      	adds	r7, #80	@ 0x50
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <TIM2_IRQHandler>:
/* USER CODE BEGIN 4 */
extern "C"
{
void TIM2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <TIM2_IRQHandler+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
//    updateStatus();
//    ErrorChecker::handleErrorState();
    canComDriver.sendMessage();
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <TIM2_IRQHandler+0x1c>)
 80020bc:	f009 f97e 	bl	800b3bc <_ZN7CANComm11sendMessageEv>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000728 	.word	0x20000728
 80020c8:	20000660 	.word	0x20000660

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <Error_Handler+0x8>

080020d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10e      	bne.n	8002106 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d109      	bne.n	8002106 <_Z41__static_initialization_and_destruction_0ii+0x2e>
supercap_control_manager supercap_controller(&hadc1, &hadc2, &hadc3);
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80020f6:	490f      	ldr	r1, [pc, #60]	@ (8002134 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80020f8:	480f      	ldr	r0, [pc, #60]	@ (8002138 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80020fa:	f7ff fee3 	bl	8001ec4 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>
CANComm canComDriver(&hfdcan3);
 80020fe:	490f      	ldr	r1, [pc, #60]	@ (800213c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002100:	480f      	ldr	r0, [pc, #60]	@ (8002140 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002102:	f7ff ff02 	bl	8001f0a <_ZN7CANCommC1EP19FDCAN_HandleTypeDef>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002112:	4293      	cmp	r3, r2
 8002114:	d105      	bne.n	8002122 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8002116:	480a      	ldr	r0, [pc, #40]	@ (8002140 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002118:	f7ff ff07 	bl	8001f2a <_ZN7CANCommD1Ev>
supercap_control_manager supercap_controller(&hadc1, &hadc2, &hadc3);
 800211c:	4806      	ldr	r0, [pc, #24]	@ (8002138 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800211e:	f7ff fee9 	bl	8001ef4 <_ZN24supercap_control_managerD1Ev>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002f0 	.word	0x200002f0
 8002130:	20000284 	.word	0x20000284
 8002134:	20000218 	.word	0x20000218
 8002138:	2000060c 	.word	0x2000060c
 800213c:	200004a8 	.word	0x200004a8
 8002140:	20000660 	.word	0x20000660

08002144 <_GLOBAL__sub_I_supercap_controller>:
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
 8002148:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff ffc3 	bl	80020d8 <_Z41__static_initialization_and_destruction_0ii>
 8002152:	bd80      	pop	{r7, pc}

08002154 <_GLOBAL__sub_D_supercap_controller>:
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
 8002158:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff ffbb 	bl	80020d8 <_Z41__static_initialization_and_destruction_0ii>
 8002162:	bd80      	pop	{r7, pc}

08002164 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <MX_SPI2_Init+0x74>)
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <MX_SPI2_Init+0x78>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <MX_SPI2_Init+0x74>)
 8002170:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <MX_SPI2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800217c:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <MX_SPI2_Init+0x74>)
 800217e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002182:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <MX_SPI2_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <MX_SPI2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <MX_SPI2_Init+0x74>)
 8002192:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002196:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <MX_SPI2_Init+0x74>)
 800219a:	2208      	movs	r2, #8
 800219c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021b2:	2207      	movs	r2, #7
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021be:	2208      	movs	r2, #8
 80021c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <MX_SPI2_Init+0x74>)
 80021c4:	f007 fcb4 	bl	8009b30 <HAL_SPI_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021ce:	f7ff ff7d 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200006c0 	.word	0x200006c0
 80021dc:	40003800 	.word	0x40003800

080021e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a17      	ldr	r2, [pc, #92]	@ (800225c <HAL_SPI_MspInit+0x7c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d128      	bne.n	8002254 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	4a16      	ldr	r2, [pc, #88]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6593      	str	r3, [r2, #88]	@ 0x58
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_SPI_MspInit+0x80>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002232:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002244:	2305      	movs	r3, #5
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <HAL_SPI_MspInit+0x84>)
 8002250:	f004 f95c 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40003800 	.word	0x40003800
 8002260:	40021000 	.word	0x40021000
 8002264:	48000400 	.word	0x48000400

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <HAL_MspInit+0x44>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	4a0e      	ldr	r2, [pc, #56]	@ (80022ac <HAL_MspInit+0x44>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6613      	str	r3, [r2, #96]	@ 0x60
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <HAL_MspInit+0x44>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_MspInit+0x44>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_MspInit+0x44>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6593      	str	r3, [r2, #88]	@ 0x58
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_MspInit+0x44>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800229e:	f006 fcbb 	bl	8008c18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <NMI_Handler+0x4>

080022b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <MemManage_Handler+0x4>

080022c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002306:	f000 fd45 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <DMA1_Channel1_IRQHandler+0x10>)
 8002316:	f003 f8bc 	bl	8005492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000035c 	.word	0x2000035c

08002324 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <ADC1_2_IRQHandler+0x14>)
 800232a:	f001 fb4d 	bl	80039c8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800232e:	4803      	ldr	r0, [pc, #12]	@ (800233c <ADC1_2_IRQHandler+0x18>)
 8002330:	f001 fb4a 	bl	80039c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000218 	.word	0x20000218
 800233c:	20000284 	.word	0x20000284

08002340 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <DMA2_Channel1_IRQHandler+0x10>)
 8002346:	f003 f8a4 	bl	8005492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200003bc 	.word	0x200003bc

08002354 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002358:	2106      	movs	r1, #6
 800235a:	4802      	ldr	r0, [pc, #8]	@ (8002364 <HRTIM1_Master_IRQHandler+0x10>)
 800235c:	f005 fac0 	bl	80078e0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000510 	.word	0x20000510

08002368 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <FDCAN3_IT0_IRQHandler+0x10>)
 800236e:	f003 fe61 	bl	8006034 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200004a8 	.word	0x200004a8

0800237c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_kill>:

int _kill(int pid, int sig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002396:	f00a fea1 	bl	800d0dc <__errno>
 800239a:	4603      	mov	r3, r0
 800239c:	2216      	movs	r2, #22
 800239e:	601a      	str	r2, [r3, #0]
  return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_exit>:

void _exit (int status)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffe7 	bl	800238c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023be:	bf00      	nop
 80023c0:	e7fd      	b.n	80023be <_exit+0x12>

080023c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e00a      	b.n	80023ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023d4:	f3af 8000 	nop.w
 80023d8:	4601      	mov	r1, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	60ba      	str	r2, [r7, #8]
 80023e0:	b2ca      	uxtb	r2, r1
 80023e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3301      	adds	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dbf0      	blt.n	80023d4 <_read+0x12>
  }

  return len;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e009      	b.n	8002422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	60ba      	str	r2, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbf1      	blt.n	800240e <_write+0x12>
  }
  return len;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_close>:

int _close(int file)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800245c:	605a      	str	r2, [r3, #4]
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_isatty>:

int _isatty(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <_sbrk+0x5c>)
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <_sbrk+0x60>)
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <_sbrk+0x64>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <_sbrk+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d207      	bcs.n	80024dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024cc:	f00a fe06 	bl	800d0dc <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	220c      	movs	r2, #12
 80024d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e009      	b.n	80024f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <_sbrk+0x64>)
 80024ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20020000 	.word	0x20020000
 80024fc:	00000400 	.word	0x00000400
 8002500:	20000724 	.word	0x20000724
 8002504:	200013b8 	.word	0x200013b8

08002508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <SystemInit+0x28>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <SystemInit+0x28>)
 8002514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  /* Force vector table base to flash start */
  SCB->VTOR = 0x08000000U;
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <SystemInit+0x28>)
 800251e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <MX_TIM2_Init+0x98>)
 8002554:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <MX_TIM2_Init+0x98>)
 800255c:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <MX_TIM2_Init+0x98>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <MX_TIM2_Init+0x98>)
 800256a:	2263      	movs	r2, #99	@ 0x63
 800256c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <MX_TIM2_Init+0x98>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <MX_TIM2_Init+0x98>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800257a:	4814      	ldr	r0, [pc, #80]	@ (80025cc <MX_TIM2_Init+0x98>)
 800257c:	f007 fb83 	bl	8009c86 <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002586:	f7ff fda1 	bl	80020cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4619      	mov	r1, r3
 8002596:	480d      	ldr	r0, [pc, #52]	@ (80025cc <MX_TIM2_Init+0x98>)
 8002598:	f007 fc44 	bl	8009e24 <HAL_TIM_ConfigClockSource>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025a2:	f7ff fd93 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	@ (80025cc <MX_TIM2_Init+0x98>)
 80025b4:	f007 fe9c 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025be:	f7ff fd85 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000728 	.word	0x20000728

080025d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0310 	add.w	r3, r7, #16
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <MX_TIM8_Init+0xa0>)
 80025f0:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <MX_TIM8_Init+0xa4>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <MX_TIM8_Init+0xa0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <MX_TIM8_Init+0xa0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <MX_TIM8_Init+0xa0>)
 8002602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002606:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <MX_TIM8_Init+0xa0>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800260e:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <MX_TIM8_Init+0xa0>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <MX_TIM8_Init+0xa0>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800261a:	4815      	ldr	r0, [pc, #84]	@ (8002670 <MX_TIM8_Init+0xa0>)
 800261c:	f007 fb33 	bl	8009c86 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002626:	f7ff fd51 	bl	80020cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800262e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	4619      	mov	r1, r3
 8002636:	480e      	ldr	r0, [pc, #56]	@ (8002670 <MX_TIM8_Init+0xa0>)
 8002638:	f007 fbf4 	bl	8009e24 <HAL_TIM_ConfigClockSource>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002642:	f7ff fd43 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002646:	2320      	movs	r3, #32
 8002648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <MX_TIM8_Init+0xa0>)
 8002658:	f007 fe4a 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002662:	f7ff fd33 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000774 	.word	0x20000774
 8002674:	40013400 	.word	0x40013400

08002678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002688:	d114      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6593      	str	r3, [r2, #88]	@ 0x58
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2106      	movs	r1, #6
 80026a6:	201c      	movs	r0, #28
 80026a8:	f002 fca9 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026ac:	201c      	movs	r0, #28
 80026ae:	f002 fcc0 	bl	8005032 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80026b2:	e010      	b.n	80026d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <HAL_TIM_Base_MspInit+0x6c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10b      	bne.n	80026d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c2:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_TIM_Base_MspInit+0x68>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40013400 	.word	0x40013400

080026e8 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026ec:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <MX_UART4_Init+0x90>)
 80026ee:	4a23      	ldr	r2, [pc, #140]	@ (800277c <MX_UART4_Init+0x94>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80026f2:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <MX_UART4_Init+0x90>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <MX_UART4_Init+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <MX_UART4_Init+0x90>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <MX_UART4_Init+0x90>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <MX_UART4_Init+0x90>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <MX_UART4_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <MX_UART4_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <MX_UART4_Init+0x90>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <MX_UART4_Init+0x90>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <MX_UART4_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002730:	4811      	ldr	r0, [pc, #68]	@ (8002778 <MX_UART4_Init+0x90>)
 8002732:	f007 fe73 	bl	800a41c <HAL_UART_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800273c:	f7ff fcc6 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002740:	2100      	movs	r1, #0
 8002742:	480d      	ldr	r0, [pc, #52]	@ (8002778 <MX_UART4_Init+0x90>)
 8002744:	f008 fc0e 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800274e:	f7ff fcbd 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002752:	2100      	movs	r1, #0
 8002754:	4808      	ldr	r0, [pc, #32]	@ (8002778 <MX_UART4_Init+0x90>)
 8002756:	f008 fc43 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002760:	f7ff fcb4 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	@ (8002778 <MX_UART4_Init+0x90>)
 8002766:	f008 fbc4 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002770:	f7ff fcac 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200007c0 	.word	0x200007c0
 800277c:	40004c00 	.word	0x40004c00

08002780 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002784:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <MX_UART5_Init+0x90>)
 8002786:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <MX_UART5_Init+0x94>)
 8002788:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800278a:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <MX_UART5_Init+0x90>)
 800278c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002790:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <MX_UART5_Init+0x90>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <MX_UART5_Init+0x90>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <MX_UART5_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <MX_UART5_Init+0x90>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <MX_UART5_Init+0x90>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <MX_UART5_Init+0x90>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <MX_UART5_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <MX_UART5_Init+0x90>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027c2:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <MX_UART5_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027c8:	4811      	ldr	r0, [pc, #68]	@ (8002810 <MX_UART5_Init+0x90>)
 80027ca:	f007 fe27 	bl	800a41c <HAL_UART_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80027d4:	f7ff fc7a 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d8:	2100      	movs	r1, #0
 80027da:	480d      	ldr	r0, [pc, #52]	@ (8002810 <MX_UART5_Init+0x90>)
 80027dc:	f008 fbc2 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80027e6:	f7ff fc71 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ea:	2100      	movs	r1, #0
 80027ec:	4808      	ldr	r0, [pc, #32]	@ (8002810 <MX_UART5_Init+0x90>)
 80027ee:	f008 fbf7 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80027f8:	f7ff fc68 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	@ (8002810 <MX_UART5_Init+0x90>)
 80027fe:	f008 fb78 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002808:	f7ff fc60 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000854 	.word	0x20000854
 8002814:	40005000 	.word	0x40005000

08002818 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800281c:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 800281e:	4a23      	ldr	r2, [pc, #140]	@ (80028ac <MX_USART1_UART_Init+0x94>)
 8002820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282a:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002836:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002860:	4811      	ldr	r0, [pc, #68]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002862:	f007 fddb 	bl	800a41c <HAL_UART_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800286c:	f7ff fc2e 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	480d      	ldr	r0, [pc, #52]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002874:	f008 fb76 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800287e:	f7ff fc25 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002882:	2100      	movs	r1, #0
 8002884:	4808      	ldr	r0, [pc, #32]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002886:	f008 fbab 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002890:	f7ff fc1c 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <MX_USART1_UART_Init+0x90>)
 8002896:	f008 fb2c 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028a0:	f7ff fc14 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200008e8 	.word	0x200008e8
 80028ac:	40013800 	.word	0x40013800

080028b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028b4:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028b6:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <MX_USART3_UART_Init+0x94>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028f8:	4811      	ldr	r0, [pc, #68]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 80028fa:	f007 fd8f 	bl	800a41c <HAL_UART_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002904:	f7ff fbe2 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 800290c:	f008 fb2a 	bl	800af64 <HAL_UARTEx_SetTxFifoThreshold>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002916:	f7ff fbd9 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4808      	ldr	r0, [pc, #32]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 800291e:	f008 fb5f 	bl	800afe0 <HAL_UARTEx_SetRxFifoThreshold>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002928:	f7ff fbd0 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_USART3_UART_Init+0x90>)
 800292e:	f008 fae0 	bl	800aef2 <HAL_UARTEx_DisableFifoMode>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002938:	f7ff fbc8 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000097c 	.word	0x2000097c
 8002944:	40004800 	.word	0x40004800

08002948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0a6      	sub	sp, #152	@ 0x98
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002964:	2254      	movs	r2, #84	@ 0x54
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00a fb64 	bl	800d036 <memset>
  if(uartHandle->Instance==UART4)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a94      	ldr	r2, [pc, #592]	@ (8002bc4 <HAL_UART_MspInit+0x27c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d13c      	bne.n	80029f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002978:	2308      	movs	r3, #8
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800297c:	2300      	movs	r3, #0
 800297e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002984:	4618      	mov	r0, r3
 8002986:	f006 fe85 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002990:	f7ff fb9c 	bl	80020cc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002994:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	4a8b      	ldr	r2, [pc, #556]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 800299a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800299e:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a0:	4b89      	ldr	r3, [pc, #548]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	4b86      	ldr	r3, [pc, #536]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	4a85      	ldr	r2, [pc, #532]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b8:	4b83      	ldr	r3, [pc, #524]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80029de:	2305      	movs	r3, #5
 80029e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80029e8:	4619      	mov	r1, r3
 80029ea:	4878      	ldr	r0, [pc, #480]	@ (8002bcc <HAL_UART_MspInit+0x284>)
 80029ec:	f003 fd8e 	bl	800650c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029f0:	e0e4      	b.n	8002bbc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==UART5)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a76      	ldr	r2, [pc, #472]	@ (8002bd0 <HAL_UART_MspInit+0x288>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d15d      	bne.n	8002ab8 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80029fc:	2310      	movs	r3, #16
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f006 fe43 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002a14:	f7ff fb5a 	bl	80020cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a18:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a30:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a34:	4a64      	ldr	r2, [pc, #400]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3c:	4b62      	ldr	r3, [pc, #392]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a48:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a54:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a80:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a84:	4619      	mov	r1, r3
 8002a86:	4851      	ldr	r0, [pc, #324]	@ (8002bcc <HAL_UART_MspInit+0x284>)
 8002a88:	f003 fd40 	bl	800650c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aaa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4848      	ldr	r0, [pc, #288]	@ (8002bd4 <HAL_UART_MspInit+0x28c>)
 8002ab2:	f003 fd2b 	bl	800650c <HAL_GPIO_Init>
}
 8002ab6:	e081      	b.n	8002bbc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_UART_MspInit+0x290>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d13b      	bne.n	8002b3a <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f006 fde0 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002ada:	f7ff faf7 	bl	80020cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	4a39      	ldr	r2, [pc, #228]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aea:	4b37      	ldr	r3, [pc, #220]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	4b34      	ldr	r3, [pc, #208]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	4a33      	ldr	r2, [pc, #204]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b02:	4b31      	ldr	r3, [pc, #196]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b0e:	2330      	movs	r3, #48	@ 0x30
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b26:	2307      	movs	r3, #7
 8002b28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002b30:	4619      	mov	r1, r3
 8002b32:	4826      	ldr	r0, [pc, #152]	@ (8002bcc <HAL_UART_MspInit+0x284>)
 8002b34:	f003 fcea 	bl	800650c <HAL_GPIO_Init>
}
 8002b38:	e040      	b.n	8002bbc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_UART_MspInit+0x294>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d13b      	bne.n	8002bbc <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b44:	2304      	movs	r3, #4
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 fd9f 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002b5c:	f7ff fab6 	bl	80020cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_UART_MspInit+0x280>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002baa:	2307      	movs	r3, #7
 8002bac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <HAL_UART_MspInit+0x298>)
 8002bb8:	f003 fca8 	bl	800650c <HAL_GPIO_Init>
}
 8002bbc:	bf00      	nop
 8002bbe:	3798      	adds	r7, #152	@ 0x98
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40004c00 	.word	0x40004c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	48000800 	.word	0x48000800
 8002bd0:	40005000 	.word	0x40005000
 8002bd4:	48000c00 	.word	0x48000c00
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40004800 	.word	0x40004800
 8002be0:	48000400 	.word	0x48000400

08002be4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002be8:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002bea:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <MX_USB_PCD_Init+0x4c>)
 8002bec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002c18:	4804      	ldr	r0, [pc, #16]	@ (8002c2c <MX_USB_PCD_Init+0x48>)
 8002c1a:	f005 fe61 	bl	80088e0 <HAL_PCD_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002c24:	f7ff fa52 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000a10 	.word	0x20000a10
 8002c30:	40005c00 	.word	0x40005c00

08002c34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b098      	sub	sp, #96	@ 0x60
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2254      	movs	r2, #84	@ 0x54
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f00a f9f6 	bl	800d036 <memset>
  if(pcdHandle->Instance==USB)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	@ (8002c94 <HAL_PCD_MspInit+0x60>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d11a      	bne.n	8002c8a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	4618      	mov	r0, r3
 8002c64:	f006 fd16 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002c6e:	f7ff fa2d 	bl	80020cc <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_PCD_MspInit+0x64>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_PCD_MspInit+0x64>)
 8002c78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_PCD_MspInit+0x64>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3760      	adds	r7, #96	@ 0x60
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40005c00 	.word	0x40005c00
 8002c98:	40021000 	.word	0x40021000

08002c9c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002c9c:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff fc32 	bl	8002508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f00a fa0d 	bl	800d0e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7ff f937 	bl	8001f40 <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8002cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002ce0:	0800f268 	.word	0x0800f268
  ldr r2, =_sbss
 8002ce4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002ce8:	200013b8 	.word	0x200013b8

08002cec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC3_IRQHandler>

08002cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f002 f975 	bl	8004fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f80e 	bl	8002d20 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	e001      	b.n	8002d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d10:	f7ff faaa 	bl	8002268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d14:	79fb      	ldrb	r3, [r7, #7]

}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d2c:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_InitTick+0x68>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d34:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_InitTick+0x6c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_InitTick+0x68>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 f980 	bl	800504e <HAL_SYSTICK_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d809      	bhi.n	8002d6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d62:	f002 f94c 	bl	8004ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_InitTick+0x70>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e007      	b.n	8002d7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e004      	b.n	8002d7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000010 	.word	0x20000010
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_IncTick+0x1c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_IncTick+0x20>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a03      	ldr	r2, [pc, #12]	@ (8002db0 <HAL_IncTick+0x1c>)
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	20000cec 	.word	0x20000cec
 8002db4:	20000010 	.word	0x20000010

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000cec 	.word	0x20000cec

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d004      	beq.n	8002df4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_Delay+0x40>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df4:	bf00      	nop
 8002df6:	f7ff ffdf 	bl	8002db8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d8f7      	bhi.n	8002df6 <HAL_Delay+0x26>
  {
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000010 	.word	0x20000010

08002e14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3360      	adds	r3, #96	@ 0x60
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <LL_ADC_SetOffset+0x44>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	03fff000 	.word	0x03fff000

08002ec4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3360      	adds	r3, #96	@ 0x60
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3360      	adds	r3, #96	@ 0x60
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3360      	adds	r3, #96	@ 0x60
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3360      	adds	r3, #96	@ 0x60
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615a      	str	r2, [r3, #20]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3330      	adds	r3, #48	@ 0x30
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	4413      	add	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	211f      	movs	r1, #31
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 011f 	and.w	r1, r3, #31
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3314      	adds	r3, #20
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0e5b      	lsrs	r3, r3, #25
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	0d1b      	lsrs	r3, r3, #20
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2107      	movs	r1, #7
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	401a      	ands	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	0d1b      	lsrs	r3, r3, #20
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0318 	and.w	r3, r3, #24
 80030d6:	4908      	ldr	r1, [pc, #32]	@ (80030f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030d8:	40d9      	lsrs	r1, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	400b      	ands	r3, r1
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	0007ffff 	.word	0x0007ffff

080030fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 031f 	and.w	r3, r3, #31
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003144:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6093      	str	r3, [r2, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316c:	d101      	bne.n	8003172 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003194:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031bc:	d101      	bne.n	80031c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003208:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800320c:	f043 0202 	orr.w	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <LL_ADC_IsEnabled+0x18>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_ADC_IsEnabled+0x1a>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d101      	bne.n	800325e <LL_ADC_IsDisableOngoing+0x18>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_IsDisableOngoing+0x1a>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d101      	bne.n	80032ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1a9      	b.n	800364e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd ff77 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff19 	bl	8003158 <LL_ADC_IsDeepPowerDownEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff feff 	bl	8003134 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff34 	bl	80031a8 <LL_ADC_IsInternalRegulatorEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d115      	bne.n	8003372 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff18 	bl	8003180 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003350:	4b9c      	ldr	r3, [pc, #624]	@ (80035c4 <HAL_ADC_Init+0x2e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	4a9c      	ldr	r2, [pc, #624]	@ (80035c8 <HAL_ADC_Init+0x2e8>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003364:	e002      	b.n	800336c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3b01      	subs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff16 	bl	80031a8 <LL_ADC_IsInternalRegulatorEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff76 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 80033a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 8142 	bne.w	800363c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 813e 	bne.w	800363c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033c8:	f043 0202 	orr.w	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff23 	bl	8003220 <LL_ADC_IsEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d141      	bne.n	8003464 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e8:	d004      	beq.n	80033f4 <HAL_ADC_Init+0x114>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a77      	ldr	r2, [pc, #476]	@ (80035cc <HAL_ADC_Init+0x2ec>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10f      	bne.n	8003414 <HAL_ADC_Init+0x134>
 80033f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033f8:	f7ff ff12 	bl	8003220 <LL_ADC_IsEnabled>
 80033fc:	4604      	mov	r4, r0
 80033fe:	4873      	ldr	r0, [pc, #460]	@ (80035cc <HAL_ADC_Init+0x2ec>)
 8003400:	f7ff ff0e 	bl	8003220 <LL_ADC_IsEnabled>
 8003404:	4603      	mov	r3, r0
 8003406:	4323      	orrs	r3, r4
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e012      	b.n	800343a <HAL_ADC_Init+0x15a>
 8003414:	486e      	ldr	r0, [pc, #440]	@ (80035d0 <HAL_ADC_Init+0x2f0>)
 8003416:	f7ff ff03 	bl	8003220 <LL_ADC_IsEnabled>
 800341a:	4604      	mov	r4, r0
 800341c:	486d      	ldr	r0, [pc, #436]	@ (80035d4 <HAL_ADC_Init+0x2f4>)
 800341e:	f7ff feff 	bl	8003220 <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	431c      	orrs	r4, r3
 8003426:	486c      	ldr	r0, [pc, #432]	@ (80035d8 <HAL_ADC_Init+0x2f8>)
 8003428:	f7ff fefa 	bl	8003220 <LL_ADC_IsEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	4323      	orrs	r3, r4
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d004      	beq.n	8003452 <HAL_ADC_Init+0x172>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5f      	ldr	r2, [pc, #380]	@ (80035cc <HAL_ADC_Init+0x2ec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_ADC_Init+0x176>
 8003452:	4a62      	ldr	r2, [pc, #392]	@ (80035dc <HAL_ADC_Init+0x2fc>)
 8003454:	e000      	b.n	8003458 <HAL_ADC_Init+0x178>
 8003456:	4a62      	ldr	r2, [pc, #392]	@ (80035e0 <HAL_ADC_Init+0x300>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7ff fcd8 	bl	8002e14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7f5b      	ldrb	r3, [r3, #29]
 8003468:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800346e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003474:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800347a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003482:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800348e:	2b01      	cmp	r3, #1
 8003490:	d106      	bne.n	80034a0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	045b      	lsls	r3, r3, #17
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4b48      	ldr	r3, [pc, #288]	@ (80035e4 <HAL_ADC_Init+0x304>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fee5 	bl	80032ba <LL_ADC_INJ_IsConversionOngoing>
 80034f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d17f      	bne.n	80035f8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d17c      	bne.n	80035f8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003502:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800350a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800351a:	f023 0302 	bic.w	r3, r3, #2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	69b9      	ldr	r1, [r7, #24]
 8003524:	430b      	orrs	r3, r1
 8003526:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d017      	beq.n	8003560 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800353e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003548:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800354c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6911      	ldr	r1, [r2, #16]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800355e:	e013      	b.n	8003588 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800356e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003584:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d12a      	bne.n	80035e8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035b4:	430a      	orrs	r2, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	e019      	b.n	80035f8 <HAL_ADC_Init+0x318>
 80035c4:	20000008 	.word	0x20000008
 80035c8:	053e2d63 	.word	0x053e2d63
 80035cc:	50000100 	.word	0x50000100
 80035d0:	50000400 	.word	0x50000400
 80035d4:	50000500 	.word	0x50000500
 80035d8:	50000600 	.word	0x50000600
 80035dc:	50000300 	.word	0x50000300
 80035e0:	50000700 	.word	0x50000700
 80035e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10c      	bne.n	800361a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f023 010f 	bic.w	r1, r3, #15
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
 8003618:	e007      	b.n	800362a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 020f 	bic.w	r2, r2, #15
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800363a:	e007      	b.n	800364c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003640:	f043 0210 	orr.w	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800364c:	7ffb      	ldrb	r3, [r7, #31]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	@ 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop

08003658 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_Start+0x1c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a67      	ldr	r2, [pc, #412]	@ (800380c <HAL_ADC_Start+0x1b4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_Start+0x20>
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_ADC_Start+0x1b8>)
 8003676:	e000      	b.n	800367a <HAL_ADC_Start+0x22>
 8003678:	4b66      	ldr	r3, [pc, #408]	@ (8003814 <HAL_ADC_Start+0x1bc>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fd3e 	bl	80030fc <LL_ADC_GetMultimode>
 8003680:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fe04 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 80b4 	bne.w	80037fc <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Start+0x4a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0af      	b.n	8003802 <HAL_ADC_Start+0x1aa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f001 f854 	bl	8004758 <ADC_Enable>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 809b 	bne.w	80037f2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4d      	ldr	r2, [pc, #308]	@ (800380c <HAL_ADC_Start+0x1b4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_ADC_Start+0x96>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4e      	ldr	r2, [pc, #312]	@ (8003818 <HAL_ADC_Start+0x1c0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d002      	beq.n	80036ea <HAL_ADC_Start+0x92>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	e003      	b.n	80036f2 <HAL_ADC_Start+0x9a>
 80036ea:	4b4c      	ldr	r3, [pc, #304]	@ (800381c <HAL_ADC_Start+0x1c4>)
 80036ec:	e001      	b.n	80036f2 <HAL_ADC_Start+0x9a>
 80036ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d002      	beq.n	8003700 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003718:	d106      	bne.n	8003728 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371e:	f023 0206 	bic.w	r2, r3, #6
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	661a      	str	r2, [r3, #96]	@ 0x60
 8003726:	e002      	b.n	800372e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	221c      	movs	r2, #28
 8003734:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a32      	ldr	r2, [pc, #200]	@ (800380c <HAL_ADC_Start+0x1b4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_ADC_Start+0x104>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_ADC_Start+0x1c0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_ADC_Start+0x100>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e003      	b.n	8003760 <HAL_ADC_Start+0x108>
 8003758:	4b30      	ldr	r3, [pc, #192]	@ (800381c <HAL_ADC_Start+0x1c4>)
 800375a:	e001      	b.n	8003760 <HAL_ADC_Start+0x108>
 800375c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	4293      	cmp	r3, r2
 8003766:	d008      	beq.n	800377a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d002      	beq.n	800377a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b09      	cmp	r3, #9
 8003778:	d114      	bne.n	80037a4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003790:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fd65 	bl	800326c <LL_ADC_REG_StartConversion>
 80037a2:	e02d      	b.n	8003800 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <HAL_ADC_Start+0x1b4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_ADC_Start+0x176>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_ADC_Start+0x1c0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d002      	beq.n	80037ca <HAL_ADC_Start+0x172>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e003      	b.n	80037d2 <HAL_ADC_Start+0x17a>
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <HAL_ADC_Start+0x1c4>)
 80037cc:	e001      	b.n	80037d2 <HAL_ADC_Start+0x17a>
 80037ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037f0:	e006      	b.n	8003800 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80037fa:	e001      	b.n	8003800 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	50000100 	.word	0x50000100
 8003810:	50000300 	.word	0x50000300
 8003814:	50000700 	.word	0x50000700
 8003818:	50000500 	.word	0x50000500
 800381c:	50000400 	.word	0x50000400

08003820 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003834:	d004      	beq.n	8003840 <HAL_ADC_Start_DMA+0x20>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5a      	ldr	r2, [pc, #360]	@ (80039a4 <HAL_ADC_Start_DMA+0x184>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADC_Start_DMA+0x24>
 8003840:	4b59      	ldr	r3, [pc, #356]	@ (80039a8 <HAL_ADC_Start_DMA+0x188>)
 8003842:	e000      	b.n	8003846 <HAL_ADC_Start_DMA+0x26>
 8003844:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_ADC_Start_DMA+0x18c>)
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fc58 	bl	80030fc <LL_ADC_GetMultimode>
 800384c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd1e 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 809b 	bne.w	8003996 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_ADC_Start_DMA+0x4e>
 800386a:	2302      	movs	r3, #2
 800386c:	e096      	b.n	800399c <HAL_ADC_Start_DMA+0x17c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a4d      	ldr	r2, [pc, #308]	@ (80039b0 <HAL_ADC_Start_DMA+0x190>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d008      	beq.n	8003892 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d002      	beq.n	8003892 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b09      	cmp	r3, #9
 8003890:	d17a      	bne.n	8003988 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 ff60 	bl	8004758 <ADC_Enable>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d16d      	bne.n	800397e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3a      	ldr	r2, [pc, #232]	@ (80039a4 <HAL_ADC_Start_DMA+0x184>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_ADC_Start_DMA+0xb4>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3b      	ldr	r2, [pc, #236]	@ (80039b4 <HAL_ADC_Start_DMA+0x194>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d002      	beq.n	80038d0 <HAL_ADC_Start_DMA+0xb0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_Start_DMA+0xb8>
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_ADC_Start_DMA+0x198>)
 80038d2:	e001      	b.n	80038d8 <HAL_ADC_Start_DMA+0xb8>
 80038d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	4293      	cmp	r3, r2
 80038de:	d002      	beq.n	80038e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003902:	f023 0206 	bic.w	r2, r3, #6
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	661a      	str	r2, [r3, #96]	@ 0x60
 800390a:	e002      	b.n	8003912 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	4a29      	ldr	r2, [pc, #164]	@ (80039bc <HAL_ADC_Start_DMA+0x19c>)
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <HAL_ADC_Start_DMA+0x1a0>)
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_ADC_Start_DMA+0x1a4>)
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	221c      	movs	r2, #28
 8003930:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0210 	orr.w	r2, r2, #16
 8003948:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3340      	adds	r3, #64	@ 0x40
 8003964:	4619      	mov	r1, r3
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f001 fd17 	bl	800539c <HAL_DMA_Start_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fc78 	bl	800326c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800397c:	e00d      	b.n	800399a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003986:	e008      	b.n	800399a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003994:	e001      	b.n	800399a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	50000100 	.word	0x50000100
 80039a8:	50000300 	.word	0x50000300
 80039ac:	50000700 	.word	0x50000700
 80039b0:	50000600 	.word	0x50000600
 80039b4:	50000500 	.word	0x50000500
 80039b8:	50000400 	.word	0x50000400
 80039bc:	08004943 	.word	0x08004943
 80039c0:	08004a1b 	.word	0x08004a1b
 80039c4:	08004a37 	.word	0x08004a37

080039c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	@ 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ec:	d004      	beq.n	80039f8 <HAL_ADC_IRQHandler+0x30>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a8e      	ldr	r2, [pc, #568]	@ (8003c2c <HAL_ADC_IRQHandler+0x264>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_IRQHandler+0x34>
 80039f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003c30 <HAL_ADC_IRQHandler+0x268>)
 80039fa:	e000      	b.n	80039fe <HAL_ADC_IRQHandler+0x36>
 80039fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003c34 <HAL_ADC_IRQHandler+0x26c>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb7c 	bl	80030fc <LL_ADC_GetMultimode>
 8003a04:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x78>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 f8f6 	bl	8004c24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_ADC_IRQHandler+0x8c>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8094 	beq.w	8003b88 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 808e 	beq.w	8003b88 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fa95 	bl	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d072      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a64      	ldr	r2, [pc, #400]	@ (8003c2c <HAL_ADC_IRQHandler+0x264>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_ADC_IRQHandler+0xea>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a65      	ldr	r2, [pc, #404]	@ (8003c38 <HAL_ADC_IRQHandler+0x270>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d002      	beq.n	8003aae <HAL_ADC_IRQHandler+0xe6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e003      	b.n	8003ab6 <HAL_ADC_IRQHandler+0xee>
 8003aae:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_ADC_IRQHandler+0x274>)
 8003ab0:	e001      	b.n	8003ab6 <HAL_ADC_IRQHandler+0xee>
 8003ab2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d008      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d002      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d104      	bne.n	8003ada <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	e014      	b.n	8003b04 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a53      	ldr	r2, [pc, #332]	@ (8003c2c <HAL_ADC_IRQHandler+0x264>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x130>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a53      	ldr	r2, [pc, #332]	@ (8003c38 <HAL_ADC_IRQHandler+0x270>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d002      	beq.n	8003af4 <HAL_ADC_IRQHandler+0x12c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	e003      	b.n	8003afc <HAL_ADC_IRQHandler+0x134>
 8003af4:	4b51      	ldr	r3, [pc, #324]	@ (8003c3c <HAL_ADC_IRQHandler+0x274>)
 8003af6:	e001      	b.n	8003afc <HAL_ADC_IRQHandler+0x134>
 8003af8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003afc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d135      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d12e      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fbb7 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11a      	bne.n	8003b62 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020c 	bic.w	r2, r2, #12
 8003b3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d112      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b60:	e00b      	b.n	8003b7a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	f043 0210 	orr.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f984 	bl	8003e88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	220c      	movs	r2, #12
 8003b86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_ADC_IRQHandler+0x1d4>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80b3 	beq.w	8003d0e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80ad 	beq.w	8003d0e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fa30 	bl	8003036 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bd6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f9eb 	bl	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003be2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a10      	ldr	r2, [pc, #64]	@ (8003c2c <HAL_ADC_IRQHandler+0x264>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x23a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a11      	ldr	r2, [pc, #68]	@ (8003c38 <HAL_ADC_IRQHandler+0x270>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d002      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x236>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e003      	b.n	8003c06 <HAL_ADC_IRQHandler+0x23e>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <HAL_ADC_IRQHandler+0x274>)
 8003c00:	e001      	b.n	8003c06 <HAL_ADC_IRQHandler+0x23e>
 8003c02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d008      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d002      	beq.n	8003c20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	d10f      	bne.n	8003c40 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	e01f      	b.n	8003c6a <HAL_ADC_IRQHandler+0x2a2>
 8003c2a:	bf00      	nop
 8003c2c:	50000100 	.word	0x50000100
 8003c30:	50000300 	.word	0x50000300
 8003c34:	50000700 	.word	0x50000700
 8003c38:	50000500 	.word	0x50000500
 8003c3c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a8b      	ldr	r2, [pc, #556]	@ (8003e74 <HAL_ADC_IRQHandler+0x4ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_ADC_IRQHandler+0x296>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a8a      	ldr	r2, [pc, #552]	@ (8003e78 <HAL_ADC_IRQHandler+0x4b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d002      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x292>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	e003      	b.n	8003c62 <HAL_ADC_IRQHandler+0x29a>
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_ADC_IRQHandler+0x4b4>)
 8003c5c:	e001      	b.n	8003c62 <HAL_ADC_IRQHandler+0x29a>
 8003c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d047      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_ADC_IRQHandler+0x2c2>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03f      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d13a      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d133      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d12e      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fb07 	bl	80032ba <LL_ADC_INJ_IsConversionOngoing>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cc0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d112      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ce6:	e00b      	b.n	8003d00 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	f043 0210 	orr.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 ff67 	bl	8004bd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2260      	movs	r2, #96	@ 0x60
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_ADC_IRQHandler+0x374>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8be 	bl	8003eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2280      	movs	r2, #128	@ 0x80
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d012      	beq.n	8003d6c <HAL_ADC_IRQHandler+0x3a4>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 ff4d 	bl	8004bfc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <HAL_ADC_IRQHandler+0x3d4>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 ff3f 	bl	8004c10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d043      	beq.n	8003e2e <HAL_ADC_IRQHandler+0x466>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d03e      	beq.n	8003e2e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	e021      	b.n	8003e02 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x410>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a28      	ldr	r2, [pc, #160]	@ (8003e74 <HAL_ADC_IRQHandler+0x4ac>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x414>
 8003dd8:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_ADC_IRQHandler+0x4b8>)
 8003dda:	e000      	b.n	8003dde <HAL_ADC_IRQHandler+0x416>
 8003ddc:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <HAL_ADC_IRQHandler+0x4bc>)
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f99a 	bl	8003118 <LL_ADC_GetMultiDMATransfer>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	e008      	b.n	8003e02 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10e      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f84f 	bl	8003ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d018      	beq.n	8003e6a <HAL_ADC_IRQHandler+0x4a2>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d013      	beq.n	8003e6a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e52:	f043 0208 	orr.w	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 febf 	bl	8004be8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	@ 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	50000100 	.word	0x50000100
 8003e78:	50000500 	.word	0x50000500
 8003e7c:	50000400 	.word	0x50000400
 8003e80:	50000300 	.word	0x50000300
 8003e84:	50000700 	.word	0x50000700

08003e88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0b6      	sub	sp, #216	@ 0xd8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x24>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f000 bc13 	b.w	8004722 <HAL_ADC_ConfigChannel+0x84a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f9c3 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 83f3 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7ff f85b 	bl	8002fde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f9b1 	bl	8003294 <LL_ADC_REG_IsConversionOngoing>
 8003f32:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f9bd 	bl	80032ba <LL_ADC_INJ_IsConversionOngoing>
 8003f40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 81d9 	bne.w	8004300 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 81d4 	bne.w	8004300 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f60:	d10f      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f7ff f875 	bl	800305c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f809 	bl	8002f92 <LL_ADC_SetSamplingTimeCommonConfig>
 8003f80:	e00e      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7ff f864 	bl	800305c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fff9 	bl	8002f92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	08db      	lsrs	r3, r3, #3
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d022      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6919      	ldr	r1, [r3, #16]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fd2:	f7fe ff53 	bl	8002e7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f7fe ff9f 	bl	8002f26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x126>
 8003ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ffc:	e000      	b.n	8004000 <HAL_ADC_ConfigChannel+0x128>
 8003ffe:	2300      	movs	r3, #0
 8004000:	461a      	mov	r2, r3
 8004002:	f7fe ffab 	bl	8002f5c <LL_ADC_SetOffsetSaturation>
 8004006:	e17b      	b.n	8004300 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ff58 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x15c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe ff4d 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	f003 021f 	and.w	r2, r3, #31
 8004032:	e01e      	b.n	8004072 <HAL_ADC_ConfigChannel+0x19a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe ff42 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 8004040:	4603      	mov	r3, r0
 8004042:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800405a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004062:	2320      	movs	r3, #32
 8004064:	e004      	b.n	8004070 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <HAL_ADC_ConfigChannel+0x1b2>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	e018      	b.n	80040bc <HAL_ADC_ConfigChannel+0x1e4>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800409e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e004      	b.n	80040bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040bc:	429a      	cmp	r2, r3
 80040be:	d106      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe ff11 	bl	8002ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fef5 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x222>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe feea 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 80040f0:	4603      	mov	r3, r0
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	f003 021f 	and.w	r2, r3, #31
 80040f8:	e01e      	b.n	8004138 <HAL_ADC_ConfigChannel+0x260>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fedf 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800411c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e004      	b.n	8004136 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800412c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x278>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	e018      	b.n	8004182 <HAL_ADC_ConfigChannel+0x2aa>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004164:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e004      	b.n	8004182 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004182:	429a      	cmp	r2, r3
 8004184:	d106      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe feae 	bl	8002ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fe92 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x2e8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2102      	movs	r1, #2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fe87 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	f003 021f 	and.w	r2, r3, #31
 80041be:	e01e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x326>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fe7c 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80041de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80041e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80041ee:	2320      	movs	r3, #32
 80041f0:	e004      	b.n	80041fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80041f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004206:	2b00      	cmp	r3, #0
 8004208:	d105      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x33e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0e9b      	lsrs	r3, r3, #26
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	e016      	b.n	8004244 <HAL_ADC_ConfigChannel+0x36c>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800422a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800422e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004236:	2320      	movs	r3, #32
 8004238:	e004      	b.n	8004244 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800423a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	2102      	movs	r1, #2
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe4d 	bl	8002ef0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2103      	movs	r1, #3
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fe31 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x3aa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2103      	movs	r1, #3
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fe26 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	0e9b      	lsrs	r3, r3, #26
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	e017      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x3da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2103      	movs	r1, #3
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe fe1b 	bl	8002ec4 <LL_ADC_GetOffsetChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800429a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800429c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800429e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x3f2>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0e9b      	lsrs	r3, r3, #26
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	e011      	b.n	80042ee <HAL_ADC_ConfigChannel+0x416>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80042d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80042dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e003      	b.n	80042ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80042e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d106      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	2103      	movs	r1, #3
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fdf8 	bl	8002ef0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe ff8b 	bl	8003220 <LL_ADC_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 813d 	bne.w	800458c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f7fe fec8 	bl	80030b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4aa2      	ldr	r2, [pc, #648]	@ (80045b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f040 812e 	bne.w	800458c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x480>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	3301      	adds	r3, #1
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b09      	cmp	r3, #9
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e019      	b.n	800438c <HAL_ADC_ConfigChannel+0x4b4>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004368:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800436a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e003      	b.n	800437c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2b09      	cmp	r3, #9
 8004384:	bf94      	ite	ls
 8004386:	2301      	movls	r3, #1
 8004388:	2300      	movhi	r3, #0
 800438a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438c:	2b00      	cmp	r3, #0
 800438e:	d079      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x4d4>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	3301      	adds	r3, #1
 80043a4:	069b      	lsls	r3, r3, #26
 80043a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043aa:	e015      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x500>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80043be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80043c4:	2320      	movs	r3, #32
 80043c6:	e003      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80043c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	069b      	lsls	r3, r3, #26
 80043d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x520>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2101      	movs	r1, #1
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	e017      	b.n	8004428 <HAL_ADC_ConfigChannel+0x550>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800440a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	ea42 0103 	orr.w	r1, r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <HAL_ADC_ConfigChannel+0x576>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0e9b      	lsrs	r3, r3, #26
 800443e:	3301      	adds	r3, #1
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	051b      	lsls	r3, r3, #20
 800444c:	e018      	b.n	8004480 <HAL_ADC_ConfigChannel+0x5a8>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004466:	2320      	movs	r3, #32
 8004468:	e003      	b.n	8004472 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3301      	adds	r3, #1
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4613      	mov	r3, r2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4413      	add	r3, r2
 800447e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004480:	430b      	orrs	r3, r1
 8004482:	e07e      	b.n	8004582 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x5c8>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	3301      	adds	r3, #1
 8004498:	069b      	lsls	r3, r3, #26
 800449a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800449e:	e015      	b.n	80044cc <HAL_ADC_ConfigChannel+0x5f4>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044b8:	2320      	movs	r3, #32
 80044ba:	e003      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	069b      	lsls	r3, r3, #26
 80044c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x614>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	3301      	adds	r3, #1
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	e017      	b.n	800451c <HAL_ADC_ConfigChannel+0x644>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	61fb      	str	r3, [r7, #28]
  return result;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2101      	movs	r1, #1
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x670>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0e9b      	lsrs	r3, r3, #26
 8004532:	3301      	adds	r3, #1
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	3b1e      	subs	r3, #30
 8004540:	051b      	lsls	r3, r3, #20
 8004542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004546:	e01b      	b.n	8004580 <HAL_ADC_ConfigChannel+0x6a8>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	613b      	str	r3, [r7, #16]
  return result;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	3b1e      	subs	r3, #30
 800457a:	051b      	lsls	r3, r3, #20
 800457c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004580:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004586:	4619      	mov	r1, r3
 8004588:	f7fe fd68 	bl	800305c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80be 	beq.w	8004716 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a2:	d004      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x6d6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <HAL_ADC_ConfigChannel+0x6e4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10a      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x6ec>
 80045ae:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80045b0:	e009      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x6ee>
 80045b2:	bf00      	nop
 80045b4:	407f0000 	.word	0x407f0000
 80045b8:	80080000 	.word	0x80080000
 80045bc:	50000100 	.word	0x50000100
 80045c0:	50000300 	.word	0x50000300
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_ADC_ConfigChannel+0x854>)
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fc4a 	bl	8002e60 <LL_ADC_GetCommonPathInternalCh>
 80045cc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a56      	ldr	r2, [pc, #344]	@ (8004730 <HAL_ADC_ConfigChannel+0x858>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_ADC_ConfigChannel+0x70c>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a55      	ldr	r2, [pc, #340]	@ (8004734 <HAL_ADC_ConfigChannel+0x85c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d13a      	bne.n	800465a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d134      	bne.n	800465a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045f8:	d005      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x72e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004738 <HAL_ADC_ConfigChannel+0x860>)
 8004600:	4293      	cmp	r3, r2
 8004602:	f040 8085 	bne.w	8004710 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800460e:	d004      	beq.n	800461a <HAL_ADC_ConfigChannel+0x742>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a49      	ldr	r2, [pc, #292]	@ (800473c <HAL_ADC_ConfigChannel+0x864>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_ADC_ConfigChannel+0x746>
 800461a:	4a49      	ldr	r2, [pc, #292]	@ (8004740 <HAL_ADC_ConfigChannel+0x868>)
 800461c:	e000      	b.n	8004620 <HAL_ADC_ConfigChannel+0x748>
 800461e:	4a43      	ldr	r2, [pc, #268]	@ (800472c <HAL_ADC_ConfigChannel+0x854>)
 8004620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004624:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe fc05 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004630:	4b44      	ldr	r3, [pc, #272]	@ (8004744 <HAL_ADC_ConfigChannel+0x86c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	4a44      	ldr	r2, [pc, #272]	@ (8004748 <HAL_ADC_ConfigChannel+0x870>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800464a:	e002      	b.n	8004652 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f9      	bne.n	800464c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004658:	e05a      	b.n	8004710 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3b      	ldr	r2, [pc, #236]	@ (800474c <HAL_ADC_ConfigChannel+0x874>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d125      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11f      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a31      	ldr	r2, [pc, #196]	@ (800473c <HAL_ADC_ConfigChannel+0x864>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d104      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x7ac>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a34      	ldr	r2, [pc, #208]	@ (8004750 <HAL_ADC_ConfigChannel+0x878>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d047      	beq.n	8004714 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800468c:	d004      	beq.n	8004698 <HAL_ADC_ConfigChannel+0x7c0>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2a      	ldr	r2, [pc, #168]	@ (800473c <HAL_ADC_ConfigChannel+0x864>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x7c4>
 8004698:	4a29      	ldr	r2, [pc, #164]	@ (8004740 <HAL_ADC_ConfigChannel+0x868>)
 800469a:	e000      	b.n	800469e <HAL_ADC_ConfigChannel+0x7c6>
 800469c:	4a23      	ldr	r2, [pc, #140]	@ (800472c <HAL_ADC_ConfigChannel+0x854>)
 800469e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fe fbc6 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046ae:	e031      	b.n	8004714 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a27      	ldr	r2, [pc, #156]	@ (8004754 <HAL_ADC_ConfigChannel+0x87c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d12d      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d127      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	@ (800473c <HAL_ADC_ConfigChannel+0x864>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046d8:	d004      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x80c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	@ (800473c <HAL_ADC_ConfigChannel+0x864>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x810>
 80046e4:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <HAL_ADC_ConfigChannel+0x868>)
 80046e6:	e000      	b.n	80046ea <HAL_ADC_ConfigChannel+0x812>
 80046e8:	4a10      	ldr	r2, [pc, #64]	@ (800472c <HAL_ADC_ConfigChannel+0x854>)
 80046ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe fba0 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
 80046fa:	e00c      	b.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800470e:	e002      	b.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004714:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800471e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004722:	4618      	mov	r0, r3
 8004724:	37d8      	adds	r7, #216	@ 0xd8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	50000700 	.word	0x50000700
 8004730:	c3210000 	.word	0xc3210000
 8004734:	90c00010 	.word	0x90c00010
 8004738:	50000600 	.word	0x50000600
 800473c:	50000100 	.word	0x50000100
 8004740:	50000300 	.word	0x50000300
 8004744:	20000008 	.word	0x20000008
 8004748:	053e2d63 	.word	0x053e2d63
 800474c:	c7520000 	.word	0xc7520000
 8004750:	50000500 	.word	0x50000500
 8004754:	cb840000 	.word	0xcb840000

08004758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fd59 	bl	8003220 <LL_ADC_IsEnabled>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d176      	bne.n	8004862 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <ADC_Enable+0x114>)
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004792:	f043 0201 	orr.w	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e062      	b.n	8004864 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fd14 	bl	80031d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b0:	d004      	beq.n	80047bc <ADC_Enable+0x64>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004870 <ADC_Enable+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <ADC_Enable+0x68>
 80047bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004874 <ADC_Enable+0x11c>)
 80047be:	e000      	b.n	80047c2 <ADC_Enable+0x6a>
 80047c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004878 <ADC_Enable+0x120>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fb4c 	bl	8002e60 <LL_ADC_GetCommonPathInternalCh>
 80047c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d2:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <ADC_Enable+0x124>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <ADC_Enable+0x128>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047ec:	e002      	b.n	80047f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f9      	bne.n	80047ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047fa:	f7fe fadd 	bl	8002db8 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004800:	e028      	b.n	8004854 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fd0a 	bl	8003220 <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fcda 	bl	80031d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800481c:	f7fe facc 	bl	8002db8 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d914      	bls.n	8004854 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d00d      	beq.n	8004854 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f043 0210 	orr.w	r2, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e007      	b.n	8004864 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d1cf      	bne.n	8004802 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	8000003f 	.word	0x8000003f
 8004870:	50000100 	.word	0x50000100
 8004874:	50000300 	.word	0x50000300
 8004878:	50000700 	.word	0x50000700
 800487c:	20000008 	.word	0x20000008
 8004880:	053e2d63 	.word	0x053e2d63

08004884 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fcd8 	bl	8003246 <LL_ADC_IsDisableOngoing>
 8004896:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fcbf 	bl	8003220 <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d047      	beq.n	8004938 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d144      	bne.n	8004938 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030d 	and.w	r3, r3, #13
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fc99 	bl	80031f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2203      	movs	r2, #3
 80048cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048ce:	f7fe fa73 	bl	8002db8 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048d4:	e029      	b.n	800492a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048da:	f043 0210 	orr.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e023      	b.n	800493a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048f2:	f7fe fa61 	bl	8002db8 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d914      	bls.n	800492a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e007      	b.n	800493a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1dc      	bne.n	80048f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d14b      	bne.n	80049f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d021      	beq.n	80049ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fb1c 	bl	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d032      	beq.n	80049ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d12b      	bne.n	80049ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11f      	bne.n	80049ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049b8:	e018      	b.n	80049ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d111      	bne.n	80049ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	f043 0201 	orr.w	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff fa4b 	bl	8003e88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049f2:	e00e      	b.n	8004a12 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fa5f 	bl	8003ec4 <HAL_ADC_ErrorCallback>
}
 8004a06:	e004      	b.n	8004a12 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fa37 	bl	8003e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fa31 	bl	8003ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <LL_ADC_IsEnabled>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <LL_ADC_IsEnabled+0x18>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <LL_ADC_IsEnabled+0x1a>
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_StartCalibration>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004aa2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	609a      	str	r2, [r3, #8]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad6:	d101      	bne.n	8004adc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_ADC_REG_IsConversionOngoing>:
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d101      	bne.n	8004b02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_ADCEx_Calibration_Start+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e04d      	b.n	8004bc8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fea5 	bl	8004884 <ADC_Disable>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d136      	bne.n	8004bb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b4c:	f023 0302 	bic.w	r3, r3, #2
 8004b50:	f043 0202 	orr.w	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff96 	bl	8004a90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b64:	e014      	b.n	8004b90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a18      	ldr	r2, [pc, #96]	@ (8004bd0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d90d      	bls.n	8004b90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f023 0312 	bic.w	r3, r3, #18
 8004b7c:	f043 0210 	orr.w	r2, r3, #16
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e01b      	b.n	8004bc8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff94 	bl	8004ac2 <LL_ADC_IsCalibrationOnGoing>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e2      	bne.n	8004b66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f023 0303 	bic.w	r3, r3, #3
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bb0:	e005      	b.n	8004bbe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	0004de01 	.word	0x0004de01

08004bd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b0a1      	sub	sp, #132	@ 0x84
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0e7      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c62:	2300      	movs	r3, #0
 8004c64:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c6e:	d102      	bne.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c70:	4b6f      	ldr	r3, [pc, #444]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	e009      	b.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d102      	bne.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c80:	4b6d      	ldr	r3, [pc, #436]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	e001      	b.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0be      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff ff1d 	bl	8004aea <LL_ADC_REG_IsConversionOngoing>
 8004cb0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ff17 	bl	8004aea <LL_ADC_REG_IsConversionOngoing>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80a0 	bne.w	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 809c 	bne.w	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a55      	ldr	r2, [pc, #340]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ce0:	4b56      	ldr	r3, [pc, #344]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ce4:	4b56      	ldr	r3, [pc, #344]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004ce6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d04b      	beq.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d02:	035b      	lsls	r3, r3, #13
 8004d04:	430b      	orrs	r3, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d14:	d004      	beq.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a45      	ldr	r2, [pc, #276]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10f      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d24:	f7ff fea1 	bl	8004a6a <LL_ADC_IsEnabled>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4841      	ldr	r0, [pc, #260]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d2c:	f7ff fe9d 	bl	8004a6a <LL_ADC_IsEnabled>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4323      	orrs	r3, r4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e012      	b.n	8004d66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d40:	483c      	ldr	r0, [pc, #240]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d42:	f7ff fe92 	bl	8004a6a <LL_ADC_IsEnabled>
 8004d46:	4604      	mov	r4, r0
 8004d48:	483b      	ldr	r0, [pc, #236]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d4a:	f7ff fe8e 	bl	8004a6a <LL_ADC_IsEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	431c      	orrs	r4, r3
 8004d52:	483c      	ldr	r0, [pc, #240]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d54:	f7ff fe89 	bl	8004a6a <LL_ADC_IsEnabled>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4323      	orrs	r3, r4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d056      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d72:	f023 030f 	bic.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d84:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d86:	e047      	b.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a23      	ldr	r2, [pc, #140]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10f      	bne.n	8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004da8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dac:	f7ff fe5d 	bl	8004a6a <LL_ADC_IsEnabled>
 8004db0:	4604      	mov	r4, r0
 8004db2:	481f      	ldr	r0, [pc, #124]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db4:	f7ff fe59 	bl	8004a6a <LL_ADC_IsEnabled>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4323      	orrs	r3, r4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e012      	b.n	8004dee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004dc8:	481a      	ldr	r0, [pc, #104]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dca:	f7ff fe4e 	bl	8004a6a <LL_ADC_IsEnabled>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4819      	ldr	r0, [pc, #100]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dd2:	f7ff fe4a 	bl	8004a6a <LL_ADC_IsEnabled>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	431c      	orrs	r4, r3
 8004dda:	481a      	ldr	r0, [pc, #104]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ddc:	f7ff fe45 	bl	8004a6a <LL_ADC_IsEnabled>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4323      	orrs	r3, r4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dfa:	f023 030f 	bic.w	r3, r3, #15
 8004dfe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e02:	e009      	b.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e16:	e000      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3784      	adds	r7, #132	@ 0x84
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	50000100 	.word	0x50000100
 8004e34:	50000400 	.word	0x50000400
 8004e38:	50000500 	.word	0x50000500
 8004e3c:	50000300 	.word	0x50000300
 8004e40:	50000700 	.word	0x50000700
 8004e44:	50000600 	.word	0x50000600

08004e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e7a:	4a04      	ldr	r2, [pc, #16]	@ (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	60d3      	str	r3, [r2, #12]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e94:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 0307 	and.w	r3, r3, #7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	db0b      	blt.n	8004ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	f003 021f 	and.w	r2, r3, #31
 8004ec4:	4907      	ldr	r1, [pc, #28]	@ (8004ee4 <__NVIC_EnableIRQ+0x38>)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2001      	movs	r0, #1
 8004ece:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000e100 	.word	0xe000e100

08004ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db0a      	blt.n	8004f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	490c      	ldr	r1, [pc, #48]	@ (8004f34 <__NVIC_SetPriority+0x4c>)
 8004f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f10:	e00a      	b.n	8004f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	4908      	ldr	r1, [pc, #32]	@ (8004f38 <__NVIC_SetPriority+0x50>)
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	440b      	add	r3, r1
 8004f26:	761a      	strb	r2, [r3, #24]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000e100 	.word	0xe000e100
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	bf28      	it	cs
 8004f5a:	2304      	movcs	r3, #4
 8004f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d902      	bls.n	8004f6c <NVIC_EncodePriority+0x30>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3b03      	subs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <NVIC_EncodePriority+0x32>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	401a      	ands	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f84:	f04f 31ff 	mov.w	r1, #4294967295
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	43d9      	mvns	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	4313      	orrs	r3, r2
         );
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb4:	d301      	bcc.n	8004fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00f      	b.n	8004fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fba:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc2:	210f      	movs	r1, #15
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	f7ff ff8e 	bl	8004ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fd2:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <SysTick_Config+0x40>)
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	e000e010 	.word	0xe000e010

08004fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff29 	bl	8004e48 <__NVIC_SetPriorityGrouping>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	4603      	mov	r3, r0
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800500c:	f7ff ff40 	bl	8004e90 <__NVIC_GetPriorityGrouping>
 8005010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff90 	bl	8004f3c <NVIC_EncodePriority>
 800501c:	4602      	mov	r2, r0
 800501e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff5f 	bl	8004ee8 <__NVIC_SetPriority>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff33 	bl	8004eac <__NVIC_EnableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ffa4 	bl	8004fa4 <SysTick_Config>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e054      	b.n	8005124 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7f5b      	ldrb	r3, [r3, #29]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fa2c 	bl	80014e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10c      	bne.n	80050b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_CRC_Init+0xc4>)
 80050a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0218 	bic.w	r2, r2, #24
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	e00c      	b.n	80050d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6899      	ldr	r1, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f834 	bl	8005130 <HAL_CRCEx_Polynomial_Set>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e028      	b.n	8005124 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	795b      	ldrb	r3, [r3, #5]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f04f 32ff 	mov.w	r2, #4294967295
 80050e2:	611a      	str	r2, [r3, #16]
 80050e4:	e004      	b.n	80050f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6912      	ldr	r2, [r2, #16]
 80050ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	04c11db7 	.word	0x04c11db7

08005130 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005140:	231f      	movs	r3, #31
 8005142:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
 8005152:	e063      	b.n	800521c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005154:	bf00      	nop
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1e5a      	subs	r2, r3, #1
 800515a:	613a      	str	r2, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_CRCEx_Polynomial_Set+0x44>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b18      	cmp	r3, #24
 8005178:	d846      	bhi.n	8005208 <HAL_CRCEx_Polynomial_Set+0xd8>
 800517a:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <HAL_CRCEx_Polynomial_Set+0x50>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	0800520f 	.word	0x0800520f
 8005184:	08005209 	.word	0x08005209
 8005188:	08005209 	.word	0x08005209
 800518c:	08005209 	.word	0x08005209
 8005190:	08005209 	.word	0x08005209
 8005194:	08005209 	.word	0x08005209
 8005198:	08005209 	.word	0x08005209
 800519c:	08005209 	.word	0x08005209
 80051a0:	080051fd 	.word	0x080051fd
 80051a4:	08005209 	.word	0x08005209
 80051a8:	08005209 	.word	0x08005209
 80051ac:	08005209 	.word	0x08005209
 80051b0:	08005209 	.word	0x08005209
 80051b4:	08005209 	.word	0x08005209
 80051b8:	08005209 	.word	0x08005209
 80051bc:	08005209 	.word	0x08005209
 80051c0:	080051f1 	.word	0x080051f1
 80051c4:	08005209 	.word	0x08005209
 80051c8:	08005209 	.word	0x08005209
 80051cc:	08005209 	.word	0x08005209
 80051d0:	08005209 	.word	0x08005209
 80051d4:	08005209 	.word	0x08005209
 80051d8:	08005209 	.word	0x08005209
 80051dc:	08005209 	.word	0x08005209
 80051e0:	080051e5 	.word	0x080051e5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d913      	bls.n	8005212 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80051ee:	e010      	b.n	8005212 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b07      	cmp	r3, #7
 80051f4:	d90f      	bls.n	8005216 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80051fa:	e00c      	b.n	8005216 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d90b      	bls.n	800521a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005206:	e008      	b.n	800521a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
        break;
 800520c:	e006      	b.n	800521c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800520e:	bf00      	nop
 8005210:	e004      	b.n	800521c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005212:	bf00      	nop
 8005214:	e002      	b.n	800521c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800521a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 0118 	bic.w	r1, r3, #24
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e08d      	b.n	800537a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <HAL_DMA_Init+0x138>)
 8005266:	429a      	cmp	r2, r3
 8005268:	d80f      	bhi.n	800528a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	4b45      	ldr	r3, [pc, #276]	@ (8005388 <HAL_DMA_Init+0x13c>)
 8005272:	4413      	add	r3, r2
 8005274:	4a45      	ldr	r2, [pc, #276]	@ (800538c <HAL_DMA_Init+0x140>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	009a      	lsls	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a42      	ldr	r2, [pc, #264]	@ (8005390 <HAL_DMA_Init+0x144>)
 8005286:	641a      	str	r2, [r3, #64]	@ 0x40
 8005288:	e00e      	b.n	80052a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	4b40      	ldr	r3, [pc, #256]	@ (8005394 <HAL_DMA_Init+0x148>)
 8005292:	4413      	add	r3, r2
 8005294:	4a3d      	ldr	r2, [pc, #244]	@ (800538c <HAL_DMA_Init+0x140>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	009a      	lsls	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005398 <HAL_DMA_Init+0x14c>)
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9b6 	bl	800566c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005308:	d102      	bne.n	8005310 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005324:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_DMA_Init+0x104>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d80c      	bhi.n	8005350 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9d6 	bl	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	e008      	b.n	8005362 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40020407 	.word	0x40020407
 8005388:	bffdfff8 	.word	0xbffdfff8
 800538c:	cccccccd 	.word	0xcccccccd
 8005390:	40020000 	.word	0x40020000
 8005394:	bffdfbf8 	.word	0xbffdfbf8
 8005398:	40020400 	.word	0x40020400

0800539c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_DMA_Start_IT+0x20>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e066      	b.n	800548a <HAL_DMA_Start_IT+0xee>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d155      	bne.n	800547c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f8fb 	bl	80055f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 020e 	orr.w	r2, r2, #14
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e00f      	b.n	8005434 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 020a 	orr.w	r2, r2, #10
 8005432:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005450:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005468:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e005      	b.n	8005488 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2204      	movs	r2, #4
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d026      	beq.n	800550c <HAL_DMA_IRQHandler+0x7a>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d021      	beq.n	800550c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2104      	movs	r1, #4
 80054f4:	fa01 f202 	lsl.w	r2, r1, r2
 80054f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d071      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800550a:	e06c      	b.n	80055e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2202      	movs	r2, #2
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02e      	beq.n	800557e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d029      	beq.n	800557e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 020a 	bic.w	r2, r2, #10
 8005546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f003 021f 	and.w	r2, r3, #31
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	2102      	movs	r1, #2
 800555e:	fa01 f202 	lsl.w	r2, r1, r2
 8005562:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d038      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800557c:	e033      	b.n	80055e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2208      	movs	r2, #8
 8005588:	409a      	lsls	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4013      	ands	r3, r2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02a      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d025      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 020e 	bic.w	r2, r2, #14
 80055aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	f003 021f 	and.w	r2, r3, #31
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f202 	lsl.w	r2, r1, r2
 80055be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
}
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005606:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f003 021f 	and.w	r2, r3, #31
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f202 	lsl.w	r2, r1, r2
 800562c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b10      	cmp	r3, #16
 800563c:	d108      	bne.n	8005650 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800564e:	e007      	b.n	8005660 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	4b16      	ldr	r3, [pc, #88]	@ (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d802      	bhi.n	8005686 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005680:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e001      	b.n	800568a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005686:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005688:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	3b08      	subs	r3, #8
 8005696:	4a12      	ldr	r2, [pc, #72]	@ (80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	009a      	lsls	r2, r3, #2
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a0b      	ldr	r2, [pc, #44]	@ (80056e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	409a      	lsls	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40020407 	.word	0x40020407
 80056d8:	40020800 	.word	0x40020800
 80056dc:	40020820 	.word	0x40020820
 80056e0:	cccccccd 	.word	0xcccccccd
 80056e4:	40020880 	.word	0x40020880

080056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a08      	ldr	r2, [pc, #32]	@ (800572c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800570a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3b01      	subs	r3, #1
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	1000823f 	.word	0x1000823f
 800572c:	40020940 	.word	0x40020940

08005730 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e147      	b.n	80059d2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb ffb0 	bl	80016bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0210 	bic.w	r2, r2, #16
 800576a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800576c:	f7fd fb24 	bl	8002db8 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005772:	e012      	b.n	800579a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005774:	f7fd fb20 	bl	8002db8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b0a      	cmp	r3, #10
 8005780:	d90b      	bls.n	800579a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e11b      	b.n	80059d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d0e5      	beq.n	8005774 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057b8:	f7fd fafe 	bl	8002db8 <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057be:	e012      	b.n	80057e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057c0:	f7fd fafa 	bl	8002db8 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b0a      	cmp	r3, #10
 80057cc:	d90b      	bls.n	80057e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	f043 0201 	orr.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0f5      	b.n	80059d2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0e5      	beq.n	80057c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0202 	orr.w	r2, r2, #2
 8005802:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a74      	ldr	r2, [pc, #464]	@ (80059dc <HAL_FDCAN_Init+0x2ac>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d103      	bne.n	8005816 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800580e:	4a74      	ldr	r2, [pc, #464]	@ (80059e0 <HAL_FDCAN_Init+0x2b0>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7c1b      	ldrb	r3, [r3, #16]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d108      	bne.n	8005830 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582c:	619a      	str	r2, [r3, #24]
 800582e:	e007      	b.n	8005840 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800583e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7c5b      	ldrb	r3, [r3, #17]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d108      	bne.n	800585a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005856:	619a      	str	r2, [r3, #24]
 8005858:	e007      	b.n	800586a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005868:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7c9b      	ldrb	r3, [r3, #18]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d108      	bne.n	8005884 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005880:	619a      	str	r2, [r3, #24]
 8005882:	e007      	b.n	8005894 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005892:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80058b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0210 	bic.w	r2, r2, #16
 80058c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d108      	bne.n	80058e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0204 	orr.w	r2, r2, #4
 80058e0:	619a      	str	r2, [r3, #24]
 80058e2:	e02c      	b.n	800593e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d028      	beq.n	800593e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d01c      	beq.n	800592e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005902:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0210 	orr.w	r2, r2, #16
 8005912:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d110      	bne.n	800593e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0220 	orr.w	r2, r2, #32
 800592a:	619a      	str	r2, [r3, #24]
 800592c:	e007      	b.n	800593e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0220 	orr.w	r2, r2, #32
 800593c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	3b01      	subs	r3, #1
 8005944:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	3b01      	subs	r3, #1
 800594c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800594e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005956:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	3b01      	subs	r3, #1
 8005960:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005966:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005968:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005972:	d115      	bne.n	80059a0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	3b01      	subs	r3, #1
 8005980:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005982:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005988:	3b01      	subs	r3, #1
 800598a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800598c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	3b01      	subs	r3, #1
 8005996:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800599c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800599e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fcc0 	bl	800633c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40006400 	.word	0x40006400
 80059e0:	40006500 	.word	0x40006500

080059e4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059f4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d002      	beq.n	8005a02 <HAL_FDCAN_ConfigFilter+0x1e>
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d13d      	bne.n	8005a7e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d119      	bne.n	8005a3e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a16:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005a1e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e01d      	b.n	8005a7a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	075a      	lsls	r2, r3, #29
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	079a      	lsls	r2, r3, #30
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3304      	adds	r3, #4
 8005a72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e006      	b.n	8005a8c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a82:	f043 0202 	orr.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d116      	bne.n	8005ae0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aba:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	431a      	orrs	r2, r3
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e006      	b.n	8005aee <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae4:	f043 0204 	orr.w	r2, r3, #4
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d108      	bne.n	8005b24 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0219      	lsls	r1, r3, #8
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e006      	b.n	8005b32 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b28:	f043 0204 	orr.w	r2, r3, #4
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d109      	bne.n	8005b66 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005b60:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e006      	b.n	8005b74 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
  }
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d110      	bne.n	8005bb6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e006      	b.n	8005bc4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bba:	f043 0204 	orr.w	r2, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d12c      	bne.n	8005c42 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e023      	b.n	8005c50 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fbf8 	bl	8006414 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2101      	movs	r1, #1
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c30:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c34:	2201      	movs	r2, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e006      	b.n	8005c50 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c46:	f043 0208 	orr.w	r2, r3, #8
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b08b      	sub	sp, #44	@ 0x2c
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c70:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c72:	7efb      	ldrb	r3, [r7, #27]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f040 80e8 	bne.w	8005e4a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b40      	cmp	r3, #64	@ 0x40
 8005c7e:	d137      	bne.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0db      	b.n	8005e58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca8:	0e1b      	lsrs	r3, r3, #24
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cba:	0a5b      	lsrs	r3, r3, #9
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cee:	e036      	b.n	8005d5e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a3      	b.n	8005e58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10a      	bne.n	8005d38 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	4613      	mov	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d107      	bne.n	8005d82 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	0c9b      	lsrs	r3, r3, #18
 8005d78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e005      	b.n	8005d8e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	3304      	adds	r3, #4
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	0e1b      	lsrs	r3, r3, #24
 8005de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	0fda      	lsrs	r2, r3, #31
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	3304      	adds	r3, #4
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	e00a      	b.n	8005e1a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	441a      	add	r2, r3
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	440b      	add	r3, r1
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	3301      	adds	r3, #1
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005e20:	5cd3      	ldrb	r3, [r2, r3]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d3ec      	bcc.n	8005e04 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	d105      	bne.n	8005e3c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005e3a:	e004      	b.n	8005e46 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e006      	b.n	8005e58 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4e:	f043 0208 	orr.w	r2, r3, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	372c      	adds	r7, #44	@ 0x2c
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	0800eea8 	.word	0x0800eea8

08005e68 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e7a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d003      	beq.n	8005e8a <HAL_FDCAN_ActivateNotification+0x22>
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	f040 80c8 	bne.w	800601a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e90:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d03b      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d031      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d027      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01d      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d107      	bne.n	8005f2e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d13b      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d131      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d127      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11d      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d113      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0202 	orr.w	r2, r2, #2
 8005fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	430a      	orrs	r2, r1
 8006002:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	430a      	orrs	r2, r1
 8006014:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e006      	b.n	8006028 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	@ 0x30
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006042:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006050:	4013      	ands	r3, r2
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006068:	4013      	ands	r3, r2
 800606a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006080:	4013      	ands	r3, r2
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800608e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	4013      	ands	r3, r2
 800609a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80060a6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ba:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d006      	beq.n	80060e6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2240      	movs	r2, #64	@ 0x40
 80060de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f916 	bl	8006312 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d019      	beq.n	8006124 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006102:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800611a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800611c:	6939      	ldr	r1, [r7, #16]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8d8 	bl	80062d4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006130:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8a2 	bl	800627e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006146:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f005 f9a6 	bl	800b49c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800615e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f897 	bl	8006294 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006182:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f890 	bl	80062aa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d018      	beq.n	80061c6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d013      	beq.n	80061c6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80061a6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4013      	ands	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2280      	movs	r2, #128	@ 0x80
 80061bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f87c 	bl	80062be <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00c      	beq.n	80061ea <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d007      	beq.n	80061ea <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f880 	bl	80062ea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00c      	beq.n	800620e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006206:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f878 	bl	80062fe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800622a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006230:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006246:	69f9      	ldr	r1, [r7, #28]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f005 f991 	bl	800b570 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f858 	bl	8006326 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006276:	bf00      	nop
 8006278:	3730      	adds	r7, #48	@ 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006344:	4b30      	ldr	r3, [pc, #192]	@ (8006408 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006346:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2f      	ldr	r2, [pc, #188]	@ (800640c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d103      	bne.n	800635a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006358:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2c      	ldr	r2, [pc, #176]	@ (8006410 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800636a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800637a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006382:	041a      	lsls	r2, r3, #16
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	061a      	lsls	r2, r3, #24
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e005      	b.n	80063ee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3304      	adds	r3, #4
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d3f3      	bcc.n	80063e2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	4000a400 	.word	0x4000a400
 800640c:	40006800 	.word	0x40006800
 8006410:	40006c00 	.word	0x40006c00

08006414 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	@ 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006432:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800643a:	4313      	orrs	r3, r2
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	e00a      	b.n	8006456 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006448:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800644e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006454:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006460:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006466:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800646c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	3304      	adds	r3, #4
 8006494:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3304      	adds	r3, #4
 80064a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e020      	b.n	80064ea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3303      	adds	r3, #3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3302      	adds	r3, #2
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	440b      	add	r3, r1
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064c0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3301      	adds	r3, #1
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	440b      	add	r3, r1
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064ce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	440a      	add	r2, r1
 80064d6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064d8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3304      	adds	r3, #4
 80064e2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3304      	adds	r3, #4
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4a06      	ldr	r2, [pc, #24]	@ (8006508 <FDCAN_CopyMessageToRAM+0xf4>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	461a      	mov	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d3d6      	bcc.n	80064a8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	3724      	adds	r7, #36	@ 0x24
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	0800eea8 	.word	0x0800eea8

0800650c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800651a:	e15a      	b.n	80067d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2101      	movs	r1, #1
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 814c 	beq.w	80067cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d005      	beq.n	800654c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006548:	2b02      	cmp	r3, #2
 800654a:	d130      	bne.n	80065ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	2203      	movs	r2, #3
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	43db      	mvns	r3, r3
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4013      	ands	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006582:	2201      	movs	r2, #1
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	43db      	mvns	r3, r3
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4013      	ands	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	f003 0201 	and.w	r2, r3, #1
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d017      	beq.n	80065ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	2203      	movs	r2, #3
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d123      	bne.n	800663e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	08da      	lsrs	r2, r3, #3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3208      	adds	r2, #8
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	220f      	movs	r2, #15
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43db      	mvns	r3, r3
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	08da      	lsrs	r2, r3, #3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3208      	adds	r2, #8
 8006638:	6939      	ldr	r1, [r7, #16]
 800663a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	2203      	movs	r2, #3
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4013      	ands	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 0203 	and.w	r2, r3, #3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a6 	beq.w	80067cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006680:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 8006682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006684:	4a5a      	ldr	r2, [pc, #360]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6613      	str	r3, [r2, #96]	@ 0x60
 800668c:	4b58      	ldr	r3, [pc, #352]	@ (80067f0 <HAL_GPIO_Init+0x2e4>)
 800668e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006698:	4a56      	ldr	r2, [pc, #344]	@ (80067f4 <HAL_GPIO_Init+0x2e8>)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	3302      	adds	r3, #2
 80066a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4013      	ands	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066c2:	d01f      	beq.n	8006704 <HAL_GPIO_Init+0x1f8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a4c      	ldr	r2, [pc, #304]	@ (80067f8 <HAL_GPIO_Init+0x2ec>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d019      	beq.n	8006700 <HAL_GPIO_Init+0x1f4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a4b      	ldr	r2, [pc, #300]	@ (80067fc <HAL_GPIO_Init+0x2f0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_GPIO_Init+0x1f0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006800 <HAL_GPIO_Init+0x2f4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00d      	beq.n	80066f8 <HAL_GPIO_Init+0x1ec>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a49      	ldr	r2, [pc, #292]	@ (8006804 <HAL_GPIO_Init+0x2f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <HAL_GPIO_Init+0x1e8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a48      	ldr	r2, [pc, #288]	@ (8006808 <HAL_GPIO_Init+0x2fc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_GPIO_Init+0x1e4>
 80066ec:	2305      	movs	r3, #5
 80066ee:	e00a      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f0:	2306      	movs	r3, #6
 80066f2:	e008      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f4:	2304      	movs	r3, #4
 80066f6:	e006      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066f8:	2303      	movs	r3, #3
 80066fa:	e004      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e002      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_GPIO_Init+0x1fa>
 8006704:	2300      	movs	r3, #0
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	f002 0203 	and.w	r2, r2, #3
 800670c:	0092      	lsls	r2, r2, #2
 800670e:	4093      	lsls	r3, r2
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006716:	4937      	ldr	r1, [pc, #220]	@ (80067f4 <HAL_GPIO_Init+0x2e8>)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	3302      	adds	r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006724:	4b39      	ldr	r3, [pc, #228]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	43db      	mvns	r3, r3
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006748:	4a30      	ldr	r2, [pc, #192]	@ (800680c <HAL_GPIO_Init+0x300>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800674e:	4b2f      	ldr	r3, [pc, #188]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	43db      	mvns	r3, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006772:	4a26      	ldr	r2, [pc, #152]	@ (800680c <HAL_GPIO_Init+0x300>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006778:	4b24      	ldr	r3, [pc, #144]	@ (800680c <HAL_GPIO_Init+0x300>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	43db      	mvns	r3, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4013      	ands	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800679c:	4a1b      	ldr	r2, [pc, #108]	@ (800680c <HAL_GPIO_Init+0x300>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80067a2:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <HAL_GPIO_Init+0x300>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067c6:	4a11      	ldr	r2, [pc, #68]	@ (800680c <HAL_GPIO_Init+0x300>)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f ae9d 	bne.w	800651c <HAL_GPIO_Init+0x10>
  }
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40010000 	.word	0x40010000
 80067f8:	48000400 	.word	0x48000400
 80067fc:	48000800 	.word	0x48000800
 8006800:	48000c00 	.word	0x48000c00
 8006804:	48001000 	.word	0x48001000
 8006808:	48001400 	.word	0x48001400
 800680c:	40010400 	.word	0x40010400

08006810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
 800681c:	4613      	mov	r3, r2
 800681e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006820:	787b      	ldrb	r3, [r7, #1]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006826:	887a      	ldrh	r2, [r7, #2]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800682c:	e002      	b.n	8006834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800682e:	887a      	ldrh	r2, [r7, #2]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006852:	887a      	ldrh	r2, [r7, #2]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4013      	ands	r3, r2
 8006858:	041a      	lsls	r2, r3, #16
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	43d9      	mvns	r1, r3
 800685e:	887b      	ldrh	r3, [r7, #2]
 8006860:	400b      	ands	r3, r1
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	619a      	str	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0be      	b.n	8006a04 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02e      	beq.n	8006930 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4d      	ldr	r2, [pc, #308]	@ (8006a0c <HAL_HRTIM_Init+0x198>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d10b      	bne.n	80068f4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80068dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006a10 <HAL_HRTIM_Init+0x19c>)
 80068de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006a10 <HAL_HRTIM_Init+0x19c>)
 80068e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80068e8:	4b49      	ldr	r3, [pc, #292]	@ (8006a10 <HAL_HRTIM_Init+0x19c>)
 80068ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006902:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006918:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fb fa31 	bl	8001d98 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d012      	beq.n	8006968 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006950:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
 800697c:	e03e      	b.n	80069fc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800697e:	7dfa      	ldrb	r2, [r7, #23]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	3318      	adds	r3, #24
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006992:	7dfa      	ldrb	r2, [r7, #23]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	331c      	adds	r3, #28
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80069a6:	7dfa      	ldrb	r2, [r7, #23]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3320      	adds	r3, #32
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80069ba:	7dfa      	ldrb	r2, [r7, #23]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3324      	adds	r3, #36	@ 0x24
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3328      	adds	r3, #40	@ 0x28
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80069e2:	7dfa      	ldrb	r2, [r7, #23]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	3330      	adds	r3, #48	@ 0x30
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	3301      	adds	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d9bd      	bls.n	800697e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40016800 	.word	0x40016800
 8006a10:	40021000 	.word	0x40021000

08006a14 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e045      	b.n	8006ab8 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d114      	bne.n	8006a6e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0202 	bic.w	r2, r2, #2
 8006a54:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0201 	orr.w	r2, r2, #1
 8006a68:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8006a6c:	e01f      	b.n	8006aae <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0202 	orr.w	r2, r2, #2
 8006a7e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8006a8a:	f023 010c 	bic.w	r1, r3, #12
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006ace:	f7fc f973 	bl	8002db8 <HAL_GetTick>
 8006ad2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006ad4:	e014      	b.n	8006b00 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d010      	beq.n	8006b00 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8006ade:	f7fc f96b 	bl	8002db8 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2207      	movs	r2, #7
 8006af8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e011      	b.n	8006b24 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b10:	d1e1      	bne.n	8006ad6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d101      	bne.n	8006b48 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
 8006b46:	e015      	b.n	8006b74 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b06      	cmp	r3, #6
 8006b54:	d104      	bne.n	8006b60 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 ffcf 	bl	8007afc <HRTIM_MasterBase_Config>
 8006b5e:	e004      	b.n	8006b6a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fff8 	bl	8007b5a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d101      	bne.n	8006b98 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
 8006b96:	e1d7      	b.n	8006f48 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e1d0      	b.n	8006f48 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bbe:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006bc8:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd0:	f000 816d 	beq.w	8006eae <HAL_HRTIM_ADCTriggerConfig+0x332>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bda:	f200 818d 	bhi.w	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be4:	f000 813f 	beq.w	8006e66 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bee:	f200 8183 	bhi.w	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b80      	cmp	r3, #128	@ 0x80
 8006bf6:	f000 8111 	beq.w	8006e1c <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b80      	cmp	r3, #128	@ 0x80
 8006bfe:	f200 817b 	bhi.w	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d84b      	bhi.n	8006ca0 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8174 	beq.w	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b1f      	cmp	r3, #31
 8006c16:	f200 816f 	bhi.w	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006cab 	.word	0x08006cab
 8006c24:	08006ccf 	.word	0x08006ccf
 8006c28:	08006ef9 	.word	0x08006ef9
 8006c2c:	08006cf5 	.word	0x08006cf5
 8006c30:	08006ef9 	.word	0x08006ef9
 8006c34:	08006ef9 	.word	0x08006ef9
 8006c38:	08006ef9 	.word	0x08006ef9
 8006c3c:	08006d1b 	.word	0x08006d1b
 8006c40:	08006ef9 	.word	0x08006ef9
 8006c44:	08006ef9 	.word	0x08006ef9
 8006c48:	08006ef9 	.word	0x08006ef9
 8006c4c:	08006ef9 	.word	0x08006ef9
 8006c50:	08006ef9 	.word	0x08006ef9
 8006c54:	08006ef9 	.word	0x08006ef9
 8006c58:	08006ef9 	.word	0x08006ef9
 8006c5c:	08006d41 	.word	0x08006d41
 8006c60:	08006ef9 	.word	0x08006ef9
 8006c64:	08006ef9 	.word	0x08006ef9
 8006c68:	08006ef9 	.word	0x08006ef9
 8006c6c:	08006ef9 	.word	0x08006ef9
 8006c70:	08006ef9 	.word	0x08006ef9
 8006c74:	08006ef9 	.word	0x08006ef9
 8006c78:	08006ef9 	.word	0x08006ef9
 8006c7c:	08006ef9 	.word	0x08006ef9
 8006c80:	08006ef9 	.word	0x08006ef9
 8006c84:	08006ef9 	.word	0x08006ef9
 8006c88:	08006ef9 	.word	0x08006ef9
 8006c8c:	08006ef9 	.word	0x08006ef9
 8006c90:	08006ef9 	.word	0x08006ef9
 8006c94:	08006ef9 	.word	0x08006ef9
 8006c98:	08006ef9 	.word	0x08006ef9
 8006c9c:	08006d89 	.word	0x08006d89
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b40      	cmp	r3, #64	@ 0x40
 8006ca4:	f000 8095 	beq.w	8006dd2 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8006ca8:	e126      	b.n	8006ef8 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006cb0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6852      	ldr	r2, [r2, #4]
 8006cc8:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8006ccc:	e11d      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8006cd4:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 8006cf2:	e10a      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006cfa:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6852      	ldr	r2, [r2, #4]
 8006d14:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 8006d18:	e0f7      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8006d20:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	025b      	lsls	r3, r3, #9
 8006d28:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6852      	ldr	r2, [r2, #4]
 8006d3a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 8006d3e:	e0e4      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 0307 	bic.w	r3, r3, #7
 8006d46:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 021f 	bic.w	r2, r2, #31
 8006d68:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 021f 	and.w	r2, r3, #31
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006d86:	e0c0      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	0b1b      	lsrs	r3, r3, #12
 8006d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8006db0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	015b      	lsls	r3, r3, #5
 8006dc2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006dd0:	e09b      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006dd8:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8006dfa:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006e1a:	e076      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e22:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006e44:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006e64:	e051      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006e6c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 8006e8c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	055b      	lsls	r3, r3, #21
 8006e9e:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006eac:	e02d      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006eb4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8006ed6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	069b      	lsls	r3, r3, #26
 8006ee8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006ef6:	e008      	b.n	8006f0a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2207      	movs	r2, #7
 8006efc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8006f08:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b07      	cmp	r3, #7
 8006f14:	d101      	bne.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e016      	b.n	8006f48 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d805      	bhi.n	8006f2c <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 8006f2a:	e004      	b.n	8006f36 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d101      	bne.n	8006f70 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e135      	b.n	80071dc <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e12e      	b.n	80071dc <HAL_HRTIM_ADCPostScalerConfig+0x288>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f94:	f000 80f8 	beq.w	8007188 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9e:	f200 8103 	bhi.w	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa8:	f000 80de 	beq.w	8007168 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb2:	f200 80f9 	bhi.w	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b80      	cmp	r3, #128	@ 0x80
 8006fba:	f000 80c5 	beq.w	8007148 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b80      	cmp	r3, #128	@ 0x80
 8006fc2:	f200 80f1 	bhi.w	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d84b      	bhi.n	8007064 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80ea 	beq.w	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	2b1f      	cmp	r3, #31
 8006fda:	f200 80e5 	bhi.w	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fde:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe4 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	0800706d 	.word	0x0800706d
 8006fe8:	0800708b 	.word	0x0800708b
 8006fec:	080071a9 	.word	0x080071a9
 8006ff0:	080070ab 	.word	0x080070ab
 8006ff4:	080071a9 	.word	0x080071a9
 8006ff8:	080071a9 	.word	0x080071a9
 8006ffc:	080071a9 	.word	0x080071a9
 8007000:	080070cb 	.word	0x080070cb
 8007004:	080071a9 	.word	0x080071a9
 8007008:	080071a9 	.word	0x080071a9
 800700c:	080071a9 	.word	0x080071a9
 8007010:	080071a9 	.word	0x080071a9
 8007014:	080071a9 	.word	0x080071a9
 8007018:	080071a9 	.word	0x080071a9
 800701c:	080071a9 	.word	0x080071a9
 8007020:	080070eb 	.word	0x080070eb
 8007024:	080071a9 	.word	0x080071a9
 8007028:	080071a9 	.word	0x080071a9
 800702c:	080071a9 	.word	0x080071a9
 8007030:	080071a9 	.word	0x080071a9
 8007034:	080071a9 	.word	0x080071a9
 8007038:	080071a9 	.word	0x080071a9
 800703c:	080071a9 	.word	0x080071a9
 8007040:	080071a9 	.word	0x080071a9
 8007044:	080071a9 	.word	0x080071a9
 8007048:	080071a9 	.word	0x080071a9
 800704c:	080071a9 	.word	0x080071a9
 8007050:	080071a9 	.word	0x080071a9
 8007054:	080071a9 	.word	0x080071a9
 8007058:	080071a9 	.word	0x080071a9
 800705c:	080071a9 	.word	0x080071a9
 8007060:	0800710b 	.word	0x0800710b
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b40      	cmp	r3, #64	@ 0x40
 8007068:	d05e      	beq.n	8007128 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 800706a:	e09d      	b.n	80071a8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007074:	f023 011f 	bic.w	r1, r3, #31
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 021f 	and.w	r2, r3, #31
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007088:	e097      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007092:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070a8:	e087      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070b2:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	031b      	lsls	r3, r3, #12
 80070ba:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070c8:	e077      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070d2:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	049b      	lsls	r3, r3, #18
 80070da:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070e8:	e067      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070f2:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007108:	e057      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007112:	f023 011f 	bic.w	r1, r3, #31
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007126:	e048      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007130:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	019b      	lsls	r3, r3, #6
 8007138:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007146:	e038      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007150:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	031b      	lsls	r3, r3, #12
 8007158:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007166:	e028      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007170:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	049b      	lsls	r3, r3, #18
 8007178:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007186:	e018      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007190:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	061b      	lsls	r3, r3, #24
 8007198:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80071a6:	e008      	b.n	80071ba <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2207      	movs	r2, #7
 80071ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 80071b8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	d101      	bne.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e008      	b.n	80071dc <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d101      	bne.n	8007204 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
 8007202:	e07a      	b.n	80072fa <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800720e:	2302      	movs	r3, #2
 8007210:	e073      	b.n	80072fa <HAL_HRTIM_WaveformTimerConfig+0x112>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b06      	cmp	r3, #6
 8007226:	d104      	bne.n	8007232 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fcd5 	bl	8007bda <HRTIM_MasterWaveform_Config>
 8007230:	e004      	b.n	800723c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fd6c 	bl	8007d14 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4613      	mov	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4403      	add	r3, r0
 800724e:	3320      	adds	r3, #32
 8007250:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6859      	ldr	r1, [r3, #4]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4403      	add	r3, r0
 8007264:	3324      	adds	r3, #36	@ 0x24
 8007266:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6899      	ldr	r1, [r3, #8]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4403      	add	r3, r0
 800727a:	3328      	adds	r3, #40	@ 0x28
 800727c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68d9      	ldr	r1, [r3, #12]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	1a9b      	subs	r3, r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4403      	add	r3, r0
 8007290:	332c      	adds	r3, #44	@ 0x2c
 8007292:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6919      	ldr	r1, [r3, #16]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4403      	add	r3, r0
 80072a6:	3330      	adds	r3, #48	@ 0x30
 80072a8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 ffff 	bl	80082b0 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b06      	cmp	r3, #6
 80072b6:	d017      	beq.n	80072e8 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	3301      	adds	r3, #1
 80072c8:	01db      	lsls	r3, r3, #7
 80072ca:	4413      	add	r3, r2
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d6:	025b      	lsls	r3, r3, #9
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	6809      	ldr	r1, [r1, #0]
 80072dc:	431a      	orrs	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3301      	adds	r3, #1
 80072e2:	01db      	lsls	r3, r3, #7
 80072e4:	440b      	add	r3, r1
 80072e6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d101      	bne.n	800731e <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
 800731c:	e020      	b.n	8007360 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_HRTIM_WaveformTimerControl+0x2a>
 8007328:	2302      	movs	r3, #2
 800732a:	e019      	b.n	8007360 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fe6d 	bl	8008020 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 ffb1 	bl	80082b0 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d101      	bne.n	8007384 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
 8007382:	e067      	b.n	8007454 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_HRTIM_DeadTimeConfig+0x2a>
 800738e:	2302      	movs	r3, #2
 8007390:	e060      	b.n	8007454 <HAL_HRTIM_DeadTimeConfig+0xec>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80073aa:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	041a      	lsls	r2, r3, #16
 80073ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007460 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	01db      	lsls	r3, r3, #7
 8007426:	4413      	add	r3, r2
 8007428:	33b8      	adds	r3, #184	@ 0xb8
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 800742e:	4013      	ands	r3, r2
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	6811      	ldr	r1, [r2, #0]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	440b      	add	r3, r1
 800743e:	33b8      	adds	r3, #184	@ 0xb8
 8007440:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	01ff0000 	.word	0x01ff0000
 8007464:	3c002000 	.word	0x3c002000

08007468 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d101      	bne.n	8007486 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007482:	2302      	movs	r3, #2
 8007484:	e157      	b.n	8007736 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007490:	2302      	movs	r3, #2
 8007492:	e150      	b.n	8007736 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d140      	bne.n	800752c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	2b07      	cmp	r3, #7
 80074b0:	d82a      	bhi.n	8007508 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	08007509 	.word	0x08007509
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	08007509 	.word	0x08007509
 80074cc:	08007509 	.word	0x08007509
 80074d0:	08007509 	.word	0x08007509
 80074d4:	080074fd 	.word	0x080074fd
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	61da      	str	r2, [r3, #28]
        break;
 80074e2:	e01a      	b.n	800751a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80074ee:	e014      	b.n	800751a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80074fa:	e00e      	b.n	800751a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8007506:	e008      	b.n	800751a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2207      	movs	r2, #7
 800750c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8007518:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b07      	cmp	r3, #7
 8007524:	f040 80fe 	bne.w	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e104      	b.n	8007736 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3b01      	subs	r3, #1
 8007530:	2b07      	cmp	r3, #7
 8007532:	f200 80e3 	bhi.w	80076fc <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007571 	.word	0x08007571
 8007544:	080076fd 	.word	0x080076fd
 8007548:	0800762d 	.word	0x0800762d
 800754c:	080076fd 	.word	0x080076fd
 8007550:	080076fd 	.word	0x080076fd
 8007554:	080076fd 	.word	0x080076fd
 8007558:	08007641 	.word	0x08007641
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	01db      	lsls	r3, r3, #7
 8007568:	440b      	add	r3, r1
 800756a:	339c      	adds	r3, #156	@ 0x9c
 800756c:	601a      	str	r2, [r3, #0]
        break;
 800756e:	e0d1      	b.n	8007714 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	01db      	lsls	r3, r3, #7
 800757c:	440b      	add	r3, r1
 800757e:	33a4      	adds	r3, #164	@ 0xa4
 8007580:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d03f      	beq.n	800760a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	3301      	adds	r3, #1
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	4413      	add	r3, r2
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	6811      	ldr	r1, [r2, #0]
 800759c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3301      	adds	r3, #1
 80075a4:	01db      	lsls	r3, r3, #7
 80075a6:	440b      	add	r3, r1
 80075a8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	3301      	adds	r3, #1
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	4413      	add	r3, r2
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	68f9      	ldr	r1, [r7, #12]
 80075be:	6809      	ldr	r1, [r1, #0]
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3301      	adds	r3, #1
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	440b      	add	r3, r1
 80075ca:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d4:	d109      	bne.n	80075ea <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	01db      	lsls	r3, r3, #7
 80075e2:	440b      	add	r3, r1
 80075e4:	339c      	adds	r3, #156	@ 0x9c
 80075e6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80075e8:	e091      	b.n	800770e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075f2:	f040 808c 	bne.w	800770e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6819      	ldr	r1, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	01db      	lsls	r3, r3, #7
 8007602:	440b      	add	r3, r1
 8007604:	33a8      	adds	r3, #168	@ 0xa8
 8007606:	601a      	str	r2, [r3, #0]
         break;
 8007608:	e081      	b.n	800770e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3301      	adds	r3, #1
 8007612:	01db      	lsls	r3, r3, #7
 8007614:	4413      	add	r3, r2
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	6811      	ldr	r1, [r2, #0]
 800761c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3301      	adds	r3, #1
 8007624:	01db      	lsls	r3, r3, #7
 8007626:	440b      	add	r3, r1
 8007628:	601a      	str	r2, [r3, #0]
         break;
 800762a:	e070      	b.n	800770e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	440b      	add	r3, r1
 800763a:	33a8      	adds	r3, #168	@ 0xa8
 800763c:	601a      	str	r2, [r3, #0]
        break;
 800763e:	e069      	b.n	8007714 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	01db      	lsls	r3, r3, #7
 800764c:	440b      	add	r3, r1
 800764e:	33ac      	adds	r3, #172	@ 0xac
 8007650:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d03f      	beq.n	80076da <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3301      	adds	r3, #1
 8007662:	01db      	lsls	r3, r3, #7
 8007664:	4413      	add	r3, r2
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	01db      	lsls	r3, r3, #7
 8007676:	440b      	add	r3, r1
 8007678:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	3301      	adds	r3, #1
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	4413      	add	r3, r2
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	68f9      	ldr	r1, [r7, #12]
 8007690:	6809      	ldr	r1, [r1, #0]
 8007692:	431a      	orrs	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3301      	adds	r3, #1
 8007698:	01db      	lsls	r3, r3, #7
 800769a:	440b      	add	r3, r1
 800769c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076a6:	d109      	bne.n	80076bc <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	440b      	add	r3, r1
 80076b6:	339c      	adds	r3, #156	@ 0x9c
 80076b8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80076ba:	e02a      	b.n	8007712 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c4:	d125      	bne.n	8007712 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	01db      	lsls	r3, r3, #7
 80076d2:	440b      	add	r3, r1
 80076d4:	33a8      	adds	r3, #168	@ 0xa8
 80076d6:	601a      	str	r2, [r3, #0]
         break;
 80076d8:	e01b      	b.n	8007712 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3301      	adds	r3, #1
 80076e2:	01db      	lsls	r3, r3, #7
 80076e4:	4413      	add	r3, r2
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	6811      	ldr	r1, [r2, #0]
 80076ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	3301      	adds	r3, #1
 80076f4:	01db      	lsls	r3, r3, #7
 80076f6:	440b      	add	r3, r1
 80076f8:	601a      	str	r2, [r3, #0]
         break;
 80076fa:	e00a      	b.n	8007712 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2207      	movs	r2, #7
 8007700:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 800770c:	e002      	b.n	8007714 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007712:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b07      	cmp	r3, #7
 800771e:	d101      	bne.n	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e008      	b.n	8007736 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop

08007744 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d101      	bne.n	8007762 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800775e:	2302      	movs	r3, #2
 8007760:	e01d      	b.n	800779e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800776c:	2302      	movs	r3, #2
 800776e:	e016      	b.n	800779e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fcaa 	bl	80080e0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_HRTIM_WaveformOutputStart+0x18>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e01a      	b.n	80077f4 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007814:	2302      	movs	r3, #2
 8007816:	e05b      	b.n	80078d0 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8d3 1390 	ldr.w	r1, [r3, #912]	@ 0x390
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68d9      	ldr	r1, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e022      	b.n	80078a8 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007866:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	4013      	ands	r3, r2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d017      	beq.n	80078a2 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	01db      	lsls	r3, r3, #7
 800787a:	4413      	add	r3, r2
 800787c:	338c      	adds	r3, #140	@ 0x8c
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	3320      	adds	r3, #32
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	4302      	orrs	r2, r0
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	440b      	add	r3, r1
 800789e:	338c      	adds	r3, #140	@ 0x8c
 80078a0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	3301      	adds	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d9d9      	bls.n	8007862 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;}
 80078ce:	2300      	movs	r3, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	20000014 	.word	0x20000014

080078e0 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2bff      	cmp	r3, #255	@ 0xff
 80078ee:	d103      	bne.n	80078f8 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fd4b 	bl	800838c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80078f6:	e00a      	b.n	800790e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d103      	bne.n	8007906 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fdd4 	bl	80084ac <HRTIM_Master_ISR>
}
 8007904:	e003      	b.n	800790e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe94 	bl	8008636 <HRTIM_Timer_ISR>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f023 0307 	bic.w	r3, r3, #7
 8007b14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0318 	bic.w	r3, r3, #24
 8007b26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	619a      	str	r2, [r3, #24]
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	4413      	add	r3, r2
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f023 0307 	bic.w	r3, r3, #7
 8007b7c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0318 	bic.w	r3, r3, #24
 8007b8e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	01db      	lsls	r3, r3, #7
 8007ba4:	4413      	add	r3, r2
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6819      	ldr	r1, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	01db      	lsls	r3, r3, #7
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3394      	adds	r3, #148	@ 0x94
 8007bba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	01db      	lsls	r3, r3, #7
 8007bc8:	440b      	add	r3, r1
 8007bca:	3398      	adds	r3, #152	@ 0x98
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007bf4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f023 0320 	bic.w	r3, r3, #32
 8007bfc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c0e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d003      	beq.n	8007c20 <HRTIM_MasterWaveform_Config+0x46>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d108      	bne.n	8007c32 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c26:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f043 0320 	orr.w	r3, r3, #32
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e021      	b.n	8007c76 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d108      	bne.n	8007c4c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c40:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	e014      	b.n	8007c76 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d108      	bne.n	8007c66 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e007      	b.n	8007c76 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0320 	bic.w	r3, r3, #32
 8007c6c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c74:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c7c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c8e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007ca0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007cb2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007cc4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cd8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cea:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b08b      	sub	sp, #44	@ 0x2c
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3301      	adds	r3, #1
 8007d28:	01db      	lsls	r3, r3, #7
 8007d2a:	4413      	add	r3, r2
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	6811      	ldr	r1, [r2, #0]
 8007d32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	01db      	lsls	r3, r3, #7
 8007d3c:	440b      	add	r3, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3301      	adds	r3, #1
 8007d48:	01db      	lsls	r3, r3, #7
 8007d4a:	4413      	add	r3, r2
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	01db      	lsls	r3, r3, #7
 8007d58:	4413      	add	r3, r2
 8007d5a:	33e8      	adds	r3, #232	@ 0xe8
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	01db      	lsls	r3, r3, #7
 8007d68:	4413      	add	r3, r2
 8007d6a:	33e4      	adds	r3, #228	@ 0xe4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007d78:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	f023 0320 	bic.w	r3, r3, #32
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d003      	beq.n	8007d9c <HRTIM_TimingUnitWaveform_Config+0x88>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d108      	bne.n	8007dae <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	f043 0320 	orr.w	r3, r3, #32
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dac:	e021      	b.n	8007df2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d108      	bne.n	8007dc8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc6:	e014      	b.n	8007df2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d108      	bne.n	8007de2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de0:	e007      	b.n	8007df2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	f023 0320 	bic.w	r3, r3, #32
 8007de8:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007df8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e00:	4313      	orrs	r3, r2
 8007e02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e12:	4313      	orrs	r3, r2
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e24:	4313      	orrs	r3, r2
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e36:	4313      	orrs	r3, r2
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e5c:	d103      	bne.n	8007e66 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e74:	4313      	orrs	r3, r2
 8007e76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e86:	4313      	orrs	r3, r2
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8007e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007ea6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ebc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ece:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ede:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8007ee2:	d004      	beq.n	8007eee <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8007eec:	d103      	bne.n	8007ef6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d108      	bne.n	8007f08 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8007efc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f0e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d850      	bhi.n	8007fc8 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f45 	.word	0x08007f45
 8007f30:	08007f5b 	.word	0x08007f5b
 8007f34:	08007f71 	.word	0x08007f71
 8007f38:	08007f87 	.word	0x08007f87
 8007f3c:	08007f9d 	.word	0x08007f9d
 8007f40:	08007fb3 	.word	0x08007fb3
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f4a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	61fb      	str	r3, [r7, #28]
      break;
 8007f58:	e037      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f60:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61fb      	str	r3, [r7, #28]
      break;
 8007f6e:	e02c      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007f76:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	61fb      	str	r3, [r7, #28]
      break;
 8007f84:	e021      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007f8c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61fb      	str	r3, [r7, #28]
      break;
 8007f9a:	e016      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fa2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	015b      	lsls	r3, r3, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]
      break;
 8007fb0:	e00b      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007fb8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbe:	019b      	lsls	r3, r3, #6
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61fb      	str	r3, [r7, #28]
      break;
 8007fc6:	e000      	b.n	8007fca <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8007fc8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	01db      	lsls	r3, r3, #7
 8007fd4:	4413      	add	r3, r2
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	01db      	lsls	r3, r3, #7
 8007fe2:	4413      	add	r3, r2
 8007fe4:	33e8      	adds	r3, #232	@ 0xe8
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	01db      	lsls	r3, r3, #7
 8007ff2:	4413      	add	r3, r2
 8007ff4:	33e4      	adds	r3, #228	@ 0xe4
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	01db      	lsls	r3, r3, #7
 8008002:	4413      	add	r3, r2
 8008004:	33d4      	adds	r3, #212	@ 0xd4
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008014:	bf00      	nop
 8008016:	372c      	adds	r7, #44	@ 0x2c
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	01db      	lsls	r3, r3, #7
 8008034:	4413      	add	r3, r2
 8008036:	33ec      	adds	r3, #236	@ 0xec
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008056:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008068:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800807a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d11a      	bne.n	80080c4 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f023 0304 	bic.w	r3, r3, #4
 8008094:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 0302 	bic.w	r3, r3, #2
 80080a6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	4413      	add	r3, r2
 80080ce:	33ec      	adds	r3, #236	@ 0xec
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	601a      	str	r2, [r3, #0]

}
 80080d4:	bf00      	nop
 80080d6:	371c      	adds	r7, #28
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b089      	sub	sp, #36	@ 0x24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	01db      	lsls	r3, r3, #7
 80080fa:	4413      	add	r3, r2
 80080fc:	33e4      	adds	r3, #228	@ 0xe4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	01db      	lsls	r3, r3, #7
 800810a:	4413      	add	r3, r2
 800810c:	33b8      	adds	r3, #184	@ 0xb8
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008118:	d05d      	beq.n	80081d6 <HRTIM_OutputConfig+0xf6>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008120:	d86e      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008128:	d042      	beq.n	80081b0 <HRTIM_OutputConfig+0xd0>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008130:	d866      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008138:	d04d      	beq.n	80081d6 <HRTIM_OutputConfig+0xf6>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008140:	d85e      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008148:	d032      	beq.n	80081b0 <HRTIM_OutputConfig+0xd0>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008150:	d856      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b80      	cmp	r3, #128	@ 0x80
 8008156:	d03e      	beq.n	80081d6 <HRTIM_OutputConfig+0xf6>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d850      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b40      	cmp	r3, #64	@ 0x40
 8008162:	d025      	beq.n	80081b0 <HRTIM_OutputConfig+0xd0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d84a      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d01f      	beq.n	80081b0 <HRTIM_OutputConfig+0xd0>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d044      	beq.n	8008200 <HRTIM_OutputConfig+0x120>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b20      	cmp	r3, #32
 800817a:	d841      	bhi.n	8008200 <HRTIM_OutputConfig+0x120>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d33e      	bcc.n	8008200 <HRTIM_OutputConfig+0x120>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3b02      	subs	r3, #2
 8008186:	2201      	movs	r2, #1
 8008188:	409a      	lsls	r2, r3
 800818a:	4b48      	ldr	r3, [pc, #288]	@ (80082ac <HRTIM_OutputConfig+0x1cc>)
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d11c      	bne.n	80081d6 <HRTIM_OutputConfig+0xf6>
 800819c:	f244 0304 	movw	r3, #16388	@ 0x4004
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bf14      	ite	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	2300      	moveq	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d027      	beq.n	8008200 <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	01db      	lsls	r3, r3, #7
 80081bc:	440b      	add	r3, r1
 80081be:	33bc      	adds	r3, #188	@ 0xbc
 80081c0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	01db      	lsls	r3, r3, #7
 80081ce:	440b      	add	r3, r1
 80081d0:	33c0      	adds	r3, #192	@ 0xc0
 80081d2:	601a      	str	r2, [r3, #0]
      break;
 80081d4:	e015      	b.n	8008202 <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	01db      	lsls	r3, r3, #7
 80081e2:	440b      	add	r3, r1
 80081e4:	33c4      	adds	r3, #196	@ 0xc4
 80081e6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6819      	ldr	r1, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	01db      	lsls	r3, r3, #7
 80081f4:	440b      	add	r3, r1
 80081f6:	33c8      	adds	r3, #200	@ 0xc8
 80081f8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80081fa:	2310      	movs	r3, #16
 80081fc:	61bb      	str	r3, [r7, #24]
      break;
 80081fe:	e000      	b.n	8008202 <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 8008200:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008202:	22fe      	movs	r2, #254	@ 0xfe
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800820a:	43db      	mvns	r3, r3
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	4013      	ands	r3, r2
 8008210:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	69fa      	ldr	r2, [r7, #28]
 800821e:	4313      	orrs	r3, r2
 8008220:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	4313      	orrs	r3, r2
 8008230:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	4313      	orrs	r3, r2
 8008250:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	4313      	orrs	r3, r2
 8008260:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b08      	cmp	r3, #8
 8008268:	d111      	bne.n	800828e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10c      	bne.n	800828e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	69da      	ldr	r2, [r3, #28]
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	4313      	orrs	r3, r2
 800828c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	01db      	lsls	r3, r3, #7
 8008296:	4413      	add	r3, r2
 8008298:	33e4      	adds	r3, #228	@ 0xe4
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	601a      	str	r2, [r3, #0]
}
 800829e:	bf00      	nop
 80082a0:	3724      	adds	r7, #36	@ 0x24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40000041 	.word	0x40000041

080082b0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b06      	cmp	r3, #6
 80082be:	d85e      	bhi.n	800837e <HRTIM_ForceRegistersUpdate+0xce>
 80082c0:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <HRTIM_ForceRegistersUpdate+0x18>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008327 	.word	0x08008327
 80082d4:	0800833d 	.word	0x0800833d
 80082d8:	08008353 	.word	0x08008353
 80082dc:	08008369 	.word	0x08008369
 80082e0:	080082e5 	.word	0x080082e5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0201 	orr.w	r2, r2, #1
 80082f4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80082f8:	e042      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0202 	orr.w	r2, r2, #2
 800830a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800830e:	e037      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0204 	orr.w	r2, r2, #4
 8008320:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008324:	e02c      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0208 	orr.w	r2, r2, #8
 8008336:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800833a:	e021      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0210 	orr.w	r2, r2, #16
 800834c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008350:	e016      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0220 	orr.w	r2, r2, #32
 8008362:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008366:	e00b      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008378:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800837c:	e000      	b.n	8008380 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800837e:	bf00      	nop
  }
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 800839c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80083a6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00c      	beq.n	80083cc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff faa5 	bl	8007916 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00c      	beq.n	80083f0 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2202      	movs	r2, #2
 80083e6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fa9d 	bl	800792a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00c      	beq.n	8008414 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d007      	beq.n	8008414 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2204      	movs	r2, #4
 800840a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff fa95 	bl	800793e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2208      	movs	r2, #8
 800842e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fa8d 	bl	8007952 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00c      	beq.n	800845c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d007      	beq.n	800845c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2210      	movs	r2, #16
 8008452:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fa85 	bl	8007966 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2240      	movs	r2, #64	@ 0x40
 8008476:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7ff fa7d 	bl	800797a <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f003 0320 	and.w	r3, r3, #32
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fa75 	bl	800798e <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80084a4:	bf00      	nop
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80084bc:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80084c6:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d015      	beq.n	800850e <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d010      	beq.n	800850e <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80084f4:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fa4a 	bl	80079a2 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00d      	beq.n	8008534 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800852a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fa41 	bl	80079b6 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008550:	2106      	movs	r1, #6
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fa4e 	bl	80079f4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2202      	movs	r2, #2
 8008572:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008574:	2106      	movs	r1, #6
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fa47 	bl	8007a0a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2204      	movs	r2, #4
 8008596:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008598:	2106      	movs	r1, #6
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff fa40 	bl	8007a20 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d007      	beq.n	80085c4 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2208      	movs	r2, #8
 80085ba:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80085bc:	2106      	movs	r1, #6
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff fa39 	bl	8007a36 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2210      	movs	r2, #16
 80085de:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80085e0:	2106      	movs	r1, #6
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f003 ff64 	bl	800c4b0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2220      	movs	r2, #32
 8008602:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff f9e0 	bl	80079ca <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00c      	beq.n	800862e <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2240      	movs	r2, #64	@ 0x40
 8008624:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008626:	2106      	movs	r1, #6
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff f9d8 	bl	80079de <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800862e:	bf00      	nop
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	01db      	lsls	r3, r3, #7
 800864a:	4413      	add	r3, r2
 800864c:	3304      	adds	r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	4413      	add	r3, r2
 800865c:	338c      	adds	r3, #140	@ 0x8c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	01db      	lsls	r3, r3, #7
 800867e:	4413      	add	r3, r2
 8008680:	3388      	adds	r3, #136	@ 0x88
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff f9b3 	bl	80079f4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d010      	beq.n	80086ba <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00b      	beq.n	80086ba <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	01db      	lsls	r3, r3, #7
 80086aa:	4413      	add	r3, r2
 80086ac:	3388      	adds	r3, #136	@ 0x88
 80086ae:	2202      	movs	r2, #2
 80086b0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff f9a8 	bl	8007a0a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	01db      	lsls	r3, r3, #7
 80086d6:	4413      	add	r3, r2
 80086d8:	3388      	adds	r3, #136	@ 0x88
 80086da:	2204      	movs	r2, #4
 80086dc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f99d 	bl	8007a20 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d010      	beq.n	8008712 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	01db      	lsls	r3, r3, #7
 8008702:	4413      	add	r3, r2
 8008704:	3388      	adds	r3, #136	@ 0x88
 8008706:	2208      	movs	r2, #8
 8008708:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff f992 	bl	8007a36 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	d010      	beq.n	800873e <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	01db      	lsls	r3, r3, #7
 800872e:	4413      	add	r3, r2
 8008730:	3388      	adds	r3, #136	@ 0x88
 8008732:	2210      	movs	r2, #16
 8008734:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f003 feb9 	bl	800c4b0 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	01db      	lsls	r3, r3, #7
 800875a:	4413      	add	r3, r2
 800875c:	3388      	adds	r3, #136	@ 0x88
 800875e:	2240      	movs	r2, #64	@ 0x40
 8008760:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff f93a 	bl	80079de <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	01db      	lsls	r3, r3, #7
 8008786:	4413      	add	r3, r2
 8008788:	3388      	adds	r3, #136	@ 0x88
 800878a:	2280      	movs	r2, #128	@ 0x80
 800878c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff f95b 	bl	8007a4c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879c:	2b00      	cmp	r3, #0
 800879e:	d011      	beq.n	80087c4 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	01db      	lsls	r3, r3, #7
 80087b2:	4413      	add	r3, r2
 80087b4:	3388      	adds	r3, #136	@ 0x88
 80087b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087ba:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff f94f 	bl	8007a62 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d011      	beq.n	80087f2 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00c      	beq.n	80087f2 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	01db      	lsls	r3, r3, #7
 80087e0:	4413      	add	r3, r2
 80087e2:	3388      	adds	r3, #136	@ 0x88
 80087e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087e8:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff f959 	bl	8007aa4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d011      	beq.n	8008820 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	01db      	lsls	r3, r3, #7
 800880e:	4413      	add	r3, r2
 8008810:	3388      	adds	r3, #136	@ 0x88
 8008812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008816:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff f94d 	bl	8007aba <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008826:	2b00      	cmp	r3, #0
 8008828:	d011      	beq.n	800884e <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00c      	beq.n	800884e <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	4413      	add	r3, r2
 800883e:	3388      	adds	r3, #136	@ 0x88
 8008840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008844:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff f941 	bl	8007ad0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d011      	beq.n	800887c <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00c      	beq.n	800887c <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	01db      	lsls	r3, r3, #7
 800886a:	4413      	add	r3, r2
 800886c:	3388      	adds	r3, #136	@ 0x88
 800886e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008872:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff f935 	bl	8007ae6 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d011      	beq.n	80088aa <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	01db      	lsls	r3, r3, #7
 8008898:	4413      	add	r3, r2
 800889a:	3388      	adds	r3, #136	@ 0x88
 800889c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80088a0:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff f8f2 	bl	8007a8e <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d011      	beq.n	80088d8 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00c      	beq.n	80088d8 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	01db      	lsls	r3, r3, #7
 80088c6:	4413      	add	r3, r2
 80088c8:	3388      	adds	r3, #136	@ 0x88
 80088ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80088ce:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f8d0 	bl	8007a78 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0c0      	b.n	8008a74 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7fa f994 	bl	8002c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2203      	movs	r2, #3
 8008910:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f002 fbed 	bl	800b0f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e03e      	b.n	80089a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	3311      	adds	r3, #17
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008938:	7bfa      	ldrb	r2, [r7, #15]
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	440b      	add	r3, r1
 8008946:	3310      	adds	r3, #16
 8008948:	7bfa      	ldrb	r2, [r7, #15]
 800894a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800894c:	7bfa      	ldrb	r2, [r7, #15]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	440b      	add	r3, r1
 800895a:	3313      	adds	r3, #19
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	440b      	add	r3, r1
 800896e:	3320      	adds	r3, #32
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	440b      	add	r3, r1
 8008982:	3324      	adds	r3, #36	@ 0x24
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	440b      	add	r3, r1
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	3301      	adds	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	791b      	ldrb	r3, [r3, #4]
 80089a6:	7bfa      	ldrb	r2, [r7, #15]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d3bb      	bcc.n	8008924 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
 80089b0:	e044      	b.n	8008a3c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80089b2:	7bfa      	ldrb	r2, [r7, #15]
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80089c8:	7bfa      	ldrb	r2, [r7, #15]
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	440b      	add	r3, r1
 80089d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089de:	7bfa      	ldrb	r2, [r7, #15]
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	00db      	lsls	r3, r3, #3
 80089ea:	440b      	add	r3, r1
 80089ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80089f4:	7bfa      	ldrb	r2, [r7, #15]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	440b      	add	r3, r1
 8008a02:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a0a:	7bfa      	ldrb	r2, [r7, #15]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	440b      	add	r3, r1
 8008a18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a20:	7bfa      	ldrb	r2, [r7, #15]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	440b      	add	r3, r1
 8008a2e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	791b      	ldrb	r3, [r3, #4]
 8008a40:	7bfa      	ldrb	r2, [r7, #15]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d3b5      	bcc.n	80089b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a52:	f002 fb6c 	bl	800b12e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7a9b      	ldrb	r3, [r3, #10]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d102      	bne.n	8008a72 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f805 	bl	8008a7c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f043 0302 	orr.w	r3, r3, #2
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d141      	bne.n	8008b62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ade:	4b4b      	ldr	r3, [pc, #300]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aea:	d131      	bne.n	8008b50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008aec:	4b47      	ldr	r3, [pc, #284]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af2:	4a46      	ldr	r2, [pc, #280]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008afc:	4b43      	ldr	r3, [pc, #268]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b04:	4a41      	ldr	r2, [pc, #260]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b0c:	4b40      	ldr	r3, [pc, #256]	@ (8008c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2232      	movs	r2, #50	@ 0x32
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	4a3f      	ldr	r2, [pc, #252]	@ (8008c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b18:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1c:	0c9b      	lsrs	r3, r3, #18
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b22:	e002      	b.n	8008b2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b2a:	4b38      	ldr	r3, [pc, #224]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b36:	d102      	bne.n	8008b3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f2      	bne.n	8008b24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b3e:	4b33      	ldr	r3, [pc, #204]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b4a:	d158      	bne.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e057      	b.n	8008c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b50:	4b2e      	ldr	r3, [pc, #184]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b56:	4a2d      	ldr	r2, [pc, #180]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b60:	e04d      	b.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b68:	d141      	bne.n	8008bee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b6a:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b76:	d131      	bne.n	8008bdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b78:	4b24      	ldr	r3, [pc, #144]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b7e:	4a23      	ldr	r2, [pc, #140]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b88:	4b20      	ldr	r3, [pc, #128]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b90:	4a1e      	ldr	r2, [pc, #120]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b98:	4b1d      	ldr	r3, [pc, #116]	@ (8008c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2232      	movs	r2, #50	@ 0x32
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba8:	0c9b      	lsrs	r3, r3, #18
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bae:	e002      	b.n	8008bb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bb6:	4b15      	ldr	r3, [pc, #84]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc2:	d102      	bne.n	8008bca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f2      	bne.n	8008bb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bca:	4b10      	ldr	r3, [pc, #64]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd6:	d112      	bne.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e011      	b.n	8008c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be2:	4a0a      	ldr	r2, [pc, #40]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008bec:	e007      	b.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008bee:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008bf6:	4a05      	ldr	r2, [pc, #20]	@ (8008c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40007000 	.word	0x40007000
 8008c10:	20000008 	.word	0x20000008
 8008c14:	431bde83 	.word	0x431bde83

08008c18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	4a04      	ldr	r2, [pc, #16]	@ (8008c34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c26:	6093      	str	r3, [r2, #8]
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40007000 	.word	0x40007000

08008c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e2fe      	b.n	8009248 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d075      	beq.n	8008d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c56:	4b97      	ldr	r3, [pc, #604]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 030c 	and.w	r3, r3, #12
 8008c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c60:	4b94      	ldr	r3, [pc, #592]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCC_OscConfig+0x3e>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d002      	beq.n	8008c7c <HAL_RCC_OscConfig+0x44>
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d10b      	bne.n	8008c94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d05b      	beq.n	8008d40 <HAL_RCC_OscConfig+0x108>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d157      	bne.n	8008d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e2d9      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9c:	d106      	bne.n	8008cac <HAL_RCC_OscConfig+0x74>
 8008c9e:	4b85      	ldr	r3, [pc, #532]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a84      	ldr	r2, [pc, #528]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e01d      	b.n	8008ce8 <HAL_RCC_OscConfig+0xb0>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cb4:	d10c      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x98>
 8008cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a7e      	ldr	r2, [pc, #504]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e00b      	b.n	8008ce8 <HAL_RCC_OscConfig+0xb0>
 8008cd0:	4b78      	ldr	r3, [pc, #480]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a77      	ldr	r2, [pc, #476]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4b75      	ldr	r3, [pc, #468]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a74      	ldr	r2, [pc, #464]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d013      	beq.n	8008d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fa f862 	bl	8002db8 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cf8:	f7fa f85e 	bl	8002db8 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b64      	cmp	r3, #100	@ 0x64
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e29e      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0xc0>
 8008d16:	e014      	b.n	8008d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fa f84e 	bl	8002db8 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d20:	f7fa f84a 	bl	8002db8 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b64      	cmp	r3, #100	@ 0x64
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e28a      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d32:	4b60      	ldr	r3, [pc, #384]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f0      	bne.n	8008d20 <HAL_RCC_OscConfig+0xe8>
 8008d3e:	e000      	b.n	8008d42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d075      	beq.n	8008e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d4e:	4b59      	ldr	r3, [pc, #356]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 030c 	and.w	r3, r3, #12
 8008d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d58:	4b56      	ldr	r3, [pc, #344]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b0c      	cmp	r3, #12
 8008d66:	d102      	bne.n	8008d6e <HAL_RCC_OscConfig+0x136>
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d002      	beq.n	8008d74 <HAL_RCC_OscConfig+0x13c>
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d11f      	bne.n	8008db4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d74:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_RCC_OscConfig+0x154>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e25d      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d8c:	4b49      	ldr	r3, [pc, #292]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	4946      	ldr	r1, [pc, #280]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008da0:	4b45      	ldr	r3, [pc, #276]	@ (8008eb8 <HAL_RCC_OscConfig+0x280>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f9 ffbb 	bl	8002d20 <HAL_InitTick>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d043      	beq.n	8008e38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e249      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d023      	beq.n	8008e04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc8:	f7f9 fff6 	bl	8002db8 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dd0:	f7f9 fff2 	bl	8002db8 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e232      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008de2:	4b34      	ldr	r3, [pc, #208]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f0      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dee:	4b31      	ldr	r3, [pc, #196]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	492d      	ldr	r1, [pc, #180]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	604b      	str	r3, [r1, #4]
 8008e02:	e01a      	b.n	8008e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e04:	4b2b      	ldr	r3, [pc, #172]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e10:	f7f9 ffd2 	bl	8002db8 <HAL_GetTick>
 8008e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e16:	e008      	b.n	8008e2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e18:	f7f9 ffce 	bl	8002db8 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e20e      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e2a:	4b22      	ldr	r3, [pc, #136]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f0      	bne.n	8008e18 <HAL_RCC_OscConfig+0x1e0>
 8008e36:	e000      	b.n	8008e3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d041      	beq.n	8008eca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d01c      	beq.n	8008e88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e4e:	4b19      	ldr	r3, [pc, #100]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e54:	4a17      	ldr	r2, [pc, #92]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5e:	f7f9 ffab 	bl	8002db8 <HAL_GetTick>
 8008e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e66:	f7f9 ffa7 	bl	8002db8 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e1e7      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e78:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0ef      	beq.n	8008e66 <HAL_RCC_OscConfig+0x22e>
 8008e86:	e020      	b.n	8008eca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e88:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e8e:	4a09      	ldr	r2, [pc, #36]	@ (8008eb4 <HAL_RCC_OscConfig+0x27c>)
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e98:	f7f9 ff8e 	bl	8002db8 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e9e:	e00d      	b.n	8008ebc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ea0:	f7f9 ff8a 	bl	8002db8 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d906      	bls.n	8008ebc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e1ca      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
 8008eb2:	bf00      	nop
 8008eb4:	40021000 	.word	0x40021000
 8008eb8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1ea      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 80a6 	beq.w	8009024 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008edc:	4b84      	ldr	r3, [pc, #528]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <HAL_RCC_OscConfig+0x2b4>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <HAL_RCC_OscConfig+0x2b6>
 8008eec:	2300      	movs	r3, #0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00d      	beq.n	8008f0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008efe:	4b7c      	ldr	r3, [pc, #496]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f0e:	4b79      	ldr	r3, [pc, #484]	@ (80090f4 <HAL_RCC_OscConfig+0x4bc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d118      	bne.n	8008f4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f1a:	4b76      	ldr	r3, [pc, #472]	@ (80090f4 <HAL_RCC_OscConfig+0x4bc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a75      	ldr	r2, [pc, #468]	@ (80090f4 <HAL_RCC_OscConfig+0x4bc>)
 8008f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f26:	f7f9 ff47 	bl	8002db8 <HAL_GetTick>
 8008f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2e:	f7f9 ff43 	bl	8002db8 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e183      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f40:	4b6c      	ldr	r3, [pc, #432]	@ (80090f4 <HAL_RCC_OscConfig+0x4bc>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d108      	bne.n	8008f66 <HAL_RCC_OscConfig+0x32e>
 8008f54:	4b66      	ldr	r3, [pc, #408]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f5a:	4a65      	ldr	r2, [pc, #404]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f5c:	f043 0301 	orr.w	r3, r3, #1
 8008f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f64:	e024      	b.n	8008fb0 <HAL_RCC_OscConfig+0x378>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d110      	bne.n	8008f90 <HAL_RCC_OscConfig+0x358>
 8008f6e:	4b60      	ldr	r3, [pc, #384]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f74:	4a5e      	ldr	r2, [pc, #376]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f76:	f043 0304 	orr.w	r3, r3, #4
 8008f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f84:	4a5a      	ldr	r2, [pc, #360]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f8e:	e00f      	b.n	8008fb0 <HAL_RCC_OscConfig+0x378>
 8008f90:	4b57      	ldr	r3, [pc, #348]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f96:	4a56      	ldr	r2, [pc, #344]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008f98:	f023 0301 	bic.w	r3, r3, #1
 8008f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008fa0:	4b53      	ldr	r3, [pc, #332]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	4a52      	ldr	r2, [pc, #328]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008fa8:	f023 0304 	bic.w	r3, r3, #4
 8008fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d016      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb8:	f7f9 fefe 	bl	8002db8 <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fbe:	e00a      	b.n	8008fd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc0:	f7f9 fefa 	bl	8002db8 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e138      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fd6:	4b46      	ldr	r3, [pc, #280]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8008fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0ed      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x388>
 8008fe4:	e015      	b.n	8009012 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe6:	f7f9 fee7 	bl	8002db8 <HAL_GetTick>
 8008fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008fec:	e00a      	b.n	8009004 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fee:	f7f9 fee3 	bl	8002db8 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e121      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009004:	4b3a      	ldr	r3, [pc, #232]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1ed      	bne.n	8008fee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009012:	7ffb      	ldrb	r3, [r7, #31]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d105      	bne.n	8009024 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009018:	4b35      	ldr	r3, [pc, #212]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 800901a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901c:	4a34      	ldr	r2, [pc, #208]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 800901e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009022:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d03c      	beq.n	80090aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01c      	beq.n	8009072 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009038:	4b2d      	ldr	r3, [pc, #180]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 800903a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800903e:	4a2c      	ldr	r2, [pc, #176]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8009040:	f043 0301 	orr.w	r3, r3, #1
 8009044:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009048:	f7f9 feb6 	bl	8002db8 <HAL_GetTick>
 800904c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009050:	f7f9 feb2 	bl	8002db8 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e0f2      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009062:	4b23      	ldr	r3, [pc, #140]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8009064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0ef      	beq.n	8009050 <HAL_RCC_OscConfig+0x418>
 8009070:	e01b      	b.n	80090aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009072:	4b1f      	ldr	r3, [pc, #124]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 8009074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009082:	f7f9 fe99 	bl	8002db8 <HAL_GetTick>
 8009086:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009088:	e008      	b.n	800909c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800908a:	f7f9 fe95 	bl	8002db8 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d901      	bls.n	800909c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e0d5      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800909c:	4b14      	ldr	r3, [pc, #80]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 800909e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1ef      	bne.n	800908a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80c9 	beq.w	8009246 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 030c 	and.w	r3, r3, #12
 80090bc:	2b0c      	cmp	r3, #12
 80090be:	f000 8083 	beq.w	80091c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d15e      	bne.n	8009188 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <HAL_RCC_OscConfig+0x4b8>)
 80090d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d6:	f7f9 fe6f 	bl	8002db8 <HAL_GetTick>
 80090da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090dc:	e00c      	b.n	80090f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090de:	f7f9 fe6b 	bl	8002db8 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d905      	bls.n	80090f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e0ab      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
 80090f0:	40021000 	.word	0x40021000
 80090f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090f8:	4b55      	ldr	r3, [pc, #340]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1ec      	bne.n	80090de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009104:	4b52      	ldr	r3, [pc, #328]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	4b52      	ldr	r3, [pc, #328]	@ (8009254 <HAL_RCC_OscConfig+0x61c>)
 800910a:	4013      	ands	r3, r2
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6a11      	ldr	r1, [r2, #32]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009114:	3a01      	subs	r2, #1
 8009116:	0112      	lsls	r2, r2, #4
 8009118:	4311      	orrs	r1, r2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800911e:	0212      	lsls	r2, r2, #8
 8009120:	4311      	orrs	r1, r2
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009126:	0852      	lsrs	r2, r2, #1
 8009128:	3a01      	subs	r2, #1
 800912a:	0552      	lsls	r2, r2, #21
 800912c:	4311      	orrs	r1, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009132:	0852      	lsrs	r2, r2, #1
 8009134:	3a01      	subs	r2, #1
 8009136:	0652      	lsls	r2, r2, #25
 8009138:	4311      	orrs	r1, r2
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800913e:	06d2      	lsls	r2, r2, #27
 8009140:	430a      	orrs	r2, r1
 8009142:	4943      	ldr	r1, [pc, #268]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 8009144:	4313      	orrs	r3, r2
 8009146:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009148:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a40      	ldr	r2, [pc, #256]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800914e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009152:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009154:	4b3e      	ldr	r3, [pc, #248]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	4a3d      	ldr	r2, [pc, #244]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800915a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800915e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009160:	f7f9 fe2a 	bl	8002db8 <HAL_GetTick>
 8009164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009166:	e008      	b.n	800917a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009168:	f7f9 fe26 	bl	8002db8 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b02      	cmp	r3, #2
 8009174:	d901      	bls.n	800917a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e066      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800917a:	4b35      	ldr	r3, [pc, #212]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f0      	beq.n	8009168 <HAL_RCC_OscConfig+0x530>
 8009186:	e05e      	b.n	8009246 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009188:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a30      	ldr	r2, [pc, #192]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 800918e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009194:	f7f9 fe10 	bl	8002db8 <HAL_GetTick>
 8009198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800919c:	f7f9 fe0c 	bl	8002db8 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e04c      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091ae:	4b28      	ldr	r3, [pc, #160]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1f0      	bne.n	800919c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80091ba:	4b25      	ldr	r3, [pc, #148]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	4924      	ldr	r1, [pc, #144]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <HAL_RCC_OscConfig+0x620>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	60cb      	str	r3, [r1, #12]
 80091c6:	e03e      	b.n	8009246 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e039      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80091d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009250 <HAL_RCC_OscConfig+0x618>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f003 0203 	and.w	r2, r3, #3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d12c      	bne.n	8009242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	3b01      	subs	r3, #1
 80091f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d123      	bne.n	8009242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009206:	429a      	cmp	r2, r3
 8009208:	d11b      	bne.n	8009242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009216:	429a      	cmp	r2, r3
 8009218:	d113      	bne.n	8009242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	3b01      	subs	r3, #1
 8009228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800922a:	429a      	cmp	r2, r3
 800922c:	d109      	bne.n	8009242 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	3b01      	subs	r3, #1
 800923c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800923e:	429a      	cmp	r2, r3
 8009240:	d001      	beq.n	8009246 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40021000 	.word	0x40021000
 8009254:	019f800c 	.word	0x019f800c
 8009258:	feeefffc 	.word	0xfeeefffc

0800925c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e11e      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009274:	4b91      	ldr	r3, [pc, #580]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d910      	bls.n	80092a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009282:	4b8e      	ldr	r3, [pc, #568]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f023 020f 	bic.w	r2, r3, #15
 800928a:	498c      	ldr	r1, [pc, #560]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	4313      	orrs	r3, r2
 8009290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009292:	4b8a      	ldr	r3, [pc, #552]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d001      	beq.n	80092a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e106      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d073      	beq.n	8009398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d129      	bne.n	800930c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b8:	4b81      	ldr	r3, [pc, #516]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e0f4      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80092c8:	f000 f99e 	bl	8009608 <RCC_GetSysClockFreqFromPLLSource>
 80092cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4a7c      	ldr	r2, [pc, #496]	@ (80094c4 <HAL_RCC_ClockConfig+0x268>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d93f      	bls.n	8009356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80092d6:	4b7a      	ldr	r3, [pc, #488]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d033      	beq.n	8009356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d12f      	bne.n	8009356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80092f6:	4b72      	ldr	r3, [pc, #456]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092fe:	4a70      	ldr	r2, [pc, #448]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009306:	2380      	movs	r3, #128	@ 0x80
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e024      	b.n	8009356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d107      	bne.n	8009324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009314:	4b6a      	ldr	r3, [pc, #424]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0c6      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009324:	4b66      	ldr	r3, [pc, #408]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e0be      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009334:	f000 f8ce 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 8009338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	4a61      	ldr	r2, [pc, #388]	@ (80094c4 <HAL_RCC_ClockConfig+0x268>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d909      	bls.n	8009356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009342:	4b5f      	ldr	r3, [pc, #380]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800934a:	4a5d      	ldr	r2, [pc, #372]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 800934c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009352:	2380      	movs	r3, #128	@ 0x80
 8009354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009356:	4b5a      	ldr	r3, [pc, #360]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f023 0203 	bic.w	r2, r3, #3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	4957      	ldr	r1, [pc, #348]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009364:	4313      	orrs	r3, r2
 8009366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009368:	f7f9 fd26 	bl	8002db8 <HAL_GetTick>
 800936c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800936e:	e00a      	b.n	8009386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009370:	f7f9 fd22 	bl	8002db8 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800937e:	4293      	cmp	r3, r2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e095      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009386:	4b4e      	ldr	r3, [pc, #312]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f003 020c 	and.w	r2, r3, #12
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	429a      	cmp	r2, r3
 8009396:	d1eb      	bne.n	8009370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d023      	beq.n	80093ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093b0:	4b43      	ldr	r3, [pc, #268]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	4a42      	ldr	r2, [pc, #264]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80093ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d007      	beq.n	80093d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80093c8:	4b3d      	ldr	r3, [pc, #244]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093d0:	4a3b      	ldr	r2, [pc, #236]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80093d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093d8:	4b39      	ldr	r3, [pc, #228]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4936      	ldr	r1, [pc, #216]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	608b      	str	r3, [r1, #8]
 80093ea:	e008      	b.n	80093fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b80      	cmp	r3, #128	@ 0x80
 80093f0:	d105      	bne.n	80093fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80093f2:	4b33      	ldr	r3, [pc, #204]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	4a32      	ldr	r2, [pc, #200]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 80093f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093fe:	4b2f      	ldr	r3, [pc, #188]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d21d      	bcs.n	8009448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940c:	4b2b      	ldr	r3, [pc, #172]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f023 020f 	bic.w	r2, r3, #15
 8009414:	4929      	ldr	r1, [pc, #164]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	4313      	orrs	r3, r2
 800941a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800941c:	f7f9 fccc 	bl	8002db8 <HAL_GetTick>
 8009420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009422:	e00a      	b.n	800943a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009424:	f7f9 fcc8 	bl	8002db8 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009432:	4293      	cmp	r3, r2
 8009434:	d901      	bls.n	800943a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e03b      	b.n	80094b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800943a:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <HAL_RCC_ClockConfig+0x260>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d1ed      	bne.n	8009424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d008      	beq.n	8009466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009454:	4b1a      	ldr	r3, [pc, #104]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	4917      	ldr	r1, [pc, #92]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009462:	4313      	orrs	r3, r2
 8009464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0308 	and.w	r3, r3, #8
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009472:	4b13      	ldr	r3, [pc, #76]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	490f      	ldr	r1, [pc, #60]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 8009482:	4313      	orrs	r3, r2
 8009484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009486:	f000 f825 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <HAL_RCC_ClockConfig+0x264>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	091b      	lsrs	r3, r3, #4
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	490c      	ldr	r1, [pc, #48]	@ (80094c8 <HAL_RCC_ClockConfig+0x26c>)
 8009498:	5ccb      	ldrb	r3, [r1, r3]
 800949a:	f003 031f 	and.w	r3, r3, #31
 800949e:	fa22 f303 	lsr.w	r3, r2, r3
 80094a2:	4a0a      	ldr	r2, [pc, #40]	@ (80094cc <HAL_RCC_ClockConfig+0x270>)
 80094a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80094a6:	4b0a      	ldr	r3, [pc, #40]	@ (80094d0 <HAL_RCC_ClockConfig+0x274>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f9 fc38 	bl	8002d20 <HAL_InitTick>
 80094b0:	4603      	mov	r3, r0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	40022000 	.word	0x40022000
 80094c0:	40021000 	.word	0x40021000
 80094c4:	04c4b400 	.word	0x04c4b400
 80094c8:	0800ee90 	.word	0x0800ee90
 80094cc:	20000008 	.word	0x20000008
 80094d0:	2000000c 	.word	0x2000000c

080094d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80094da:	4b2c      	ldr	r3, [pc, #176]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 030c 	and.w	r3, r3, #12
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d102      	bne.n	80094ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80094e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	e047      	b.n	800957c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80094ec:	4b27      	ldr	r3, [pc, #156]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f003 030c 	and.w	r3, r3, #12
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d102      	bne.n	80094fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80094f8:	4b26      	ldr	r3, [pc, #152]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80094fa:	613b      	str	r3, [r7, #16]
 80094fc:	e03e      	b.n	800957c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80094fe:	4b23      	ldr	r3, [pc, #140]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f003 030c 	and.w	r3, r3, #12
 8009506:	2b0c      	cmp	r3, #12
 8009508:	d136      	bne.n	8009578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800950a:	4b20      	ldr	r3, [pc, #128]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009514:	4b1d      	ldr	r3, [pc, #116]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	091b      	lsrs	r3, r3, #4
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	3301      	adds	r3, #1
 8009520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d10c      	bne.n	8009542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009528:	4a1a      	ldr	r2, [pc, #104]	@ (8009594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009530:	4a16      	ldr	r2, [pc, #88]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009532:	68d2      	ldr	r2, [r2, #12]
 8009534:	0a12      	lsrs	r2, r2, #8
 8009536:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	617b      	str	r3, [r7, #20]
      break;
 8009540:	e00c      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009542:	4a13      	ldr	r2, [pc, #76]	@ (8009590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	fbb2 f3f3 	udiv	r3, r2, r3
 800954a:	4a10      	ldr	r2, [pc, #64]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 800954c:	68d2      	ldr	r2, [r2, #12]
 800954e:	0a12      	lsrs	r2, r2, #8
 8009550:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009554:	fb02 f303 	mul.w	r3, r2, r3
 8009558:	617b      	str	r3, [r7, #20]
      break;
 800955a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800955c:	4b0b      	ldr	r3, [pc, #44]	@ (800958c <HAL_RCC_GetSysClockFreq+0xb8>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	0e5b      	lsrs	r3, r3, #25
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	3301      	adds	r3, #1
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	fbb2 f3f3 	udiv	r3, r2, r3
 8009574:	613b      	str	r3, [r7, #16]
 8009576:	e001      	b.n	800957c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800957c:	693b      	ldr	r3, [r7, #16]
}
 800957e:	4618      	mov	r0, r3
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40021000 	.word	0x40021000
 8009590:	00f42400 	.word	0x00f42400
 8009594:	02dc6c00 	.word	0x02dc6c00

08009598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800959c:	4b03      	ldr	r3, [pc, #12]	@ (80095ac <HAL_RCC_GetHCLKFreq+0x14>)
 800959e:	681b      	ldr	r3, [r3, #0]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20000008 	.word	0x20000008

080095b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80095b4:	f7ff fff0 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4b06      	ldr	r3, [pc, #24]	@ (80095d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	4904      	ldr	r1, [pc, #16]	@ (80095d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095c6:	5ccb      	ldrb	r3, [r1, r3]
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	40021000 	.word	0x40021000
 80095d8:	0800eea0 	.word	0x0800eea0

080095dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80095e0:	f7ff ffda 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095e4:	4602      	mov	r2, r0
 80095e6:	4b06      	ldr	r3, [pc, #24]	@ (8009600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	0adb      	lsrs	r3, r3, #11
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	4904      	ldr	r1, [pc, #16]	@ (8009604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095f2:	5ccb      	ldrb	r3, [r1, r3]
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40021000 	.word	0x40021000
 8009604:	0800eea0 	.word	0x0800eea0

08009608 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800960e:	4b1e      	ldr	r3, [pc, #120]	@ (8009688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009618:	4b1b      	ldr	r3, [pc, #108]	@ (8009688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b03      	cmp	r3, #3
 800962a:	d10c      	bne.n	8009646 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800962c:	4a17      	ldr	r2, [pc, #92]	@ (800968c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	4a14      	ldr	r2, [pc, #80]	@ (8009688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009636:	68d2      	ldr	r2, [r2, #12]
 8009638:	0a12      	lsrs	r2, r2, #8
 800963a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800963e:	fb02 f303 	mul.w	r3, r2, r3
 8009642:	617b      	str	r3, [r7, #20]
    break;
 8009644:	e00c      	b.n	8009660 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009646:	4a12      	ldr	r2, [pc, #72]	@ (8009690 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	4a0e      	ldr	r2, [pc, #56]	@ (8009688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009650:	68d2      	ldr	r2, [r2, #12]
 8009652:	0a12      	lsrs	r2, r2, #8
 8009654:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009658:	fb02 f303 	mul.w	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]
    break;
 800965e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009660:	4b09      	ldr	r3, [pc, #36]	@ (8009688 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	0e5b      	lsrs	r3, r3, #25
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	3301      	adds	r3, #1
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	fbb2 f3f3 	udiv	r3, r2, r3
 8009678:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800967a:	687b      	ldr	r3, [r7, #4]
}
 800967c:	4618      	mov	r0, r3
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	40021000 	.word	0x40021000
 800968c:	02dc6c00 	.word	0x02dc6c00
 8009690:	00f42400 	.word	0x00f42400

08009694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800969c:	2300      	movs	r3, #0
 800969e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096a0:	2300      	movs	r3, #0
 80096a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8098 	beq.w	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096b2:	2300      	movs	r3, #0
 80096b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096b6:	4b43      	ldr	r3, [pc, #268]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096c2:	4b40      	ldr	r3, [pc, #256]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c6:	4a3f      	ldr	r2, [pc, #252]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80096ce:	4b3d      	ldr	r3, [pc, #244]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d6:	60bb      	str	r3, [r7, #8]
 80096d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096da:	2301      	movs	r3, #1
 80096dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096de:	4b3a      	ldr	r3, [pc, #232]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a39      	ldr	r2, [pc, #228]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096ea:	f7f9 fb65 	bl	8002db8 <HAL_GetTick>
 80096ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096f0:	e009      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f2:	f7f9 fb61 	bl	8002db8 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d902      	bls.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	74fb      	strb	r3, [r7, #19]
        break;
 8009704:	e005      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009706:	4b30      	ldr	r3, [pc, #192]	@ (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0ef      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009712:	7cfb      	ldrb	r3, [r7, #19]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d159      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009718:	4b2a      	ldr	r3, [pc, #168]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009722:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01e      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	429a      	cmp	r2, r3
 8009732:	d019      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009734:	4b23      	ldr	r3, [pc, #140]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800973a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009740:	4b20      	ldr	r3, [pc, #128]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009746:	4a1f      	ldr	r2, [pc, #124]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800974c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009756:	4a1b      	ldr	r2, [pc, #108]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009760:	4a18      	ldr	r2, [pc, #96]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d016      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009772:	f7f9 fb21 	bl	8002db8 <HAL_GetTick>
 8009776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009778:	e00b      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800977a:	f7f9 fb1d 	bl	8002db8 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009788:	4293      	cmp	r3, r2
 800978a:	d902      	bls.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	74fb      	strb	r3, [r7, #19]
            break;
 8009790:	e006      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009792:	4b0c      	ldr	r3, [pc, #48]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0ec      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80097a0:	7cfb      	ldrb	r3, [r7, #19]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10b      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097a6:	4b07      	ldr	r3, [pc, #28]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b4:	4903      	ldr	r1, [pc, #12]	@ (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80097bc:	e008      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097be:	7cfb      	ldrb	r3, [r7, #19]
 80097c0:	74bb      	strb	r3, [r7, #18]
 80097c2:	e005      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80097c4:	40021000 	.word	0x40021000
 80097c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097d0:	7c7b      	ldrb	r3, [r7, #17]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d105      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097d6:	4ba7      	ldr	r3, [pc, #668]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097da:	4aa6      	ldr	r2, [pc, #664]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097ee:	4ba1      	ldr	r3, [pc, #644]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f4:	f023 0203 	bic.w	r2, r3, #3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	499d      	ldr	r1, [pc, #628]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009810:	4b98      	ldr	r3, [pc, #608]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009816:	f023 020c 	bic.w	r2, r3, #12
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4995      	ldr	r1, [pc, #596]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009820:	4313      	orrs	r3, r2
 8009822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009832:	4b90      	ldr	r3, [pc, #576]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009838:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	498c      	ldr	r1, [pc, #560]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009854:	4b87      	ldr	r3, [pc, #540]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	4984      	ldr	r1, [pc, #528]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009864:	4313      	orrs	r3, r2
 8009866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009876:	4b7f      	ldr	r3, [pc, #508]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	497b      	ldr	r1, [pc, #492]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009886:	4313      	orrs	r3, r2
 8009888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009898:	4b76      	ldr	r3, [pc, #472]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	4973      	ldr	r1, [pc, #460]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	496a      	ldr	r1, [pc, #424]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00a      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098dc:	4b65      	ldr	r3, [pc, #404]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	4962      	ldr	r1, [pc, #392]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009904:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	4959      	ldr	r1, [pc, #356]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800990e:	4313      	orrs	r3, r2
 8009910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00a      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009920:	4b54      	ldr	r3, [pc, #336]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009922:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009926:	f023 0203 	bic.w	r2, r3, #3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	4951      	ldr	r1, [pc, #324]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009930:	4313      	orrs	r3, r2
 8009932:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009942:	4b4c      	ldr	r3, [pc, #304]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009948:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009950:	4948      	ldr	r1, [pc, #288]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009952:	4313      	orrs	r3, r2
 8009954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009960:	2b00      	cmp	r3, #0
 8009962:	d015      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009964:	4b43      	ldr	r3, [pc, #268]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	4940      	ldr	r1, [pc, #256]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009974:	4313      	orrs	r3, r2
 8009976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009982:	d105      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009984:	4b3b      	ldr	r3, [pc, #236]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	4a3a      	ldr	r2, [pc, #232]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800998a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800998e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009998:	2b00      	cmp	r3, #0
 800999a:	d015      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800999c:	4b35      	ldr	r3, [pc, #212]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099aa:	4932      	ldr	r1, [pc, #200]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ba:	d105      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d015      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099d4:	4b27      	ldr	r3, [pc, #156]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e2:	4924      	ldr	r1, [pc, #144]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099f2:	d105      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d015      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a0c:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1a:	4916      	ldr	r1, [pc, #88]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a2a:	d105      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a2c:	4b11      	ldr	r3, [pc, #68]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	4a10      	ldr	r2, [pc, #64]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d019      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a44:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a52:	4908      	ldr	r1, [pc, #32]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a62:	d109      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a64:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	4a02      	ldr	r2, [pc, #8]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a6e:	60d3      	str	r3, [r2, #12]
 8009a70:	e002      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a72:	bf00      	nop
 8009a74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d015      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a84:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a92:	4926      	ldr	r1, [pc, #152]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aa2:	d105      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009aa4:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	4a20      	ldr	r2, [pc, #128]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d015      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009abc:	4b1b      	ldr	r3, [pc, #108]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aca:	4918      	ldr	r1, [pc, #96]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ada:	d105      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009adc:	4b13      	ldr	r3, [pc, #76]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	4a12      	ldr	r2, [pc, #72]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ae6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d015      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009af4:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b02:	490a      	ldr	r1, [pc, #40]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b12:	d105      	bne.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b14:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a04      	ldr	r2, [pc, #16]	@ (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	40021000 	.word	0x40021000

08009b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e09d      	b.n	8009c7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d108      	bne.n	8009b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b52:	d009      	beq.n	8009b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	61da      	str	r2, [r3, #28]
 8009b5a:	e005      	b.n	8009b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f8 fb2c 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ba8:	d902      	bls.n	8009bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	e002      	b.n	8009bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009bbe:	d007      	beq.n	8009bd0 <HAL_SPI_Init+0xa0>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bc8:	d002      	beq.n	8009bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c12:	ea42 0103 	orr.w	r1, r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	f003 0204 	and.w	r2, r3, #4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c4c:	ea42 0103 	orr.w	r1, r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e049      	b.n	8009d2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7f8 fce3 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f000 f9c3 	bl	800a050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d001      	beq.n	8009d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e054      	b.n	8009df6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a26      	ldr	r2, [pc, #152]	@ (8009e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d76:	d01d      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a22      	ldr	r2, [pc, #136]	@ (8009e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a21      	ldr	r2, [pc, #132]	@ (8009e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1f      	ldr	r2, [pc, #124]	@ (8009e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <HAL_TIM_Base_Start_IT+0xe0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <HAL_TIM_Base_Start_IT+0xe4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a1b      	ldr	r2, [pc, #108]	@ (8009e1c <HAL_TIM_Base_Start_IT+0xe8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d115      	bne.n	8009de0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	4b19      	ldr	r3, [pc, #100]	@ (8009e20 <HAL_TIM_Base_Start_IT+0xec>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d015      	beq.n	8009df2 <HAL_TIM_Base_Start_IT+0xbe>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dcc:	d011      	beq.n	8009df2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dde:	e008      	b.n	8009df2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	e000      	b.n	8009df4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	40012c00 	.word	0x40012c00
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40013400 	.word	0x40013400
 8009e18:	40014000 	.word	0x40014000
 8009e1c:	40015000 	.word	0x40015000
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_TIM_ConfigClockSource+0x1c>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e0f6      	b.n	800a02e <HAL_TIM_ConfigClockSource+0x20a>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009e5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a6f      	ldr	r2, [pc, #444]	@ (800a038 <HAL_TIM_ConfigClockSource+0x214>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	f000 80c1 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009e80:	4a6d      	ldr	r2, [pc, #436]	@ (800a038 <HAL_TIM_ConfigClockSource+0x214>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	f200 80c6 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e88:	4a6c      	ldr	r2, [pc, #432]	@ (800a03c <HAL_TIM_ConfigClockSource+0x218>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	f000 80b9 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009e90:	4a6a      	ldr	r2, [pc, #424]	@ (800a03c <HAL_TIM_ConfigClockSource+0x218>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f200 80be 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e98:	4a69      	ldr	r2, [pc, #420]	@ (800a040 <HAL_TIM_ConfigClockSource+0x21c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	f000 80b1 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009ea0:	4a67      	ldr	r2, [pc, #412]	@ (800a040 <HAL_TIM_ConfigClockSource+0x21c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	f200 80b6 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ea8:	4a66      	ldr	r2, [pc, #408]	@ (800a044 <HAL_TIM_ConfigClockSource+0x220>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f000 80a9 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009eb0:	4a64      	ldr	r2, [pc, #400]	@ (800a044 <HAL_TIM_ConfigClockSource+0x220>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	f200 80ae 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009eb8:	4a63      	ldr	r2, [pc, #396]	@ (800a048 <HAL_TIM_ConfigClockSource+0x224>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	f000 80a1 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009ec0:	4a61      	ldr	r2, [pc, #388]	@ (800a048 <HAL_TIM_ConfigClockSource+0x224>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	f200 80a6 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ec8:	4a60      	ldr	r2, [pc, #384]	@ (800a04c <HAL_TIM_ConfigClockSource+0x228>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	f000 8099 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800a04c <HAL_TIM_ConfigClockSource+0x228>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	f200 809e 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ed8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009edc:	f000 8091 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009ee0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ee4:	f200 8096 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eec:	f000 8089 	beq.w	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ef4:	f200 808e 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009efc:	d03e      	beq.n	8009f7c <HAL_TIM_ConfigClockSource+0x158>
 8009efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f02:	f200 8087 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f0a:	f000 8086 	beq.w	800a01a <HAL_TIM_ConfigClockSource+0x1f6>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f12:	d87f      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f14:	2b70      	cmp	r3, #112	@ 0x70
 8009f16:	d01a      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0x12a>
 8009f18:	2b70      	cmp	r3, #112	@ 0x70
 8009f1a:	d87b      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f1c:	2b60      	cmp	r3, #96	@ 0x60
 8009f1e:	d050      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x19e>
 8009f20:	2b60      	cmp	r3, #96	@ 0x60
 8009f22:	d877      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f24:	2b50      	cmp	r3, #80	@ 0x50
 8009f26:	d03c      	beq.n	8009fa2 <HAL_TIM_ConfigClockSource+0x17e>
 8009f28:	2b50      	cmp	r3, #80	@ 0x50
 8009f2a:	d873      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f2c:	2b40      	cmp	r3, #64	@ 0x40
 8009f2e:	d058      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x1be>
 8009f30:	2b40      	cmp	r3, #64	@ 0x40
 8009f32:	d86f      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f34:	2b30      	cmp	r3, #48	@ 0x30
 8009f36:	d064      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009f38:	2b30      	cmp	r3, #48	@ 0x30
 8009f3a:	d86b      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d060      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d867      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d05c      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d05a      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x1de>
 8009f4c:	e062      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f5e:	f000 f9a7 	bl	800a2b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	609a      	str	r2, [r3, #8]
      break;
 8009f7a:	e04f      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f8c:	f000 f990 	bl	800a2b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f9e:	609a      	str	r2, [r3, #8]
      break;
 8009fa0:	e03c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f000 f902 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2150      	movs	r1, #80	@ 0x50
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f95b 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009fc0:	e02c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f000 f921 	bl	800a216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2160      	movs	r1, #96	@ 0x60
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f94b 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009fe0:	e01c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f000 f8e2 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2140      	movs	r1, #64	@ 0x40
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 f93b 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 800a000:	e00c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f000 f932 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 800a012:	e003      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
      break;
 800a018:	e000      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a01a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	00100070 	.word	0x00100070
 800a03c:	00100060 	.word	0x00100060
 800a040:	00100050 	.word	0x00100050
 800a044:	00100040 	.word	0x00100040
 800a048:	00100030 	.word	0x00100030
 800a04c:	00100020 	.word	0x00100020

0800a050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a4c      	ldr	r2, [pc, #304]	@ (800a194 <TIM_Base_SetConfig+0x144>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d017      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a06e:	d013      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a49      	ldr	r2, [pc, #292]	@ (800a198 <TIM_Base_SetConfig+0x148>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00f      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a48      	ldr	r2, [pc, #288]	@ (800a19c <TIM_Base_SetConfig+0x14c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00b      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a47      	ldr	r2, [pc, #284]	@ (800a1a0 <TIM_Base_SetConfig+0x150>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d007      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a46      	ldr	r2, [pc, #280]	@ (800a1a4 <TIM_Base_SetConfig+0x154>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_Base_SetConfig+0x48>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a45      	ldr	r2, [pc, #276]	@ (800a1a8 <TIM_Base_SetConfig+0x158>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d108      	bne.n	800a0aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a39      	ldr	r2, [pc, #228]	@ (800a194 <TIM_Base_SetConfig+0x144>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d023      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b8:	d01f      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a36      	ldr	r2, [pc, #216]	@ (800a198 <TIM_Base_SetConfig+0x148>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d01b      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a35      	ldr	r2, [pc, #212]	@ (800a19c <TIM_Base_SetConfig+0x14c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d017      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a34      	ldr	r2, [pc, #208]	@ (800a1a0 <TIM_Base_SetConfig+0x150>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d013      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a33      	ldr	r2, [pc, #204]	@ (800a1a4 <TIM_Base_SetConfig+0x154>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00f      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a33      	ldr	r2, [pc, #204]	@ (800a1ac <TIM_Base_SetConfig+0x15c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00b      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a32      	ldr	r2, [pc, #200]	@ (800a1b0 <TIM_Base_SetConfig+0x160>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d007      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a31      	ldr	r2, [pc, #196]	@ (800a1b4 <TIM_Base_SetConfig+0x164>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d003      	beq.n	800a0fa <TIM_Base_SetConfig+0xaa>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a2c      	ldr	r2, [pc, #176]	@ (800a1a8 <TIM_Base_SetConfig+0x158>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d108      	bne.n	800a10c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a18      	ldr	r2, [pc, #96]	@ (800a194 <TIM_Base_SetConfig+0x144>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <TIM_Base_SetConfig+0x110>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1a4 <TIM_Base_SetConfig+0x154>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d00f      	beq.n	800a160 <TIM_Base_SetConfig+0x110>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a1a      	ldr	r2, [pc, #104]	@ (800a1ac <TIM_Base_SetConfig+0x15c>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d00b      	beq.n	800a160 <TIM_Base_SetConfig+0x110>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a19      	ldr	r2, [pc, #100]	@ (800a1b0 <TIM_Base_SetConfig+0x160>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d007      	beq.n	800a160 <TIM_Base_SetConfig+0x110>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a18      	ldr	r2, [pc, #96]	@ (800a1b4 <TIM_Base_SetConfig+0x164>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_Base_SetConfig+0x110>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a13      	ldr	r2, [pc, #76]	@ (800a1a8 <TIM_Base_SetConfig+0x158>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d103      	bne.n	800a168 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b01      	cmp	r3, #1
 800a178:	d105      	bne.n	800a186 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	f023 0201 	bic.w	r2, r3, #1
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	611a      	str	r2, [r3, #16]
  }
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40012c00 	.word	0x40012c00
 800a198:	40000400 	.word	0x40000400
 800a19c:	40000800 	.word	0x40000800
 800a1a0:	40000c00 	.word	0x40000c00
 800a1a4:	40013400 	.word	0x40013400
 800a1a8:	40015000 	.word	0x40015000
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800

0800a1b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f023 0201 	bic.w	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f023 030a 	bic.w	r3, r3, #10
 800a1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a216:	b480      	push	{r7}
 800a218:	b087      	sub	sp, #28
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	f023 0210 	bic.w	r2, r3, #16
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	031b      	lsls	r3, r3, #12
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a252:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a28c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	f043 0307 	orr.w	r3, r3, #7
 800a29c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	609a      	str	r2, [r3, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	021a      	lsls	r2, r3, #8
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	609a      	str	r2, [r3, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	371c      	adds	r7, #28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a304:	2302      	movs	r3, #2
 800a306:	e074      	b.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a34      	ldr	r2, [pc, #208]	@ (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d009      	beq.n	800a346 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a33      	ldr	r2, [pc, #204]	@ (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d004      	beq.n	800a346 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a31      	ldr	r2, [pc, #196]	@ (800a408 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d108      	bne.n	800a358 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a34c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a35e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a21      	ldr	r2, [pc, #132]	@ (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d022      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a388:	d01d      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1f      	ldr	r2, [pc, #124]	@ (800a40c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1d      	ldr	r2, [pc, #116]	@ (800a410 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a414 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00e      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a15      	ldr	r2, [pc, #84]	@ (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a11      	ldr	r2, [pc, #68]	@ (800a408 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d10c      	bne.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	40012c00 	.word	0x40012c00
 800a404:	40013400 	.word	0x40013400
 800a408:	40015000 	.word	0x40015000
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40014000 	.word	0x40014000

0800a41c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e042      	b.n	800a4b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7f8 fa81 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2224      	movs	r2, #36	@ 0x24
 800a44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0201 	bic.w	r2, r2, #1
 800a45c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fb24 	bl	800aab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f825 	bl	800a4bc <UART_SetConfig>
 800a472:	4603      	mov	r3, r0
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e01b      	b.n	800a4b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a48a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a49a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0201 	orr.w	r2, r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fba3 	bl	800abf8 <UART_CheckIdleState>
 800a4b2:	4603      	mov	r3, r0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4c0:	b08c      	sub	sp, #48	@ 0x30
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4baa      	ldr	r3, [pc, #680]	@ (800a794 <UART_SetConfig+0x2d8>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	6812      	ldr	r2, [r2, #0]
 800a4f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a9f      	ldr	r2, [pc, #636]	@ (800a798 <UART_SetConfig+0x2dc>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a524:	4313      	orrs	r3, r2
 800a526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a532:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	f023 010f 	bic.w	r1, r3, #15
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a90      	ldr	r2, [pc, #576]	@ (800a79c <UART_SetConfig+0x2e0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d125      	bne.n	800a5ac <UART_SetConfig+0xf0>
 800a560:	4b8f      	ldr	r3, [pc, #572]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a566:	f003 0303 	and.w	r3, r3, #3
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d81a      	bhi.n	800a5a4 <UART_SetConfig+0xe8>
 800a56e:	a201      	add	r2, pc, #4	@ (adr r2, 800a574 <UART_SetConfig+0xb8>)
 800a570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a574:	0800a585 	.word	0x0800a585
 800a578:	0800a595 	.word	0x0800a595
 800a57c:	0800a58d 	.word	0x0800a58d
 800a580:	0800a59d 	.word	0x0800a59d
 800a584:	2301      	movs	r3, #1
 800a586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58a:	e116      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a58c:	2302      	movs	r3, #2
 800a58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a592:	e112      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a594:	2304      	movs	r3, #4
 800a596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59a:	e10e      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a59c:	2308      	movs	r3, #8
 800a59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a2:	e10a      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5aa:	e106      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a7c      	ldr	r2, [pc, #496]	@ (800a7a4 <UART_SetConfig+0x2e8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d138      	bne.n	800a628 <UART_SetConfig+0x16c>
 800a5b6:	4b7a      	ldr	r3, [pc, #488]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5bc:	f003 030c 	and.w	r3, r3, #12
 800a5c0:	2b0c      	cmp	r3, #12
 800a5c2:	d82d      	bhi.n	800a620 <UART_SetConfig+0x164>
 800a5c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <UART_SetConfig+0x110>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a601 	.word	0x0800a601
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a621 	.word	0x0800a621
 800a5d8:	0800a621 	.word	0x0800a621
 800a5dc:	0800a611 	.word	0x0800a611
 800a5e0:	0800a621 	.word	0x0800a621
 800a5e4:	0800a621 	.word	0x0800a621
 800a5e8:	0800a621 	.word	0x0800a621
 800a5ec:	0800a609 	.word	0x0800a609
 800a5f0:	0800a621 	.word	0x0800a621
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a619 	.word	0x0800a619
 800a600:	2300      	movs	r3, #0
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a606:	e0d8      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a608:	2302      	movs	r3, #2
 800a60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a60e:	e0d4      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a610:	2304      	movs	r3, #4
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a616:	e0d0      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a618:	2308      	movs	r3, #8
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a61e:	e0cc      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a620:	2310      	movs	r3, #16
 800a622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a626:	e0c8      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a5e      	ldr	r2, [pc, #376]	@ (800a7a8 <UART_SetConfig+0x2ec>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d125      	bne.n	800a67e <UART_SetConfig+0x1c2>
 800a632:	4b5b      	ldr	r3, [pc, #364]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a638:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a63c:	2b30      	cmp	r3, #48	@ 0x30
 800a63e:	d016      	beq.n	800a66e <UART_SetConfig+0x1b2>
 800a640:	2b30      	cmp	r3, #48	@ 0x30
 800a642:	d818      	bhi.n	800a676 <UART_SetConfig+0x1ba>
 800a644:	2b20      	cmp	r3, #32
 800a646:	d00a      	beq.n	800a65e <UART_SetConfig+0x1a2>
 800a648:	2b20      	cmp	r3, #32
 800a64a:	d814      	bhi.n	800a676 <UART_SetConfig+0x1ba>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <UART_SetConfig+0x19a>
 800a650:	2b10      	cmp	r3, #16
 800a652:	d008      	beq.n	800a666 <UART_SetConfig+0x1aa>
 800a654:	e00f      	b.n	800a676 <UART_SetConfig+0x1ba>
 800a656:	2300      	movs	r3, #0
 800a658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65c:	e0ad      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a65e:	2302      	movs	r3, #2
 800a660:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a664:	e0a9      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a666:	2304      	movs	r3, #4
 800a668:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66c:	e0a5      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a66e:	2308      	movs	r3, #8
 800a670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a674:	e0a1      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a676:	2310      	movs	r3, #16
 800a678:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67c:	e09d      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a4a      	ldr	r2, [pc, #296]	@ (800a7ac <UART_SetConfig+0x2f0>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d125      	bne.n	800a6d4 <UART_SetConfig+0x218>
 800a688:	4b45      	ldr	r3, [pc, #276]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a68e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a692:	2bc0      	cmp	r3, #192	@ 0xc0
 800a694:	d016      	beq.n	800a6c4 <UART_SetConfig+0x208>
 800a696:	2bc0      	cmp	r3, #192	@ 0xc0
 800a698:	d818      	bhi.n	800a6cc <UART_SetConfig+0x210>
 800a69a:	2b80      	cmp	r3, #128	@ 0x80
 800a69c:	d00a      	beq.n	800a6b4 <UART_SetConfig+0x1f8>
 800a69e:	2b80      	cmp	r3, #128	@ 0x80
 800a6a0:	d814      	bhi.n	800a6cc <UART_SetConfig+0x210>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <UART_SetConfig+0x1f0>
 800a6a6:	2b40      	cmp	r3, #64	@ 0x40
 800a6a8:	d008      	beq.n	800a6bc <UART_SetConfig+0x200>
 800a6aa:	e00f      	b.n	800a6cc <UART_SetConfig+0x210>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b2:	e082      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ba:	e07e      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a6bc:	2304      	movs	r3, #4
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e07a      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a6c4:	2308      	movs	r3, #8
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e076      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a6cc:	2310      	movs	r3, #16
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	e072      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a35      	ldr	r2, [pc, #212]	@ (800a7b0 <UART_SetConfig+0x2f4>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d12a      	bne.n	800a734 <UART_SetConfig+0x278>
 800a6de:	4b30      	ldr	r3, [pc, #192]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6ec:	d01a      	beq.n	800a724 <UART_SetConfig+0x268>
 800a6ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6f2:	d81b      	bhi.n	800a72c <UART_SetConfig+0x270>
 800a6f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6f8:	d00c      	beq.n	800a714 <UART_SetConfig+0x258>
 800a6fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6fe:	d815      	bhi.n	800a72c <UART_SetConfig+0x270>
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <UART_SetConfig+0x250>
 800a704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a708:	d008      	beq.n	800a71c <UART_SetConfig+0x260>
 800a70a:	e00f      	b.n	800a72c <UART_SetConfig+0x270>
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a712:	e052      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a714:	2302      	movs	r3, #2
 800a716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a71a:	e04e      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a71c:	2304      	movs	r3, #4
 800a71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a722:	e04a      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72a:	e046      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a732:	e042      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a17      	ldr	r2, [pc, #92]	@ (800a798 <UART_SetConfig+0x2dc>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d13a      	bne.n	800a7b4 <UART_SetConfig+0x2f8>
 800a73e:	4b18      	ldr	r3, [pc, #96]	@ (800a7a0 <UART_SetConfig+0x2e4>)
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a744:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a748:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a74c:	d01a      	beq.n	800a784 <UART_SetConfig+0x2c8>
 800a74e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a752:	d81b      	bhi.n	800a78c <UART_SetConfig+0x2d0>
 800a754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a758:	d00c      	beq.n	800a774 <UART_SetConfig+0x2b8>
 800a75a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a75e:	d815      	bhi.n	800a78c <UART_SetConfig+0x2d0>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <UART_SetConfig+0x2b0>
 800a764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a768:	d008      	beq.n	800a77c <UART_SetConfig+0x2c0>
 800a76a:	e00f      	b.n	800a78c <UART_SetConfig+0x2d0>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a772:	e022      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a774:	2302      	movs	r3, #2
 800a776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a77a:	e01e      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a77c:	2304      	movs	r3, #4
 800a77e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a782:	e01a      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a784:	2308      	movs	r3, #8
 800a786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78a:	e016      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a78c:	2310      	movs	r3, #16
 800a78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a792:	e012      	b.n	800a7ba <UART_SetConfig+0x2fe>
 800a794:	cfff69f3 	.word	0xcfff69f3
 800a798:	40008000 	.word	0x40008000
 800a79c:	40013800 	.word	0x40013800
 800a7a0:	40021000 	.word	0x40021000
 800a7a4:	40004400 	.word	0x40004400
 800a7a8:	40004800 	.word	0x40004800
 800a7ac:	40004c00 	.word	0x40004c00
 800a7b0:	40005000 	.word	0x40005000
 800a7b4:	2310      	movs	r3, #16
 800a7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4aae      	ldr	r2, [pc, #696]	@ (800aa78 <UART_SetConfig+0x5bc>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	f040 8097 	bne.w	800a8f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d823      	bhi.n	800a816 <UART_SetConfig+0x35a>
 800a7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <UART_SetConfig+0x318>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a817 	.word	0x0800a817
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a817 	.word	0x0800a817
 800a7e4:	0800a807 	.word	0x0800a807
 800a7e8:	0800a817 	.word	0x0800a817
 800a7ec:	0800a817 	.word	0x0800a817
 800a7f0:	0800a817 	.word	0x0800a817
 800a7f4:	0800a80f 	.word	0x0800a80f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7f8:	f7fe feda 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800a7fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7fe:	e010      	b.n	800a822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a800:	4b9e      	ldr	r3, [pc, #632]	@ (800aa7c <UART_SetConfig+0x5c0>)
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a804:	e00d      	b.n	800a822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a806:	f7fe fe65 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 800a80a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a80c:	e009      	b.n	800a822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a80e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a814:	e005      	b.n	800a822 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 8130 	beq.w	800aa8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	4a94      	ldr	r2, [pc, #592]	@ (800aa80 <UART_SetConfig+0x5c4>)
 800a830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a834:	461a      	mov	r2, r3
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	4613      	mov	r3, r2
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	4413      	add	r3, r2
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d305      	bcc.n	800a85a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	429a      	cmp	r2, r3
 800a858:	d903      	bls.n	800a862 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a860:	e113      	b.n	800aa8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	2200      	movs	r2, #0
 800a866:	60bb      	str	r3, [r7, #8]
 800a868:	60fa      	str	r2, [r7, #12]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	4a84      	ldr	r2, [pc, #528]	@ (800aa80 <UART_SetConfig+0x5c4>)
 800a870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a874:	b29b      	uxth	r3, r3
 800a876:	2200      	movs	r2, #0
 800a878:	603b      	str	r3, [r7, #0]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a884:	f7f6 f9b8 	bl	8000bf8 <__aeabi_uldivmod>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4610      	mov	r0, r2
 800a88e:	4619      	mov	r1, r3
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	020b      	lsls	r3, r1, #8
 800a89a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a89e:	0202      	lsls	r2, r0, #8
 800a8a0:	6979      	ldr	r1, [r7, #20]
 800a8a2:	6849      	ldr	r1, [r1, #4]
 800a8a4:	0849      	lsrs	r1, r1, #1
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	eb12 0804 	adds.w	r8, r2, r4
 800a8b0:	eb43 0905 	adc.w	r9, r3, r5
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	469a      	mov	sl, r3
 800a8bc:	4693      	mov	fp, r2
 800a8be:	4652      	mov	r2, sl
 800a8c0:	465b      	mov	r3, fp
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	f7f6 f997 	bl	8000bf8 <__aeabi_uldivmod>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8d8:	d308      	bcc.n	800a8ec <UART_SetConfig+0x430>
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8e0:	d204      	bcs.n	800a8ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6a3a      	ldr	r2, [r7, #32]
 800a8e8:	60da      	str	r2, [r3, #12]
 800a8ea:	e0ce      	b.n	800aa8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8f2:	e0ca      	b.n	800aa8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8fc:	d166      	bne.n	800a9cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a8fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a902:	2b08      	cmp	r3, #8
 800a904:	d827      	bhi.n	800a956 <UART_SetConfig+0x49a>
 800a906:	a201      	add	r2, pc, #4	@ (adr r2, 800a90c <UART_SetConfig+0x450>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a939 	.word	0x0800a939
 800a914:	0800a941 	.word	0x0800a941
 800a918:	0800a957 	.word	0x0800a957
 800a91c:	0800a947 	.word	0x0800a947
 800a920:	0800a957 	.word	0x0800a957
 800a924:	0800a957 	.word	0x0800a957
 800a928:	0800a957 	.word	0x0800a957
 800a92c:	0800a94f 	.word	0x0800a94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a930:	f7fe fe3e 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800a934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a936:	e014      	b.n	800a962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a938:	f7fe fe50 	bl	80095dc <HAL_RCC_GetPCLK2Freq>
 800a93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a93e:	e010      	b.n	800a962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a940:	4b4e      	ldr	r3, [pc, #312]	@ (800aa7c <UART_SetConfig+0x5c0>)
 800a942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a944:	e00d      	b.n	800a962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a946:	f7fe fdc5 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 800a94a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a94c:	e009      	b.n	800a962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a954:	e005      	b.n	800a962 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8090 	beq.w	800aa8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96e:	4a44      	ldr	r2, [pc, #272]	@ (800aa80 <UART_SetConfig+0x5c4>)
 800a970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a974:	461a      	mov	r2, r3
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	fbb3 f3f2 	udiv	r3, r3, r2
 800a97c:	005a      	lsls	r2, r3, #1
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	441a      	add	r2, r3
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	2b0f      	cmp	r3, #15
 800a994:	d916      	bls.n	800a9c4 <UART_SetConfig+0x508>
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a99c:	d212      	bcs.n	800a9c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f023 030f 	bic.w	r3, r3, #15
 800a9a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	8bfb      	ldrh	r3, [r7, #30]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	8bfa      	ldrh	r2, [r7, #30]
 800a9c0:	60da      	str	r2, [r3, #12]
 800a9c2:	e062      	b.n	800aa8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a9ca:	e05e      	b.n	800aa8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d828      	bhi.n	800aa26 <UART_SetConfig+0x56a>
 800a9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a9dc <UART_SetConfig+0x520>)
 800a9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9da:	bf00      	nop
 800a9dc:	0800aa01 	.word	0x0800aa01
 800a9e0:	0800aa09 	.word	0x0800aa09
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	0800aa27 	.word	0x0800aa27
 800a9ec:	0800aa17 	.word	0x0800aa17
 800a9f0:	0800aa27 	.word	0x0800aa27
 800a9f4:	0800aa27 	.word	0x0800aa27
 800a9f8:	0800aa27 	.word	0x0800aa27
 800a9fc:	0800aa1f 	.word	0x0800aa1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa00:	f7fe fdd6 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800aa04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa06:	e014      	b.n	800aa32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa08:	f7fe fde8 	bl	80095dc <HAL_RCC_GetPCLK2Freq>
 800aa0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa0e:	e010      	b.n	800aa32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa10:	4b1a      	ldr	r3, [pc, #104]	@ (800aa7c <UART_SetConfig+0x5c0>)
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa14:	e00d      	b.n	800aa32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa16:	f7fe fd5d 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 800aa1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa1c:	e009      	b.n	800aa32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa24:	e005      	b.n	800aa32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa30:	bf00      	nop
    }

    if (pclk != 0U)
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d028      	beq.n	800aa8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3c:	4a10      	ldr	r2, [pc, #64]	@ (800aa80 <UART_SetConfig+0x5c4>)
 800aa3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa42:	461a      	mov	r2, r3
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	085b      	lsrs	r3, r3, #1
 800aa50:	441a      	add	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b0f      	cmp	r3, #15
 800aa60:	d910      	bls.n	800aa84 <UART_SetConfig+0x5c8>
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa68:	d20c      	bcs.n	800aa84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60da      	str	r2, [r3, #12]
 800aa74:	e009      	b.n	800aa8a <UART_SetConfig+0x5ce>
 800aa76:	bf00      	nop
 800aa78:	40008000 	.word	0x40008000
 800aa7c:	00f42400 	.word	0x00f42400
 800aa80:	0800eeb8 	.word	0x0800eeb8
      }
      else
      {
        ret = HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aaa6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3730      	adds	r7, #48	@ 0x30
 800aaae:	46bd      	mov	sp, r7
 800aab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00a      	beq.n	800aade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab04:	f003 0302 	and.w	r3, r3, #2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01a      	beq.n	800abca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abb2:	d10a      	bne.n	800abca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	605a      	str	r2, [r3, #4]
  }
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b098      	sub	sp, #96	@ 0x60
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac08:	f7f8 f8d6 	bl	8002db8 <HAL_GetTick>
 800ac0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d12f      	bne.n	800ac7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac24:	2200      	movs	r2, #0
 800ac26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f88e 	bl	800ad4c <UART_WaitOnFlagUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d022      	beq.n	800ac7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	e853 3f00 	ldrex	r3, [r3]
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac5c:	e841 2300 	strex	r3, r2, [r1]
 800ac60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1e6      	bne.n	800ac36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e063      	b.n	800ad44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0304 	and.w	r3, r3, #4
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d149      	bne.n	800ad1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac92:	2200      	movs	r2, #0
 800ac94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f857 	bl	800ad4c <UART_WaitOnFlagUntilTimeout>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d03c      	beq.n	800ad1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	623b      	str	r3, [r7, #32]
   return(result);
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e6      	bne.n	800aca4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acf6:	61fa      	str	r2, [r7, #28]
 800acf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	69b9      	ldr	r1, [r7, #24]
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	617b      	str	r3, [r7, #20]
   return(result);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e5      	bne.n	800acd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e012      	b.n	800ad44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3758      	adds	r7, #88	@ 0x58
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad5c:	e04f      	b.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad64:	d04b      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad66:	f7f8 f827 	bl	8002db8 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d302      	bcc.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e04e      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d037      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b80      	cmp	r3, #128	@ 0x80
 800ad92:	d034      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b40      	cmp	r3, #64	@ 0x40
 800ad98:	d031      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d110      	bne.n	800adca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2208      	movs	r2, #8
 800adae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f838 	bl	800ae26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2208      	movs	r2, #8
 800adba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e029      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800add8:	d111      	bne.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ade2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f81e 	bl	800ae26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e00f      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69da      	ldr	r2, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4013      	ands	r3, r2
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	2300      	movne	r3, #0
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d0a0      	beq.n	800ad5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b095      	sub	sp, #84	@ 0x54
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae36:	e853 3f00 	ldrex	r3, [r3]
 800ae3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e6      	bne.n	800ae2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3308      	adds	r3, #8
 800ae66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3308      	adds	r3, #8
 800ae82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e3      	bne.n	800ae60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d118      	bne.n	800aed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f023 0310 	bic.w	r3, r3, #16
 800aeb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	6979      	ldr	r1, [r7, #20]
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	613b      	str	r3, [r7, #16]
   return(result);
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e6      	bne.n	800aea0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aee6:	bf00      	nop
 800aee8:	3754      	adds	r7, #84	@ 0x54
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b085      	sub	sp, #20
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_UARTEx_DisableFifoMode+0x16>
 800af04:	2302      	movs	r3, #2
 800af06:	e027      	b.n	800af58 <HAL_UARTEx_DisableFifoMode+0x66>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2224      	movs	r2, #36	@ 0x24
 800af14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f022 0201 	bic.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2220      	movs	r2, #32
 800af4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af74:	2b01      	cmp	r3, #1
 800af76:	d101      	bne.n	800af7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af78:	2302      	movs	r3, #2
 800af7a:	e02d      	b.n	800afd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2224      	movs	r2, #36	@ 0x24
 800af88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0201 	bic.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f84f 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e02d      	b.n	800b054 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2224      	movs	r2, #36	@ 0x24
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0201 	bic.w	r2, r2, #1
 800b01e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f811 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2220      	movs	r2, #32
 800b046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b07c:	e031      	b.n	800b0e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b07e:	2308      	movs	r3, #8
 800b080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b082:	2308      	movs	r3, #8
 800b084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	0e5b      	lsrs	r3, r3, #25
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 0307 	and.w	r3, r3, #7
 800b094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	0f5b      	lsrs	r3, r3, #29
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	7b3a      	ldrb	r2, [r7, #12]
 800b0aa:	4911      	ldr	r1, [pc, #68]	@ (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ac:	5c8a      	ldrb	r2, [r1, r2]
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0b2:	7b3a      	ldrb	r2, [r7, #12]
 800b0b4:	490f      	ldr	r1, [pc, #60]	@ (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	7b7a      	ldrb	r2, [r7, #13]
 800b0c8:	4909      	ldr	r1, [pc, #36]	@ (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ca:	5c8a      	ldrb	r2, [r1, r2]
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0d0:	7b7a      	ldrb	r2, [r7, #13]
 800b0d2:	4908      	ldr	r1, [pc, #32]	@ (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	0800eed0 	.word	0x0800eed0
 800b0f4:	0800eed8 	.word	0x0800eed8

0800b0f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b100:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b104:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	b29b      	uxth	r3, r3
 800b112:	43db      	mvns	r3, r3
 800b114:	b29b      	uxth	r3, r3
 800b116:	4013      	ands	r3, r2
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b12e:	b480      	push	{r7}
 800b130:	b085      	sub	sp, #20
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	1d3b      	adds	r3, r7, #4
 800b138:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2201      	movs	r2, #1
 800b140:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <_ZN11adc_manager8adc_initEPh>:
 * Also starts internal ADC calibration and begins temperature ADC readings.
 *
 * @param filters_length Pointer to an array specifying the filter window length per channel.
 * @return HAL_OK if successful.
 */
HAL_StatusTypeDef adc_manager::adc_init(uint8_t* filters_length) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(adc_cap_, (uint32_t*)(&adc1_samples[0][0][0]), 64);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2240      	movs	r2, #64	@ 0x40
 800b17c:	4935      	ldr	r1, [pc, #212]	@ (800b254 <_ZN11adc_manager8adc_initEPh+0xe8>)
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f8 fb4e 	bl	8003820 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(adc_bat_, (uint32_t*)(&adc2_samples[0][0][0]), 96);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	2260      	movs	r2, #96	@ 0x60
 800b18a:	4933      	ldr	r1, [pc, #204]	@ (800b258 <_ZN11adc_manager8adc_initEPh+0xec>)
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7f8 fb47 	bl	8003820 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(adc_temp_, ADC_SINGLE_ENDED);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	217f      	movs	r1, #127	@ 0x7f
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f9 fcb9 	bl	8004b10 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(adc_temp_);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7f8 fa58 	bl	8003658 <HAL_ADC_Start>

	for (int i = 0; i < 5; ++i) {
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	e046      	b.n	800b23c <_ZN11adc_manager8adc_initEPh+0xd0>
		filters[i].sum = 0;
 800b1ae:	4a2b      	ldr	r2, [pc, #172]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	218c      	movs	r1, #140	@ 0x8c
 800b1b4:	fb01 f303 	mul.w	r3, r1, r3
 800b1b8:	4413      	add	r3, r2
 800b1ba:	3384      	adds	r3, #132	@ 0x84
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
		filters[i].index = 0;
 800b1c0:	4a26      	ldr	r2, [pc, #152]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	218c      	movs	r1, #140	@ 0x8c
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3381      	adds	r3, #129	@ 0x81
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	701a      	strb	r2, [r3, #0]
		filters[i].full = 0;
 800b1d2:	4a22      	ldr	r2, [pc, #136]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	218c      	movs	r1, #140	@ 0x8c
 800b1d8:	fb01 f303 	mul.w	r3, r1, r3
 800b1dc:	4413      	add	r3, r2
 800b1de:	3388      	adds	r3, #136	@ 0x88
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
		filters[i].length = filters_length[i];
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	7818      	ldrb	r0, [r3, #0]
 800b1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	218c      	movs	r1, #140	@ 0x8c
 800b1f2:	fb01 f303 	mul.w	r3, r1, r3
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3380      	adds	r3, #128	@ 0x80
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	701a      	strb	r2, [r3, #0]

		for (int j = 0; j < filters[i].length; j++) {
 800b1fe:	2300      	movs	r3, #0
 800b200:	60bb      	str	r3, [r7, #8]
 800b202:	e00c      	b.n	800b21e <_ZN11adc_manager8adc_initEPh+0xb2>
			filters[i].window_filter[j] = 0;  // Initialize filter window to zero
 800b204:	4915      	ldr	r1, [pc, #84]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2246      	movs	r2, #70	@ 0x46
 800b20a:	fb03 f202 	mul.w	r2, r3, r2
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	4413      	add	r3, r2
 800b212:	2200      	movs	r2, #0
 800b214:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < filters[i].length; j++) {
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3301      	adds	r3, #1
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	4a0f      	ldr	r2, [pc, #60]	@ (800b25c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	218c      	movs	r1, #140	@ 0x8c
 800b224:	fb01 f303 	mul.w	r3, r1, r3
 800b228:	4413      	add	r3, r2
 800b22a:	3380      	adds	r3, #128	@ 0x80
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	4293      	cmp	r3, r2
 800b234:	dbe6      	blt.n	800b204 <_ZN11adc_manager8adc_initEPh+0x98>
	for (int i = 0; i < 5; ++i) {
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3301      	adds	r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b04      	cmp	r3, #4
 800b240:	ddb5      	ble.n	800b1ae <_ZN11adc_manager8adc_initEPh+0x42>
		}
	}
	set_gains_offsets();
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f80c 	bl	800b260 <_ZN11adc_manager17set_gains_offsetsEv>
	return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000cf0 	.word	0x20000cf0
 800b258:	20000d70 	.word	0x20000d70
 800b25c:	20000e30 	.word	0x20000e30

0800b260 <_ZN11adc_manager17set_gains_offsetsEv>:
/**
 * @brief Sets per-channel gain and offset values for ADC compensation.
 *
 * These values are used to convert raw ADC readings into physical quantities (volts, amps).
 */
void adc_manager::set_gains_offsets() {
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
 800b268:	4b11      	ldr	r3, [pc, #68]	@ (800b2b0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b26a:	4a12      	ldr	r2, [pc, #72]	@ (800b2b4 <_ZN11adc_manager17set_gains_offsetsEv+0x54>)
 800b26c:	605a      	str	r2, [r3, #4]
	adc_offsets[adc_names::V_cap] = VCAP_OFFSET;
 800b26e:	4b12      	ldr	r3, [pc, #72]	@ (800b2b8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b270:	4a12      	ldr	r2, [pc, #72]	@ (800b2bc <_ZN11adc_manager17set_gains_offsetsEv+0x5c>)
 800b272:	605a      	str	r2, [r3, #4]

	adc_gains[adc_names::I_cap] = ICAP_GAIN;
 800b274:	4b0e      	ldr	r3, [pc, #56]	@ (800b2b0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b276:	4a12      	ldr	r2, [pc, #72]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b278:	601a      	str	r2, [r3, #0]
	adc_offsets[adc_names::I_cap] = ICAP_OFFSET;
 800b27a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b27c:	4a11      	ldr	r2, [pc, #68]	@ (800b2c4 <_ZN11adc_manager17set_gains_offsetsEv+0x64>)
 800b27e:	601a      	str	r2, [r3, #0]

	adc_gains[adc_names::V_bat] = VBAT_GAIN;
 800b280:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b282:	4a0c      	ldr	r2, [pc, #48]	@ (800b2b4 <_ZN11adc_manager17set_gains_offsetsEv+0x54>)
 800b284:	609a      	str	r2, [r3, #8]
	adc_offsets[adc_names::V_bat] = VBAT_OFFSET;
 800b286:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b288:	4a0f      	ldr	r2, [pc, #60]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x68>)
 800b28a:	609a      	str	r2, [r3, #8]

	adc_gains[adc_names::I_chassis] = ISOURCE_GAIN;
 800b28c:	4b08      	ldr	r3, [pc, #32]	@ (800b2b0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b28e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b290:	60da      	str	r2, [r3, #12]
	adc_offsets[adc_names::I_chassis] = ISOURCE_OFFSET;
 800b292:	4b09      	ldr	r3, [pc, #36]	@ (800b2b8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b294:	4a0d      	ldr	r2, [pc, #52]	@ (800b2cc <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 800b296:	60da      	str	r2, [r3, #12]

	adc_gains[adc_names::I_bat] = IBAT_GAIN;
 800b298:	4b05      	ldr	r3, [pc, #20]	@ (800b2b0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b29a:	4a09      	ldr	r2, [pc, #36]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b29c:	611a      	str	r2, [r3, #16]
	adc_offsets[adc_names::I_bat] = IBAT_OFFSET;
 800b29e:	4b06      	ldr	r3, [pc, #24]	@ (800b2b8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b2cc <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 800b2a2:	611a      	str	r2, [r3, #16]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	200010f8 	.word	0x200010f8
 800b2b4:	3c113c47 	.word	0x3c113c47
 800b2b8:	2000110c 	.word	0x2000110c
 800b2bc:	3f08d2ef 	.word	0x3f08d2ef
 800b2c0:	bb840840 	.word	0xbb840840
 800b2c4:	40ff4be4 	.word	0x40ff4be4
 800b2c8:	3f162fba 	.word	0x3f162fba
 800b2cc:	41004afc 	.word	0x41004afc

0800b2d0 <_Z11initCANCommP19FDCAN_HandleTypeDef>:
 * This function sets up the CAN ID filters, enables relevant interrupts,
 * configures delay compensation, and starts the FDCAN interface.
 *
 * @param fdcan_ Pointer to the FDCAN handle to initialize.
 */
void initCANComm(FDCAN_HandleTypeDef* fdcan_) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	@ 0x28
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	6078      	str	r0, [r7, #4]
	MX_FDCAN3_Init();
 800b2d8:	f7f6 f9aa 	bl	8001630 <MX_FDCAN3_Init>

	FDCAN_FilterTypeDef can_filter;
	can_filter.IdType = FDCAN_STANDARD_ID;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60bb      	str	r3, [r7, #8]
	can_filter.FilterIndex = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
	can_filter.FilterType = FDCAN_FILTER_DUAL;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	613b      	str	r3, [r7, #16]
	can_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	617b      	str	r3, [r7, #20]
	can_filter.FilterID1 = CAN_NODE_ID;
 800b2ec:	2367      	movs	r3, #103	@ 0x67
 800b2ee:	61bb      	str	r3, [r7, #24]
	can_filter.FilterID2 = 0x7FF;
 800b2f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b2f4:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7fa fb71 	bl	80059e4 <HAL_FDCAN_ConfigFilter>

	can_filter.FilterIndex = 1;
 800b302:	2301      	movs	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
	can_filter.FilterID1 = 0x7FF;
 800b306:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b30a:	61bb      	str	r3, [r7, #24]
	can_filter.FilterID2 = 0x7FF;
 800b30c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b310:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800b312:	f107 0308 	add.w	r3, r7, #8
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7fa fb63 	bl	80059e4 <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_ConfigGlobalFilter(fdcan_, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	2202      	movs	r2, #2
 800b326:	2102      	movs	r1, #2
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7fa fbb5 	bl	8005a98 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800b32e:	2200      	movs	r2, #0
 800b330:	2101      	movs	r1, #1
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fa fd98 	bl	8005e68 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_BUS_OFF, 0);
 800b338:	2200      	movs	r2, #0
 800b33a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7fa fd92 	bl	8005e68 <HAL_FDCAN_ActivateNotification>

	HAL_FDCAN_ConfigTxDelayCompensation(fdcan_, fdcan_->Init.DataPrescaler * fdcan_->Init.DataTimeSeg1, 0);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
 800b350:	2200      	movs	r2, #0
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7fa fbd0 	bl	8005afa <HAL_FDCAN_ConfigTxDelayCompensation>
	HAL_FDCAN_EnableTxDelayCompensation(fdcan_);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7fa fbef 	bl	8005b3e <HAL_FDCAN_EnableTxDelayCompensation>
	HAL_FDCAN_Start(fdcan_);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7fa fc0d 	bl	8005b80 <HAL_FDCAN_Start>
}
 800b366:	bf00      	nop
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <_ZN7CANComm14txHeaderConfigEv>:
/**
 * @brief Configures the CAN transmit header for sending power/energy feedback.
 *
 * Sets data frame format, DLC size, bitrate switch, and device ID.
 */
void CANComm::txHeaderConfig() {
 800b36e:	b480      	push	{r7}
 800b370:	b083      	sub	sp, #12
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	639a      	str	r2, [r3, #56]	@ 0x38
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	641a      	str	r2, [r3, #64]	@ 0x40
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b388:	645a      	str	r2, [r3, #68]	@ 0x44
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	649a      	str	r2, [r3, #72]	@ 0x48
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	64da      	str	r2, [r3, #76]	@ 0x4c
	TxHeader.MessageMarker = 0;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	651a      	str	r2, [r3, #80]	@ 0x50
	TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2206      	movs	r2, #6
 800b3a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	635a      	str	r2, [r3, #52]	@ 0x34
	TxHeader.Identifier = DEVC_NODE_ID;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2277      	movs	r2, #119	@ 0x77
 800b3ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
	...

0800b3bc <_ZN7CANComm11sendMessageEv>:
 * @brief Sends a CAN message containing supercap status.
 *
 * Computes instantaneous chassis power, normalizes capacitor voltage into an 8-bit energy buffer estimate,
 * and transmits it using FDCAN.
 */
void CANComm::sendMessage() {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	txMsg.chassis_power = chassis_voltage * battery_current;
 800b3c4:	4b2f      	ldr	r3, [pc, #188]	@ (800b484 <_ZN7CANComm11sendMessageEv+0xc8>)
 800b3c6:	ed93 7a00 	vldr	s14, [r3]
 800b3ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b488 <_ZN7CANComm11sendMessageEv+0xcc>)
 800b3cc:	edd3 7a00 	vldr	s15, [r3]
 800b3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	// Compute normalized energy percentage [0.0 - 1.0]
	float cap_buffer = 0.0f;
 800b3da:	f04f 0300 	mov.w	r3, #0
 800b3de:	60fb      	str	r3, [r7, #12]
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 800b3e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b48c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b3e2:	edd3 7a00 	vldr	s15, [r3]
 800b3e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800b3ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f2:	dd1a      	ble.n	800b42a <_ZN7CANComm11sendMessageEv+0x6e>
		if (cap_voltage >= SUPERCAP_MAX_VOLTAGE)
 800b3f4:	4b25      	ldr	r3, [pc, #148]	@ (800b48c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b3f6:	edd3 7a00 	vldr	s15, [r3]
 800b3fa:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800b490 <_ZN7CANComm11sendMessageEv+0xd4>
 800b3fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b406:	db03      	blt.n	800b410 <_ZN7CANComm11sendMessageEv+0x54>
			cap_buffer = 1.0f;
 800b408:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	e00c      	b.n	800b42a <_ZN7CANComm11sendMessageEv+0x6e>
		else
			cap_buffer = (cap_voltage - SUPERCAP_MIN_VOLTAGE) / (SUPERCAP_MAX_VOLTAGE - SUPERCAP_MIN_VOLTAGE);
 800b410:	4b1e      	ldr	r3, [pc, #120]	@ (800b48c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b412:	edd3 7a00 	vldr	s15, [r3]
 800b416:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800b41a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b41e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800b494 <_ZN7CANComm11sendMessageEv+0xd8>
 800b422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b426:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	txMsg.cap_energy = cap_buffer > 1.0f ? 255 : cap_buffer * 255;
 800b42a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b42e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b432:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43a:	dd01      	ble.n	800b440 <_ZN7CANComm11sendMessageEv+0x84>
 800b43c:	22ff      	movs	r2, #255	@ 0xff
 800b43e:	e00b      	b.n	800b458 <_ZN7CANComm11sendMessageEv+0x9c>
 800b440:	edd7 7a03 	vldr	s15, [r7, #12]
 800b444:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b498 <_ZN7CANComm11sendMessageEv+0xdc>
 800b448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b44c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b450:	edc7 7a00 	vstr	s15, [r7]
 800b454:	783b      	ldrb	r3, [r7, #0]
 800b456:	b2da      	uxtb	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	txMsg.error = 0;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

	HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, (uint8_t *)&txMsg);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3354      	adds	r3, #84	@ 0x54
 800b474:	461a      	mov	r2, r3
 800b476:	f7fa fbab 	bl	8005bd0 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800b47a:	bf00      	nop
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	20001138 	.word	0x20001138
 800b488:	20001140 	.word	0x20001140
 800b48c:	20001134 	.word	0x20001134
 800b490:	41cc0000 	.word	0x41cc0000
 800b494:	41b40000 	.word	0x41b40000
 800b498:	437f0000 	.word	0x437f0000

0800b49c <HAL_FDCAN_RxFifo0Callback>:
 *  - Updating the power limit and energy buffer reference
 *
 * @param hfdcan FDCAN peripheral instance
 * @param RxFifo0ITs Interrupt source bitmask
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	@ 0x30
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan3 && RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a2a      	ldr	r2, [pc, #168]	@ (800b554 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d14d      	bne.n	800b54a <HAL_FDCAN_RxFifo0Callback+0xae>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d14a      	bne.n	800b54a <HAL_FDCAN_RxFifo0Callback+0xae>
		FDCAN_RxHeaderTypeDef FDCAN_RxHeader;
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN_RxHeader, (uint8_t *)&rxMsg);
 800b4b4:	f107 0208 	add.w	r2, r7, #8
 800b4b8:	4b27      	ldr	r3, [pc, #156]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b4ba:	2140      	movs	r1, #64	@ 0x40
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7fa fbcb 	bl	8005c58 <HAL_FDCAN_GetRxMessage>

		if (FDCAN_RxHeader.Identifier == CAN_NODE_ID) {
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b67      	cmp	r3, #103	@ 0x67
 800b4c6:	d140      	bne.n	800b54a <HAL_FDCAN_RxFifo0Callback+0xae>
			static bool last_enable = true;

			if (rxMsg.reset)
 800b4c8:	4b23      	ldr	r3, [pc, #140]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <HAL_FDCAN_RxFifo0Callback+0x38>
				softwareReset();
 800b4d0:	f000 fb70 	bl	800bbb4 <_Z13softwareResetv>

			if (!rxMsg.enable_module) {
 800b4d4:	4b20      	ldr	r3, [pc, #128]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d106      	bne.n	800b4ea <HAL_FDCAN_RxFifo0Callback+0x4e>
				enable_supercap = false;
 800b4dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b55c <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
				supercap_controller.stop_loop();
 800b4e2:	481f      	ldr	r0, [pc, #124]	@ (800b560 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 800b4e4:	f000 fb4a 	bl	800bb7c <_ZN24supercap_control_manager9stop_loopEv>
 800b4e8:	e00c      	b.n	800b504 <HAL_FDCAN_RxFifo0Callback+0x68>
			}
			else if (!last_enable) {
 800b4ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b564 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	f083 0301 	eor.w	r3, r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <HAL_FDCAN_RxFifo0Callback+0x68>
				enable_supercap = true;
 800b4f8:	4b18      	ldr	r3, [pc, #96]	@ (800b55c <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	701a      	strb	r2, [r3, #0]
				supercap_controller.start_loop();
 800b4fe:	4818      	ldr	r0, [pc, #96]	@ (800b560 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 800b500:	f000 fae8 	bl	800bad4 <_ZN24supercap_control_manager10start_loopEv>
			}
			last_enable = rxMsg.enable_module;
 800b504:	4b14      	ldr	r3, [pc, #80]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bf14      	ite	ne
 800b50c:	2301      	movne	r3, #1
 800b50e:	2300      	moveq	r3, #0
 800b510:	b2da      	uxtb	r2, r3
 800b512:	4b14      	ldr	r3, [pc, #80]	@ (800b564 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b514:	701a      	strb	r2, [r3, #0]

			max_chassis_power = rxMsg.pow_limit;
 800b516:	4b10      	ldr	r3, [pc, #64]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b518:	789a      	ldrb	r2, [r3, #2]
 800b51a:	4b13      	ldr	r3, [pc, #76]	@ (800b568 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800b51c:	701a      	strb	r2, [r3, #0]
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 800b51e:	4b12      	ldr	r3, [pc, #72]	@ (800b568 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	eeb0 0a67 	vmov.f32	s0, s15
 800b52e:	480c      	ldr	r0, [pc, #48]	@ (800b560 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 800b530:	f000 fc85 	bl	800be3e <_ZN24supercap_control_manager21set_ref_chassis_powerEf>
			energy_buff = rxMsg.energy_buffer;
 800b534:	4b08      	ldr	r3, [pc, #32]	@ (800b558 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800b536:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	4b09      	ldr	r3, [pc, #36]	@ (800b56c <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800b546:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 800b54a:	bf00      	nop
 800b54c:	3730      	adds	r7, #48	@ 0x30
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	200004a8 	.word	0x200004a8
 800b558:	20001120 	.word	0x20001120
 800b55c:	2000112c 	.word	0x2000112c
 800b560:	2000060c 	.word	0x2000060c
 800b564:	20000030 	.word	0x20000030
 800b568:	20000031 	.word	0x20000031
 800b56c:	20001128 	.word	0x20001128

0800b570 <HAL_FDCAN_ErrorStatusCallback>:
 * Resets the CAN peripheral and reinitializes the communication settings.
 *
 * @param hfdcan Pointer to the affected CAN instance
 * @param ErrorStatusITs Interrupt flags (unused)
 */
void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	MX_FDCAN3_Init();        // Reset CAN peripheral
 800b57a:	f7f6 f859 	bl	8001630 <MX_FDCAN3_Init>
	initCANComm(hfdcan);     // Reapply all settings and filters
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff fea6 	bl	800b2d0 <_Z11initCANCommP19FDCAN_HandleTypeDef>
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <__NVIC_SystemReset>:
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b590:	f3bf 8f4f 	dsb	sy
}
 800b594:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b596:	4b06      	ldr	r3, [pc, #24]	@ (800b5b0 <__NVIC_SystemReset+0x24>)
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b59e:	4904      	ldr	r1, [pc, #16]	@ (800b5b0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b5a0:	4b04      	ldr	r3, [pc, #16]	@ (800b5b4 <__NVIC_SystemReset+0x28>)
 800b5a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b5a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b5a6:	f3bf 8f4f 	dsb	sy
}
 800b5aa:	bf00      	nop
    __NOP();
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <__NVIC_SystemReset+0x20>
 800b5b0:	e000ed00 	.word	0xe000ed00
 800b5b4:	05fa0004 	.word	0x05fa0004

0800b5b8 <_ZN24supercap_control_manager9init_loopEv>:
 * power, current, and voltage regulation of the supercapacitor buck-boost control system.
 * It prepares the system to safely start PWM generation and transitions into active loop mode.
 *
 * @return HAL_OK if initialization was successful.
 */
HAL_StatusTypeDef supercap_control_manager::init_loop(){
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	setup_pid_controllers();
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f825 	bl	800b610 <_ZN24supercap_control_manager21setup_pid_controllersEv>
	return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <_ZL17update_pid_maxpowv>:
 *
 * This function is used internally to update the maximum allowed output and integration range
 * for the chassis power PID controller. It ensures that the controller stays within
 * competition-legal limits by capping both the integral term and final output.
 */
static inline void update_pid_maxpow(){
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
	pid[0].IntegMax = max_chassis_power - 3;
 800b5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b608 <_ZL17update_pid_maxpowv+0x38>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	3b03      	subs	r3, #3
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b60c <_ZL17update_pid_maxpowv+0x3c>)
 800b5e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid[0].OutputMax = max_chassis_power - 3;
 800b5e8:	4b07      	ldr	r3, [pc, #28]	@ (800b608 <_ZL17update_pid_maxpowv+0x38>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	3b03      	subs	r3, #3
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5f6:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <_ZL17update_pid_maxpowv+0x3c>)
 800b5f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	20000031 	.word	0x20000031
 800b60c:	20001154 	.word	0x20001154

0800b610 <_ZN24supercap_control_manager21setup_pid_controllersEv>:
 * precomputed based on real-time readings to avoid unstable startup behavior.
 *
 * If `CALIBRATION_MODE` is disabled, this also starts the PWM gates using the computed
 * initial duty ratio and marks the system as initialized.
 */
void supercap_control_manager::setup_pid_controllers(){
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	// Battery power PID
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 800b618:	4b77      	ldr	r3, [pc, #476]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b61a:	4a78      	ldr	r2, [pc, #480]	@ (800b7fc <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1ec>)
 800b61c:	619a      	str	r2, [r3, #24]
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
 800b61e:	4b76      	ldr	r3, [pc, #472]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b620:	4a77      	ldr	r2, [pc, #476]	@ (800b800 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f0>)
 800b622:	61da      	str	r2, [r3, #28]
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
 800b624:	4b74      	ldr	r3, [pc, #464]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b626:	4a77      	ldr	r2, [pc, #476]	@ (800b804 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b628:	621a      	str	r2, [r3, #32]
	pid[0].IntegMax = max_chassis_power - 3;
 800b62a:	4b77      	ldr	r3, [pc, #476]	@ (800b808 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f8>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	3b03      	subs	r3, #3
 800b630:	ee07 3a90 	vmov	s15, r3
 800b634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b638:	4b6f      	ldr	r3, [pc, #444]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b63a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid[0].OutputMax = max_chassis_power - 3;
 800b63e:	4b72      	ldr	r3, [pc, #456]	@ (800b808 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f8>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	3b03      	subs	r3, #3
 800b644:	ee07 3a90 	vmov	s15, r3
 800b648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b64c:	4b6a      	ldr	r3, [pc, #424]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b64e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	pid[0].IntegMin = P_BATTERY_MIN_OUTPUT;
 800b652:	4b69      	ldr	r3, [pc, #420]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b654:	4a6d      	ldr	r2, [pc, #436]	@ (800b80c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1fc>)
 800b656:	629a      	str	r2, [r3, #40]	@ 0x28
	pid[0].OutputMin = P_BATTERY_MIN_OUTPUT;
 800b658:	4b67      	ldr	r3, [pc, #412]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b65a:	4a6c      	ldr	r2, [pc, #432]	@ (800b80c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1fc>)
 800b65c:	631a      	str	r2, [r3, #48]	@ 0x30

	// Supercap current PID
	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
 800b65e:	4b66      	ldr	r3, [pc, #408]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b660:	4a6b      	ldr	r2, [pc, #428]	@ (800b810 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x200>)
 800b662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
 800b666:	4b64      	ldr	r3, [pc, #400]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b668:	4a6a      	ldr	r2, [pc, #424]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x204>)
 800b66a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	pid[2].ArmPID_Instance.Kd = I_SUPERCAP_KD;
 800b66e:	4b62      	ldr	r3, [pc, #392]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b670:	f04f 0200 	mov.w	r2, #0
 800b674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	pid[2].IntegMax = I_SUPERCAP_INTEG_MAX;
 800b678:	4b5f      	ldr	r3, [pc, #380]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b67a:	4a67      	ldr	r2, [pc, #412]	@ (800b818 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x208>)
 800b67c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	pid[2].IntegMin = I_SUPERCAP_INTEG_MIN;
 800b680:	4b5d      	ldr	r3, [pc, #372]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b682:	4a66      	ldr	r2, [pc, #408]	@ (800b81c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	pid[2].OutputMax = I_SUPERCAP_MAX_OUTPUT;
 800b688:	4b5b      	ldr	r3, [pc, #364]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b68a:	4a63      	ldr	r2, [pc, #396]	@ (800b818 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x208>)
 800b68c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pid[2].OutputMin = I_SUPERCAP_MIN_OUTPUT;
 800b690:	4b59      	ldr	r3, [pc, #356]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b692:	4a62      	ldr	r2, [pc, #392]	@ (800b81c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b694:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// Supercap over-voltage limit PID
	pid[3].ArmPID_Instance.Kp = V_SUPERCAPMAX_KP;
 800b698:	4b57      	ldr	r3, [pc, #348]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b69a:	4a5a      	ldr	r2, [pc, #360]	@ (800b804 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b69c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	pid[3].ArmPID_Instance.Ki = V_SUPERCAPMAX_KI;
 800b6a0:	4b55      	ldr	r3, [pc, #340]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6a2:	4a5f      	ldr	r2, [pc, #380]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x210>)
 800b6a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	pid[3].ArmPID_Instance.Kd = V_SUPERCAPMAX_KD;
 800b6a8:	4b53      	ldr	r3, [pc, #332]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6aa:	4a56      	ldr	r2, [pc, #344]	@ (800b804 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b6ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	pid[3].IntegMax = V_SUPERCAPMAX_INTEG_MAX;
 800b6b0:	4b51      	ldr	r3, [pc, #324]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6b2:	4a5c      	ldr	r2, [pc, #368]	@ (800b824 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x214>)
 800b6b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	pid[3].IntegMin = V_SUPERCAPMAX_INTEG_MIN;
 800b6b8:	4b4f      	ldr	r3, [pc, #316]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ba:	4a5b      	ldr	r2, [pc, #364]	@ (800b828 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x218>)
 800b6bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	pid[3].OutputMax = V_SUPERCAPMAX_MAX_OUTPUT;
 800b6c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6c2:	4a58      	ldr	r2, [pc, #352]	@ (800b824 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x214>)
 800b6c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	pid[3].OutputMin = V_SUPERCAPMAX_MIN_OUTPUT;
 800b6c8:	4b4b      	ldr	r3, [pc, #300]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ca:	4a57      	ldr	r2, [pc, #348]	@ (800b828 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x218>)
 800b6cc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

	// Supercap under-voltage limit PID
	pid[4].ArmPID_Instance.Kp = V_SUPERCAPMIN_KP;
 800b6d0:	4b49      	ldr	r3, [pc, #292]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6d2:	4a4c      	ldr	r2, [pc, #304]	@ (800b804 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b6d4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	pid[4].ArmPID_Instance.Ki = V_SUPERCAPMIN_KI;
 800b6d8:	4b47      	ldr	r3, [pc, #284]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6da:	4a51      	ldr	r2, [pc, #324]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x210>)
 800b6dc:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	pid[4].ArmPID_Instance.Kd = V_SUPERCAPMIN_KD;
 800b6e0:	4b45      	ldr	r3, [pc, #276]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6e2:	f04f 0200 	mov.w	r2, #0
 800b6e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	pid[4].IntegMax = V_SUPERCAPMIN_INTEG_MAX;
 800b6ea:	4b43      	ldr	r3, [pc, #268]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ec:	4a4f      	ldr	r2, [pc, #316]	@ (800b82c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x21c>)
 800b6ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	pid[4].IntegMin = V_SUPERCAPMIN_INTEG_MIN;
 800b6f2:	4b41      	ldr	r3, [pc, #260]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6f4:	4a49      	ldr	r2, [pc, #292]	@ (800b81c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b6f6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	pid[4].OutputMax = V_SUPERCAPMIN_MAX_OUTPUT;
 800b6fa:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6fc:	4a4b      	ldr	r2, [pc, #300]	@ (800b82c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x21c>)
 800b6fe:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	pid[4].OutputMin = V_SUPERCAPMIN_MIN_OUTPUT;
 800b702:	4b3d      	ldr	r3, [pc, #244]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b704:	4a45      	ldr	r2, [pc, #276]	@ (800b81c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b706:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	// Initialize the PID controllers with CMSIS-DSP
	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 800b70a:	2101      	movs	r1, #1
 800b70c:	483a      	ldr	r0, [pc, #232]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b70e:	f000 ff17 	bl	800c540 <arm_pid_init_f32>
	pid[0].ArmPID_Instance.state[2] = pid[0].IntegMax;
 800b712:	4b39      	ldr	r3, [pc, #228]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b716:	4a38      	ldr	r2, [pc, #224]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b718:	6153      	str	r3, [r2, #20]

	arm_pid_init_f32(&(pid[2].ArmPID_Instance), 1);
 800b71a:	2101      	movs	r1, #1
 800b71c:	4844      	ldr	r0, [pc, #272]	@ (800b830 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x220>)
 800b71e:	f000 ff0f 	bl	800c540 <arm_pid_init_f32>

	// Estimate initial duty cycle using live voltage readings to avoid unsafe startup
	HAL_Delay(100);
 800b722:	2064      	movs	r0, #100	@ 0x64
 800b724:	f7f7 fb54 	bl	8002dd0 <HAL_Delay>
	float initDutyRatio = 15.0;
 800b728:	4b42      	ldr	r3, [pc, #264]	@ (800b834 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x224>)
 800b72a:	617b      	str	r3, [r7, #20]
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 800b72c:	e02b      	b.n	800b786 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x176>
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);//NOT TEMPERATURE IF YOU WERE WONDERING
 800b72e:	4b42      	ldr	r3, [pc, #264]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x228>)
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	ee07 3a90 	vmov	s15, r3
 800b736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b73a:	4b40      	ldr	r3, [pc, #256]	@ (800b83c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x22c>)
 800b73c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b740:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b744:	4b3e      	ldr	r3, [pc, #248]	@ (800b840 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x230>)
 800b746:	edd3 7a01 	vldr	s15, [r3, #4]
 800b74a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b74e:	edc7 7a03 	vstr	s15, [r7, #12]
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);//NOT TEMPERATURE IF YOU WERE WONDERING
 800b752:	4b39      	ldr	r3, [pc, #228]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x228>)
 800b754:	889b      	ldrh	r3, [r3, #4]
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b75e:	4b37      	ldr	r3, [pc, #220]	@ (800b83c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x22c>)
 800b760:	edd3 7a02 	vldr	s15, [r3, #8]
 800b764:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b768:	4b35      	ldr	r3, [pc, #212]	@ (800b840 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x230>)
 800b76a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b76e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b772:	edc7 7a02 	vstr	s15, [r7, #8]
		initDutyRatio = cap_temp / bat_temp;
 800b776:	edd7 6a03 	vldr	s13, [r7, #12]
 800b77a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b782:	edc7 7a05 	vstr	s15, [r7, #20]
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 800b786:	edd7 7a05 	vldr	s15, [r7, #20]
 800b78a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800b78e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b796:	daca      	bge.n	800b72e <_ZN24supercap_control_manager21setup_pid_controllersEv+0x11e>
 800b798:	edd7 7a05 	vldr	s15, [r7, #20]
 800b79c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a4:	d9c3      	bls.n	800b72e <_ZN24supercap_control_manager21setup_pid_controllersEv+0x11e>
	}
	pid[2].ArmPID_Instance.state[2] = initDutyRatio;
 800b7a6:	4a14      	ldr	r2, [pc, #80]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	67d3      	str	r3, [r2, #124]	@ 0x7c

	// Voltage clamps
	arm_pid_init_f32(&(pid[3].ArmPID_Instance), 1);
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	4825      	ldr	r0, [pc, #148]	@ (800b844 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x234>)
 800b7b0:	f000 fec6 	bl	800c540 <arm_pid_init_f32>
	pid[3].ArmPID_Instance.state[2] = pid[3].IntegMax;
 800b7b4:	4b10      	ldr	r3, [pc, #64]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7ba:	4a0f      	ldr	r2, [pc, #60]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7bc:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	arm_pid_init_f32(&(pid[4].ArmPID_Instance), 1);
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	4821      	ldr	r0, [pc, #132]	@ (800b848 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x238>)
 800b7c4:	f000 febc 	bl	800c540 <arm_pid_init_f32>
	pid[4].ArmPID_Instance.state[2] = pid[4].IntegMin;
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b7ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b7f8 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4

	if(!CALIBRATION_MODE){
		HAL_StatusTypeDef status = start_gates_pwm(initDutyRatio);
 800b7d4:	ed97 0a05 	vldr	s0, [r7, #20]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fa8d 	bl	800bcf8 <_ZN24supercap_control_manager15start_gates_pwmEf>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	74fb      	strb	r3, [r7, #19]
		is_init = true;
 800b7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b84c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x23c>)
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	701a      	strb	r2, [r3, #0]
		in_loop = true;
 800b7e8:	4b19      	ldr	r3, [pc, #100]	@ (800b850 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x240>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	701a      	strb	r2, [r3, #0]
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001154 	.word	0x20001154
 800b7fc:	40766666 	.word	0x40766666
 800b800:	3d449ba6 	.word	0x3d449ba6
 800b804:	3a83126f 	.word	0x3a83126f
 800b808:	20000031 	.word	0x20000031
 800b80c:	c3c80000 	.word	0xc3c80000
 800b810:	3ca9930c 	.word	0x3ca9930c
 800b814:	3966afcd 	.word	0x3966afcd
 800b818:	3fcf7cee 	.word	0x3fcf7cee
 800b81c:	3e020c4a 	.word	0x3e020c4a
 800b820:	3b23d70a 	.word	0x3b23d70a
 800b824:	3fcccccd 	.word	0x3fcccccd
 800b828:	3f80a3d7 	.word	0x3f80a3d7
 800b82c:	3e374bc7 	.word	0x3e374bc7
 800b830:	200011bc 	.word	0x200011bc
 800b834:	41700000 	.word	0x41700000
 800b838:	200010ec 	.word	0x200010ec
 800b83c:	200010f8 	.word	0x200010f8
 800b840:	2000110c 	.word	0x2000110c
 800b844:	200011f0 	.word	0x200011f0
 800b848:	20001224 	.word	0x20001224
 800b84c:	2000114e 	.word	0x2000114e
 800b850:	2000114f 	.word	0x2000114f

0800b854 <_ZL14moving_averageR15mov_avrg_filtert>:
 *
 * @param filter The filter state structure (holds index, window buffer, etc.)
 * @param new_sample The latest ADC sample to be added to the buffer
 * @return Filtered (smoothed) 16-bit average value
 */
static inline uint16_t moving_average(mov_avrg_filter& filter, uint16_t new_sample){
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	807b      	strh	r3, [r7, #2]
	filter.sum -= filter.window_filter[filter.index];
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 800b86c:	4611      	mov	r1, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b874:	1a9a      	subs	r2, r3, r2
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.sum += new_sample;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b882:	887b      	ldrh	r3, [r7, #2]
 800b884:	441a      	add	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.window_filter[filter.index] = new_sample;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b892:	4619      	mov	r1, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	887a      	ldrh	r2, [r7, #2]
 800b898:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	filter.index += 1;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if(filter.index == filter.length){
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d107      	bne.n	800b8cc <_ZL14moving_averageR15mov_avrg_filtert+0x78>
		filter.index = 0;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		filter.full = true;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	}
	if(filter.full)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d009      	beq.n	800b8ea <_ZL14moving_averageR15mov_avrg_filtert+0x96>
		return (uint16_t)(filter.sum / filter.length);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f892 2080 	ldrb.w	r2, [r2, #128]	@ 0x80
 800b8e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	e008      	b.n	800b8fc <_ZL14moving_averageR15mov_avrg_filtert+0xa8>
	else
		return (uint16_t)(filter.sum / filter.index);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 800b8f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8fa:	b29b      	uxth	r3, r3
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <_ZL10sample_adcv>:
 *
 * This function determines which half of the DMA double-buffer is ready for each ADC,
 * averages multiple samples per channel (to reduce noise), and applies a moving average
 * filter to smooth the data before it's used for PID control and safety checks.
 */
static inline void sample_adc(){
 800b908:	b590      	push	{r4, r7, lr}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint8_t Cap_HalfFull, Bat_HalfFull;

	// Determine current buffer for ADC1 (cap side)
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 800b90e:	4b67      	ldr	r3, [pc, #412]	@ (800baac <_ZL10sample_adcv+0x1a4>)
 800b910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	461a      	mov	r2, r3
 800b916:	4b66      	ldr	r3, [pc, #408]	@ (800bab0 <_ZL10sample_adcv+0x1a8>)
 800b918:	429a      	cmp	r2, r3
 800b91a:	d904      	bls.n	800b926 <_ZL10sample_adcv+0x1e>
 800b91c:	4b65      	ldr	r3, [pc, #404]	@ (800bab4 <_ZL10sample_adcv+0x1ac>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	e003      	b.n	800b92e <_ZL10sample_adcv+0x26>
 800b926:	4b64      	ldr	r3, [pc, #400]	@ (800bab8 <_ZL10sample_adcv+0x1b0>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b01      	cmp	r3, #1
 800b930:	bf0c      	ite	eq
 800b932:	2301      	moveq	r3, #1
 800b934:	2300      	movne	r3, #0
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d010      	beq.n	800b95e <_ZL10sample_adcv+0x56>
		__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1);
 800b93c:	4b5b      	ldr	r3, [pc, #364]	@ (800baac <_ZL10sample_adcv+0x1a4>)
 800b93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	4b5a      	ldr	r3, [pc, #360]	@ (800bab0 <_ZL10sample_adcv+0x1a8>)
 800b946:	429a      	cmp	r2, r3
 800b948:	d903      	bls.n	800b952 <_ZL10sample_adcv+0x4a>
 800b94a:	4b5a      	ldr	r3, [pc, #360]	@ (800bab4 <_ZL10sample_adcv+0x1ac>)
 800b94c:	2204      	movs	r2, #4
 800b94e:	605a      	str	r2, [r3, #4]
 800b950:	e002      	b.n	800b958 <_ZL10sample_adcv+0x50>
 800b952:	4b59      	ldr	r3, [pc, #356]	@ (800bab8 <_ZL10sample_adcv+0x1b0>)
 800b954:	2204      	movs	r2, #4
 800b956:	605a      	str	r2, [r3, #4]
		Cap_HalfFull = ADC_FIRST_BUFFER;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
 800b95c:	e001      	b.n	800b962 <_ZL10sample_adcv+0x5a>
	} else {
		Cap_HalfFull = ADC_SECOND_BUFFER;
 800b95e:	2301      	movs	r3, #1
 800b960:	73fb      	strb	r3, [r7, #15]
	}

	// Determine current buffer for ADC2 (battery side)
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 800b962:	4b56      	ldr	r3, [pc, #344]	@ (800babc <_ZL10sample_adcv+0x1b4>)
 800b964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	461a      	mov	r2, r3
 800b96a:	4b51      	ldr	r3, [pc, #324]	@ (800bab0 <_ZL10sample_adcv+0x1a8>)
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d904      	bls.n	800b97a <_ZL10sample_adcv+0x72>
 800b970:	4b50      	ldr	r3, [pc, #320]	@ (800bab4 <_ZL10sample_adcv+0x1ac>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	e003      	b.n	800b982 <_ZL10sample_adcv+0x7a>
 800b97a:	4b4f      	ldr	r3, [pc, #316]	@ (800bab8 <_ZL10sample_adcv+0x1b0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b01      	cmp	r3, #1
 800b984:	bf0c      	ite	eq
 800b986:	2301      	moveq	r3, #1
 800b988:	2300      	movne	r3, #0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d010      	beq.n	800b9b2 <_ZL10sample_adcv+0xaa>
		__HAL_DMA_CLEAR_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1);
 800b990:	4b4a      	ldr	r3, [pc, #296]	@ (800babc <_ZL10sample_adcv+0x1b4>)
 800b992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	4b45      	ldr	r3, [pc, #276]	@ (800bab0 <_ZL10sample_adcv+0x1a8>)
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d903      	bls.n	800b9a6 <_ZL10sample_adcv+0x9e>
 800b99e:	4b45      	ldr	r3, [pc, #276]	@ (800bab4 <_ZL10sample_adcv+0x1ac>)
 800b9a0:	2204      	movs	r2, #4
 800b9a2:	605a      	str	r2, [r3, #4]
 800b9a4:	e002      	b.n	800b9ac <_ZL10sample_adcv+0xa4>
 800b9a6:	4b44      	ldr	r3, [pc, #272]	@ (800bab8 <_ZL10sample_adcv+0x1b0>)
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	605a      	str	r2, [r3, #4]
		Bat_HalfFull = ADC_FIRST_BUFFER;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73bb      	strb	r3, [r7, #14]
 800b9b0:	e001      	b.n	800b9b6 <_ZL10sample_adcv+0xae>
	} else {
		Bat_HalfFull = ADC_SECOND_BUFFER;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	73bb      	strb	r3, [r7, #14]
	}

	uint16_t sum=0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	81bb      	strh	r3, [r7, #12]

	// Average ADC1 samples
	for(uint8_t i = 0; i < ADC1_CHANNELS; i++){
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	72fb      	strb	r3, [r7, #11]
 800b9be:	e021      	b.n	800ba04 <_ZL10sample_adcv+0xfc>
		sum = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	72bb      	strb	r3, [r7, #10]
 800b9c8:	e00f      	b.n	800b9ea <_ZL10sample_adcv+0xe2>
			sum += adc1_samples[Cap_HalfFull][j][i];
 800b9ca:	7bf9      	ldrb	r1, [r7, #15]
 800b9cc:	7aba      	ldrb	r2, [r7, #10]
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	483b      	ldr	r0, [pc, #236]	@ (800bac0 <_ZL10sample_adcv+0x1b8>)
 800b9d2:	0109      	lsls	r1, r1, #4
 800b9d4:	440a      	add	r2, r1
 800b9d6:	0052      	lsls	r2, r2, #1
 800b9d8:	4413      	add	r3, r2
 800b9da:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800b9de:	89bb      	ldrh	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800b9e4:	7abb      	ldrb	r3, [r7, #10]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	72bb      	strb	r3, [r7, #10]
 800b9ea:	7abb      	ldrb	r3, [r7, #10]
 800b9ec:	2b0f      	cmp	r3, #15
 800b9ee:	d9ec      	bls.n	800b9ca <_ZL10sample_adcv+0xc2>
		}
		ADC_sampled_data[i] = (sum >> 4);
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	89ba      	ldrh	r2, [r7, #12]
 800b9f4:	0912      	lsrs	r2, r2, #4
 800b9f6:	b291      	uxth	r1, r2
 800b9f8:	4a32      	ldr	r2, [pc, #200]	@ (800bac4 <_ZL10sample_adcv+0x1bc>)
 800b9fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < ADC1_CHANNELS; i++){
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3301      	adds	r3, #1
 800ba02:	72fb      	strb	r3, [r7, #11]
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d9da      	bls.n	800b9c0 <_ZL10sample_adcv+0xb8>
	}

	// Average ADC2 samples
	for(uint8_t i = 0; i < ADC2_CHANNELS ; i++){
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	727b      	strb	r3, [r7, #9]
 800ba0e:	e027      	b.n	800ba60 <_ZL10sample_adcv+0x158>
		sum = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800ba14:	2300      	movs	r3, #0
 800ba16:	723b      	strb	r3, [r7, #8]
 800ba18:	e014      	b.n	800ba44 <_ZL10sample_adcv+0x13c>
			sum += adc2_samples[Bat_HalfFull][j][i];
 800ba1a:	7bb9      	ldrb	r1, [r7, #14]
 800ba1c:	7a3b      	ldrb	r3, [r7, #8]
 800ba1e:	7a78      	ldrb	r0, [r7, #9]
 800ba20:	4c29      	ldr	r4, [pc, #164]	@ (800bac8 <_ZL10sample_adcv+0x1c0>)
 800ba22:	461a      	mov	r2, r3
 800ba24:	0052      	lsls	r2, r2, #1
 800ba26:	441a      	add	r2, r3
 800ba28:	460b      	mov	r3, r1
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	440b      	add	r3, r1
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	4413      	add	r3, r2
 800ba32:	4403      	add	r3, r0
 800ba34:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800ba38:	89bb      	ldrh	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800ba3e:	7a3b      	ldrb	r3, [r7, #8]
 800ba40:	3301      	adds	r3, #1
 800ba42:	723b      	strb	r3, [r7, #8]
 800ba44:	7a3b      	ldrb	r3, [r7, #8]
 800ba46:	2b0f      	cmp	r3, #15
 800ba48:	d9e7      	bls.n	800ba1a <_ZL10sample_adcv+0x112>
		}
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 800ba4a:	7a7b      	ldrb	r3, [r7, #9]
 800ba4c:	3302      	adds	r3, #2
 800ba4e:	89ba      	ldrh	r2, [r7, #12]
 800ba50:	0912      	lsrs	r2, r2, #4
 800ba52:	b291      	uxth	r1, r2
 800ba54:	4a1b      	ldr	r2, [pc, #108]	@ (800bac4 <_ZL10sample_adcv+0x1bc>)
 800ba56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < ADC2_CHANNELS ; i++){
 800ba5a:	7a7b      	ldrb	r3, [r7, #9]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	727b      	strb	r3, [r7, #9]
 800ba60:	7a7b      	ldrb	r3, [r7, #9]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d9d4      	bls.n	800ba10 <_ZL10sample_adcv+0x108>
	}

	// Apply moving average filter on all channels
	for(uint8_t i = 0; i < (ADC1_CHANNELS + ADC2_CHANNELS) ; i++)
 800ba66:	2300      	movs	r3, #0
 800ba68:	71fb      	strb	r3, [r7, #7]
 800ba6a:	e016      	b.n	800ba9a <_ZL10sample_adcv+0x192>
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	228c      	movs	r2, #140	@ 0x8c
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	4a15      	ldr	r2, [pc, #84]	@ (800bacc <_ZL10sample_adcv+0x1c4>)
 800ba76:	441a      	add	r2, r3
 800ba78:	79fb      	ldrb	r3, [r7, #7]
 800ba7a:	4912      	ldr	r1, [pc, #72]	@ (800bac4 <_ZL10sample_adcv+0x1bc>)
 800ba7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ba80:	79fc      	ldrb	r4, [r7, #7]
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7ff fee5 	bl	800b854 <_ZL14moving_averageR15mov_avrg_filtert>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b10      	ldr	r3, [pc, #64]	@ (800bad0 <_ZL10sample_adcv+0x1c8>)
 800ba90:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t i = 0; i < (ADC1_CHANNELS + ADC2_CHANNELS) ; i++)
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	3301      	adds	r3, #1
 800ba98:	71fb      	strb	r3, [r7, #7]
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	d9e5      	bls.n	800ba6c <_ZL10sample_adcv+0x164>
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd90      	pop	{r4, r7, pc}
 800baaa:	bf00      	nop
 800baac:	20000218 	.word	0x20000218
 800bab0:	40020094 	.word	0x40020094
 800bab4:	40020400 	.word	0x40020400
 800bab8:	40020000 	.word	0x40020000
 800babc:	20000284 	.word	0x20000284
 800bac0:	20000cf0 	.word	0x20000cf0
 800bac4:	20001144 	.word	0x20001144
 800bac8:	20000d70 	.word	0x20000d70
 800bacc:	20000e30 	.word	0x20000e30
 800bad0:	200010ec 	.word	0x200010ec

0800bad4 <_ZN24supercap_control_manager10start_loopEv>:
 * Only runs if not in calibration mode. Reads current capacitor and battery voltages to estimate
 * a stable initial duty cycle for the buck-boost circuit, then starts gate switching.
 *
 * @return HAL_OK if started successfully, HAL_ERROR otherwise.
 */
HAL_StatusTypeDef supercap_control_manager::start_loop(){
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	if(!CALIBRATION_MODE) {
		in_loop = true;
 800badc:	4b18      	ldr	r3, [pc, #96]	@ (800bb40 <_ZN24supercap_control_manager10start_loopEv+0x6c>)
 800bade:	2201      	movs	r2, #1
 800bae0:	701a      	strb	r2, [r3, #0]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bae2:	4b18      	ldr	r3, [pc, #96]	@ (800bb44 <_ZN24supercap_control_manager10start_loopEv+0x70>)
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	ee07 3a90 	vmov	s15, r3
 800baea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800baee:	4b16      	ldr	r3, [pc, #88]	@ (800bb48 <_ZN24supercap_control_manager10start_loopEv+0x74>)
 800baf0:	edd3 7a01 	vldr	s15, [r3, #4]
 800baf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baf8:	4b14      	ldr	r3, [pc, #80]	@ (800bb4c <_ZN24supercap_control_manager10start_loopEv+0x78>)
 800bafa:	ed93 6a01 	vldr	s12, [r3, #4]
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 800bafe:	4b11      	ldr	r3, [pc, #68]	@ (800bb44 <_ZN24supercap_control_manager10start_loopEv+0x70>)
 800bb00:	889b      	ldrh	r3, [r3, #4]
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb48 <_ZN24supercap_control_manager10start_loopEv+0x74>)
 800bb0c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bb10:	ee66 6aa7 	vmul.f32	s13, s13, s15
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bb14:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bb18:	ee37 7a27 	vadd.f32	s14, s14, s15
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb4c <_ZN24supercap_control_manager10start_loopEv+0x78>)
 800bb1e:	edd3 7a02 	vldr	s15, [r3, #8]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bb22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb26:	edc7 7a03 	vstr	s15, [r7, #12]
		start_gates_pwm(initDutyRatio);
 800bb2a:	ed97 0a03 	vldr	s0, [r7, #12]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f8e2 	bl	800bcf8 <_ZN24supercap_control_manager15start_gates_pwmEf>
		return HAL_OK;
 800bb34:	2300      	movs	r3, #0
	} else {
		return HAL_ERROR;
	}
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	2000114f 	.word	0x2000114f
 800bb44:	200010ec 	.word	0x200010ec
 800bb48:	200010f8 	.word	0x200010f8
 800bb4c:	2000110c 	.word	0x2000110c

0800bb50 <_ZL14stop_gates_pwmv>:
 * @brief Disables all HRTIM PWM outputs driving the power gates.
 *
 * Forces an output disable through the HRTIM register. Used in safety shutdown and
 * during idle transitions to prevent accidental switching activity.
 */
static inline void stop_gates_pwm(){
 800bb50:	b480      	push	{r7}
 800bb52:	af00      	add	r7, sp, #0
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800bb54:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <_ZL14stop_gates_pwmv+0x28>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f8d3 3398 	ldr.w	r3, [r3, #920]	@ 0x398
 800bb5c:	4a06      	ldr	r2, [pc, #24]	@ (800bb78 <_ZL14stop_gates_pwmv+0x28>)
 800bb5e:	6812      	ldr	r2, [r2, #0]
 800bb60:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bb64:	f043 0303 	orr.w	r3, r3, #3
 800bb68:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
	                                       HRTIM_OUTPUT_TE1 | HRTIM_OUTPUT_TE2;
}
 800bb6c:	bf00      	nop
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000510 	.word	0x20000510

0800bb7c <_ZN24supercap_control_manager9stop_loopEv>:
/**
 * @brief Halts the control loop and disables PWM gate signals.
 *
 * This is the object method version. Sets loop flags to false and stops PWM via `stop_gates_pwm`.
 */
void supercap_control_manager::stop_loop(){
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	in_loop = false;
 800bb84:	4b04      	ldr	r3, [pc, #16]	@ (800bb98 <_ZN24supercap_control_manager9stop_loopEv+0x1c>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
	stop_gates_pwm();
 800bb8a:	f7ff ffe1 	bl	800bb50 <_ZL14stop_gates_pwmv>
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	2000114f 	.word	0x2000114f

0800bb9c <_ZL9stop_loopv>:
/**
 * @brief Internal version of loop stop (non-class variant).
 *
 * Exists in addition to the class method for situations where non-member access is needed.
 */
static inline void stop_loop(){
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
	in_loop = false;
 800bba0:	4b03      	ldr	r3, [pc, #12]	@ (800bbb0 <_ZL9stop_loopv+0x14>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
	stop_gates_pwm();
 800bba6:	f7ff ffd3 	bl	800bb50 <_ZL14stop_gates_pwmv>
}
 800bbaa:	bf00      	nop
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	2000114f 	.word	0x2000114f

0800bbb4 <_Z13softwareResetv>:
 * @brief Forces a software reset of the MCU.
 *
 * Used during critical fault recovery to completely reboot the board. Disables interrupts and
 * enters an infinite loop until the system reset is triggered via NVIC.
 */
void softwareReset(){
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
	stop_loop();
 800bbb8:	f7ff fff0 	bl	800bb9c <_ZL9stop_loopv>
  __ASM volatile ("cpsid i" : : : "memory");
 800bbbc:	b672      	cpsid	i
}
 800bbbe:	bf00      	nop
	__disable_irq();
	while (true)
		NVIC_SystemReset();
 800bbc0:	f7ff fce4 	bl	800b58c <__NVIC_SystemReset>

0800bbc4 <_ZL9idle_modev>:
 * @brief Transitions the system into idle mode safely.
 *
 * Used during safety events or power-off conditions to gracefully exit the control loop.
 * Ensures gates are off and no control loop logic executes.
 */
static inline void idle_mode(){
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
	if(current_mode != idle){
 800bbc8:	4b06      	ldr	r3, [pc, #24]	@ (800bbe4 <_ZL9idle_modev+0x20>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d007      	beq.n	800bbe0 <_ZL9idle_modev+0x1c>
		stop_loop();
 800bbd0:	f7ff ffe4 	bl	800bb9c <_ZL9stop_loopv>
		current_mode = idle;
 800bbd4:	4b03      	ldr	r3, [pc, #12]	@ (800bbe4 <_ZL9idle_modev+0x20>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
		in_loop = false;
 800bbda:	4b03      	ldr	r3, [pc, #12]	@ (800bbe8 <_ZL9idle_modev+0x24>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
	}
}
 800bbe0:	bf00      	nop
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20000032 	.word	0x20000032
 800bbe8:	2000114f 	.word	0x2000114f

0800bbec <_ZL16update_dutyCyclef>:
 * Based on the current ratio, calculates the appropriate compare values for each timer output.
 * The cap and chassis sides are controlled separately using a normalized (0.0–1.0+) input ratio.
 *
 * @param dutyRatio Desired duty ratio (V_cap / V_bat), expected to be in [0.0, 2.0]
 */
static inline void update_dutyCycle(float dutyRatio){
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	ed87 0a01 	vstr	s0, [r7, #4]
	float D_chassis, D_cap;

	// Determine each half-bridge's duty cycle
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 800bbf6:	edd7 7a01 	vldr	s15, [r7, #4]
 800bbfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc02:	dd13      	ble.n	800bc2c <_ZL16update_dutyCyclef+0x40>
 800bc04:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc14:	d80a      	bhi.n	800bc2c <_ZL16update_dutyCyclef+0x40>
		D_cap = 0.9f;
 800bc16:	4b34      	ldr	r3, [pc, #208]	@ (800bce8 <_ZL16update_dutyCyclef+0xfc>)
 800bc18:	613b      	str	r3, [r7, #16]
		D_chassis = dutyRatio * 0.9f;
 800bc1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc1e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800bcec <_ZL16update_dutyCyclef+0x100>
 800bc22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc26:	edc7 7a05 	vstr	s15, [r7, #20]
 800bc2a:	e012      	b.n	800bc52 <_ZL16update_dutyCyclef+0x66>
	} else if(dutyRatio > 1.0f){
 800bc2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	dd09      	ble.n	800bc52 <_ZL16update_dutyCyclef+0x66>
		D_chassis = 0.9f;
 800bc3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bce8 <_ZL16update_dutyCyclef+0xfc>)
 800bc40:	617b      	str	r3, [r7, #20]
		D_cap = 0.9f / dutyRatio;
 800bc42:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bcec <_ZL16update_dutyCyclef+0x100>
 800bc46:	ed97 7a01 	vldr	s14, [r7, #4]
 800bc4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc4e:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Compute compare values for cap side (Timer A)
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 800bc52:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc56:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800bcf0 <_ZL16update_dutyCyclef+0x104>
 800bc5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	ee17 3a90 	vmov	r3, s15
 800bc66:	81fb      	strh	r3, [r7, #14]
	uint16_t TA_CmpOffsetHalf = (uint16_t)(TA_CmpOffset / 2);
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	085b      	lsrs	r3, r3, #1
 800bc6c:	81bb      	strh	r3, [r7, #12]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 800bc6e:	89bb      	ldrh	r3, [r7, #12]
 800bc70:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 800bc74:	3368      	adds	r3, #104	@ 0x68
 800bc76:	89fa      	ldrh	r2, [r7, #14]
 800bc78:	f002 0201 	and.w	r2, r2, #1
 800bc7c:	1a9a      	subs	r2, r3, r2
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf4 <_ZL16update_dutyCyclef+0x108>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	                       HRTIM_HALF_PERIOD - TA_CmpOffsetHalf - (TA_CmpOffset % 2));
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 800bc86:	89bb      	ldrh	r3, [r7, #12]
 800bc88:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 800bc8c:	3368      	adds	r3, #104	@ 0x68
 800bc8e:	4a19      	ldr	r2, [pc, #100]	@ (800bcf4 <_ZL16update_dutyCyclef+0x108>)
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
	                       HRTIM_HALF_PERIOD + TA_CmpOffsetHalf);

	// Compute compare values for chassis side (Timer E)
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 800bc96:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc9a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800bcf0 <_ZL16update_dutyCyclef+0x104>
 800bc9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca6:	ee17 3a90 	vmov	r3, s15
 800bcaa:	817b      	strh	r3, [r7, #10]
	uint16_t TE_CmpOffsetHalf = (uint16_t)(TE_CmpOffset / 2);
 800bcac:	897b      	ldrh	r3, [r7, #10]
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	813b      	strh	r3, [r7, #8]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 800bcb2:	893b      	ldrh	r3, [r7, #8]
 800bcb4:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 800bcb8:	3368      	adds	r3, #104	@ 0x68
 800bcba:	897a      	ldrh	r2, [r7, #10]
 800bcbc:	f002 0201 	and.w	r2, r2, #1
 800bcc0:	1a9a      	subs	r2, r3, r2
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf4 <_ZL16update_dutyCyclef+0x108>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
	                       HRTIM_HALF_PERIOD - TE_CmpOffsetHalf - (TE_CmpOffset % 2));
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 800bcca:	893b      	ldrh	r3, [r7, #8]
 800bccc:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 800bcd0:	3368      	adds	r3, #104	@ 0x68
 800bcd2:	4a08      	ldr	r2, [pc, #32]	@ (800bcf4 <_ZL16update_dutyCyclef+0x108>)
 800bcd4:	6812      	ldr	r2, [r2, #0]
 800bcd6:	f8c2 32a4 	str.w	r3, [r2, #676]	@ 0x2a4
	                       HRTIM_HALF_PERIOD + TE_CmpOffsetHalf);
}
 800bcda:	bf00      	nop
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	3f666666 	.word	0x3f666666
 800bcec:	3f666666 	.word	0x3f666666
 800bcf0:	4704d000 	.word	0x4704d000
 800bcf4:	20000510 	.word	0x20000510

0800bcf8 <_ZN24supercap_control_manager15start_gates_pwmEf>:
 * It updates the gate PWM duty cycle and starts all 4 gate signals using the STM32 HRTIM peripheral.
 *
 * @param init_duty_cycle The duty cycle to start with, based on Vcap / Vbat ratio.
 * @return HAL_OK if HRTIM started successfully.
 */
HAL_StatusTypeDef supercap_control_manager::start_gates_pwm(float init_duty_cycle){
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	ed87 0a00 	vstr	s0, [r7]
	update_dutyCycle(init_duty_cycle);
 800bd04:	ed97 0a00 	vldr	s0, [r7]
 800bd08:	f7ff ff70 	bl	800bbec <_ZL16update_dutyCyclef>
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 800bd0c:	f240 3103 	movw	r1, #771	@ 0x303
 800bd10:	4803      	ldr	r0, [pc, #12]	@ (800bd20 <_ZN24supercap_control_manager15start_gates_pwmEf+0x28>)
 800bd12:	f7fb fd48 	bl	80077a6 <HAL_HRTIM_WaveformOutputStart>
 800bd16:	4603      	mov	r3, r0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000510 	.word	0x20000510

0800bd24 <_ZL7get_PIDP12LoopCtrl_PIDfff>:
 * @param ref Desired reference value (setpoint).
 * @param feedback Current feedback value (measurement).
 * @param ff_model Optional feedforward term added to the output.
 * @return Final, clamped output value from the controller.
 */
static inline float get_PID(LoopCtrl_PID* pid_struct, float ref, float feedback, float ff_model){
 800bd24:	b480      	push	{r7}
 800bd26:	b08b      	sub	sp, #44	@ 0x2c
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd30:	edc7 0a01 	vstr	s1, [r7, #4]
 800bd34:	ed87 1a00 	vstr	s2, [r7]
	float error = ref - feedback;
 800bd38:	ed97 7a02 	vldr	s14, [r7, #8]
 800bd3c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	ed93 7a00 	vldr	s14, [r3]
 800bd56:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd5a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	edd3 6a01 	vldr	s13, [r3, #4]
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800bd6e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	edd3 6a02 	vldr	s13, [r3, #8]
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd82:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800bd8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd90:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	69ba      	ldr	r2, [r7, #24]
 800bda0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800bda8:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdac:	ed97 7a00 	vldr	s14, [r7]
 800bdb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdb4:	edc7 7a08 	vstr	s15, [r7, #32]

	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bdc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdcc:	dd04      	ble.n	800bdd8 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xb4>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	e00e      	b.n	800bdf6 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xd2>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800bde4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdec:	d503      	bpl.n	800bdf6 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xd2>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	615a      	str	r2, [r3, #20]

	if(output > pid_struct->OutputMax)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800bdfc:	ed97 7a08 	vldr	s14, [r7, #32]
 800be00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be08:	dd02      	ble.n	800be10 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xec>
		return pid_struct->OutputMax;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	e00d      	b.n	800be2c <_ZL7get_PIDP12LoopCtrl_PIDfff+0x108>
	else if(output < pid_struct->OutputMin)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800be16:	ed97 7a08 	vldr	s14, [r7, #32]
 800be1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be22:	d502      	bpl.n	800be2a <_ZL7get_PIDP12LoopCtrl_PIDfff+0x106>
		return pid_struct->OutputMin;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be28:	e000      	b.n	800be2c <_ZL7get_PIDP12LoopCtrl_PIDfff+0x108>
	else
		return output;
 800be2a:	6a3b      	ldr	r3, [r7, #32]
}
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eeb0 0a67 	vmov.f32	s0, s15
 800be34:	372c      	adds	r7, #44	@ 0x2c
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <_ZN24supercap_control_manager21set_ref_chassis_powerEf>:
 * Used by the application layer to define the desired output power level that the
 * control system should regulate around.
 *
 * @param ref_power_ Desired chassis power reference in watts.
 */
void supercap_control_manager::set_ref_chassis_power(float ref_power_){
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	ed87 0a00 	vstr	s0, [r7]
	ref_power = ref_power_;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <_ZL19safety_change_levelhh>:
 * Changes the level only if escalating or recovering from a serious state.
 *
 * @param Item Index of the safety item.
 * @param Level New safety level to apply.
 */
static inline void safety_change_level(uint8_t Item, uint8_t Level){
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	460a      	mov	r2, r1
 800be66:	71fb      	strb	r3, [r7, #7]
 800be68:	4613      	mov	r3, r2
 800be6a:	71bb      	strb	r3, [r7, #6]
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	4a0f      	ldr	r2, [pc, #60]	@ (800beac <_ZL19safety_change_levelhh+0x50>)
 800be70:	5cd3      	ldrb	r3, [r2, r3]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d805      	bhi.n	800be82 <_ZL19safety_change_levelhh+0x26>
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	4a0c      	ldr	r2, [pc, #48]	@ (800beac <_ZL19safety_change_levelhh+0x50>)
 800be7a:	5cd3      	ldrb	r3, [r2, r3]
 800be7c:	79ba      	ldrb	r2, [r7, #6]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d107      	bne.n	800be92 <_ZL19safety_change_levelhh+0x36>
	|| (safetyItemLevel[Item] == runAway && Level == itsJoever))
 800be82:	79fb      	ldrb	r3, [r7, #7]
 800be84:	4a09      	ldr	r2, [pc, #36]	@ (800beac <_ZL19safety_change_levelhh+0x50>)
 800be86:	5cd3      	ldrb	r3, [r2, r3]
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d109      	bne.n	800bea0 <_ZL19safety_change_levelhh+0x44>
 800be8c:	79bb      	ldrb	r3, [r7, #6]
 800be8e:	2b04      	cmp	r3, #4
 800be90:	d106      	bne.n	800bea0 <_ZL19safety_change_levelhh+0x44>
	{
		safetyItemLevel[Item] = Level;
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	4905      	ldr	r1, [pc, #20]	@ (800beac <_ZL19safety_change_levelhh+0x50>)
 800be96:	79ba      	ldrb	r2, [r7, #6]
 800be98:	54ca      	strb	r2, [r1, r3]
		safetyChangeTrigger = true;
 800be9a:	4b05      	ldr	r3, [pc, #20]	@ (800beb0 <_ZL19safety_change_levelhh+0x54>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	701a      	strb	r2, [r3, #0]
	}
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	2000125c 	.word	0x2000125c
 800beb0:	20001150 	.word	0x20001150

0800beb4 <_ZL21safety_check_voltagesv>:
 * @brief Performs safety checks on both chassis and supercapacitor voltages.
 *
 * Uses counters for debounce behavior and disables the control loop if unsafe
 * conditions persist (too high or low voltage on either side).
 */
static inline void safety_check_voltages(){
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
	static uint16_t Vcap_counter = 0;

	static safetyLevelDef Vbat_status = safe;
	static safetyLevelDef Vcap_status = safe;

	float V_bat_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 800beba:	4b66      	ldr	r3, [pc, #408]	@ (800c054 <_ZL21safety_check_voltagesv+0x1a0>)
 800bebc:	889b      	ldrh	r3, [r3, #4]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bec6:	4b64      	ldr	r3, [pc, #400]	@ (800c058 <_ZL21safety_check_voltagesv+0x1a4>)
 800bec8:	edd3 7a02 	vldr	s15, [r3, #8]
 800becc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed0:	4b62      	ldr	r3, [pc, #392]	@ (800c05c <_ZL21safety_check_voltagesv+0x1a8>)
 800bed2:	edd3 7a02 	vldr	s15, [r3, #8]
 800bed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beda:	edc7 7a03 	vstr	s15, [r7, #12]
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 800bede:	4b5d      	ldr	r3, [pc, #372]	@ (800c054 <_ZL21safety_check_voltagesv+0x1a0>)
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800beea:	4b5b      	ldr	r3, [pc, #364]	@ (800c058 <_ZL21safety_check_voltagesv+0x1a4>)
 800beec:	edd3 7a01 	vldr	s15, [r3, #4]
 800bef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bef4:	4b59      	ldr	r3, [pc, #356]	@ (800c05c <_ZL21safety_check_voltagesv+0x1a8>)
 800bef6:	edd3 7a01 	vldr	s15, [r3, #4]
 800befa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800befe:	edc7 7a02 	vstr	s15, [r7, #8]

	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 800bf02:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf06:	eeb3 7a0c 	vmov.f32	s14, #60	@ 0x41e00000  28.0
 800bf0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf12:	dc08      	bgt.n	800bf26 <_ZL21safety_check_voltagesv+0x72>
 800bf14:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf18:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800bf1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf24:	d507      	bpl.n	800bf36 <_ZL21safety_check_voltagesv+0x82>
		Vbat_counter += 1000;
 800bf26:	4b4e      	ldr	r3, [pc, #312]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	4b4b      	ldr	r3, [pc, #300]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf32:	801a      	strh	r2, [r3, #0]
 800bf34:	e009      	b.n	800bf4a <_ZL21safety_check_voltagesv+0x96>
	else if(Vbat_counter > 0)
 800bf36:	4b4a      	ldr	r3, [pc, #296]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d005      	beq.n	800bf4a <_ZL21safety_check_voltagesv+0x96>
		Vbat_counter--;
 800bf3e:	4b48      	ldr	r3, [pc, #288]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	4b46      	ldr	r3, [pc, #280]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf48:	801a      	strh	r2, [r3, #0]

	if(Vbat_counter == 0 && Vbat_status != safe)
 800bf4a:	4b45      	ldr	r3, [pc, #276]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d107      	bne.n	800bf62 <_ZL21safety_check_voltagesv+0xae>
 800bf52:	4b44      	ldr	r3, [pc, #272]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <_ZL21safety_check_voltagesv+0xae>
		Vbat_status = safe;
 800bf5a:	4b42      	ldr	r3, [pc, #264]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	e00a      	b.n	800bf78 <_ZL21safety_check_voltagesv+0xc4>
	else if (Vbat_counter > 0 && Vbat_status != wtf)
 800bf62:	4b3f      	ldr	r3, [pc, #252]	@ (800c060 <_ZL21safety_check_voltagesv+0x1ac>)
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d006      	beq.n	800bf78 <_ZL21safety_check_voltagesv+0xc4>
 800bf6a:	4b3e      	ldr	r3, [pc, #248]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d002      	beq.n	800bf78 <_ZL21safety_check_voltagesv+0xc4>
		Vbat_status = wtf;
 800bf72:	4b3c      	ldr	r3, [pc, #240]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf74:	2202      	movs	r2, #2
 800bf76:	701a      	strb	r2, [r3, #0]

	if(V_cap_ > V_SUPERCAPMAX_REF || V_cap_ < SUPERCAP_MIN_VOLTAGE) {
 800bf78:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf7c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800bf80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf88:	dc08      	bgt.n	800bf9c <_ZL21safety_check_voltagesv+0xe8>
 800bf8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf8e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800bf92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9a:	d50c      	bpl.n	800bfb6 <_ZL21safety_check_voltagesv+0x102>
		if(Vcap_counter < 650)
 800bf9c:	4b32      	ldr	r3, [pc, #200]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	f240 2289 	movw	r2, #649	@ 0x289
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d810      	bhi.n	800bfca <_ZL21safety_check_voltagesv+0x116>
			Vcap_counter++;
 800bfa8:	4b2f      	ldr	r3, [pc, #188]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	4b2d      	ldr	r3, [pc, #180]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfb2:	801a      	strh	r2, [r3, #0]
		if(Vcap_counter < 650)
 800bfb4:	e009      	b.n	800bfca <_ZL21safety_check_voltagesv+0x116>
	} else if(Vcap_counter > 0)
 800bfb6:	4b2c      	ldr	r3, [pc, #176]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d005      	beq.n	800bfca <_ZL21safety_check_voltagesv+0x116>
		Vcap_counter--;
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	4b28      	ldr	r3, [pc, #160]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfc8:	801a      	strh	r2, [r3, #0]

	if(Vcap_counter == 0 && Vcap_status != safe)
 800bfca:	4b27      	ldr	r3, [pc, #156]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d107      	bne.n	800bfe2 <_ZL21safety_check_voltagesv+0x12e>
 800bfd2:	4b26      	ldr	r3, [pc, #152]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <_ZL21safety_check_voltagesv+0x12e>
		Vcap_status = safe;
 800bfda:	4b24      	ldr	r3, [pc, #144]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e00c      	b.n	800bffc <_ZL21safety_check_voltagesv+0x148>
	else if(Vcap_counter == 650 && Vcap_status != wtf)
 800bfe2:	4b21      	ldr	r3, [pc, #132]	@ (800c068 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	f240 228a 	movw	r2, #650	@ 0x28a
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d106      	bne.n	800bffc <_ZL21safety_check_voltagesv+0x148>
 800bfee:	4b1f      	ldr	r3, [pc, #124]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d002      	beq.n	800bffc <_ZL21safety_check_voltagesv+0x148>
		Vcap_status = wtf;
 800bff6:	4b1d      	ldr	r3, [pc, #116]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800bff8:	2202      	movs	r2, #2
 800bffa:	701a      	strb	r2, [r3, #0]

	uint8_t OutputLevel = (Vbat_status > Vcap_status ? Vbat_status : Vcap_status);
 800bffc:	4b19      	ldr	r3, [pc, #100]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	4b1a      	ldr	r3, [pc, #104]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	d902      	bls.n	800c00e <_ZL21safety_check_voltagesv+0x15a>
 800c008:	4b16      	ldr	r3, [pc, #88]	@ (800c064 <_ZL21safety_check_voltagesv+0x1b0>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	e001      	b.n	800c012 <_ZL21safety_check_voltagesv+0x15e>
 800c00e:	4b17      	ldr	r3, [pc, #92]	@ (800c06c <_ZL21safety_check_voltagesv+0x1b8>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	71fb      	strb	r3, [r7, #7]

	if(OutputLevel == safe && safetyItemLevel[voltageErr] != safe) {
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d107      	bne.n	800c02a <_ZL21safety_check_voltagesv+0x176>
 800c01a:	4b15      	ldr	r3, [pc, #84]	@ (800c070 <_ZL21safety_check_voltagesv+0x1bc>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <_ZL21safety_check_voltagesv+0x176>
		safety_change_level(voltageErr, safe);
 800c022:	2100      	movs	r1, #0
 800c024:	2000      	movs	r0, #0
 800c026:	f7ff ff19 	bl	800be5c <_ZL19safety_change_levelhh>
	}
	if(OutputLevel == wtf && safetyItemLevel[voltageErr] != wtf) {
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d10d      	bne.n	800c04c <_ZL21safety_check_voltagesv+0x198>
 800c030:	4b0f      	ldr	r3, [pc, #60]	@ (800c070 <_ZL21safety_check_voltagesv+0x1bc>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d009      	beq.n	800c04c <_ZL21safety_check_voltagesv+0x198>
  __ASM volatile ("cpsid i" : : : "memory");
 800c038:	b672      	cpsid	i
}
 800c03a:	bf00      	nop
		__disable_irq();
		idle_mode();
 800c03c:	f7ff fdc2 	bl	800bbc4 <_ZL9idle_modev>
  __ASM volatile ("cpsie i" : : : "memory");
 800c040:	b662      	cpsie	i
}
 800c042:	bf00      	nop
		__enable_irq();
		safety_change_level(voltageErr, warning);
 800c044:	2101      	movs	r1, #1
 800c046:	2000      	movs	r0, #0
 800c048:	f7ff ff08 	bl	800be5c <_ZL19safety_change_levelhh>
	}
}
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	200010ec 	.word	0x200010ec
 800c058:	200010f8 	.word	0x200010f8
 800c05c:	2000110c 	.word	0x2000110c
 800c060:	20001264 	.word	0x20001264
 800c064:	20001268 	.word	0x20001268
 800c068:	20001266 	.word	0x20001266
 800c06c:	20001269 	.word	0x20001269
 800c070:	2000125c 	.word	0x2000125c

0800c074 <_ZL21safety_check_currentsv>:
 * If the current exceeds the defined safe limits, the system transitions into idle mode.
 *
 * Uses absolute values for current readings since direction doesn’t matter for safety.
 * Only acts if the current error hasn't already reached its most critical state.
 */
static inline void safety_check_currents(){
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
	static safetyLevelDef I_chassis_status = safe;
	static safetyLevelDef I_cap_status = safe;

	if (safetyItemLevel[currentErr] != itsJoever) {
 800c07a:	4b3c      	ldr	r3, [pc, #240]	@ (800c16c <_ZL21safety_check_currentsv+0xf8>)
 800c07c:	785b      	ldrb	r3, [r3, #1]
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d070      	beq.n	800c164 <_ZL21safety_check_currentsv+0xf0>
		float I_cap_  = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 800c082:	4b3b      	ldr	r3, [pc, #236]	@ (800c170 <_ZL21safety_check_currentsv+0xfc>)
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c08e:	4b39      	ldr	r3, [pc, #228]	@ (800c174 <_ZL21safety_check_currentsv+0x100>)
 800c090:	edd3 7a00 	vldr	s15, [r3]
 800c094:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c098:	4b37      	ldr	r3, [pc, #220]	@ (800c178 <_ZL21safety_check_currentsv+0x104>)
 800c09a:	edd3 7a00 	vldr	s15, [r3]
 800c09e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0a2:	edc7 7a05 	vstr	s15, [r7, #20]
		float I_gateA = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 800c0a6:	4b32      	ldr	r3, [pc, #200]	@ (800c170 <_ZL21safety_check_currentsv+0xfc>)
 800c0a8:	88db      	ldrh	r3, [r3, #6]
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0b2:	4b30      	ldr	r3, [pc, #192]	@ (800c174 <_ZL21safety_check_currentsv+0x100>)
 800c0b4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c178 <_ZL21safety_check_currentsv+0x104>)
 800c0be:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0c6:	edc7 7a04 	vstr	s15, [r7, #16]

		float GetIsource = fabsf(I_gateA);
 800c0ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0ce:	eef0 7ae7 	vabs.f32	s15, s15
 800c0d2:	edc7 7a03 	vstr	s15, [r7, #12]
		float GetIcap    = fabsf(I_cap_);
 800c0d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0da:	eef0 7ae7 	vabs.f32	s15, s15
 800c0de:	edc7 7a02 	vstr	s15, [r7, #8]

		if (GetIsource >= SUPERCAP_CURRENT_SAFETY_MAX) I_chassis_status = wtf;
 800c0e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0e6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800c17c <_ZL21safety_check_currentsv+0x108>
 800c0ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f2:	db02      	blt.n	800c0fa <_ZL21safety_check_currentsv+0x86>
 800c0f4:	4b22      	ldr	r3, [pc, #136]	@ (800c180 <_ZL21safety_check_currentsv+0x10c>)
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	701a      	strb	r2, [r3, #0]
		if (GetIcap    >= SUPERCAP_CURRENT_SAFETY_MAX) I_cap_status = wtf;
 800c0fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c17c <_ZL21safety_check_currentsv+0x108>
 800c102:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10a:	db02      	blt.n	800c112 <_ZL21safety_check_currentsv+0x9e>
 800c10c:	4b1d      	ldr	r3, [pc, #116]	@ (800c184 <_ZL21safety_check_currentsv+0x110>)
 800c10e:	2202      	movs	r2, #2
 800c110:	701a      	strb	r2, [r3, #0]

		uint8_t OutputLevel = (I_chassis_status >= I_cap_status ? I_chassis_status : I_cap_status);
 800c112:	4b1b      	ldr	r3, [pc, #108]	@ (800c180 <_ZL21safety_check_currentsv+0x10c>)
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	4b1b      	ldr	r3, [pc, #108]	@ (800c184 <_ZL21safety_check_currentsv+0x110>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d302      	bcc.n	800c124 <_ZL21safety_check_currentsv+0xb0>
 800c11e:	4b18      	ldr	r3, [pc, #96]	@ (800c180 <_ZL21safety_check_currentsv+0x10c>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	e001      	b.n	800c128 <_ZL21safety_check_currentsv+0xb4>
 800c124:	4b17      	ldr	r3, [pc, #92]	@ (800c184 <_ZL21safety_check_currentsv+0x110>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	71fb      	strb	r3, [r7, #7]

		if (safetyItemLevel[currentErr] != OutputLevel) {
 800c12a:	4b10      	ldr	r3, [pc, #64]	@ (800c16c <_ZL21safety_check_currentsv+0xf8>)
 800c12c:	785b      	ldrb	r3, [r3, #1]
 800c12e:	79fa      	ldrb	r2, [r7, #7]
 800c130:	429a      	cmp	r2, r3
 800c132:	d017      	beq.n	800c164 <_ZL21safety_check_currentsv+0xf0>
			switch (safetyItemLevel[currentErr]) {
 800c134:	4b0d      	ldr	r3, [pc, #52]	@ (800c16c <_ZL21safety_check_currentsv+0xf8>)
 800c136:	785b      	ldrb	r3, [r3, #1]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d80d      	bhi.n	800c158 <_ZL21safety_check_currentsv+0xe4>
				case safe:
				case warning:
					switch (OutputLevel) {
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d001      	beq.n	800c146 <_ZL21safety_check_currentsv+0xd2>
 800c142:	2b04      	cmp	r3, #4
 800c144:	d106      	bne.n	800c154 <_ZL21safety_check_currentsv+0xe0>
  __ASM volatile ("cpsid i" : : : "memory");
 800c146:	b672      	cpsid	i
}
 800c148:	bf00      	nop
						case wtf:
						case itsJoever:
							__disable_irq();
							idle_mode();  // Enters a safe idle state to prevent hardware damage
 800c14a:	f7ff fd3b 	bl	800bbc4 <_ZL9idle_modev>
  __ASM volatile ("cpsie i" : : : "memory");
 800c14e:	b662      	cpsie	i
}
 800c150:	bf00      	nop
							__enable_irq();
							break;
 800c152:	e000      	b.n	800c156 <_ZL21safety_check_currentsv+0xe2>
						default:
							break;
 800c154:	bf00      	nop
					}
					break;
 800c156:	e000      	b.n	800c15a <_ZL21safety_check_currentsv+0xe6>
				default:
					break;
 800c158:	bf00      	nop
			}
			safety_change_level(currentErr, OutputLevel);
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	4619      	mov	r1, r3
 800c15e:	2001      	movs	r0, #1
 800c160:	f7ff fe7c 	bl	800be5c <_ZL19safety_change_levelhh>
		}
	}
}
 800c164:	bf00      	nop
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	2000125c 	.word	0x2000125c
 800c170:	200010ec 	.word	0x200010ec
 800c174:	200010f8 	.word	0x200010f8
 800c178:	2000110c 	.word	0x2000110c
 800c17c:	41a40000 	.word	0x41a40000
 800c180:	2000126a 	.word	0x2000126a
 800c184:	2000126b 	.word	0x2000126b

0800c188 <_ZL17all_safety_checksv>:
/**
 * @brief Runs all safety checks for voltage and current conditions.
 *
 * Combines the voltage and current safety check routines if the system is initialized.
 */
static inline void all_safety_checks(){
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
	if(is_init){
 800c18c:	4b04      	ldr	r3, [pc, #16]	@ (800c1a0 <_ZL17all_safety_checksv+0x18>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <_ZL17all_safety_checksv+0x14>
		safety_check_voltages();
 800c194:	f7ff fe8e 	bl	800beb4 <_ZL21safety_check_voltagesv>
		safety_check_currents();
 800c198:	f7ff ff6c 	bl	800c074 <_ZL21safety_check_currentsv>
	}
}
 800c19c:	bf00      	nop
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	2000114e 	.word	0x2000114e

0800c1a4 <_ZL11loop_updatev>:
 *  - Reads filtered sensor values
 *  - Computes a desired supercap current to keep battery power below limits
 *  - Computes duty cycle through cascaded PID loops with voltage clamping
 *  - Updates PWM outputs accordingly
 */
static inline void loop_update(){
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af00      	add	r7, sp, #0
	all_safety_checks();
 800c1aa:	f7ff ffed 	bl	800c188 <_ZL17all_safety_checksv>

	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 800c1ae:	4b87      	ldr	r3, [pc, #540]	@ (800c3cc <_ZL11loop_updatev+0x228>)
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1ba:	4b85      	ldr	r3, [pc, #532]	@ (800c3d0 <_ZL11loop_updatev+0x22c>)
 800c1bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1c4:	4b83      	ldr	r3, [pc, #524]	@ (800c3d4 <_ZL11loop_updatev+0x230>)
 800c1c6:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1ce:	4b82      	ldr	r3, [pc, #520]	@ (800c3d8 <_ZL11loop_updatev+0x234>)
 800c1d0:	edc3 7a00 	vstr	s15, [r3]
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 800c1d4:	4b7d      	ldr	r3, [pc, #500]	@ (800c3cc <_ZL11loop_updatev+0x228>)
 800c1d6:	889b      	ldrh	r3, [r3, #4]
 800c1d8:	ee07 3a90 	vmov	s15, r3
 800c1dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1e0:	4b7b      	ldr	r3, [pc, #492]	@ (800c3d0 <_ZL11loop_updatev+0x22c>)
 800c1e2:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ea:	4b7a      	ldr	r3, [pc, #488]	@ (800c3d4 <_ZL11loop_updatev+0x230>)
 800c1ec:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1f4:	4b79      	ldr	r3, [pc, #484]	@ (800c3dc <_ZL11loop_updatev+0x238>)
 800c1f6:	edc3 7a00 	vstr	s15, [r3]
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 800c1fa:	4b74      	ldr	r3, [pc, #464]	@ (800c3cc <_ZL11loop_updatev+0x228>)
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	ee07 3a90 	vmov	s15, r3
 800c202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c206:	4b72      	ldr	r3, [pc, #456]	@ (800c3d0 <_ZL11loop_updatev+0x22c>)
 800c208:	edd3 7a00 	vldr	s15, [r3]
 800c20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c210:	4b70      	ldr	r3, [pc, #448]	@ (800c3d4 <_ZL11loop_updatev+0x230>)
 800c212:	edd3 7a00 	vldr	s15, [r3]
 800c216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c21a:	4b71      	ldr	r3, [pc, #452]	@ (800c3e0 <_ZL11loop_updatev+0x23c>)
 800c21c:	edc3 7a00 	vstr	s15, [r3]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 800c220:	4b6a      	ldr	r3, [pc, #424]	@ (800c3cc <_ZL11loop_updatev+0x228>)
 800c222:	891b      	ldrh	r3, [r3, #8]
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c22c:	4b68      	ldr	r3, [pc, #416]	@ (800c3d0 <_ZL11loop_updatev+0x22c>)
 800c22e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c232:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c236:	4b67      	ldr	r3, [pc, #412]	@ (800c3d4 <_ZL11loop_updatev+0x230>)
 800c238:	edd3 7a04 	vldr	s15, [r3, #16]
 800c23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c240:	4b68      	ldr	r3, [pc, #416]	@ (800c3e4 <_ZL11loop_updatev+0x240>)
 800c242:	edc3 7a00 	vstr	s15, [r3]

	if (in_loop){
 800c246:	4b68      	ldr	r3, [pc, #416]	@ (800c3e8 <_ZL11loop_updatev+0x244>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 80ba 	beq.w	800c3c4 <_ZL11loop_updatev+0x220>
		update_pid_maxpow();
 800c250:	f7ff f9be 	bl	800b5d0 <_ZL17update_pid_maxpowv>

		// Estimate desired chassis power (W)
		float ref_Pchassis = get_PID(&pid[pid_names::P_bat], max_chassis_power-3, chassis_voltage * battery_current, 0);
 800c254:	4b65      	ldr	r3, [pc, #404]	@ (800c3ec <_ZL11loop_updatev+0x248>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	3b03      	subs	r3, #3
 800c25a:	ee07 3a90 	vmov	s15, r3
 800c25e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c262:	4b5e      	ldr	r3, [pc, #376]	@ (800c3dc <_ZL11loop_updatev+0x238>)
 800c264:	ed93 7a00 	vldr	s14, [r3]
 800c268:	4b5e      	ldr	r3, [pc, #376]	@ (800c3e4 <_ZL11loop_updatev+0x240>)
 800c26a:	edd3 7a00 	vldr	s15, [r3]
 800c26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c272:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800c3f0 <_ZL11loop_updatev+0x24c>
 800c276:	eef0 0a67 	vmov.f32	s1, s15
 800c27a:	eeb0 0a66 	vmov.f32	s0, s13
 800c27e:	485d      	ldr	r0, [pc, #372]	@ (800c3f4 <_ZL11loop_updatev+0x250>)
 800c280:	f7ff fd50 	bl	800bd24 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c284:	ed87 0a04 	vstr	s0, [r7, #16]

		// Estimate supercap current needed to maintain ref_Pchassis
		float temp = ref_Pchassis / cap_voltage;
 800c288:	4b53      	ldr	r3, [pc, #332]	@ (800c3d8 <_ZL11loop_updatev+0x234>)
 800c28a:	ed93 7a00 	vldr	s14, [r3]
 800c28e:	edd7 6a04 	vldr	s13, [r7, #16]
 800c292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c296:	edc7 7a07 	vstr	s15, [r7, #28]

		// Clamp intermediate target current
		if(temp > MAX_CAP_CURRENT)
 800c29a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c29e:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800c2a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2aa:	dd02      	ble.n	800c2b2 <_ZL11loop_updatev+0x10e>
			temp = MAX_CAP_CURRENT;
 800c2ac:	4b52      	ldr	r3, [pc, #328]	@ (800c3f8 <_ZL11loop_updatev+0x254>)
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e00a      	b.n	800c2c8 <_ZL11loop_updatev+0x124>
		else if (temp < -MAX_CAP_CURRENT)
 800c2b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2b6:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
 800c2ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c2:	d501      	bpl.n	800c2c8 <_ZL11loop_updatev+0x124>
			temp = -MAX_CAP_CURRENT;
 800c2c4:	4b4d      	ldr	r3, [pc, #308]	@ (800c3fc <_ZL11loop_updatev+0x258>)
 800c2c6:	61fb      	str	r3, [r7, #28]

		// Refine supercap current using ESR model
		float ref_icap = ref_Pchassis / (cap_voltage + ESR_VALUE * (temp - I_supercap_last));
 800c2c8:	4b4d      	ldr	r3, [pc, #308]	@ (800c400 <_ZL11loop_updatev+0x25c>)
 800c2ca:	edd3 7a00 	vldr	s15, [r3]
 800c2ce:	ed97 7a07 	vldr	s14, [r7, #28]
 800c2d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2d6:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800c404 <_ZL11loop_updatev+0x260>
 800c2da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2de:	4b3e      	ldr	r3, [pc, #248]	@ (800c3d8 <_ZL11loop_updatev+0x234>)
 800c2e0:	edd3 7a00 	vldr	s15, [r3]
 800c2e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2e8:	edd7 6a04 	vldr	s13, [r7, #16]
 800c2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Final current clamping
		if(ref_icap > MAX_CAP_CURRENT)
 800c2f4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2f8:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800c2fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c304:	dd02      	ble.n	800c30c <_ZL11loop_updatev+0x168>
			ref_icap = MAX_CAP_CURRENT;
 800c306:	4b3c      	ldr	r3, [pc, #240]	@ (800c3f8 <_ZL11loop_updatev+0x254>)
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	e00a      	b.n	800c322 <_ZL11loop_updatev+0x17e>
		else if(ref_icap < -MAX_CAP_CURRENT)
 800c30c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c310:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
 800c314:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31c:	d501      	bpl.n	800c322 <_ZL11loop_updatev+0x17e>
			ref_icap = -MAX_CAP_CURRENT;
 800c31e:	4b37      	ldr	r3, [pc, #220]	@ (800c3fc <_ZL11loop_updatev+0x258>)
 800c320:	61bb      	str	r3, [r7, #24]

		icap_output = ref_icap;
 800c322:	4a39      	ldr	r2, [pc, #228]	@ (800c408 <_ZL11loop_updatev+0x264>)
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	6013      	str	r3, [r2, #0]
		I_supercap_last = ref_icap;
 800c328:	4a35      	ldr	r2, [pc, #212]	@ (800c400 <_ZL11loop_updatev+0x25c>)
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	6013      	str	r3, [r2, #0]

		// Cascade PID: get duty cycle from current loop
		float ref_duty_ratio = get_PID(&pid[pid_names::I_capa], ref_icap, cap_current, 0);
 800c32e:	4b2c      	ldr	r3, [pc, #176]	@ (800c3e0 <_ZL11loop_updatev+0x23c>)
 800c330:	edd3 7a00 	vldr	s15, [r3]
 800c334:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 800c3f0 <_ZL11loop_updatev+0x24c>
 800c338:	eef0 0a67 	vmov.f32	s1, s15
 800c33c:	ed97 0a06 	vldr	s0, [r7, #24]
 800c340:	4832      	ldr	r0, [pc, #200]	@ (800c40c <_ZL11loop_updatev+0x268>)
 800c342:	f7ff fcef 	bl	800bd24 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c346:	ed87 0a03 	vstr	s0, [r7, #12]

		// Clamp duty cycle based on voltage thresholds
		float Vcapmax_ratio = get_PID(&pid[pid_names::V_cap_max], SUPERCAP_MAX_VOLTAGE, cap_voltage, 0);
 800c34a:	4b23      	ldr	r3, [pc, #140]	@ (800c3d8 <_ZL11loop_updatev+0x234>)
 800c34c:	edd3 7a00 	vldr	s15, [r3]
 800c350:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800c3f0 <_ZL11loop_updatev+0x24c>
 800c354:	eef0 0a67 	vmov.f32	s1, s15
 800c358:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800c410 <_ZL11loop_updatev+0x26c>
 800c35c:	482d      	ldr	r0, [pc, #180]	@ (800c414 <_ZL11loop_updatev+0x270>)
 800c35e:	f7ff fce1 	bl	800bd24 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c362:	ed87 0a02 	vstr	s0, [r7, #8]
		float Vcapmin_ratio = get_PID(&pid[pid_names::V_cap_min], SUPERCAP_MIN_VOLTAGE, cap_voltage, 0);
 800c366:	4b1c      	ldr	r3, [pc, #112]	@ (800c3d8 <_ZL11loop_updatev+0x234>)
 800c368:	edd3 7a00 	vldr	s15, [r3]
 800c36c:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 800c3f0 <_ZL11loop_updatev+0x24c>
 800c370:	eef0 0a67 	vmov.f32	s1, s15
 800c374:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800c378:	4827      	ldr	r0, [pc, #156]	@ (800c418 <_ZL11loop_updatev+0x274>)
 800c37a:	f7ff fcd3 	bl	800bd24 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c37e:	ed87 0a01 	vstr	s0, [r7, #4]

		float out_duty_ratio = 0.0;
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
		if(ref_duty_ratio > Vcapmax_ratio)
 800c388:	ed97 7a03 	vldr	s14, [r7, #12]
 800c38c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c398:	dd02      	ble.n	800c3a0 <_ZL11loop_updatev+0x1fc>
			out_duty_ratio = Vcapmax_ratio;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	e00d      	b.n	800c3bc <_ZL11loop_updatev+0x218>
		else if (ref_duty_ratio < Vcapmin_ratio)
 800c3a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b0:	d502      	bpl.n	800c3b8 <_ZL11loop_updatev+0x214>
			out_duty_ratio = Vcapmin_ratio;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	e001      	b.n	800c3bc <_ZL11loop_updatev+0x218>
		else
			out_duty_ratio = ref_duty_ratio;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	617b      	str	r3, [r7, #20]

		update_dutyCycle(out_duty_ratio);
 800c3bc:	ed97 0a05 	vldr	s0, [r7, #20]
 800c3c0:	f7ff fc14 	bl	800bbec <_ZL16update_dutyCyclef>
	}
}
 800c3c4:	bf00      	nop
 800c3c6:	3720      	adds	r7, #32
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	200010ec 	.word	0x200010ec
 800c3d0:	200010f8 	.word	0x200010f8
 800c3d4:	2000110c 	.word	0x2000110c
 800c3d8:	20001134 	.word	0x20001134
 800c3dc:	20001138 	.word	0x20001138
 800c3e0:	2000113c 	.word	0x2000113c
 800c3e4:	20001140 	.word	0x20001140
 800c3e8:	2000114f 	.word	0x2000114f
 800c3ec:	20000031 	.word	0x20000031
 800c3f0:	00000000 	.word	0x00000000
 800c3f4:	20001154 	.word	0x20001154
 800c3f8:	41900000 	.word	0x41900000
 800c3fc:	c1900000 	.word	0xc1900000
 800c400:	20001258 	.word	0x20001258
 800c404:	3e2e147b 	.word	0x3e2e147b
 800c408:	20001130 	.word	0x20001130
 800c40c:	200011bc 	.word	0x200011bc
 800c410:	41cc0000 	.word	0x41cc0000
 800c414:	200011f0 	.word	0x200011f0
 800c418:	20001224 	.word	0x20001224

0800c41c <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>:
 * Clears error flags and restarts the ADC and DMA modules to restore normal operation.
 * Required to recover from transient ADC DMA overflows due to latency or missed callbacks.
 *
 * @param hadc Pointer to the ADC handle that experienced overrun.
 */
void AnalogSignal_ADCDMA_OVRRecovery(ADC_HandleTypeDef *hadc){
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2210      	movs	r2, #16
 800c42a:	601a      	str	r2, [r3, #0]
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68da      	ldr	r2, [r3, #12]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f042 0201 	orr.w	r2, r2, #1
 800c43a:	60da      	str	r2, [r3, #12]

	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	4b17      	ldr	r3, [pc, #92]	@ (800c4a4 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x88>)
 800c446:	429a      	cmp	r2, r3
 800c448:	d903      	bls.n	800c452 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x36>
 800c44a:	4b17      	ldr	r3, [pc, #92]	@ (800c4a8 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x8c>)
 800c44c:	2208      	movs	r2, #8
 800c44e:	605a      	str	r2, [r3, #4]
 800c450:	e002      	b.n	800c458 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x3c>
 800c452:	4b16      	ldr	r3, [pc, #88]	@ (800c4ac <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x90>)
 800c454:	2208      	movs	r2, #8
 800c456:	605a      	str	r2, [r3, #4]
	hadc->DMA_Handle->Instance->CCR |= 0x00000001; // Re-enable DMA
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0201 	orr.w	r2, r2, #1
 800c46a:	601a      	str	r2, [r3, #0]

	// Wait until ADC is ready again
	while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 800c46c:	bf00      	nop
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b01      	cmp	r3, #1
 800c47a:	bf14      	ite	ne
 800c47c:	2301      	movne	r3, #1
 800c47e:	2300      	moveq	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f3      	bne.n	800c46e <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x52>
		// spin until ready
	}

	hadc->Instance->CR |= 0x00000004; // Start ADC again
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689a      	ldr	r2, [r3, #8]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f042 0204 	orr.w	r2, r2, #4
 800c494:	609a      	str	r2, [r3, #8]
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	40020094 	.word	0x40020094
 800c4a8:	40020400 	.word	0x40020400
 800c4ac:	40020000 	.word	0x40020000

0800c4b0 <HAL_HRTIM_RepetitionEventCallback>:
 * of current, power, and duty cycles for the supercap management system.
 *
 * @param hhrtim Pointer to the HRTIM handle (unused here).
 * @param TimerIdx Index of the timer triggering the event (unused).
 */
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	uint8_t ADC_OVR_Flag = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]

	// Check and recover ADC1 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR) == 1UL) {
 800c4be:	4b1d      	ldr	r3, [pc, #116]	@ (800c534 <HAL_HRTIM_RepetitionEventCallback+0x84>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b10      	cmp	r3, #16
 800c4ca:	bf0c      	ite	eq
 800c4cc:	2301      	moveq	r3, #1
 800c4ce:	2300      	movne	r3, #0
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	bf0c      	ite	eq
 800c4d6:	2301      	moveq	r3, #1
 800c4d8:	2300      	movne	r3, #0
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <HAL_HRTIM_RepetitionEventCallback+0x3a>
		AnalogSignal_ADCDMA_OVRRecovery(&hadc1);
 800c4e0:	4814      	ldr	r0, [pc, #80]	@ (800c534 <HAL_HRTIM_RepetitionEventCallback+0x84>)
 800c4e2:	f7ff ff9b 	bl	800c41c <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag = 1;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	73fb      	strb	r3, [r7, #15]
	}

	// Check and recover ADC2 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 800c4ea:	4b13      	ldr	r3, [pc, #76]	@ (800c538 <HAL_HRTIM_RepetitionEventCallback+0x88>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0310 	and.w	r3, r3, #16
 800c4f4:	2b10      	cmp	r3, #16
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2301      	moveq	r3, #1
 800c4fa:	2300      	movne	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	bf0c      	ite	eq
 800c502:	2301      	moveq	r3, #1
 800c504:	2300      	movne	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <HAL_HRTIM_RepetitionEventCallback+0x66>
		AnalogSignal_ADCDMA_OVRRecovery(&hadc2);
 800c50c:	480a      	ldr	r0, [pc, #40]	@ (800c538 <HAL_HRTIM_RepetitionEventCallback+0x88>)
 800c50e:	f7ff ff85 	bl	800c41c <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag = 1;
 800c512:	2301      	movs	r3, #1
 800c514:	73fb      	strb	r3, [r7, #15]
	}

	// Continue normal control loop only if no overflow occurred
	if (ADC_OVR_Flag == 0) {
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d107      	bne.n	800c52c <HAL_HRTIM_RepetitionEventCallback+0x7c>
		sample_adc();
 800c51c:	f7ff f9f4 	bl	800b908 <_ZL10sample_adcv>
		if (is_init) {
 800c520:	4b06      	ldr	r3, [pc, #24]	@ (800c53c <HAL_HRTIM_RepetitionEventCallback+0x8c>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <HAL_HRTIM_RepetitionEventCallback+0x7c>
			loop_update();  // Core of supercap control logic
 800c528:	f7ff fe3c 	bl	800c1a4 <_ZL11loop_updatev>
		}
	}
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	20000218 	.word	0x20000218
 800c538:	20000284 	.word	0x20000284
 800c53c:	2000114e 	.word	0x2000114e

0800c540 <arm_pid_init_f32>:
 800c540:	edd0 6a08 	vldr	s13, [r0, #32]
 800c544:	edd0 7a06 	vldr	s15, [r0, #24]
 800c548:	ed90 7a07 	vldr	s14, [r0, #28]
 800c54c:	edc0 6a02 	vstr	s13, [r0, #8]
 800c550:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c554:	ee36 6aa6 	vadd.f32	s12, s13, s13
 800c558:	eef1 7a67 	vneg.f32	s15, s15
 800c55c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c560:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c564:	ed80 7a00 	vstr	s14, [r0]
 800c568:	edc0 7a01 	vstr	s15, [r0, #4]
 800c56c:	b901      	cbnz	r1, 800c570 <arm_pid_init_f32+0x30>
 800c56e:	4770      	bx	lr
 800c570:	2300      	movs	r3, #0
 800c572:	60c3      	str	r3, [r0, #12]
 800c574:	6103      	str	r3, [r0, #16]
 800c576:	6143      	str	r3, [r0, #20]
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop

0800c57c <__cvt>:
 800c57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	ec57 6b10 	vmov	r6, r7, d0
 800c584:	2f00      	cmp	r7, #0
 800c586:	460c      	mov	r4, r1
 800c588:	4619      	mov	r1, r3
 800c58a:	463b      	mov	r3, r7
 800c58c:	bfbb      	ittet	lt
 800c58e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c592:	461f      	movlt	r7, r3
 800c594:	2300      	movge	r3, #0
 800c596:	232d      	movlt	r3, #45	@ 0x2d
 800c598:	700b      	strb	r3, [r1, #0]
 800c59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c59c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c5a0:	4691      	mov	r9, r2
 800c5a2:	f023 0820 	bic.w	r8, r3, #32
 800c5a6:	bfbc      	itt	lt
 800c5a8:	4632      	movlt	r2, r6
 800c5aa:	4616      	movlt	r6, r2
 800c5ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5b0:	d005      	beq.n	800c5be <__cvt+0x42>
 800c5b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c5b6:	d100      	bne.n	800c5ba <__cvt+0x3e>
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	2102      	movs	r1, #2
 800c5bc:	e000      	b.n	800c5c0 <__cvt+0x44>
 800c5be:	2103      	movs	r1, #3
 800c5c0:	ab03      	add	r3, sp, #12
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	ab02      	add	r3, sp, #8
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	ec47 6b10 	vmov	d0, r6, r7
 800c5cc:	4653      	mov	r3, sl
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	f000 fe3a 	bl	800d248 <_dtoa_r>
 800c5d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5d8:	4605      	mov	r5, r0
 800c5da:	d119      	bne.n	800c610 <__cvt+0x94>
 800c5dc:	f019 0f01 	tst.w	r9, #1
 800c5e0:	d00e      	beq.n	800c600 <__cvt+0x84>
 800c5e2:	eb00 0904 	add.w	r9, r0, r4
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f4 fa93 	bl	8000b18 <__aeabi_dcmpeq>
 800c5f2:	b108      	cbz	r0, 800c5f8 <__cvt+0x7c>
 800c5f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5f8:	2230      	movs	r2, #48	@ 0x30
 800c5fa:	9b03      	ldr	r3, [sp, #12]
 800c5fc:	454b      	cmp	r3, r9
 800c5fe:	d31e      	bcc.n	800c63e <__cvt+0xc2>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c604:	1b5b      	subs	r3, r3, r5
 800c606:	4628      	mov	r0, r5
 800c608:	6013      	str	r3, [r2, #0]
 800c60a:	b004      	add	sp, #16
 800c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c614:	eb00 0904 	add.w	r9, r0, r4
 800c618:	d1e5      	bne.n	800c5e6 <__cvt+0x6a>
 800c61a:	7803      	ldrb	r3, [r0, #0]
 800c61c:	2b30      	cmp	r3, #48	@ 0x30
 800c61e:	d10a      	bne.n	800c636 <__cvt+0xba>
 800c620:	2200      	movs	r2, #0
 800c622:	2300      	movs	r3, #0
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 fa76 	bl	8000b18 <__aeabi_dcmpeq>
 800c62c:	b918      	cbnz	r0, 800c636 <__cvt+0xba>
 800c62e:	f1c4 0401 	rsb	r4, r4, #1
 800c632:	f8ca 4000 	str.w	r4, [sl]
 800c636:	f8da 3000 	ldr.w	r3, [sl]
 800c63a:	4499      	add	r9, r3
 800c63c:	e7d3      	b.n	800c5e6 <__cvt+0x6a>
 800c63e:	1c59      	adds	r1, r3, #1
 800c640:	9103      	str	r1, [sp, #12]
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	e7d9      	b.n	800c5fa <__cvt+0x7e>

0800c646 <__exponent>:
 800c646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c648:	2900      	cmp	r1, #0
 800c64a:	bfba      	itte	lt
 800c64c:	4249      	neglt	r1, r1
 800c64e:	232d      	movlt	r3, #45	@ 0x2d
 800c650:	232b      	movge	r3, #43	@ 0x2b
 800c652:	2909      	cmp	r1, #9
 800c654:	7002      	strb	r2, [r0, #0]
 800c656:	7043      	strb	r3, [r0, #1]
 800c658:	dd29      	ble.n	800c6ae <__exponent+0x68>
 800c65a:	f10d 0307 	add.w	r3, sp, #7
 800c65e:	461d      	mov	r5, r3
 800c660:	270a      	movs	r7, #10
 800c662:	461a      	mov	r2, r3
 800c664:	fbb1 f6f7 	udiv	r6, r1, r7
 800c668:	fb07 1416 	mls	r4, r7, r6, r1
 800c66c:	3430      	adds	r4, #48	@ 0x30
 800c66e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c672:	460c      	mov	r4, r1
 800c674:	2c63      	cmp	r4, #99	@ 0x63
 800c676:	f103 33ff 	add.w	r3, r3, #4294967295
 800c67a:	4631      	mov	r1, r6
 800c67c:	dcf1      	bgt.n	800c662 <__exponent+0x1c>
 800c67e:	3130      	adds	r1, #48	@ 0x30
 800c680:	1e94      	subs	r4, r2, #2
 800c682:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c686:	1c41      	adds	r1, r0, #1
 800c688:	4623      	mov	r3, r4
 800c68a:	42ab      	cmp	r3, r5
 800c68c:	d30a      	bcc.n	800c6a4 <__exponent+0x5e>
 800c68e:	f10d 0309 	add.w	r3, sp, #9
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	42ac      	cmp	r4, r5
 800c696:	bf88      	it	hi
 800c698:	2300      	movhi	r3, #0
 800c69a:	3302      	adds	r3, #2
 800c69c:	4403      	add	r3, r0
 800c69e:	1a18      	subs	r0, r3, r0
 800c6a0:	b003      	add	sp, #12
 800c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6ac:	e7ed      	b.n	800c68a <__exponent+0x44>
 800c6ae:	2330      	movs	r3, #48	@ 0x30
 800c6b0:	3130      	adds	r1, #48	@ 0x30
 800c6b2:	7083      	strb	r3, [r0, #2]
 800c6b4:	70c1      	strb	r1, [r0, #3]
 800c6b6:	1d03      	adds	r3, r0, #4
 800c6b8:	e7f1      	b.n	800c69e <__exponent+0x58>
	...

0800c6bc <_printf_float>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	b08d      	sub	sp, #52	@ 0x34
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	f000 fcbb 	bl	800d048 <_localeconv_r>
 800c6d2:	6803      	ldr	r3, [r0, #0]
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f3 fdf2 	bl	80002c0 <strlen>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6e4:	9005      	str	r0, [sp, #20]
 800c6e6:	3307      	adds	r3, #7
 800c6e8:	f023 0307 	bic.w	r3, r3, #7
 800c6ec:	f103 0208 	add.w	r2, r3, #8
 800c6f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6f4:	f8d4 b000 	ldr.w	fp, [r4]
 800c6f8:	f8c8 2000 	str.w	r2, [r8]
 800c6fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c700:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c704:	9307      	str	r3, [sp, #28]
 800c706:	f8cd 8018 	str.w	r8, [sp, #24]
 800c70a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c70e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c712:	4b9c      	ldr	r3, [pc, #624]	@ (800c984 <_printf_float+0x2c8>)
 800c714:	f04f 32ff 	mov.w	r2, #4294967295
 800c718:	f7f4 fa30 	bl	8000b7c <__aeabi_dcmpun>
 800c71c:	bb70      	cbnz	r0, 800c77c <_printf_float+0xc0>
 800c71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c722:	4b98      	ldr	r3, [pc, #608]	@ (800c984 <_printf_float+0x2c8>)
 800c724:	f04f 32ff 	mov.w	r2, #4294967295
 800c728:	f7f4 fa0a 	bl	8000b40 <__aeabi_dcmple>
 800c72c:	bb30      	cbnz	r0, 800c77c <_printf_float+0xc0>
 800c72e:	2200      	movs	r2, #0
 800c730:	2300      	movs	r3, #0
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f4 f9f9 	bl	8000b2c <__aeabi_dcmplt>
 800c73a:	b110      	cbz	r0, 800c742 <_printf_float+0x86>
 800c73c:	232d      	movs	r3, #45	@ 0x2d
 800c73e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c742:	4a91      	ldr	r2, [pc, #580]	@ (800c988 <_printf_float+0x2cc>)
 800c744:	4b91      	ldr	r3, [pc, #580]	@ (800c98c <_printf_float+0x2d0>)
 800c746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c74a:	bf94      	ite	ls
 800c74c:	4690      	movls	r8, r2
 800c74e:	4698      	movhi	r8, r3
 800c750:	2303      	movs	r3, #3
 800c752:	6123      	str	r3, [r4, #16]
 800c754:	f02b 0304 	bic.w	r3, fp, #4
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	f04f 0900 	mov.w	r9, #0
 800c75e:	9700      	str	r7, [sp, #0]
 800c760:	4633      	mov	r3, r6
 800c762:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c764:	4621      	mov	r1, r4
 800c766:	4628      	mov	r0, r5
 800c768:	f000 f9d2 	bl	800cb10 <_printf_common>
 800c76c:	3001      	adds	r0, #1
 800c76e:	f040 808d 	bne.w	800c88c <_printf_float+0x1d0>
 800c772:	f04f 30ff 	mov.w	r0, #4294967295
 800c776:	b00d      	add	sp, #52	@ 0x34
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	4642      	mov	r2, r8
 800c77e:	464b      	mov	r3, r9
 800c780:	4640      	mov	r0, r8
 800c782:	4649      	mov	r1, r9
 800c784:	f7f4 f9fa 	bl	8000b7c <__aeabi_dcmpun>
 800c788:	b140      	cbz	r0, 800c79c <_printf_float+0xe0>
 800c78a:	464b      	mov	r3, r9
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfbc      	itt	lt
 800c790:	232d      	movlt	r3, #45	@ 0x2d
 800c792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c796:	4a7e      	ldr	r2, [pc, #504]	@ (800c990 <_printf_float+0x2d4>)
 800c798:	4b7e      	ldr	r3, [pc, #504]	@ (800c994 <_printf_float+0x2d8>)
 800c79a:	e7d4      	b.n	800c746 <_printf_float+0x8a>
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c7a2:	9206      	str	r2, [sp, #24]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	d13b      	bne.n	800c820 <_printf_float+0x164>
 800c7a8:	2306      	movs	r3, #6
 800c7aa:	6063      	str	r3, [r4, #4]
 800c7ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	6022      	str	r2, [r4, #0]
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c7bc:	ab09      	add	r3, sp, #36	@ 0x24
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	6861      	ldr	r1, [r4, #4]
 800c7c2:	ec49 8b10 	vmov	d0, r8, r9
 800c7c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f7ff fed6 	bl	800c57c <__cvt>
 800c7d0:	9b06      	ldr	r3, [sp, #24]
 800c7d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7d4:	2b47      	cmp	r3, #71	@ 0x47
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	d129      	bne.n	800c82e <_printf_float+0x172>
 800c7da:	1cc8      	adds	r0, r1, #3
 800c7dc:	db02      	blt.n	800c7e4 <_printf_float+0x128>
 800c7de:	6863      	ldr	r3, [r4, #4]
 800c7e0:	4299      	cmp	r1, r3
 800c7e2:	dd41      	ble.n	800c868 <_printf_float+0x1ac>
 800c7e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7e8:	fa5f fa8a 	uxtb.w	sl, sl
 800c7ec:	3901      	subs	r1, #1
 800c7ee:	4652      	mov	r2, sl
 800c7f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7f6:	f7ff ff26 	bl	800c646 <__exponent>
 800c7fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7fc:	1813      	adds	r3, r2, r0
 800c7fe:	2a01      	cmp	r2, #1
 800c800:	4681      	mov	r9, r0
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	dc02      	bgt.n	800c80c <_printf_float+0x150>
 800c806:	6822      	ldr	r2, [r4, #0]
 800c808:	07d2      	lsls	r2, r2, #31
 800c80a:	d501      	bpl.n	800c810 <_printf_float+0x154>
 800c80c:	3301      	adds	r3, #1
 800c80e:	6123      	str	r3, [r4, #16]
 800c810:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c814:	2b00      	cmp	r3, #0
 800c816:	d0a2      	beq.n	800c75e <_printf_float+0xa2>
 800c818:	232d      	movs	r3, #45	@ 0x2d
 800c81a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c81e:	e79e      	b.n	800c75e <_printf_float+0xa2>
 800c820:	9a06      	ldr	r2, [sp, #24]
 800c822:	2a47      	cmp	r2, #71	@ 0x47
 800c824:	d1c2      	bne.n	800c7ac <_printf_float+0xf0>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1c0      	bne.n	800c7ac <_printf_float+0xf0>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e7bd      	b.n	800c7aa <_printf_float+0xee>
 800c82e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c832:	d9db      	bls.n	800c7ec <_printf_float+0x130>
 800c834:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c838:	d118      	bne.n	800c86c <_printf_float+0x1b0>
 800c83a:	2900      	cmp	r1, #0
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	dd0b      	ble.n	800c858 <_printf_float+0x19c>
 800c840:	6121      	str	r1, [r4, #16]
 800c842:	b913      	cbnz	r3, 800c84a <_printf_float+0x18e>
 800c844:	6822      	ldr	r2, [r4, #0]
 800c846:	07d0      	lsls	r0, r2, #31
 800c848:	d502      	bpl.n	800c850 <_printf_float+0x194>
 800c84a:	3301      	adds	r3, #1
 800c84c:	440b      	add	r3, r1
 800c84e:	6123      	str	r3, [r4, #16]
 800c850:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c852:	f04f 0900 	mov.w	r9, #0
 800c856:	e7db      	b.n	800c810 <_printf_float+0x154>
 800c858:	b913      	cbnz	r3, 800c860 <_printf_float+0x1a4>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	07d2      	lsls	r2, r2, #31
 800c85e:	d501      	bpl.n	800c864 <_printf_float+0x1a8>
 800c860:	3302      	adds	r3, #2
 800c862:	e7f4      	b.n	800c84e <_printf_float+0x192>
 800c864:	2301      	movs	r3, #1
 800c866:	e7f2      	b.n	800c84e <_printf_float+0x192>
 800c868:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c86c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c86e:	4299      	cmp	r1, r3
 800c870:	db05      	blt.n	800c87e <_printf_float+0x1c2>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	6121      	str	r1, [r4, #16]
 800c876:	07d8      	lsls	r0, r3, #31
 800c878:	d5ea      	bpl.n	800c850 <_printf_float+0x194>
 800c87a:	1c4b      	adds	r3, r1, #1
 800c87c:	e7e7      	b.n	800c84e <_printf_float+0x192>
 800c87e:	2900      	cmp	r1, #0
 800c880:	bfd4      	ite	le
 800c882:	f1c1 0202 	rsble	r2, r1, #2
 800c886:	2201      	movgt	r2, #1
 800c888:	4413      	add	r3, r2
 800c88a:	e7e0      	b.n	800c84e <_printf_float+0x192>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	055a      	lsls	r2, r3, #21
 800c890:	d407      	bmi.n	800c8a2 <_printf_float+0x1e6>
 800c892:	6923      	ldr	r3, [r4, #16]
 800c894:	4642      	mov	r2, r8
 800c896:	4631      	mov	r1, r6
 800c898:	4628      	mov	r0, r5
 800c89a:	47b8      	blx	r7
 800c89c:	3001      	adds	r0, #1
 800c89e:	d12b      	bne.n	800c8f8 <_printf_float+0x23c>
 800c8a0:	e767      	b.n	800c772 <_printf_float+0xb6>
 800c8a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8a6:	f240 80dd 	bls.w	800ca64 <_printf_float+0x3a8>
 800c8aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f7f4 f931 	bl	8000b18 <__aeabi_dcmpeq>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d033      	beq.n	800c922 <_printf_float+0x266>
 800c8ba:	4a37      	ldr	r2, [pc, #220]	@ (800c998 <_printf_float+0x2dc>)
 800c8bc:	2301      	movs	r3, #1
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f43f af54 	beq.w	800c772 <_printf_float+0xb6>
 800c8ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8ce:	4543      	cmp	r3, r8
 800c8d0:	db02      	blt.n	800c8d8 <_printf_float+0x21c>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	07d8      	lsls	r0, r3, #31
 800c8d6:	d50f      	bpl.n	800c8f8 <_printf_float+0x23c>
 800c8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4628      	mov	r0, r5
 800c8e0:	47b8      	blx	r7
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f43f af45 	beq.w	800c772 <_printf_float+0xb6>
 800c8e8:	f04f 0900 	mov.w	r9, #0
 800c8ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8f0:	f104 0a1a 	add.w	sl, r4, #26
 800c8f4:	45c8      	cmp	r8, r9
 800c8f6:	dc09      	bgt.n	800c90c <_printf_float+0x250>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	079b      	lsls	r3, r3, #30
 800c8fc:	f100 8103 	bmi.w	800cb06 <_printf_float+0x44a>
 800c900:	68e0      	ldr	r0, [r4, #12]
 800c902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c904:	4298      	cmp	r0, r3
 800c906:	bfb8      	it	lt
 800c908:	4618      	movlt	r0, r3
 800c90a:	e734      	b.n	800c776 <_printf_float+0xba>
 800c90c:	2301      	movs	r3, #1
 800c90e:	4652      	mov	r2, sl
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	f43f af2b 	beq.w	800c772 <_printf_float+0xb6>
 800c91c:	f109 0901 	add.w	r9, r9, #1
 800c920:	e7e8      	b.n	800c8f4 <_printf_float+0x238>
 800c922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	dc39      	bgt.n	800c99c <_printf_float+0x2e0>
 800c928:	4a1b      	ldr	r2, [pc, #108]	@ (800c998 <_printf_float+0x2dc>)
 800c92a:	2301      	movs	r3, #1
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af1d 	beq.w	800c772 <_printf_float+0xb6>
 800c938:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c93c:	ea59 0303 	orrs.w	r3, r9, r3
 800c940:	d102      	bne.n	800c948 <_printf_float+0x28c>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	07d9      	lsls	r1, r3, #31
 800c946:	d5d7      	bpl.n	800c8f8 <_printf_float+0x23c>
 800c948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c94c:	4631      	mov	r1, r6
 800c94e:	4628      	mov	r0, r5
 800c950:	47b8      	blx	r7
 800c952:	3001      	adds	r0, #1
 800c954:	f43f af0d 	beq.w	800c772 <_printf_float+0xb6>
 800c958:	f04f 0a00 	mov.w	sl, #0
 800c95c:	f104 0b1a 	add.w	fp, r4, #26
 800c960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c962:	425b      	negs	r3, r3
 800c964:	4553      	cmp	r3, sl
 800c966:	dc01      	bgt.n	800c96c <_printf_float+0x2b0>
 800c968:	464b      	mov	r3, r9
 800c96a:	e793      	b.n	800c894 <_printf_float+0x1d8>
 800c96c:	2301      	movs	r3, #1
 800c96e:	465a      	mov	r2, fp
 800c970:	4631      	mov	r1, r6
 800c972:	4628      	mov	r0, r5
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	f43f aefb 	beq.w	800c772 <_printf_float+0xb6>
 800c97c:	f10a 0a01 	add.w	sl, sl, #1
 800c980:	e7ee      	b.n	800c960 <_printf_float+0x2a4>
 800c982:	bf00      	nop
 800c984:	7fefffff 	.word	0x7fefffff
 800c988:	0800eee0 	.word	0x0800eee0
 800c98c:	0800eee4 	.word	0x0800eee4
 800c990:	0800eee8 	.word	0x0800eee8
 800c994:	0800eeec 	.word	0x0800eeec
 800c998:	0800eef0 	.word	0x0800eef0
 800c99c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c99e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9a2:	4553      	cmp	r3, sl
 800c9a4:	bfa8      	it	ge
 800c9a6:	4653      	movge	r3, sl
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	4699      	mov	r9, r3
 800c9ac:	dc36      	bgt.n	800ca1c <_printf_float+0x360>
 800c9ae:	f04f 0b00 	mov.w	fp, #0
 800c9b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9b6:	f104 021a 	add.w	r2, r4, #26
 800c9ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9bc:	9306      	str	r3, [sp, #24]
 800c9be:	eba3 0309 	sub.w	r3, r3, r9
 800c9c2:	455b      	cmp	r3, fp
 800c9c4:	dc31      	bgt.n	800ca2a <_printf_float+0x36e>
 800c9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c8:	459a      	cmp	sl, r3
 800c9ca:	dc3a      	bgt.n	800ca42 <_printf_float+0x386>
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	07da      	lsls	r2, r3, #31
 800c9d0:	d437      	bmi.n	800ca42 <_printf_float+0x386>
 800c9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d4:	ebaa 0903 	sub.w	r9, sl, r3
 800c9d8:	9b06      	ldr	r3, [sp, #24]
 800c9da:	ebaa 0303 	sub.w	r3, sl, r3
 800c9de:	4599      	cmp	r9, r3
 800c9e0:	bfa8      	it	ge
 800c9e2:	4699      	movge	r9, r3
 800c9e4:	f1b9 0f00 	cmp.w	r9, #0
 800c9e8:	dc33      	bgt.n	800ca52 <_printf_float+0x396>
 800c9ea:	f04f 0800 	mov.w	r8, #0
 800c9ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9f2:	f104 0b1a 	add.w	fp, r4, #26
 800c9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c9fc:	eba3 0309 	sub.w	r3, r3, r9
 800ca00:	4543      	cmp	r3, r8
 800ca02:	f77f af79 	ble.w	800c8f8 <_printf_float+0x23c>
 800ca06:	2301      	movs	r3, #1
 800ca08:	465a      	mov	r2, fp
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b8      	blx	r7
 800ca10:	3001      	adds	r0, #1
 800ca12:	f43f aeae 	beq.w	800c772 <_printf_float+0xb6>
 800ca16:	f108 0801 	add.w	r8, r8, #1
 800ca1a:	e7ec      	b.n	800c9f6 <_printf_float+0x33a>
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	4631      	mov	r1, r6
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b8      	blx	r7
 800ca24:	3001      	adds	r0, #1
 800ca26:	d1c2      	bne.n	800c9ae <_printf_float+0x2f2>
 800ca28:	e6a3      	b.n	800c772 <_printf_float+0xb6>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4628      	mov	r0, r5
 800ca30:	9206      	str	r2, [sp, #24]
 800ca32:	47b8      	blx	r7
 800ca34:	3001      	adds	r0, #1
 800ca36:	f43f ae9c 	beq.w	800c772 <_printf_float+0xb6>
 800ca3a:	9a06      	ldr	r2, [sp, #24]
 800ca3c:	f10b 0b01 	add.w	fp, fp, #1
 800ca40:	e7bb      	b.n	800c9ba <_printf_float+0x2fe>
 800ca42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca46:	4631      	mov	r1, r6
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b8      	blx	r7
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d1c0      	bne.n	800c9d2 <_printf_float+0x316>
 800ca50:	e68f      	b.n	800c772 <_printf_float+0xb6>
 800ca52:	9a06      	ldr	r2, [sp, #24]
 800ca54:	464b      	mov	r3, r9
 800ca56:	4442      	add	r2, r8
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	47b8      	blx	r7
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d1c3      	bne.n	800c9ea <_printf_float+0x32e>
 800ca62:	e686      	b.n	800c772 <_printf_float+0xb6>
 800ca64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca68:	f1ba 0f01 	cmp.w	sl, #1
 800ca6c:	dc01      	bgt.n	800ca72 <_printf_float+0x3b6>
 800ca6e:	07db      	lsls	r3, r3, #31
 800ca70:	d536      	bpl.n	800cae0 <_printf_float+0x424>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4642      	mov	r2, r8
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	f43f ae78 	beq.w	800c772 <_printf_float+0xb6>
 800ca82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	f43f ae70 	beq.w	800c772 <_printf_float+0xb6>
 800ca92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca96:	2200      	movs	r2, #0
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca9e:	f7f4 f83b 	bl	8000b18 <__aeabi_dcmpeq>
 800caa2:	b9c0      	cbnz	r0, 800cad6 <_printf_float+0x41a>
 800caa4:	4653      	mov	r3, sl
 800caa6:	f108 0201 	add.w	r2, r8, #1
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	47b8      	blx	r7
 800cab0:	3001      	adds	r0, #1
 800cab2:	d10c      	bne.n	800cace <_printf_float+0x412>
 800cab4:	e65d      	b.n	800c772 <_printf_float+0xb6>
 800cab6:	2301      	movs	r3, #1
 800cab8:	465a      	mov	r2, fp
 800caba:	4631      	mov	r1, r6
 800cabc:	4628      	mov	r0, r5
 800cabe:	47b8      	blx	r7
 800cac0:	3001      	adds	r0, #1
 800cac2:	f43f ae56 	beq.w	800c772 <_printf_float+0xb6>
 800cac6:	f108 0801 	add.w	r8, r8, #1
 800caca:	45d0      	cmp	r8, sl
 800cacc:	dbf3      	blt.n	800cab6 <_printf_float+0x3fa>
 800cace:	464b      	mov	r3, r9
 800cad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cad4:	e6df      	b.n	800c896 <_printf_float+0x1da>
 800cad6:	f04f 0800 	mov.w	r8, #0
 800cada:	f104 0b1a 	add.w	fp, r4, #26
 800cade:	e7f4      	b.n	800caca <_printf_float+0x40e>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4642      	mov	r2, r8
 800cae4:	e7e1      	b.n	800caaa <_printf_float+0x3ee>
 800cae6:	2301      	movs	r3, #1
 800cae8:	464a      	mov	r2, r9
 800caea:	4631      	mov	r1, r6
 800caec:	4628      	mov	r0, r5
 800caee:	47b8      	blx	r7
 800caf0:	3001      	adds	r0, #1
 800caf2:	f43f ae3e 	beq.w	800c772 <_printf_float+0xb6>
 800caf6:	f108 0801 	add.w	r8, r8, #1
 800cafa:	68e3      	ldr	r3, [r4, #12]
 800cafc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cafe:	1a5b      	subs	r3, r3, r1
 800cb00:	4543      	cmp	r3, r8
 800cb02:	dcf0      	bgt.n	800cae6 <_printf_float+0x42a>
 800cb04:	e6fc      	b.n	800c900 <_printf_float+0x244>
 800cb06:	f04f 0800 	mov.w	r8, #0
 800cb0a:	f104 0919 	add.w	r9, r4, #25
 800cb0e:	e7f4      	b.n	800cafa <_printf_float+0x43e>

0800cb10 <_printf_common>:
 800cb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb14:	4616      	mov	r6, r2
 800cb16:	4698      	mov	r8, r3
 800cb18:	688a      	ldr	r2, [r1, #8]
 800cb1a:	690b      	ldr	r3, [r1, #16]
 800cb1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	bfb8      	it	lt
 800cb24:	4613      	movlt	r3, r2
 800cb26:	6033      	str	r3, [r6, #0]
 800cb28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb2c:	4607      	mov	r7, r0
 800cb2e:	460c      	mov	r4, r1
 800cb30:	b10a      	cbz	r2, 800cb36 <_printf_common+0x26>
 800cb32:	3301      	adds	r3, #1
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	0699      	lsls	r1, r3, #26
 800cb3a:	bf42      	ittt	mi
 800cb3c:	6833      	ldrmi	r3, [r6, #0]
 800cb3e:	3302      	addmi	r3, #2
 800cb40:	6033      	strmi	r3, [r6, #0]
 800cb42:	6825      	ldr	r5, [r4, #0]
 800cb44:	f015 0506 	ands.w	r5, r5, #6
 800cb48:	d106      	bne.n	800cb58 <_printf_common+0x48>
 800cb4a:	f104 0a19 	add.w	sl, r4, #25
 800cb4e:	68e3      	ldr	r3, [r4, #12]
 800cb50:	6832      	ldr	r2, [r6, #0]
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	42ab      	cmp	r3, r5
 800cb56:	dc26      	bgt.n	800cba6 <_printf_common+0x96>
 800cb58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb5c:	6822      	ldr	r2, [r4, #0]
 800cb5e:	3b00      	subs	r3, #0
 800cb60:	bf18      	it	ne
 800cb62:	2301      	movne	r3, #1
 800cb64:	0692      	lsls	r2, r2, #26
 800cb66:	d42b      	bmi.n	800cbc0 <_printf_common+0xb0>
 800cb68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb6c:	4641      	mov	r1, r8
 800cb6e:	4638      	mov	r0, r7
 800cb70:	47c8      	blx	r9
 800cb72:	3001      	adds	r0, #1
 800cb74:	d01e      	beq.n	800cbb4 <_printf_common+0xa4>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	6922      	ldr	r2, [r4, #16]
 800cb7a:	f003 0306 	and.w	r3, r3, #6
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	bf02      	ittt	eq
 800cb82:	68e5      	ldreq	r5, [r4, #12]
 800cb84:	6833      	ldreq	r3, [r6, #0]
 800cb86:	1aed      	subeq	r5, r5, r3
 800cb88:	68a3      	ldr	r3, [r4, #8]
 800cb8a:	bf0c      	ite	eq
 800cb8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb90:	2500      	movne	r5, #0
 800cb92:	4293      	cmp	r3, r2
 800cb94:	bfc4      	itt	gt
 800cb96:	1a9b      	subgt	r3, r3, r2
 800cb98:	18ed      	addgt	r5, r5, r3
 800cb9a:	2600      	movs	r6, #0
 800cb9c:	341a      	adds	r4, #26
 800cb9e:	42b5      	cmp	r5, r6
 800cba0:	d11a      	bne.n	800cbd8 <_printf_common+0xc8>
 800cba2:	2000      	movs	r0, #0
 800cba4:	e008      	b.n	800cbb8 <_printf_common+0xa8>
 800cba6:	2301      	movs	r3, #1
 800cba8:	4652      	mov	r2, sl
 800cbaa:	4641      	mov	r1, r8
 800cbac:	4638      	mov	r0, r7
 800cbae:	47c8      	blx	r9
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	d103      	bne.n	800cbbc <_printf_common+0xac>
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbbc:	3501      	adds	r5, #1
 800cbbe:	e7c6      	b.n	800cb4e <_printf_common+0x3e>
 800cbc0:	18e1      	adds	r1, r4, r3
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	2030      	movs	r0, #48	@ 0x30
 800cbc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbca:	4422      	add	r2, r4
 800cbcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbd4:	3302      	adds	r3, #2
 800cbd6:	e7c7      	b.n	800cb68 <_printf_common+0x58>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4622      	mov	r2, r4
 800cbdc:	4641      	mov	r1, r8
 800cbde:	4638      	mov	r0, r7
 800cbe0:	47c8      	blx	r9
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d0e6      	beq.n	800cbb4 <_printf_common+0xa4>
 800cbe6:	3601      	adds	r6, #1
 800cbe8:	e7d9      	b.n	800cb9e <_printf_common+0x8e>
	...

0800cbec <_printf_i>:
 800cbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf0:	7e0f      	ldrb	r7, [r1, #24]
 800cbf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbf4:	2f78      	cmp	r7, #120	@ 0x78
 800cbf6:	4691      	mov	r9, r2
 800cbf8:	4680      	mov	r8, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	469a      	mov	sl, r3
 800cbfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc02:	d807      	bhi.n	800cc14 <_printf_i+0x28>
 800cc04:	2f62      	cmp	r7, #98	@ 0x62
 800cc06:	d80a      	bhi.n	800cc1e <_printf_i+0x32>
 800cc08:	2f00      	cmp	r7, #0
 800cc0a:	f000 80d2 	beq.w	800cdb2 <_printf_i+0x1c6>
 800cc0e:	2f58      	cmp	r7, #88	@ 0x58
 800cc10:	f000 80b9 	beq.w	800cd86 <_printf_i+0x19a>
 800cc14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc1c:	e03a      	b.n	800cc94 <_printf_i+0xa8>
 800cc1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc22:	2b15      	cmp	r3, #21
 800cc24:	d8f6      	bhi.n	800cc14 <_printf_i+0x28>
 800cc26:	a101      	add	r1, pc, #4	@ (adr r1, 800cc2c <_printf_i+0x40>)
 800cc28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc2c:	0800cc85 	.word	0x0800cc85
 800cc30:	0800cc99 	.word	0x0800cc99
 800cc34:	0800cc15 	.word	0x0800cc15
 800cc38:	0800cc15 	.word	0x0800cc15
 800cc3c:	0800cc15 	.word	0x0800cc15
 800cc40:	0800cc15 	.word	0x0800cc15
 800cc44:	0800cc99 	.word	0x0800cc99
 800cc48:	0800cc15 	.word	0x0800cc15
 800cc4c:	0800cc15 	.word	0x0800cc15
 800cc50:	0800cc15 	.word	0x0800cc15
 800cc54:	0800cc15 	.word	0x0800cc15
 800cc58:	0800cd99 	.word	0x0800cd99
 800cc5c:	0800ccc3 	.word	0x0800ccc3
 800cc60:	0800cd53 	.word	0x0800cd53
 800cc64:	0800cc15 	.word	0x0800cc15
 800cc68:	0800cc15 	.word	0x0800cc15
 800cc6c:	0800cdbb 	.word	0x0800cdbb
 800cc70:	0800cc15 	.word	0x0800cc15
 800cc74:	0800ccc3 	.word	0x0800ccc3
 800cc78:	0800cc15 	.word	0x0800cc15
 800cc7c:	0800cc15 	.word	0x0800cc15
 800cc80:	0800cd5b 	.word	0x0800cd5b
 800cc84:	6833      	ldr	r3, [r6, #0]
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6032      	str	r2, [r6, #0]
 800cc8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc94:	2301      	movs	r3, #1
 800cc96:	e09d      	b.n	800cdd4 <_printf_i+0x1e8>
 800cc98:	6833      	ldr	r3, [r6, #0]
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	1d19      	adds	r1, r3, #4
 800cc9e:	6031      	str	r1, [r6, #0]
 800cca0:	0606      	lsls	r6, r0, #24
 800cca2:	d501      	bpl.n	800cca8 <_printf_i+0xbc>
 800cca4:	681d      	ldr	r5, [r3, #0]
 800cca6:	e003      	b.n	800ccb0 <_printf_i+0xc4>
 800cca8:	0645      	lsls	r5, r0, #25
 800ccaa:	d5fb      	bpl.n	800cca4 <_printf_i+0xb8>
 800ccac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccb0:	2d00      	cmp	r5, #0
 800ccb2:	da03      	bge.n	800ccbc <_printf_i+0xd0>
 800ccb4:	232d      	movs	r3, #45	@ 0x2d
 800ccb6:	426d      	negs	r5, r5
 800ccb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccbc:	4859      	ldr	r0, [pc, #356]	@ (800ce24 <_printf_i+0x238>)
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	e011      	b.n	800cce6 <_printf_i+0xfa>
 800ccc2:	6821      	ldr	r1, [r4, #0]
 800ccc4:	6833      	ldr	r3, [r6, #0]
 800ccc6:	0608      	lsls	r0, r1, #24
 800ccc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cccc:	d402      	bmi.n	800ccd4 <_printf_i+0xe8>
 800ccce:	0649      	lsls	r1, r1, #25
 800ccd0:	bf48      	it	mi
 800ccd2:	b2ad      	uxthmi	r5, r5
 800ccd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccd6:	4853      	ldr	r0, [pc, #332]	@ (800ce24 <_printf_i+0x238>)
 800ccd8:	6033      	str	r3, [r6, #0]
 800ccda:	bf14      	ite	ne
 800ccdc:	230a      	movne	r3, #10
 800ccde:	2308      	moveq	r3, #8
 800cce0:	2100      	movs	r1, #0
 800cce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cce6:	6866      	ldr	r6, [r4, #4]
 800cce8:	60a6      	str	r6, [r4, #8]
 800ccea:	2e00      	cmp	r6, #0
 800ccec:	bfa2      	ittt	ge
 800ccee:	6821      	ldrge	r1, [r4, #0]
 800ccf0:	f021 0104 	bicge.w	r1, r1, #4
 800ccf4:	6021      	strge	r1, [r4, #0]
 800ccf6:	b90d      	cbnz	r5, 800ccfc <_printf_i+0x110>
 800ccf8:	2e00      	cmp	r6, #0
 800ccfa:	d04b      	beq.n	800cd94 <_printf_i+0x1a8>
 800ccfc:	4616      	mov	r6, r2
 800ccfe:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd02:	fb03 5711 	mls	r7, r3, r1, r5
 800cd06:	5dc7      	ldrb	r7, [r0, r7]
 800cd08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd0c:	462f      	mov	r7, r5
 800cd0e:	42bb      	cmp	r3, r7
 800cd10:	460d      	mov	r5, r1
 800cd12:	d9f4      	bls.n	800ccfe <_printf_i+0x112>
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d10b      	bne.n	800cd30 <_printf_i+0x144>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	07df      	lsls	r7, r3, #31
 800cd1c:	d508      	bpl.n	800cd30 <_printf_i+0x144>
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	6861      	ldr	r1, [r4, #4]
 800cd22:	4299      	cmp	r1, r3
 800cd24:	bfde      	ittt	le
 800cd26:	2330      	movle	r3, #48	@ 0x30
 800cd28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd30:	1b92      	subs	r2, r2, r6
 800cd32:	6122      	str	r2, [r4, #16]
 800cd34:	f8cd a000 	str.w	sl, [sp]
 800cd38:	464b      	mov	r3, r9
 800cd3a:	aa03      	add	r2, sp, #12
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4640      	mov	r0, r8
 800cd40:	f7ff fee6 	bl	800cb10 <_printf_common>
 800cd44:	3001      	adds	r0, #1
 800cd46:	d14a      	bne.n	800cdde <_printf_i+0x1f2>
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	b004      	add	sp, #16
 800cd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	f043 0320 	orr.w	r3, r3, #32
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	4833      	ldr	r0, [pc, #204]	@ (800ce28 <_printf_i+0x23c>)
 800cd5c:	2778      	movs	r7, #120	@ 0x78
 800cd5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	6831      	ldr	r1, [r6, #0]
 800cd66:	061f      	lsls	r7, r3, #24
 800cd68:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd6c:	d402      	bmi.n	800cd74 <_printf_i+0x188>
 800cd6e:	065f      	lsls	r7, r3, #25
 800cd70:	bf48      	it	mi
 800cd72:	b2ad      	uxthmi	r5, r5
 800cd74:	6031      	str	r1, [r6, #0]
 800cd76:	07d9      	lsls	r1, r3, #31
 800cd78:	bf44      	itt	mi
 800cd7a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd7e:	6023      	strmi	r3, [r4, #0]
 800cd80:	b11d      	cbz	r5, 800cd8a <_printf_i+0x19e>
 800cd82:	2310      	movs	r3, #16
 800cd84:	e7ac      	b.n	800cce0 <_printf_i+0xf4>
 800cd86:	4827      	ldr	r0, [pc, #156]	@ (800ce24 <_printf_i+0x238>)
 800cd88:	e7e9      	b.n	800cd5e <_printf_i+0x172>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f023 0320 	bic.w	r3, r3, #32
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	e7f6      	b.n	800cd82 <_printf_i+0x196>
 800cd94:	4616      	mov	r6, r2
 800cd96:	e7bd      	b.n	800cd14 <_printf_i+0x128>
 800cd98:	6833      	ldr	r3, [r6, #0]
 800cd9a:	6825      	ldr	r5, [r4, #0]
 800cd9c:	6961      	ldr	r1, [r4, #20]
 800cd9e:	1d18      	adds	r0, r3, #4
 800cda0:	6030      	str	r0, [r6, #0]
 800cda2:	062e      	lsls	r6, r5, #24
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	d501      	bpl.n	800cdac <_printf_i+0x1c0>
 800cda8:	6019      	str	r1, [r3, #0]
 800cdaa:	e002      	b.n	800cdb2 <_printf_i+0x1c6>
 800cdac:	0668      	lsls	r0, r5, #25
 800cdae:	d5fb      	bpl.n	800cda8 <_printf_i+0x1bc>
 800cdb0:	8019      	strh	r1, [r3, #0]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	4616      	mov	r6, r2
 800cdb8:	e7bc      	b.n	800cd34 <_printf_i+0x148>
 800cdba:	6833      	ldr	r3, [r6, #0]
 800cdbc:	1d1a      	adds	r2, r3, #4
 800cdbe:	6032      	str	r2, [r6, #0]
 800cdc0:	681e      	ldr	r6, [r3, #0]
 800cdc2:	6862      	ldr	r2, [r4, #4]
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f7f3 fa2a 	bl	8000220 <memchr>
 800cdcc:	b108      	cbz	r0, 800cdd2 <_printf_i+0x1e6>
 800cdce:	1b80      	subs	r0, r0, r6
 800cdd0:	6060      	str	r0, [r4, #4]
 800cdd2:	6863      	ldr	r3, [r4, #4]
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cddc:	e7aa      	b.n	800cd34 <_printf_i+0x148>
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	4632      	mov	r2, r6
 800cde2:	4649      	mov	r1, r9
 800cde4:	4640      	mov	r0, r8
 800cde6:	47d0      	blx	sl
 800cde8:	3001      	adds	r0, #1
 800cdea:	d0ad      	beq.n	800cd48 <_printf_i+0x15c>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	079b      	lsls	r3, r3, #30
 800cdf0:	d413      	bmi.n	800ce1a <_printf_i+0x22e>
 800cdf2:	68e0      	ldr	r0, [r4, #12]
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	4298      	cmp	r0, r3
 800cdf8:	bfb8      	it	lt
 800cdfa:	4618      	movlt	r0, r3
 800cdfc:	e7a6      	b.n	800cd4c <_printf_i+0x160>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	4632      	mov	r2, r6
 800ce02:	4649      	mov	r1, r9
 800ce04:	4640      	mov	r0, r8
 800ce06:	47d0      	blx	sl
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d09d      	beq.n	800cd48 <_printf_i+0x15c>
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	68e3      	ldr	r3, [r4, #12]
 800ce10:	9903      	ldr	r1, [sp, #12]
 800ce12:	1a5b      	subs	r3, r3, r1
 800ce14:	42ab      	cmp	r3, r5
 800ce16:	dcf2      	bgt.n	800cdfe <_printf_i+0x212>
 800ce18:	e7eb      	b.n	800cdf2 <_printf_i+0x206>
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	f104 0619 	add.w	r6, r4, #25
 800ce20:	e7f5      	b.n	800ce0e <_printf_i+0x222>
 800ce22:	bf00      	nop
 800ce24:	0800eef2 	.word	0x0800eef2
 800ce28:	0800ef03 	.word	0x0800ef03

0800ce2c <std>:
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	4604      	mov	r4, r0
 800ce32:	e9c0 3300 	strd	r3, r3, [r0]
 800ce36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce3a:	6083      	str	r3, [r0, #8]
 800ce3c:	8181      	strh	r1, [r0, #12]
 800ce3e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce40:	81c2      	strh	r2, [r0, #14]
 800ce42:	6183      	str	r3, [r0, #24]
 800ce44:	4619      	mov	r1, r3
 800ce46:	2208      	movs	r2, #8
 800ce48:	305c      	adds	r0, #92	@ 0x5c
 800ce4a:	f000 f8f4 	bl	800d036 <memset>
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <std+0x58>)
 800ce50:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce52:	4b0d      	ldr	r3, [pc, #52]	@ (800ce88 <std+0x5c>)
 800ce54:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce56:	4b0d      	ldr	r3, [pc, #52]	@ (800ce8c <std+0x60>)
 800ce58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <std+0x64>)
 800ce5c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <std+0x68>)
 800ce60:	6224      	str	r4, [r4, #32]
 800ce62:	429c      	cmp	r4, r3
 800ce64:	d006      	beq.n	800ce74 <std+0x48>
 800ce66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce6a:	4294      	cmp	r4, r2
 800ce6c:	d002      	beq.n	800ce74 <std+0x48>
 800ce6e:	33d0      	adds	r3, #208	@ 0xd0
 800ce70:	429c      	cmp	r4, r3
 800ce72:	d105      	bne.n	800ce80 <std+0x54>
 800ce74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce7c:	f000 b958 	b.w	800d130 <__retarget_lock_init_recursive>
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	bf00      	nop
 800ce84:	0800cfb1 	.word	0x0800cfb1
 800ce88:	0800cfd3 	.word	0x0800cfd3
 800ce8c:	0800d00b 	.word	0x0800d00b
 800ce90:	0800d02f 	.word	0x0800d02f
 800ce94:	2000126c 	.word	0x2000126c

0800ce98 <stdio_exit_handler>:
 800ce98:	4a02      	ldr	r2, [pc, #8]	@ (800cea4 <stdio_exit_handler+0xc>)
 800ce9a:	4903      	ldr	r1, [pc, #12]	@ (800cea8 <stdio_exit_handler+0x10>)
 800ce9c:	4803      	ldr	r0, [pc, #12]	@ (800ceac <stdio_exit_handler+0x14>)
 800ce9e:	f000 b869 	b.w	800cf74 <_fwalk_sglue>
 800cea2:	bf00      	nop
 800cea4:	20000034 	.word	0x20000034
 800cea8:	0800e7dd 	.word	0x0800e7dd
 800ceac:	20000044 	.word	0x20000044

0800ceb0 <cleanup_stdio>:
 800ceb0:	6841      	ldr	r1, [r0, #4]
 800ceb2:	4b0c      	ldr	r3, [pc, #48]	@ (800cee4 <cleanup_stdio+0x34>)
 800ceb4:	4299      	cmp	r1, r3
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	4604      	mov	r4, r0
 800ceba:	d001      	beq.n	800cec0 <cleanup_stdio+0x10>
 800cebc:	f001 fc8e 	bl	800e7dc <_fflush_r>
 800cec0:	68a1      	ldr	r1, [r4, #8]
 800cec2:	4b09      	ldr	r3, [pc, #36]	@ (800cee8 <cleanup_stdio+0x38>)
 800cec4:	4299      	cmp	r1, r3
 800cec6:	d002      	beq.n	800cece <cleanup_stdio+0x1e>
 800cec8:	4620      	mov	r0, r4
 800ceca:	f001 fc87 	bl	800e7dc <_fflush_r>
 800cece:	68e1      	ldr	r1, [r4, #12]
 800ced0:	4b06      	ldr	r3, [pc, #24]	@ (800ceec <cleanup_stdio+0x3c>)
 800ced2:	4299      	cmp	r1, r3
 800ced4:	d004      	beq.n	800cee0 <cleanup_stdio+0x30>
 800ced6:	4620      	mov	r0, r4
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f001 bc7e 	b.w	800e7dc <_fflush_r>
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	bf00      	nop
 800cee4:	2000126c 	.word	0x2000126c
 800cee8:	200012d4 	.word	0x200012d4
 800ceec:	2000133c 	.word	0x2000133c

0800cef0 <global_stdio_init.part.0>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	4b0b      	ldr	r3, [pc, #44]	@ (800cf20 <global_stdio_init.part.0+0x30>)
 800cef4:	4c0b      	ldr	r4, [pc, #44]	@ (800cf24 <global_stdio_init.part.0+0x34>)
 800cef6:	4a0c      	ldr	r2, [pc, #48]	@ (800cf28 <global_stdio_init.part.0+0x38>)
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	4620      	mov	r0, r4
 800cefc:	2200      	movs	r2, #0
 800cefe:	2104      	movs	r1, #4
 800cf00:	f7ff ff94 	bl	800ce2c <std>
 800cf04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf08:	2201      	movs	r2, #1
 800cf0a:	2109      	movs	r1, #9
 800cf0c:	f7ff ff8e 	bl	800ce2c <std>
 800cf10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf14:	2202      	movs	r2, #2
 800cf16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1a:	2112      	movs	r1, #18
 800cf1c:	f7ff bf86 	b.w	800ce2c <std>
 800cf20:	200013a4 	.word	0x200013a4
 800cf24:	2000126c 	.word	0x2000126c
 800cf28:	0800ce99 	.word	0x0800ce99

0800cf2c <__sfp_lock_acquire>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	@ (800cf34 <__sfp_lock_acquire+0x8>)
 800cf2e:	f000 b900 	b.w	800d132 <__retarget_lock_acquire_recursive>
 800cf32:	bf00      	nop
 800cf34:	200013ad 	.word	0x200013ad

0800cf38 <__sfp_lock_release>:
 800cf38:	4801      	ldr	r0, [pc, #4]	@ (800cf40 <__sfp_lock_release+0x8>)
 800cf3a:	f000 b8fb 	b.w	800d134 <__retarget_lock_release_recursive>
 800cf3e:	bf00      	nop
 800cf40:	200013ad 	.word	0x200013ad

0800cf44 <__sinit>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	f7ff fff0 	bl	800cf2c <__sfp_lock_acquire>
 800cf4c:	6a23      	ldr	r3, [r4, #32]
 800cf4e:	b11b      	cbz	r3, 800cf58 <__sinit+0x14>
 800cf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf54:	f7ff bff0 	b.w	800cf38 <__sfp_lock_release>
 800cf58:	4b04      	ldr	r3, [pc, #16]	@ (800cf6c <__sinit+0x28>)
 800cf5a:	6223      	str	r3, [r4, #32]
 800cf5c:	4b04      	ldr	r3, [pc, #16]	@ (800cf70 <__sinit+0x2c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1f5      	bne.n	800cf50 <__sinit+0xc>
 800cf64:	f7ff ffc4 	bl	800cef0 <global_stdio_init.part.0>
 800cf68:	e7f2      	b.n	800cf50 <__sinit+0xc>
 800cf6a:	bf00      	nop
 800cf6c:	0800ceb1 	.word	0x0800ceb1
 800cf70:	200013a4 	.word	0x200013a4

0800cf74 <_fwalk_sglue>:
 800cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf78:	4607      	mov	r7, r0
 800cf7a:	4688      	mov	r8, r1
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	2600      	movs	r6, #0
 800cf80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf84:	f1b9 0901 	subs.w	r9, r9, #1
 800cf88:	d505      	bpl.n	800cf96 <_fwalk_sglue+0x22>
 800cf8a:	6824      	ldr	r4, [r4, #0]
 800cf8c:	2c00      	cmp	r4, #0
 800cf8e:	d1f7      	bne.n	800cf80 <_fwalk_sglue+0xc>
 800cf90:	4630      	mov	r0, r6
 800cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf96:	89ab      	ldrh	r3, [r5, #12]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d907      	bls.n	800cfac <_fwalk_sglue+0x38>
 800cf9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	d003      	beq.n	800cfac <_fwalk_sglue+0x38>
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	47c0      	blx	r8
 800cfaa:	4306      	orrs	r6, r0
 800cfac:	3568      	adds	r5, #104	@ 0x68
 800cfae:	e7e9      	b.n	800cf84 <_fwalk_sglue+0x10>

0800cfb0 <__sread>:
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	f000 f86c 	bl	800d094 <_read_r>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	bfab      	itete	ge
 800cfc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cfc4:	181b      	addge	r3, r3, r0
 800cfc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfca:	bfac      	ite	ge
 800cfcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfce:	81a3      	strhlt	r3, [r4, #12]
 800cfd0:	bd10      	pop	{r4, pc}

0800cfd2 <__swrite>:
 800cfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	461f      	mov	r7, r3
 800cfd8:	898b      	ldrh	r3, [r1, #12]
 800cfda:	05db      	lsls	r3, r3, #23
 800cfdc:	4605      	mov	r5, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	d505      	bpl.n	800cff0 <__swrite+0x1e>
 800cfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe8:	2302      	movs	r3, #2
 800cfea:	2200      	movs	r2, #0
 800cfec:	f000 f840 	bl	800d070 <_lseek_r>
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cffa:	81a3      	strh	r3, [r4, #12]
 800cffc:	4632      	mov	r2, r6
 800cffe:	463b      	mov	r3, r7
 800d000:	4628      	mov	r0, r5
 800d002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d006:	f000 b857 	b.w	800d0b8 <_write_r>

0800d00a <__sseek>:
 800d00a:	b510      	push	{r4, lr}
 800d00c:	460c      	mov	r4, r1
 800d00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d012:	f000 f82d 	bl	800d070 <_lseek_r>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	bf15      	itete	ne
 800d01c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d01e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d026:	81a3      	strheq	r3, [r4, #12]
 800d028:	bf18      	it	ne
 800d02a:	81a3      	strhne	r3, [r4, #12]
 800d02c:	bd10      	pop	{r4, pc}

0800d02e <__sclose>:
 800d02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d032:	f000 b80d 	b.w	800d050 <_close_r>

0800d036 <memset>:
 800d036:	4402      	add	r2, r0
 800d038:	4603      	mov	r3, r0
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d100      	bne.n	800d040 <memset+0xa>
 800d03e:	4770      	bx	lr
 800d040:	f803 1b01 	strb.w	r1, [r3], #1
 800d044:	e7f9      	b.n	800d03a <memset+0x4>
	...

0800d048 <_localeconv_r>:
 800d048:	4800      	ldr	r0, [pc, #0]	@ (800d04c <_localeconv_r+0x4>)
 800d04a:	4770      	bx	lr
 800d04c:	20000180 	.word	0x20000180

0800d050 <_close_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d06      	ldr	r5, [pc, #24]	@ (800d06c <_close_r+0x1c>)
 800d054:	2300      	movs	r3, #0
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	602b      	str	r3, [r5, #0]
 800d05c:	f7f5 f9ea 	bl	8002434 <_close>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_close_r+0x1a>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_close_r+0x1a>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	200013a8 	.word	0x200013a8

0800d070 <_lseek_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	@ (800d090 <_lseek_r+0x20>)
 800d074:	4604      	mov	r4, r0
 800d076:	4608      	mov	r0, r1
 800d078:	4611      	mov	r1, r2
 800d07a:	2200      	movs	r2, #0
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	f7f5 f9ff 	bl	8002482 <_lseek>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_lseek_r+0x1e>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_lseek_r+0x1e>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	200013a8 	.word	0x200013a8

0800d094 <_read_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d07      	ldr	r5, [pc, #28]	@ (800d0b4 <_read_r+0x20>)
 800d098:	4604      	mov	r4, r0
 800d09a:	4608      	mov	r0, r1
 800d09c:	4611      	mov	r1, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	602a      	str	r2, [r5, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f5 f98d 	bl	80023c2 <_read>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_read_r+0x1e>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_read_r+0x1e>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	200013a8 	.word	0x200013a8

0800d0b8 <_write_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d07      	ldr	r5, [pc, #28]	@ (800d0d8 <_write_r+0x20>)
 800d0bc:	4604      	mov	r4, r0
 800d0be:	4608      	mov	r0, r1
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	602a      	str	r2, [r5, #0]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	f7f5 f998 	bl	80023fc <_write>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_write_r+0x1e>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_write_r+0x1e>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	200013a8 	.word	0x200013a8

0800d0dc <__errno>:
 800d0dc:	4b01      	ldr	r3, [pc, #4]	@ (800d0e4 <__errno+0x8>)
 800d0de:	6818      	ldr	r0, [r3, #0]
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20000040 	.word	0x20000040

0800d0e8 <__libc_init_array>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	4d0d      	ldr	r5, [pc, #52]	@ (800d120 <__libc_init_array+0x38>)
 800d0ec:	4c0d      	ldr	r4, [pc, #52]	@ (800d124 <__libc_init_array+0x3c>)
 800d0ee:	1b64      	subs	r4, r4, r5
 800d0f0:	10a4      	asrs	r4, r4, #2
 800d0f2:	2600      	movs	r6, #0
 800d0f4:	42a6      	cmp	r6, r4
 800d0f6:	d109      	bne.n	800d10c <__libc_init_array+0x24>
 800d0f8:	4d0b      	ldr	r5, [pc, #44]	@ (800d128 <__libc_init_array+0x40>)
 800d0fa:	4c0c      	ldr	r4, [pc, #48]	@ (800d12c <__libc_init_array+0x44>)
 800d0fc:	f001 febc 	bl	800ee78 <_init>
 800d100:	1b64      	subs	r4, r4, r5
 800d102:	10a4      	asrs	r4, r4, #2
 800d104:	2600      	movs	r6, #0
 800d106:	42a6      	cmp	r6, r4
 800d108:	d105      	bne.n	800d116 <__libc_init_array+0x2e>
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d110:	4798      	blx	r3
 800d112:	3601      	adds	r6, #1
 800d114:	e7ee      	b.n	800d0f4 <__libc_init_array+0xc>
 800d116:	f855 3b04 	ldr.w	r3, [r5], #4
 800d11a:	4798      	blx	r3
 800d11c:	3601      	adds	r6, #1
 800d11e:	e7f2      	b.n	800d106 <__libc_init_array+0x1e>
 800d120:	0800f258 	.word	0x0800f258
 800d124:	0800f258 	.word	0x0800f258
 800d128:	0800f258 	.word	0x0800f258
 800d12c:	0800f260 	.word	0x0800f260

0800d130 <__retarget_lock_init_recursive>:
 800d130:	4770      	bx	lr

0800d132 <__retarget_lock_acquire_recursive>:
 800d132:	4770      	bx	lr

0800d134 <__retarget_lock_release_recursive>:
 800d134:	4770      	bx	lr

0800d136 <quorem>:
 800d136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	6903      	ldr	r3, [r0, #16]
 800d13c:	690c      	ldr	r4, [r1, #16]
 800d13e:	42a3      	cmp	r3, r4
 800d140:	4607      	mov	r7, r0
 800d142:	db7e      	blt.n	800d242 <quorem+0x10c>
 800d144:	3c01      	subs	r4, #1
 800d146:	f101 0814 	add.w	r8, r1, #20
 800d14a:	00a3      	lsls	r3, r4, #2
 800d14c:	f100 0514 	add.w	r5, r0, #20
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d15c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d160:	3301      	adds	r3, #1
 800d162:	429a      	cmp	r2, r3
 800d164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d168:	fbb2 f6f3 	udiv	r6, r2, r3
 800d16c:	d32e      	bcc.n	800d1cc <quorem+0x96>
 800d16e:	f04f 0a00 	mov.w	sl, #0
 800d172:	46c4      	mov	ip, r8
 800d174:	46ae      	mov	lr, r5
 800d176:	46d3      	mov	fp, sl
 800d178:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d17c:	b298      	uxth	r0, r3
 800d17e:	fb06 a000 	mla	r0, r6, r0, sl
 800d182:	0c02      	lsrs	r2, r0, #16
 800d184:	0c1b      	lsrs	r3, r3, #16
 800d186:	fb06 2303 	mla	r3, r6, r3, r2
 800d18a:	f8de 2000 	ldr.w	r2, [lr]
 800d18e:	b280      	uxth	r0, r0
 800d190:	b292      	uxth	r2, r2
 800d192:	1a12      	subs	r2, r2, r0
 800d194:	445a      	add	r2, fp
 800d196:	f8de 0000 	ldr.w	r0, [lr]
 800d19a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1a8:	b292      	uxth	r2, r2
 800d1aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1ae:	45e1      	cmp	r9, ip
 800d1b0:	f84e 2b04 	str.w	r2, [lr], #4
 800d1b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1b8:	d2de      	bcs.n	800d178 <quorem+0x42>
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	58eb      	ldr	r3, [r5, r3]
 800d1be:	b92b      	cbnz	r3, 800d1cc <quorem+0x96>
 800d1c0:	9b01      	ldr	r3, [sp, #4]
 800d1c2:	3b04      	subs	r3, #4
 800d1c4:	429d      	cmp	r5, r3
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	d32f      	bcc.n	800d22a <quorem+0xf4>
 800d1ca:	613c      	str	r4, [r7, #16]
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f001 f979 	bl	800e4c4 <__mcmp>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	db25      	blt.n	800d222 <quorem+0xec>
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1de:	f8d1 c000 	ldr.w	ip, [r1]
 800d1e2:	fa1f fe82 	uxth.w	lr, r2
 800d1e6:	fa1f f38c 	uxth.w	r3, ip
 800d1ea:	eba3 030e 	sub.w	r3, r3, lr
 800d1ee:	4403      	add	r3, r0
 800d1f0:	0c12      	lsrs	r2, r2, #16
 800d1f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d1f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d200:	45c1      	cmp	r9, r8
 800d202:	f841 3b04 	str.w	r3, [r1], #4
 800d206:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d20a:	d2e6      	bcs.n	800d1da <quorem+0xa4>
 800d20c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d214:	b922      	cbnz	r2, 800d220 <quorem+0xea>
 800d216:	3b04      	subs	r3, #4
 800d218:	429d      	cmp	r5, r3
 800d21a:	461a      	mov	r2, r3
 800d21c:	d30b      	bcc.n	800d236 <quorem+0x100>
 800d21e:	613c      	str	r4, [r7, #16]
 800d220:	3601      	adds	r6, #1
 800d222:	4630      	mov	r0, r6
 800d224:	b003      	add	sp, #12
 800d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22a:	6812      	ldr	r2, [r2, #0]
 800d22c:	3b04      	subs	r3, #4
 800d22e:	2a00      	cmp	r2, #0
 800d230:	d1cb      	bne.n	800d1ca <quorem+0x94>
 800d232:	3c01      	subs	r4, #1
 800d234:	e7c6      	b.n	800d1c4 <quorem+0x8e>
 800d236:	6812      	ldr	r2, [r2, #0]
 800d238:	3b04      	subs	r3, #4
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	d1ef      	bne.n	800d21e <quorem+0xe8>
 800d23e:	3c01      	subs	r4, #1
 800d240:	e7ea      	b.n	800d218 <quorem+0xe2>
 800d242:	2000      	movs	r0, #0
 800d244:	e7ee      	b.n	800d224 <quorem+0xee>
	...

0800d248 <_dtoa_r>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	69c7      	ldr	r7, [r0, #28]
 800d24e:	b099      	sub	sp, #100	@ 0x64
 800d250:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d254:	ec55 4b10 	vmov	r4, r5, d0
 800d258:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d25a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d25c:	4683      	mov	fp, r0
 800d25e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d260:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d262:	b97f      	cbnz	r7, 800d284 <_dtoa_r+0x3c>
 800d264:	2010      	movs	r0, #16
 800d266:	f000 fdfd 	bl	800de64 <malloc>
 800d26a:	4602      	mov	r2, r0
 800d26c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d270:	b920      	cbnz	r0, 800d27c <_dtoa_r+0x34>
 800d272:	4ba7      	ldr	r3, [pc, #668]	@ (800d510 <_dtoa_r+0x2c8>)
 800d274:	21ef      	movs	r1, #239	@ 0xef
 800d276:	48a7      	ldr	r0, [pc, #668]	@ (800d514 <_dtoa_r+0x2cc>)
 800d278:	f001 faf6 	bl	800e868 <__assert_func>
 800d27c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d280:	6007      	str	r7, [r0, #0]
 800d282:	60c7      	str	r7, [r0, #12]
 800d284:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d288:	6819      	ldr	r1, [r3, #0]
 800d28a:	b159      	cbz	r1, 800d2a4 <_dtoa_r+0x5c>
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	604a      	str	r2, [r1, #4]
 800d290:	2301      	movs	r3, #1
 800d292:	4093      	lsls	r3, r2
 800d294:	608b      	str	r3, [r1, #8]
 800d296:	4658      	mov	r0, fp
 800d298:	f000 feda 	bl	800e050 <_Bfree>
 800d29c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	1e2b      	subs	r3, r5, #0
 800d2a6:	bfb9      	ittee	lt
 800d2a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2ac:	9303      	strlt	r3, [sp, #12]
 800d2ae:	2300      	movge	r3, #0
 800d2b0:	6033      	strge	r3, [r6, #0]
 800d2b2:	9f03      	ldr	r7, [sp, #12]
 800d2b4:	4b98      	ldr	r3, [pc, #608]	@ (800d518 <_dtoa_r+0x2d0>)
 800d2b6:	bfbc      	itt	lt
 800d2b8:	2201      	movlt	r2, #1
 800d2ba:	6032      	strlt	r2, [r6, #0]
 800d2bc:	43bb      	bics	r3, r7
 800d2be:	d112      	bne.n	800d2e6 <_dtoa_r+0x9e>
 800d2c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2cc:	4323      	orrs	r3, r4
 800d2ce:	f000 854d 	beq.w	800dd6c <_dtoa_r+0xb24>
 800d2d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d52c <_dtoa_r+0x2e4>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 854f 	beq.w	800dd7c <_dtoa_r+0xb34>
 800d2de:	f10a 0303 	add.w	r3, sl, #3
 800d2e2:	f000 bd49 	b.w	800dd78 <_dtoa_r+0xb30>
 800d2e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	ec51 0b17 	vmov	r0, r1, d7
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d2f6:	f7f3 fc0f 	bl	8000b18 <__aeabi_dcmpeq>
 800d2fa:	4680      	mov	r8, r0
 800d2fc:	b158      	cbz	r0, 800d316 <_dtoa_r+0xce>
 800d2fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d300:	2301      	movs	r3, #1
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d306:	b113      	cbz	r3, 800d30e <_dtoa_r+0xc6>
 800d308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d30a:	4b84      	ldr	r3, [pc, #528]	@ (800d51c <_dtoa_r+0x2d4>)
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d530 <_dtoa_r+0x2e8>
 800d312:	f000 bd33 	b.w	800dd7c <_dtoa_r+0xb34>
 800d316:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d31a:	aa16      	add	r2, sp, #88	@ 0x58
 800d31c:	a917      	add	r1, sp, #92	@ 0x5c
 800d31e:	4658      	mov	r0, fp
 800d320:	f001 f980 	bl	800e624 <__d2b>
 800d324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d328:	4681      	mov	r9, r0
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	d077      	beq.n	800d41e <_dtoa_r+0x1d6>
 800d32e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d330:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d33c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d348:	4619      	mov	r1, r3
 800d34a:	2200      	movs	r2, #0
 800d34c:	4b74      	ldr	r3, [pc, #464]	@ (800d520 <_dtoa_r+0x2d8>)
 800d34e:	f7f2 ffc3 	bl	80002d8 <__aeabi_dsub>
 800d352:	a369      	add	r3, pc, #420	@ (adr r3, 800d4f8 <_dtoa_r+0x2b0>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f3 f976 	bl	8000648 <__aeabi_dmul>
 800d35c:	a368      	add	r3, pc, #416	@ (adr r3, 800d500 <_dtoa_r+0x2b8>)
 800d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d362:	f7f2 ffbb 	bl	80002dc <__adddf3>
 800d366:	4604      	mov	r4, r0
 800d368:	4630      	mov	r0, r6
 800d36a:	460d      	mov	r5, r1
 800d36c:	f7f3 f902 	bl	8000574 <__aeabi_i2d>
 800d370:	a365      	add	r3, pc, #404	@ (adr r3, 800d508 <_dtoa_r+0x2c0>)
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	f7f3 f967 	bl	8000648 <__aeabi_dmul>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	4620      	mov	r0, r4
 800d380:	4629      	mov	r1, r5
 800d382:	f7f2 ffab 	bl	80002dc <__adddf3>
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	f7f3 fc0d 	bl	8000ba8 <__aeabi_d2iz>
 800d38e:	2200      	movs	r2, #0
 800d390:	4607      	mov	r7, r0
 800d392:	2300      	movs	r3, #0
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f3 fbc8 	bl	8000b2c <__aeabi_dcmplt>
 800d39c:	b140      	cbz	r0, 800d3b0 <_dtoa_r+0x168>
 800d39e:	4638      	mov	r0, r7
 800d3a0:	f7f3 f8e8 	bl	8000574 <__aeabi_i2d>
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	462b      	mov	r3, r5
 800d3a8:	f7f3 fbb6 	bl	8000b18 <__aeabi_dcmpeq>
 800d3ac:	b900      	cbnz	r0, 800d3b0 <_dtoa_r+0x168>
 800d3ae:	3f01      	subs	r7, #1
 800d3b0:	2f16      	cmp	r7, #22
 800d3b2:	d851      	bhi.n	800d458 <_dtoa_r+0x210>
 800d3b4:	4b5b      	ldr	r3, [pc, #364]	@ (800d524 <_dtoa_r+0x2dc>)
 800d3b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3c2:	f7f3 fbb3 	bl	8000b2c <__aeabi_dcmplt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d048      	beq.n	800d45c <_dtoa_r+0x214>
 800d3ca:	3f01      	subs	r7, #1
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3d2:	1b9b      	subs	r3, r3, r6
 800d3d4:	1e5a      	subs	r2, r3, #1
 800d3d6:	bf44      	itt	mi
 800d3d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d3dc:	2300      	movmi	r3, #0
 800d3de:	9208      	str	r2, [sp, #32]
 800d3e0:	bf54      	ite	pl
 800d3e2:	f04f 0800 	movpl.w	r8, #0
 800d3e6:	9308      	strmi	r3, [sp, #32]
 800d3e8:	2f00      	cmp	r7, #0
 800d3ea:	db39      	blt.n	800d460 <_dtoa_r+0x218>
 800d3ec:	9b08      	ldr	r3, [sp, #32]
 800d3ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d3f0:	443b      	add	r3, r7
 800d3f2:	9308      	str	r3, [sp, #32]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fa:	2b09      	cmp	r3, #9
 800d3fc:	d864      	bhi.n	800d4c8 <_dtoa_r+0x280>
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	bfc4      	itt	gt
 800d402:	3b04      	subgt	r3, #4
 800d404:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d408:	f1a3 0302 	sub.w	r3, r3, #2
 800d40c:	bfcc      	ite	gt
 800d40e:	2400      	movgt	r4, #0
 800d410:	2401      	movle	r4, #1
 800d412:	2b03      	cmp	r3, #3
 800d414:	d863      	bhi.n	800d4de <_dtoa_r+0x296>
 800d416:	e8df f003 	tbb	[pc, r3]
 800d41a:	372a      	.short	0x372a
 800d41c:	5535      	.short	0x5535
 800d41e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d422:	441e      	add	r6, r3
 800d424:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d428:	2b20      	cmp	r3, #32
 800d42a:	bfc1      	itttt	gt
 800d42c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d430:	409f      	lslgt	r7, r3
 800d432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d436:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d43a:	bfd6      	itet	le
 800d43c:	f1c3 0320 	rsble	r3, r3, #32
 800d440:	ea47 0003 	orrgt.w	r0, r7, r3
 800d444:	fa04 f003 	lslle.w	r0, r4, r3
 800d448:	f7f3 f884 	bl	8000554 <__aeabi_ui2d>
 800d44c:	2201      	movs	r2, #1
 800d44e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d452:	3e01      	subs	r6, #1
 800d454:	9214      	str	r2, [sp, #80]	@ 0x50
 800d456:	e777      	b.n	800d348 <_dtoa_r+0x100>
 800d458:	2301      	movs	r3, #1
 800d45a:	e7b8      	b.n	800d3ce <_dtoa_r+0x186>
 800d45c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d45e:	e7b7      	b.n	800d3d0 <_dtoa_r+0x188>
 800d460:	427b      	negs	r3, r7
 800d462:	930a      	str	r3, [sp, #40]	@ 0x28
 800d464:	2300      	movs	r3, #0
 800d466:	eba8 0807 	sub.w	r8, r8, r7
 800d46a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d46c:	e7c4      	b.n	800d3f8 <_dtoa_r+0x1b0>
 800d46e:	2300      	movs	r3, #0
 800d470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d474:	2b00      	cmp	r3, #0
 800d476:	dc35      	bgt.n	800d4e4 <_dtoa_r+0x29c>
 800d478:	2301      	movs	r3, #1
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	9307      	str	r3, [sp, #28]
 800d47e:	461a      	mov	r2, r3
 800d480:	920e      	str	r2, [sp, #56]	@ 0x38
 800d482:	e00b      	b.n	800d49c <_dtoa_r+0x254>
 800d484:	2301      	movs	r3, #1
 800d486:	e7f3      	b.n	800d470 <_dtoa_r+0x228>
 800d488:	2300      	movs	r3, #0
 800d48a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d48c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d48e:	18fb      	adds	r3, r7, r3
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	3301      	adds	r3, #1
 800d494:	2b01      	cmp	r3, #1
 800d496:	9307      	str	r3, [sp, #28]
 800d498:	bfb8      	it	lt
 800d49a:	2301      	movlt	r3, #1
 800d49c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	2204      	movs	r2, #4
 800d4a4:	f102 0514 	add.w	r5, r2, #20
 800d4a8:	429d      	cmp	r5, r3
 800d4aa:	d91f      	bls.n	800d4ec <_dtoa_r+0x2a4>
 800d4ac:	6041      	str	r1, [r0, #4]
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	f000 fd8e 	bl	800dfd0 <_Balloc>
 800d4b4:	4682      	mov	sl, r0
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d13c      	bne.n	800d534 <_dtoa_r+0x2ec>
 800d4ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d528 <_dtoa_r+0x2e0>)
 800d4bc:	4602      	mov	r2, r0
 800d4be:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4c2:	e6d8      	b.n	800d276 <_dtoa_r+0x2e>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e7e0      	b.n	800d48a <_dtoa_r+0x242>
 800d4c8:	2401      	movs	r4, #1
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	9307      	str	r3, [sp, #28]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2312      	movs	r3, #18
 800d4dc:	e7d0      	b.n	800d480 <_dtoa_r+0x238>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4e2:	e7f5      	b.n	800d4d0 <_dtoa_r+0x288>
 800d4e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	9307      	str	r3, [sp, #28]
 800d4ea:	e7d7      	b.n	800d49c <_dtoa_r+0x254>
 800d4ec:	3101      	adds	r1, #1
 800d4ee:	0052      	lsls	r2, r2, #1
 800d4f0:	e7d8      	b.n	800d4a4 <_dtoa_r+0x25c>
 800d4f2:	bf00      	nop
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	636f4361 	.word	0x636f4361
 800d4fc:	3fd287a7 	.word	0x3fd287a7
 800d500:	8b60c8b3 	.word	0x8b60c8b3
 800d504:	3fc68a28 	.word	0x3fc68a28
 800d508:	509f79fb 	.word	0x509f79fb
 800d50c:	3fd34413 	.word	0x3fd34413
 800d510:	0800ef21 	.word	0x0800ef21
 800d514:	0800ef38 	.word	0x0800ef38
 800d518:	7ff00000 	.word	0x7ff00000
 800d51c:	0800eef1 	.word	0x0800eef1
 800d520:	3ff80000 	.word	0x3ff80000
 800d524:	0800f030 	.word	0x0800f030
 800d528:	0800ef90 	.word	0x0800ef90
 800d52c:	0800ef1d 	.word	0x0800ef1d
 800d530:	0800eef0 	.word	0x0800eef0
 800d534:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d538:	6018      	str	r0, [r3, #0]
 800d53a:	9b07      	ldr	r3, [sp, #28]
 800d53c:	2b0e      	cmp	r3, #14
 800d53e:	f200 80a4 	bhi.w	800d68a <_dtoa_r+0x442>
 800d542:	2c00      	cmp	r4, #0
 800d544:	f000 80a1 	beq.w	800d68a <_dtoa_r+0x442>
 800d548:	2f00      	cmp	r7, #0
 800d54a:	dd33      	ble.n	800d5b4 <_dtoa_r+0x36c>
 800d54c:	4bad      	ldr	r3, [pc, #692]	@ (800d804 <_dtoa_r+0x5bc>)
 800d54e:	f007 020f 	and.w	r2, r7, #15
 800d552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d556:	ed93 7b00 	vldr	d7, [r3]
 800d55a:	05f8      	lsls	r0, r7, #23
 800d55c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d560:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d564:	d516      	bpl.n	800d594 <_dtoa_r+0x34c>
 800d566:	4ba8      	ldr	r3, [pc, #672]	@ (800d808 <_dtoa_r+0x5c0>)
 800d568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d56c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d570:	f7f3 f994 	bl	800089c <__aeabi_ddiv>
 800d574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d578:	f004 040f 	and.w	r4, r4, #15
 800d57c:	2603      	movs	r6, #3
 800d57e:	4da2      	ldr	r5, [pc, #648]	@ (800d808 <_dtoa_r+0x5c0>)
 800d580:	b954      	cbnz	r4, 800d598 <_dtoa_r+0x350>
 800d582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d58a:	f7f3 f987 	bl	800089c <__aeabi_ddiv>
 800d58e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d592:	e028      	b.n	800d5e6 <_dtoa_r+0x39e>
 800d594:	2602      	movs	r6, #2
 800d596:	e7f2      	b.n	800d57e <_dtoa_r+0x336>
 800d598:	07e1      	lsls	r1, r4, #31
 800d59a:	d508      	bpl.n	800d5ae <_dtoa_r+0x366>
 800d59c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5a4:	f7f3 f850 	bl	8000648 <__aeabi_dmul>
 800d5a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5ac:	3601      	adds	r6, #1
 800d5ae:	1064      	asrs	r4, r4, #1
 800d5b0:	3508      	adds	r5, #8
 800d5b2:	e7e5      	b.n	800d580 <_dtoa_r+0x338>
 800d5b4:	f000 80d2 	beq.w	800d75c <_dtoa_r+0x514>
 800d5b8:	427c      	negs	r4, r7
 800d5ba:	4b92      	ldr	r3, [pc, #584]	@ (800d804 <_dtoa_r+0x5bc>)
 800d5bc:	4d92      	ldr	r5, [pc, #584]	@ (800d808 <_dtoa_r+0x5c0>)
 800d5be:	f004 020f 	and.w	r2, r4, #15
 800d5c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5ce:	f7f3 f83b 	bl	8000648 <__aeabi_dmul>
 800d5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5d6:	1124      	asrs	r4, r4, #4
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2602      	movs	r6, #2
 800d5dc:	2c00      	cmp	r4, #0
 800d5de:	f040 80b2 	bne.w	800d746 <_dtoa_r+0x4fe>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1d3      	bne.n	800d58e <_dtoa_r+0x346>
 800d5e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 80b7 	beq.w	800d760 <_dtoa_r+0x518>
 800d5f2:	4b86      	ldr	r3, [pc, #536]	@ (800d80c <_dtoa_r+0x5c4>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f3 fa97 	bl	8000b2c <__aeabi_dcmplt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f000 80ae 	beq.w	800d760 <_dtoa_r+0x518>
 800d604:	9b07      	ldr	r3, [sp, #28]
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 80aa 	beq.w	800d760 <_dtoa_r+0x518>
 800d60c:	9b00      	ldr	r3, [sp, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	dd37      	ble.n	800d682 <_dtoa_r+0x43a>
 800d612:	1e7b      	subs	r3, r7, #1
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	4620      	mov	r0, r4
 800d618:	4b7d      	ldr	r3, [pc, #500]	@ (800d810 <_dtoa_r+0x5c8>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7f3 f813 	bl	8000648 <__aeabi_dmul>
 800d622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d626:	9c00      	ldr	r4, [sp, #0]
 800d628:	3601      	adds	r6, #1
 800d62a:	4630      	mov	r0, r6
 800d62c:	f7f2 ffa2 	bl	8000574 <__aeabi_i2d>
 800d630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d634:	f7f3 f808 	bl	8000648 <__aeabi_dmul>
 800d638:	4b76      	ldr	r3, [pc, #472]	@ (800d814 <_dtoa_r+0x5cc>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	f7f2 fe4e 	bl	80002dc <__adddf3>
 800d640:	4605      	mov	r5, r0
 800d642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d646:	2c00      	cmp	r4, #0
 800d648:	f040 808d 	bne.w	800d766 <_dtoa_r+0x51e>
 800d64c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d650:	4b71      	ldr	r3, [pc, #452]	@ (800d818 <_dtoa_r+0x5d0>)
 800d652:	2200      	movs	r2, #0
 800d654:	f7f2 fe40 	bl	80002d8 <__aeabi_dsub>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d660:	462a      	mov	r2, r5
 800d662:	4633      	mov	r3, r6
 800d664:	f7f3 fa80 	bl	8000b68 <__aeabi_dcmpgt>
 800d668:	2800      	cmp	r0, #0
 800d66a:	f040 828b 	bne.w	800db84 <_dtoa_r+0x93c>
 800d66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d672:	462a      	mov	r2, r5
 800d674:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d678:	f7f3 fa58 	bl	8000b2c <__aeabi_dcmplt>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f040 8128 	bne.w	800d8d2 <_dtoa_r+0x68a>
 800d682:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d68a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f2c0 815a 	blt.w	800d946 <_dtoa_r+0x6fe>
 800d692:	2f0e      	cmp	r7, #14
 800d694:	f300 8157 	bgt.w	800d946 <_dtoa_r+0x6fe>
 800d698:	4b5a      	ldr	r3, [pc, #360]	@ (800d804 <_dtoa_r+0x5bc>)
 800d69a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d69e:	ed93 7b00 	vldr	d7, [r3]
 800d6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	ed8d 7b00 	vstr	d7, [sp]
 800d6aa:	da03      	bge.n	800d6b4 <_dtoa_r+0x46c>
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f340 8101 	ble.w	800d8b6 <_dtoa_r+0x66e>
 800d6b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6b8:	4656      	mov	r6, sl
 800d6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7f3 f8eb 	bl	800089c <__aeabi_ddiv>
 800d6c6:	f7f3 fa6f 	bl	8000ba8 <__aeabi_d2iz>
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	f7f2 ff52 	bl	8000574 <__aeabi_i2d>
 800d6d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6d4:	f7f2 ffb8 	bl	8000648 <__aeabi_dmul>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d6e4:	f7f2 fdf8 	bl	80002d8 <__aeabi_dsub>
 800d6e8:	f806 4b01 	strb.w	r4, [r6], #1
 800d6ec:	9d07      	ldr	r5, [sp, #28]
 800d6ee:	eba6 040a 	sub.w	r4, r6, sl
 800d6f2:	42a5      	cmp	r5, r4
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	f040 8117 	bne.w	800d92a <_dtoa_r+0x6e2>
 800d6fc:	f7f2 fdee 	bl	80002dc <__adddf3>
 800d700:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d704:	4604      	mov	r4, r0
 800d706:	460d      	mov	r5, r1
 800d708:	f7f3 fa2e 	bl	8000b68 <__aeabi_dcmpgt>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f040 80f9 	bne.w	800d904 <_dtoa_r+0x6bc>
 800d712:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d716:	4620      	mov	r0, r4
 800d718:	4629      	mov	r1, r5
 800d71a:	f7f3 f9fd 	bl	8000b18 <__aeabi_dcmpeq>
 800d71e:	b118      	cbz	r0, 800d728 <_dtoa_r+0x4e0>
 800d720:	f018 0f01 	tst.w	r8, #1
 800d724:	f040 80ee 	bne.w	800d904 <_dtoa_r+0x6bc>
 800d728:	4649      	mov	r1, r9
 800d72a:	4658      	mov	r0, fp
 800d72c:	f000 fc90 	bl	800e050 <_Bfree>
 800d730:	2300      	movs	r3, #0
 800d732:	7033      	strb	r3, [r6, #0]
 800d734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d736:	3701      	adds	r7, #1
 800d738:	601f      	str	r7, [r3, #0]
 800d73a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 831d 	beq.w	800dd7c <_dtoa_r+0xb34>
 800d742:	601e      	str	r6, [r3, #0]
 800d744:	e31a      	b.n	800dd7c <_dtoa_r+0xb34>
 800d746:	07e2      	lsls	r2, r4, #31
 800d748:	d505      	bpl.n	800d756 <_dtoa_r+0x50e>
 800d74a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d74e:	f7f2 ff7b 	bl	8000648 <__aeabi_dmul>
 800d752:	3601      	adds	r6, #1
 800d754:	2301      	movs	r3, #1
 800d756:	1064      	asrs	r4, r4, #1
 800d758:	3508      	adds	r5, #8
 800d75a:	e73f      	b.n	800d5dc <_dtoa_r+0x394>
 800d75c:	2602      	movs	r6, #2
 800d75e:	e742      	b.n	800d5e6 <_dtoa_r+0x39e>
 800d760:	9c07      	ldr	r4, [sp, #28]
 800d762:	9704      	str	r7, [sp, #16]
 800d764:	e761      	b.n	800d62a <_dtoa_r+0x3e2>
 800d766:	4b27      	ldr	r3, [pc, #156]	@ (800d804 <_dtoa_r+0x5bc>)
 800d768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d76a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d76e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d772:	4454      	add	r4, sl
 800d774:	2900      	cmp	r1, #0
 800d776:	d053      	beq.n	800d820 <_dtoa_r+0x5d8>
 800d778:	4928      	ldr	r1, [pc, #160]	@ (800d81c <_dtoa_r+0x5d4>)
 800d77a:	2000      	movs	r0, #0
 800d77c:	f7f3 f88e 	bl	800089c <__aeabi_ddiv>
 800d780:	4633      	mov	r3, r6
 800d782:	462a      	mov	r2, r5
 800d784:	f7f2 fda8 	bl	80002d8 <__aeabi_dsub>
 800d788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d78c:	4656      	mov	r6, sl
 800d78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d792:	f7f3 fa09 	bl	8000ba8 <__aeabi_d2iz>
 800d796:	4605      	mov	r5, r0
 800d798:	f7f2 feec 	bl	8000574 <__aeabi_i2d>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a4:	f7f2 fd98 	bl	80002d8 <__aeabi_dsub>
 800d7a8:	3530      	adds	r5, #48	@ 0x30
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7b2:	f806 5b01 	strb.w	r5, [r6], #1
 800d7b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7ba:	f7f3 f9b7 	bl	8000b2c <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d171      	bne.n	800d8a6 <_dtoa_r+0x65e>
 800d7c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7c6:	4911      	ldr	r1, [pc, #68]	@ (800d80c <_dtoa_r+0x5c4>)
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	f7f2 fd85 	bl	80002d8 <__aeabi_dsub>
 800d7ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7d2:	f7f3 f9ab 	bl	8000b2c <__aeabi_dcmplt>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f040 8095 	bne.w	800d906 <_dtoa_r+0x6be>
 800d7dc:	42a6      	cmp	r6, r4
 800d7de:	f43f af50 	beq.w	800d682 <_dtoa_r+0x43a>
 800d7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7e6:	4b0a      	ldr	r3, [pc, #40]	@ (800d810 <_dtoa_r+0x5c8>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f7f2 ff2d 	bl	8000648 <__aeabi_dmul>
 800d7ee:	4b08      	ldr	r3, [pc, #32]	@ (800d810 <_dtoa_r+0x5c8>)
 800d7f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7fa:	f7f2 ff25 	bl	8000648 <__aeabi_dmul>
 800d7fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d802:	e7c4      	b.n	800d78e <_dtoa_r+0x546>
 800d804:	0800f030 	.word	0x0800f030
 800d808:	0800f008 	.word	0x0800f008
 800d80c:	3ff00000 	.word	0x3ff00000
 800d810:	40240000 	.word	0x40240000
 800d814:	401c0000 	.word	0x401c0000
 800d818:	40140000 	.word	0x40140000
 800d81c:	3fe00000 	.word	0x3fe00000
 800d820:	4631      	mov	r1, r6
 800d822:	4628      	mov	r0, r5
 800d824:	f7f2 ff10 	bl	8000648 <__aeabi_dmul>
 800d828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d82c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d82e:	4656      	mov	r6, sl
 800d830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d834:	f7f3 f9b8 	bl	8000ba8 <__aeabi_d2iz>
 800d838:	4605      	mov	r5, r0
 800d83a:	f7f2 fe9b 	bl	8000574 <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d846:	f7f2 fd47 	bl	80002d8 <__aeabi_dsub>
 800d84a:	3530      	adds	r5, #48	@ 0x30
 800d84c:	f806 5b01 	strb.w	r5, [r6], #1
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	42a6      	cmp	r6, r4
 800d856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	d124      	bne.n	800d8aa <_dtoa_r+0x662>
 800d860:	4bac      	ldr	r3, [pc, #688]	@ (800db14 <_dtoa_r+0x8cc>)
 800d862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d866:	f7f2 fd39 	bl	80002dc <__adddf3>
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
 800d86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d872:	f7f3 f979 	bl	8000b68 <__aeabi_dcmpgt>
 800d876:	2800      	cmp	r0, #0
 800d878:	d145      	bne.n	800d906 <_dtoa_r+0x6be>
 800d87a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d87e:	49a5      	ldr	r1, [pc, #660]	@ (800db14 <_dtoa_r+0x8cc>)
 800d880:	2000      	movs	r0, #0
 800d882:	f7f2 fd29 	bl	80002d8 <__aeabi_dsub>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88e:	f7f3 f94d 	bl	8000b2c <__aeabi_dcmplt>
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f aef5 	beq.w	800d682 <_dtoa_r+0x43a>
 800d898:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d89a:	1e73      	subs	r3, r6, #1
 800d89c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d89e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8a2:	2b30      	cmp	r3, #48	@ 0x30
 800d8a4:	d0f8      	beq.n	800d898 <_dtoa_r+0x650>
 800d8a6:	9f04      	ldr	r7, [sp, #16]
 800d8a8:	e73e      	b.n	800d728 <_dtoa_r+0x4e0>
 800d8aa:	4b9b      	ldr	r3, [pc, #620]	@ (800db18 <_dtoa_r+0x8d0>)
 800d8ac:	f7f2 fecc 	bl	8000648 <__aeabi_dmul>
 800d8b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8b4:	e7bc      	b.n	800d830 <_dtoa_r+0x5e8>
 800d8b6:	d10c      	bne.n	800d8d2 <_dtoa_r+0x68a>
 800d8b8:	4b98      	ldr	r3, [pc, #608]	@ (800db1c <_dtoa_r+0x8d4>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c0:	f7f2 fec2 	bl	8000648 <__aeabi_dmul>
 800d8c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8c8:	f7f3 f944 	bl	8000b54 <__aeabi_dcmpge>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	f000 8157 	beq.w	800db80 <_dtoa_r+0x938>
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	4625      	mov	r5, r4
 800d8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8d8:	43db      	mvns	r3, r3
 800d8da:	9304      	str	r3, [sp, #16]
 800d8dc:	4656      	mov	r6, sl
 800d8de:	2700      	movs	r7, #0
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4658      	mov	r0, fp
 800d8e4:	f000 fbb4 	bl	800e050 <_Bfree>
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	d0dc      	beq.n	800d8a6 <_dtoa_r+0x65e>
 800d8ec:	b12f      	cbz	r7, 800d8fa <_dtoa_r+0x6b2>
 800d8ee:	42af      	cmp	r7, r5
 800d8f0:	d003      	beq.n	800d8fa <_dtoa_r+0x6b2>
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	4658      	mov	r0, fp
 800d8f6:	f000 fbab 	bl	800e050 <_Bfree>
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	4658      	mov	r0, fp
 800d8fe:	f000 fba7 	bl	800e050 <_Bfree>
 800d902:	e7d0      	b.n	800d8a6 <_dtoa_r+0x65e>
 800d904:	9704      	str	r7, [sp, #16]
 800d906:	4633      	mov	r3, r6
 800d908:	461e      	mov	r6, r3
 800d90a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d90e:	2a39      	cmp	r2, #57	@ 0x39
 800d910:	d107      	bne.n	800d922 <_dtoa_r+0x6da>
 800d912:	459a      	cmp	sl, r3
 800d914:	d1f8      	bne.n	800d908 <_dtoa_r+0x6c0>
 800d916:	9a04      	ldr	r2, [sp, #16]
 800d918:	3201      	adds	r2, #1
 800d91a:	9204      	str	r2, [sp, #16]
 800d91c:	2230      	movs	r2, #48	@ 0x30
 800d91e:	f88a 2000 	strb.w	r2, [sl]
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	3201      	adds	r2, #1
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	e7bd      	b.n	800d8a6 <_dtoa_r+0x65e>
 800d92a:	4b7b      	ldr	r3, [pc, #492]	@ (800db18 <_dtoa_r+0x8d0>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	f7f2 fe8b 	bl	8000648 <__aeabi_dmul>
 800d932:	2200      	movs	r2, #0
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	f7f3 f8ed 	bl	8000b18 <__aeabi_dcmpeq>
 800d93e:	2800      	cmp	r0, #0
 800d940:	f43f aebb 	beq.w	800d6ba <_dtoa_r+0x472>
 800d944:	e6f0      	b.n	800d728 <_dtoa_r+0x4e0>
 800d946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d948:	2a00      	cmp	r2, #0
 800d94a:	f000 80db 	beq.w	800db04 <_dtoa_r+0x8bc>
 800d94e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d950:	2a01      	cmp	r2, #1
 800d952:	f300 80bf 	bgt.w	800dad4 <_dtoa_r+0x88c>
 800d956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d958:	2a00      	cmp	r2, #0
 800d95a:	f000 80b7 	beq.w	800dacc <_dtoa_r+0x884>
 800d95e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d962:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d964:	4646      	mov	r6, r8
 800d966:	9a08      	ldr	r2, [sp, #32]
 800d968:	2101      	movs	r1, #1
 800d96a:	441a      	add	r2, r3
 800d96c:	4658      	mov	r0, fp
 800d96e:	4498      	add	r8, r3
 800d970:	9208      	str	r2, [sp, #32]
 800d972:	f000 fc21 	bl	800e1b8 <__i2b>
 800d976:	4605      	mov	r5, r0
 800d978:	b15e      	cbz	r6, 800d992 <_dtoa_r+0x74a>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd08      	ble.n	800d992 <_dtoa_r+0x74a>
 800d980:	42b3      	cmp	r3, r6
 800d982:	9a08      	ldr	r2, [sp, #32]
 800d984:	bfa8      	it	ge
 800d986:	4633      	movge	r3, r6
 800d988:	eba8 0803 	sub.w	r8, r8, r3
 800d98c:	1af6      	subs	r6, r6, r3
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	9308      	str	r3, [sp, #32]
 800d992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d994:	b1f3      	cbz	r3, 800d9d4 <_dtoa_r+0x78c>
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80b7 	beq.w	800db0c <_dtoa_r+0x8c4>
 800d99e:	b18c      	cbz	r4, 800d9c4 <_dtoa_r+0x77c>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4658      	mov	r0, fp
 800d9a6:	f000 fcc7 	bl	800e338 <__pow5mult>
 800d9aa:	464a      	mov	r2, r9
 800d9ac:	4601      	mov	r1, r0
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	4658      	mov	r0, fp
 800d9b2:	f000 fc17 	bl	800e1e4 <__multiply>
 800d9b6:	4649      	mov	r1, r9
 800d9b8:	9004      	str	r0, [sp, #16]
 800d9ba:	4658      	mov	r0, fp
 800d9bc:	f000 fb48 	bl	800e050 <_Bfree>
 800d9c0:	9b04      	ldr	r3, [sp, #16]
 800d9c2:	4699      	mov	r9, r3
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9c6:	1b1a      	subs	r2, r3, r4
 800d9c8:	d004      	beq.n	800d9d4 <_dtoa_r+0x78c>
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	f000 fcb3 	bl	800e338 <__pow5mult>
 800d9d2:	4681      	mov	r9, r0
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	4658      	mov	r0, fp
 800d9d8:	f000 fbee 	bl	800e1b8 <__i2b>
 800d9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9de:	4604      	mov	r4, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 81cf 	beq.w	800dd84 <_dtoa_r+0xb3c>
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4658      	mov	r0, fp
 800d9ec:	f000 fca4 	bl	800e338 <__pow5mult>
 800d9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	f300 8095 	bgt.w	800db24 <_dtoa_r+0x8dc>
 800d9fa:	9b02      	ldr	r3, [sp, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 8087 	bne.w	800db10 <_dtoa_r+0x8c8>
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 8089 	bne.w	800db20 <_dtoa_r+0x8d8>
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da14:	0d1b      	lsrs	r3, r3, #20
 800da16:	051b      	lsls	r3, r3, #20
 800da18:	b12b      	cbz	r3, 800da26 <_dtoa_r+0x7de>
 800da1a:	9b08      	ldr	r3, [sp, #32]
 800da1c:	3301      	adds	r3, #1
 800da1e:	9308      	str	r3, [sp, #32]
 800da20:	f108 0801 	add.w	r8, r8, #1
 800da24:	2301      	movs	r3, #1
 800da26:	930a      	str	r3, [sp, #40]	@ 0x28
 800da28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 81b0 	beq.w	800dd90 <_dtoa_r+0xb48>
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da36:	6918      	ldr	r0, [r3, #16]
 800da38:	f000 fb72 	bl	800e120 <__hi0bits>
 800da3c:	f1c0 0020 	rsb	r0, r0, #32
 800da40:	9b08      	ldr	r3, [sp, #32]
 800da42:	4418      	add	r0, r3
 800da44:	f010 001f 	ands.w	r0, r0, #31
 800da48:	d077      	beq.n	800db3a <_dtoa_r+0x8f2>
 800da4a:	f1c0 0320 	rsb	r3, r0, #32
 800da4e:	2b04      	cmp	r3, #4
 800da50:	dd6b      	ble.n	800db2a <_dtoa_r+0x8e2>
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	f1c0 001c 	rsb	r0, r0, #28
 800da58:	4403      	add	r3, r0
 800da5a:	4480      	add	r8, r0
 800da5c:	4406      	add	r6, r0
 800da5e:	9308      	str	r3, [sp, #32]
 800da60:	f1b8 0f00 	cmp.w	r8, #0
 800da64:	dd05      	ble.n	800da72 <_dtoa_r+0x82a>
 800da66:	4649      	mov	r1, r9
 800da68:	4642      	mov	r2, r8
 800da6a:	4658      	mov	r0, fp
 800da6c:	f000 fcbe 	bl	800e3ec <__lshift>
 800da70:	4681      	mov	r9, r0
 800da72:	9b08      	ldr	r3, [sp, #32]
 800da74:	2b00      	cmp	r3, #0
 800da76:	dd05      	ble.n	800da84 <_dtoa_r+0x83c>
 800da78:	4621      	mov	r1, r4
 800da7a:	461a      	mov	r2, r3
 800da7c:	4658      	mov	r0, fp
 800da7e:	f000 fcb5 	bl	800e3ec <__lshift>
 800da82:	4604      	mov	r4, r0
 800da84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da86:	2b00      	cmp	r3, #0
 800da88:	d059      	beq.n	800db3e <_dtoa_r+0x8f6>
 800da8a:	4621      	mov	r1, r4
 800da8c:	4648      	mov	r0, r9
 800da8e:	f000 fd19 	bl	800e4c4 <__mcmp>
 800da92:	2800      	cmp	r0, #0
 800da94:	da53      	bge.n	800db3e <_dtoa_r+0x8f6>
 800da96:	1e7b      	subs	r3, r7, #1
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	4649      	mov	r1, r9
 800da9c:	2300      	movs	r3, #0
 800da9e:	220a      	movs	r2, #10
 800daa0:	4658      	mov	r0, fp
 800daa2:	f000 faf7 	bl	800e094 <__multadd>
 800daa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daa8:	4681      	mov	r9, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 8172 	beq.w	800dd94 <_dtoa_r+0xb4c>
 800dab0:	2300      	movs	r3, #0
 800dab2:	4629      	mov	r1, r5
 800dab4:	220a      	movs	r2, #10
 800dab6:	4658      	mov	r0, fp
 800dab8:	f000 faec 	bl	800e094 <__multadd>
 800dabc:	9b00      	ldr	r3, [sp, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	4605      	mov	r5, r0
 800dac2:	dc67      	bgt.n	800db94 <_dtoa_r+0x94c>
 800dac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	dc41      	bgt.n	800db4e <_dtoa_r+0x906>
 800daca:	e063      	b.n	800db94 <_dtoa_r+0x94c>
 800dacc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dad2:	e746      	b.n	800d962 <_dtoa_r+0x71a>
 800dad4:	9b07      	ldr	r3, [sp, #28]
 800dad6:	1e5c      	subs	r4, r3, #1
 800dad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dada:	42a3      	cmp	r3, r4
 800dadc:	bfbf      	itttt	lt
 800dade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dae0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dae2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dae4:	1ae3      	sublt	r3, r4, r3
 800dae6:	bfb4      	ite	lt
 800dae8:	18d2      	addlt	r2, r2, r3
 800daea:	1b1c      	subge	r4, r3, r4
 800daec:	9b07      	ldr	r3, [sp, #28]
 800daee:	bfbc      	itt	lt
 800daf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800daf2:	2400      	movlt	r4, #0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	bfb5      	itete	lt
 800daf8:	eba8 0603 	sublt.w	r6, r8, r3
 800dafc:	9b07      	ldrge	r3, [sp, #28]
 800dafe:	2300      	movlt	r3, #0
 800db00:	4646      	movge	r6, r8
 800db02:	e730      	b.n	800d966 <_dtoa_r+0x71e>
 800db04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db08:	4646      	mov	r6, r8
 800db0a:	e735      	b.n	800d978 <_dtoa_r+0x730>
 800db0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db0e:	e75c      	b.n	800d9ca <_dtoa_r+0x782>
 800db10:	2300      	movs	r3, #0
 800db12:	e788      	b.n	800da26 <_dtoa_r+0x7de>
 800db14:	3fe00000 	.word	0x3fe00000
 800db18:	40240000 	.word	0x40240000
 800db1c:	40140000 	.word	0x40140000
 800db20:	9b02      	ldr	r3, [sp, #8]
 800db22:	e780      	b.n	800da26 <_dtoa_r+0x7de>
 800db24:	2300      	movs	r3, #0
 800db26:	930a      	str	r3, [sp, #40]	@ 0x28
 800db28:	e782      	b.n	800da30 <_dtoa_r+0x7e8>
 800db2a:	d099      	beq.n	800da60 <_dtoa_r+0x818>
 800db2c:	9a08      	ldr	r2, [sp, #32]
 800db2e:	331c      	adds	r3, #28
 800db30:	441a      	add	r2, r3
 800db32:	4498      	add	r8, r3
 800db34:	441e      	add	r6, r3
 800db36:	9208      	str	r2, [sp, #32]
 800db38:	e792      	b.n	800da60 <_dtoa_r+0x818>
 800db3a:	4603      	mov	r3, r0
 800db3c:	e7f6      	b.n	800db2c <_dtoa_r+0x8e4>
 800db3e:	9b07      	ldr	r3, [sp, #28]
 800db40:	9704      	str	r7, [sp, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	dc20      	bgt.n	800db88 <_dtoa_r+0x940>
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	dd1e      	ble.n	800db8c <_dtoa_r+0x944>
 800db4e:	9b00      	ldr	r3, [sp, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f47f aec0 	bne.w	800d8d6 <_dtoa_r+0x68e>
 800db56:	4621      	mov	r1, r4
 800db58:	2205      	movs	r2, #5
 800db5a:	4658      	mov	r0, fp
 800db5c:	f000 fa9a 	bl	800e094 <__multadd>
 800db60:	4601      	mov	r1, r0
 800db62:	4604      	mov	r4, r0
 800db64:	4648      	mov	r0, r9
 800db66:	f000 fcad 	bl	800e4c4 <__mcmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	f77f aeb3 	ble.w	800d8d6 <_dtoa_r+0x68e>
 800db70:	4656      	mov	r6, sl
 800db72:	2331      	movs	r3, #49	@ 0x31
 800db74:	f806 3b01 	strb.w	r3, [r6], #1
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	3301      	adds	r3, #1
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	e6ae      	b.n	800d8de <_dtoa_r+0x696>
 800db80:	9c07      	ldr	r4, [sp, #28]
 800db82:	9704      	str	r7, [sp, #16]
 800db84:	4625      	mov	r5, r4
 800db86:	e7f3      	b.n	800db70 <_dtoa_r+0x928>
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 8104 	beq.w	800dd9c <_dtoa_r+0xb54>
 800db94:	2e00      	cmp	r6, #0
 800db96:	dd05      	ble.n	800dba4 <_dtoa_r+0x95c>
 800db98:	4629      	mov	r1, r5
 800db9a:	4632      	mov	r2, r6
 800db9c:	4658      	mov	r0, fp
 800db9e:	f000 fc25 	bl	800e3ec <__lshift>
 800dba2:	4605      	mov	r5, r0
 800dba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d05a      	beq.n	800dc60 <_dtoa_r+0xa18>
 800dbaa:	6869      	ldr	r1, [r5, #4]
 800dbac:	4658      	mov	r0, fp
 800dbae:	f000 fa0f 	bl	800dfd0 <_Balloc>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <_dtoa_r+0x97a>
 800dbb6:	4b84      	ldr	r3, [pc, #528]	@ (800ddc8 <_dtoa_r+0xb80>)
 800dbb8:	4602      	mov	r2, r0
 800dbba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbbe:	f7ff bb5a 	b.w	800d276 <_dtoa_r+0x2e>
 800dbc2:	692a      	ldr	r2, [r5, #16]
 800dbc4:	3202      	adds	r2, #2
 800dbc6:	0092      	lsls	r2, r2, #2
 800dbc8:	f105 010c 	add.w	r1, r5, #12
 800dbcc:	300c      	adds	r0, #12
 800dbce:	f000 fe3d 	bl	800e84c <memcpy>
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f000 fc08 	bl	800e3ec <__lshift>
 800dbdc:	f10a 0301 	add.w	r3, sl, #1
 800dbe0:	9307      	str	r3, [sp, #28]
 800dbe2:	9b00      	ldr	r3, [sp, #0]
 800dbe4:	4453      	add	r3, sl
 800dbe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbe8:	9b02      	ldr	r3, [sp, #8]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	462f      	mov	r7, r5
 800dbf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	4648      	mov	r0, r9
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	f7ff fa9a 	bl	800d136 <quorem>
 800dc02:	4639      	mov	r1, r7
 800dc04:	9002      	str	r0, [sp, #8]
 800dc06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc0a:	4648      	mov	r0, r9
 800dc0c:	f000 fc5a 	bl	800e4c4 <__mcmp>
 800dc10:	462a      	mov	r2, r5
 800dc12:	9008      	str	r0, [sp, #32]
 800dc14:	4621      	mov	r1, r4
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 fc70 	bl	800e4fc <__mdiff>
 800dc1c:	68c2      	ldr	r2, [r0, #12]
 800dc1e:	4606      	mov	r6, r0
 800dc20:	bb02      	cbnz	r2, 800dc64 <_dtoa_r+0xa1c>
 800dc22:	4601      	mov	r1, r0
 800dc24:	4648      	mov	r0, r9
 800dc26:	f000 fc4d 	bl	800e4c4 <__mcmp>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4658      	mov	r0, fp
 800dc30:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc32:	f000 fa0d 	bl	800e050 <_Bfree>
 800dc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc3a:	9e07      	ldr	r6, [sp, #28]
 800dc3c:	ea43 0102 	orr.w	r1, r3, r2
 800dc40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc42:	4319      	orrs	r1, r3
 800dc44:	d110      	bne.n	800dc68 <_dtoa_r+0xa20>
 800dc46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc4a:	d029      	beq.n	800dca0 <_dtoa_r+0xa58>
 800dc4c:	9b08      	ldr	r3, [sp, #32]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dd02      	ble.n	800dc58 <_dtoa_r+0xa10>
 800dc52:	9b02      	ldr	r3, [sp, #8]
 800dc54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dc58:	9b00      	ldr	r3, [sp, #0]
 800dc5a:	f883 8000 	strb.w	r8, [r3]
 800dc5e:	e63f      	b.n	800d8e0 <_dtoa_r+0x698>
 800dc60:	4628      	mov	r0, r5
 800dc62:	e7bb      	b.n	800dbdc <_dtoa_r+0x994>
 800dc64:	2201      	movs	r2, #1
 800dc66:	e7e1      	b.n	800dc2c <_dtoa_r+0x9e4>
 800dc68:	9b08      	ldr	r3, [sp, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	db04      	blt.n	800dc78 <_dtoa_r+0xa30>
 800dc6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc70:	430b      	orrs	r3, r1
 800dc72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc74:	430b      	orrs	r3, r1
 800dc76:	d120      	bne.n	800dcba <_dtoa_r+0xa72>
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	dded      	ble.n	800dc58 <_dtoa_r+0xa10>
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4658      	mov	r0, fp
 800dc82:	f000 fbb3 	bl	800e3ec <__lshift>
 800dc86:	4621      	mov	r1, r4
 800dc88:	4681      	mov	r9, r0
 800dc8a:	f000 fc1b 	bl	800e4c4 <__mcmp>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	dc03      	bgt.n	800dc9a <_dtoa_r+0xa52>
 800dc92:	d1e1      	bne.n	800dc58 <_dtoa_r+0xa10>
 800dc94:	f018 0f01 	tst.w	r8, #1
 800dc98:	d0de      	beq.n	800dc58 <_dtoa_r+0xa10>
 800dc9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc9e:	d1d8      	bne.n	800dc52 <_dtoa_r+0xa0a>
 800dca0:	9a00      	ldr	r2, [sp, #0]
 800dca2:	2339      	movs	r3, #57	@ 0x39
 800dca4:	7013      	strb	r3, [r2, #0]
 800dca6:	4633      	mov	r3, r6
 800dca8:	461e      	mov	r6, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcb0:	2a39      	cmp	r2, #57	@ 0x39
 800dcb2:	d052      	beq.n	800dd5a <_dtoa_r+0xb12>
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	e612      	b.n	800d8e0 <_dtoa_r+0x698>
 800dcba:	2a00      	cmp	r2, #0
 800dcbc:	dd07      	ble.n	800dcce <_dtoa_r+0xa86>
 800dcbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcc2:	d0ed      	beq.n	800dca0 <_dtoa_r+0xa58>
 800dcc4:	9a00      	ldr	r2, [sp, #0]
 800dcc6:	f108 0301 	add.w	r3, r8, #1
 800dcca:	7013      	strb	r3, [r2, #0]
 800dccc:	e608      	b.n	800d8e0 <_dtoa_r+0x698>
 800dcce:	9b07      	ldr	r3, [sp, #28]
 800dcd0:	9a07      	ldr	r2, [sp, #28]
 800dcd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dcd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d028      	beq.n	800dd2e <_dtoa_r+0xae6>
 800dcdc:	4649      	mov	r1, r9
 800dcde:	2300      	movs	r3, #0
 800dce0:	220a      	movs	r2, #10
 800dce2:	4658      	mov	r0, fp
 800dce4:	f000 f9d6 	bl	800e094 <__multadd>
 800dce8:	42af      	cmp	r7, r5
 800dcea:	4681      	mov	r9, r0
 800dcec:	f04f 0300 	mov.w	r3, #0
 800dcf0:	f04f 020a 	mov.w	r2, #10
 800dcf4:	4639      	mov	r1, r7
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	d107      	bne.n	800dd0a <_dtoa_r+0xac2>
 800dcfa:	f000 f9cb 	bl	800e094 <__multadd>
 800dcfe:	4607      	mov	r7, r0
 800dd00:	4605      	mov	r5, r0
 800dd02:	9b07      	ldr	r3, [sp, #28]
 800dd04:	3301      	adds	r3, #1
 800dd06:	9307      	str	r3, [sp, #28]
 800dd08:	e774      	b.n	800dbf4 <_dtoa_r+0x9ac>
 800dd0a:	f000 f9c3 	bl	800e094 <__multadd>
 800dd0e:	4629      	mov	r1, r5
 800dd10:	4607      	mov	r7, r0
 800dd12:	2300      	movs	r3, #0
 800dd14:	220a      	movs	r2, #10
 800dd16:	4658      	mov	r0, fp
 800dd18:	f000 f9bc 	bl	800e094 <__multadd>
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	e7f0      	b.n	800dd02 <_dtoa_r+0xaba>
 800dd20:	9b00      	ldr	r3, [sp, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	bfcc      	ite	gt
 800dd26:	461e      	movgt	r6, r3
 800dd28:	2601      	movle	r6, #1
 800dd2a:	4456      	add	r6, sl
 800dd2c:	2700      	movs	r7, #0
 800dd2e:	4649      	mov	r1, r9
 800dd30:	2201      	movs	r2, #1
 800dd32:	4658      	mov	r0, fp
 800dd34:	f000 fb5a 	bl	800e3ec <__lshift>
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	f000 fbc2 	bl	800e4c4 <__mcmp>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	dcb0      	bgt.n	800dca6 <_dtoa_r+0xa5e>
 800dd44:	d102      	bne.n	800dd4c <_dtoa_r+0xb04>
 800dd46:	f018 0f01 	tst.w	r8, #1
 800dd4a:	d1ac      	bne.n	800dca6 <_dtoa_r+0xa5e>
 800dd4c:	4633      	mov	r3, r6
 800dd4e:	461e      	mov	r6, r3
 800dd50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd54:	2a30      	cmp	r2, #48	@ 0x30
 800dd56:	d0fa      	beq.n	800dd4e <_dtoa_r+0xb06>
 800dd58:	e5c2      	b.n	800d8e0 <_dtoa_r+0x698>
 800dd5a:	459a      	cmp	sl, r3
 800dd5c:	d1a4      	bne.n	800dca8 <_dtoa_r+0xa60>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	3301      	adds	r3, #1
 800dd62:	9304      	str	r3, [sp, #16]
 800dd64:	2331      	movs	r3, #49	@ 0x31
 800dd66:	f88a 3000 	strb.w	r3, [sl]
 800dd6a:	e5b9      	b.n	800d8e0 <_dtoa_r+0x698>
 800dd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ddcc <_dtoa_r+0xb84>
 800dd72:	b11b      	cbz	r3, 800dd7c <_dtoa_r+0xb34>
 800dd74:	f10a 0308 	add.w	r3, sl, #8
 800dd78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	b019      	add	sp, #100	@ 0x64
 800dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	f77f ae37 	ble.w	800d9fa <_dtoa_r+0x7b2>
 800dd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd90:	2001      	movs	r0, #1
 800dd92:	e655      	b.n	800da40 <_dtoa_r+0x7f8>
 800dd94:	9b00      	ldr	r3, [sp, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f77f aed6 	ble.w	800db48 <_dtoa_r+0x900>
 800dd9c:	4656      	mov	r6, sl
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4648      	mov	r0, r9
 800dda2:	f7ff f9c8 	bl	800d136 <quorem>
 800dda6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddaa:	f806 8b01 	strb.w	r8, [r6], #1
 800ddae:	9b00      	ldr	r3, [sp, #0]
 800ddb0:	eba6 020a 	sub.w	r2, r6, sl
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	ddb3      	ble.n	800dd20 <_dtoa_r+0xad8>
 800ddb8:	4649      	mov	r1, r9
 800ddba:	2300      	movs	r3, #0
 800ddbc:	220a      	movs	r2, #10
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f000 f968 	bl	800e094 <__multadd>
 800ddc4:	4681      	mov	r9, r0
 800ddc6:	e7ea      	b.n	800dd9e <_dtoa_r+0xb56>
 800ddc8:	0800ef90 	.word	0x0800ef90
 800ddcc:	0800ef14 	.word	0x0800ef14

0800ddd0 <_free_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	2900      	cmp	r1, #0
 800ddd6:	d041      	beq.n	800de5c <_free_r+0x8c>
 800ddd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dddc:	1f0c      	subs	r4, r1, #4
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfb8      	it	lt
 800dde2:	18e4      	addlt	r4, r4, r3
 800dde4:	f000 f8e8 	bl	800dfb8 <__malloc_lock>
 800dde8:	4a1d      	ldr	r2, [pc, #116]	@ (800de60 <_free_r+0x90>)
 800ddea:	6813      	ldr	r3, [r2, #0]
 800ddec:	b933      	cbnz	r3, 800ddfc <_free_r+0x2c>
 800ddee:	6063      	str	r3, [r4, #4]
 800ddf0:	6014      	str	r4, [r2, #0]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddf8:	f000 b8e4 	b.w	800dfc4 <__malloc_unlock>
 800ddfc:	42a3      	cmp	r3, r4
 800ddfe:	d908      	bls.n	800de12 <_free_r+0x42>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	1821      	adds	r1, r4, r0
 800de04:	428b      	cmp	r3, r1
 800de06:	bf01      	itttt	eq
 800de08:	6819      	ldreq	r1, [r3, #0]
 800de0a:	685b      	ldreq	r3, [r3, #4]
 800de0c:	1809      	addeq	r1, r1, r0
 800de0e:	6021      	streq	r1, [r4, #0]
 800de10:	e7ed      	b.n	800ddee <_free_r+0x1e>
 800de12:	461a      	mov	r2, r3
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	b10b      	cbz	r3, 800de1c <_free_r+0x4c>
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d9fa      	bls.n	800de12 <_free_r+0x42>
 800de1c:	6811      	ldr	r1, [r2, #0]
 800de1e:	1850      	adds	r0, r2, r1
 800de20:	42a0      	cmp	r0, r4
 800de22:	d10b      	bne.n	800de3c <_free_r+0x6c>
 800de24:	6820      	ldr	r0, [r4, #0]
 800de26:	4401      	add	r1, r0
 800de28:	1850      	adds	r0, r2, r1
 800de2a:	4283      	cmp	r3, r0
 800de2c:	6011      	str	r1, [r2, #0]
 800de2e:	d1e0      	bne.n	800ddf2 <_free_r+0x22>
 800de30:	6818      	ldr	r0, [r3, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	6053      	str	r3, [r2, #4]
 800de36:	4408      	add	r0, r1
 800de38:	6010      	str	r0, [r2, #0]
 800de3a:	e7da      	b.n	800ddf2 <_free_r+0x22>
 800de3c:	d902      	bls.n	800de44 <_free_r+0x74>
 800de3e:	230c      	movs	r3, #12
 800de40:	602b      	str	r3, [r5, #0]
 800de42:	e7d6      	b.n	800ddf2 <_free_r+0x22>
 800de44:	6820      	ldr	r0, [r4, #0]
 800de46:	1821      	adds	r1, r4, r0
 800de48:	428b      	cmp	r3, r1
 800de4a:	bf04      	itt	eq
 800de4c:	6819      	ldreq	r1, [r3, #0]
 800de4e:	685b      	ldreq	r3, [r3, #4]
 800de50:	6063      	str	r3, [r4, #4]
 800de52:	bf04      	itt	eq
 800de54:	1809      	addeq	r1, r1, r0
 800de56:	6021      	streq	r1, [r4, #0]
 800de58:	6054      	str	r4, [r2, #4]
 800de5a:	e7ca      	b.n	800ddf2 <_free_r+0x22>
 800de5c:	bd38      	pop	{r3, r4, r5, pc}
 800de5e:	bf00      	nop
 800de60:	200013b4 	.word	0x200013b4

0800de64 <malloc>:
 800de64:	4b02      	ldr	r3, [pc, #8]	@ (800de70 <malloc+0xc>)
 800de66:	4601      	mov	r1, r0
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	f000 b825 	b.w	800deb8 <_malloc_r>
 800de6e:	bf00      	nop
 800de70:	20000040 	.word	0x20000040

0800de74 <sbrk_aligned>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4e0f      	ldr	r6, [pc, #60]	@ (800deb4 <sbrk_aligned+0x40>)
 800de78:	460c      	mov	r4, r1
 800de7a:	6831      	ldr	r1, [r6, #0]
 800de7c:	4605      	mov	r5, r0
 800de7e:	b911      	cbnz	r1, 800de86 <sbrk_aligned+0x12>
 800de80:	f000 fcd4 	bl	800e82c <_sbrk_r>
 800de84:	6030      	str	r0, [r6, #0]
 800de86:	4621      	mov	r1, r4
 800de88:	4628      	mov	r0, r5
 800de8a:	f000 fccf 	bl	800e82c <_sbrk_r>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	d103      	bne.n	800de9a <sbrk_aligned+0x26>
 800de92:	f04f 34ff 	mov.w	r4, #4294967295
 800de96:	4620      	mov	r0, r4
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	1cc4      	adds	r4, r0, #3
 800de9c:	f024 0403 	bic.w	r4, r4, #3
 800dea0:	42a0      	cmp	r0, r4
 800dea2:	d0f8      	beq.n	800de96 <sbrk_aligned+0x22>
 800dea4:	1a21      	subs	r1, r4, r0
 800dea6:	4628      	mov	r0, r5
 800dea8:	f000 fcc0 	bl	800e82c <_sbrk_r>
 800deac:	3001      	adds	r0, #1
 800deae:	d1f2      	bne.n	800de96 <sbrk_aligned+0x22>
 800deb0:	e7ef      	b.n	800de92 <sbrk_aligned+0x1e>
 800deb2:	bf00      	nop
 800deb4:	200013b0 	.word	0x200013b0

0800deb8 <_malloc_r>:
 800deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800debc:	1ccd      	adds	r5, r1, #3
 800debe:	f025 0503 	bic.w	r5, r5, #3
 800dec2:	3508      	adds	r5, #8
 800dec4:	2d0c      	cmp	r5, #12
 800dec6:	bf38      	it	cc
 800dec8:	250c      	movcc	r5, #12
 800deca:	2d00      	cmp	r5, #0
 800decc:	4606      	mov	r6, r0
 800dece:	db01      	blt.n	800ded4 <_malloc_r+0x1c>
 800ded0:	42a9      	cmp	r1, r5
 800ded2:	d904      	bls.n	800dede <_malloc_r+0x26>
 800ded4:	230c      	movs	r3, #12
 800ded6:	6033      	str	r3, [r6, #0]
 800ded8:	2000      	movs	r0, #0
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfb4 <_malloc_r+0xfc>
 800dee2:	f000 f869 	bl	800dfb8 <__malloc_lock>
 800dee6:	f8d8 3000 	ldr.w	r3, [r8]
 800deea:	461c      	mov	r4, r3
 800deec:	bb44      	cbnz	r4, 800df40 <_malloc_r+0x88>
 800deee:	4629      	mov	r1, r5
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff ffbf 	bl	800de74 <sbrk_aligned>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	4604      	mov	r4, r0
 800defa:	d158      	bne.n	800dfae <_malloc_r+0xf6>
 800defc:	f8d8 4000 	ldr.w	r4, [r8]
 800df00:	4627      	mov	r7, r4
 800df02:	2f00      	cmp	r7, #0
 800df04:	d143      	bne.n	800df8e <_malloc_r+0xd6>
 800df06:	2c00      	cmp	r4, #0
 800df08:	d04b      	beq.n	800dfa2 <_malloc_r+0xea>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	4639      	mov	r1, r7
 800df0e:	4630      	mov	r0, r6
 800df10:	eb04 0903 	add.w	r9, r4, r3
 800df14:	f000 fc8a 	bl	800e82c <_sbrk_r>
 800df18:	4581      	cmp	r9, r0
 800df1a:	d142      	bne.n	800dfa2 <_malloc_r+0xea>
 800df1c:	6821      	ldr	r1, [r4, #0]
 800df1e:	1a6d      	subs	r5, r5, r1
 800df20:	4629      	mov	r1, r5
 800df22:	4630      	mov	r0, r6
 800df24:	f7ff ffa6 	bl	800de74 <sbrk_aligned>
 800df28:	3001      	adds	r0, #1
 800df2a:	d03a      	beq.n	800dfa2 <_malloc_r+0xea>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	442b      	add	r3, r5
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	f8d8 3000 	ldr.w	r3, [r8]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	bb62      	cbnz	r2, 800df94 <_malloc_r+0xdc>
 800df3a:	f8c8 7000 	str.w	r7, [r8]
 800df3e:	e00f      	b.n	800df60 <_malloc_r+0xa8>
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	1b52      	subs	r2, r2, r5
 800df44:	d420      	bmi.n	800df88 <_malloc_r+0xd0>
 800df46:	2a0b      	cmp	r2, #11
 800df48:	d917      	bls.n	800df7a <_malloc_r+0xc2>
 800df4a:	1961      	adds	r1, r4, r5
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	6025      	str	r5, [r4, #0]
 800df50:	bf18      	it	ne
 800df52:	6059      	strne	r1, [r3, #4]
 800df54:	6863      	ldr	r3, [r4, #4]
 800df56:	bf08      	it	eq
 800df58:	f8c8 1000 	streq.w	r1, [r8]
 800df5c:	5162      	str	r2, [r4, r5]
 800df5e:	604b      	str	r3, [r1, #4]
 800df60:	4630      	mov	r0, r6
 800df62:	f000 f82f 	bl	800dfc4 <__malloc_unlock>
 800df66:	f104 000b 	add.w	r0, r4, #11
 800df6a:	1d23      	adds	r3, r4, #4
 800df6c:	f020 0007 	bic.w	r0, r0, #7
 800df70:	1ac2      	subs	r2, r0, r3
 800df72:	bf1c      	itt	ne
 800df74:	1a1b      	subne	r3, r3, r0
 800df76:	50a3      	strne	r3, [r4, r2]
 800df78:	e7af      	b.n	800deda <_malloc_r+0x22>
 800df7a:	6862      	ldr	r2, [r4, #4]
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	bf0c      	ite	eq
 800df80:	f8c8 2000 	streq.w	r2, [r8]
 800df84:	605a      	strne	r2, [r3, #4]
 800df86:	e7eb      	b.n	800df60 <_malloc_r+0xa8>
 800df88:	4623      	mov	r3, r4
 800df8a:	6864      	ldr	r4, [r4, #4]
 800df8c:	e7ae      	b.n	800deec <_malloc_r+0x34>
 800df8e:	463c      	mov	r4, r7
 800df90:	687f      	ldr	r7, [r7, #4]
 800df92:	e7b6      	b.n	800df02 <_malloc_r+0x4a>
 800df94:	461a      	mov	r2, r3
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d1fb      	bne.n	800df94 <_malloc_r+0xdc>
 800df9c:	2300      	movs	r3, #0
 800df9e:	6053      	str	r3, [r2, #4]
 800dfa0:	e7de      	b.n	800df60 <_malloc_r+0xa8>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	6033      	str	r3, [r6, #0]
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	f000 f80c 	bl	800dfc4 <__malloc_unlock>
 800dfac:	e794      	b.n	800ded8 <_malloc_r+0x20>
 800dfae:	6005      	str	r5, [r0, #0]
 800dfb0:	e7d6      	b.n	800df60 <_malloc_r+0xa8>
 800dfb2:	bf00      	nop
 800dfb4:	200013b4 	.word	0x200013b4

0800dfb8 <__malloc_lock>:
 800dfb8:	4801      	ldr	r0, [pc, #4]	@ (800dfc0 <__malloc_lock+0x8>)
 800dfba:	f7ff b8ba 	b.w	800d132 <__retarget_lock_acquire_recursive>
 800dfbe:	bf00      	nop
 800dfc0:	200013ac 	.word	0x200013ac

0800dfc4 <__malloc_unlock>:
 800dfc4:	4801      	ldr	r0, [pc, #4]	@ (800dfcc <__malloc_unlock+0x8>)
 800dfc6:	f7ff b8b5 	b.w	800d134 <__retarget_lock_release_recursive>
 800dfca:	bf00      	nop
 800dfcc:	200013ac 	.word	0x200013ac

0800dfd0 <_Balloc>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	69c6      	ldr	r6, [r0, #28]
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	460d      	mov	r5, r1
 800dfd8:	b976      	cbnz	r6, 800dff8 <_Balloc+0x28>
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7ff ff42 	bl	800de64 <malloc>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	61e0      	str	r0, [r4, #28]
 800dfe4:	b920      	cbnz	r0, 800dff0 <_Balloc+0x20>
 800dfe6:	4b18      	ldr	r3, [pc, #96]	@ (800e048 <_Balloc+0x78>)
 800dfe8:	4818      	ldr	r0, [pc, #96]	@ (800e04c <_Balloc+0x7c>)
 800dfea:	216b      	movs	r1, #107	@ 0x6b
 800dfec:	f000 fc3c 	bl	800e868 <__assert_func>
 800dff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff4:	6006      	str	r6, [r0, #0]
 800dff6:	60c6      	str	r6, [r0, #12]
 800dff8:	69e6      	ldr	r6, [r4, #28]
 800dffa:	68f3      	ldr	r3, [r6, #12]
 800dffc:	b183      	cbz	r3, 800e020 <_Balloc+0x50>
 800dffe:	69e3      	ldr	r3, [r4, #28]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e006:	b9b8      	cbnz	r0, 800e038 <_Balloc+0x68>
 800e008:	2101      	movs	r1, #1
 800e00a:	fa01 f605 	lsl.w	r6, r1, r5
 800e00e:	1d72      	adds	r2, r6, #5
 800e010:	0092      	lsls	r2, r2, #2
 800e012:	4620      	mov	r0, r4
 800e014:	f000 fc46 	bl	800e8a4 <_calloc_r>
 800e018:	b160      	cbz	r0, 800e034 <_Balloc+0x64>
 800e01a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e01e:	e00e      	b.n	800e03e <_Balloc+0x6e>
 800e020:	2221      	movs	r2, #33	@ 0x21
 800e022:	2104      	movs	r1, #4
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fc3d 	bl	800e8a4 <_calloc_r>
 800e02a:	69e3      	ldr	r3, [r4, #28]
 800e02c:	60f0      	str	r0, [r6, #12]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e4      	bne.n	800dffe <_Balloc+0x2e>
 800e034:	2000      	movs	r0, #0
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	6802      	ldr	r2, [r0, #0]
 800e03a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e03e:	2300      	movs	r3, #0
 800e040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e044:	e7f7      	b.n	800e036 <_Balloc+0x66>
 800e046:	bf00      	nop
 800e048:	0800ef21 	.word	0x0800ef21
 800e04c:	0800efa1 	.word	0x0800efa1

0800e050 <_Bfree>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	69c6      	ldr	r6, [r0, #28]
 800e054:	4605      	mov	r5, r0
 800e056:	460c      	mov	r4, r1
 800e058:	b976      	cbnz	r6, 800e078 <_Bfree+0x28>
 800e05a:	2010      	movs	r0, #16
 800e05c:	f7ff ff02 	bl	800de64 <malloc>
 800e060:	4602      	mov	r2, r0
 800e062:	61e8      	str	r0, [r5, #28]
 800e064:	b920      	cbnz	r0, 800e070 <_Bfree+0x20>
 800e066:	4b09      	ldr	r3, [pc, #36]	@ (800e08c <_Bfree+0x3c>)
 800e068:	4809      	ldr	r0, [pc, #36]	@ (800e090 <_Bfree+0x40>)
 800e06a:	218f      	movs	r1, #143	@ 0x8f
 800e06c:	f000 fbfc 	bl	800e868 <__assert_func>
 800e070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e074:	6006      	str	r6, [r0, #0]
 800e076:	60c6      	str	r6, [r0, #12]
 800e078:	b13c      	cbz	r4, 800e08a <_Bfree+0x3a>
 800e07a:	69eb      	ldr	r3, [r5, #28]
 800e07c:	6862      	ldr	r2, [r4, #4]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e084:	6021      	str	r1, [r4, #0]
 800e086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e08a:	bd70      	pop	{r4, r5, r6, pc}
 800e08c:	0800ef21 	.word	0x0800ef21
 800e090:	0800efa1 	.word	0x0800efa1

0800e094 <__multadd>:
 800e094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e098:	690d      	ldr	r5, [r1, #16]
 800e09a:	4607      	mov	r7, r0
 800e09c:	460c      	mov	r4, r1
 800e09e:	461e      	mov	r6, r3
 800e0a0:	f101 0c14 	add.w	ip, r1, #20
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e0aa:	b299      	uxth	r1, r3
 800e0ac:	fb02 6101 	mla	r1, r2, r1, r6
 800e0b0:	0c1e      	lsrs	r6, r3, #16
 800e0b2:	0c0b      	lsrs	r3, r1, #16
 800e0b4:	fb02 3306 	mla	r3, r2, r6, r3
 800e0b8:	b289      	uxth	r1, r1
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0c0:	4285      	cmp	r5, r0
 800e0c2:	f84c 1b04 	str.w	r1, [ip], #4
 800e0c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0ca:	dcec      	bgt.n	800e0a6 <__multadd+0x12>
 800e0cc:	b30e      	cbz	r6, 800e112 <__multadd+0x7e>
 800e0ce:	68a3      	ldr	r3, [r4, #8]
 800e0d0:	42ab      	cmp	r3, r5
 800e0d2:	dc19      	bgt.n	800e108 <__multadd+0x74>
 800e0d4:	6861      	ldr	r1, [r4, #4]
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	3101      	adds	r1, #1
 800e0da:	f7ff ff79 	bl	800dfd0 <_Balloc>
 800e0de:	4680      	mov	r8, r0
 800e0e0:	b928      	cbnz	r0, 800e0ee <__multadd+0x5a>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e118 <__multadd+0x84>)
 800e0e6:	480d      	ldr	r0, [pc, #52]	@ (800e11c <__multadd+0x88>)
 800e0e8:	21ba      	movs	r1, #186	@ 0xba
 800e0ea:	f000 fbbd 	bl	800e868 <__assert_func>
 800e0ee:	6922      	ldr	r2, [r4, #16]
 800e0f0:	3202      	adds	r2, #2
 800e0f2:	f104 010c 	add.w	r1, r4, #12
 800e0f6:	0092      	lsls	r2, r2, #2
 800e0f8:	300c      	adds	r0, #12
 800e0fa:	f000 fba7 	bl	800e84c <memcpy>
 800e0fe:	4621      	mov	r1, r4
 800e100:	4638      	mov	r0, r7
 800e102:	f7ff ffa5 	bl	800e050 <_Bfree>
 800e106:	4644      	mov	r4, r8
 800e108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e10c:	3501      	adds	r5, #1
 800e10e:	615e      	str	r6, [r3, #20]
 800e110:	6125      	str	r5, [r4, #16]
 800e112:	4620      	mov	r0, r4
 800e114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e118:	0800ef90 	.word	0x0800ef90
 800e11c:	0800efa1 	.word	0x0800efa1

0800e120 <__hi0bits>:
 800e120:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e124:	4603      	mov	r3, r0
 800e126:	bf36      	itet	cc
 800e128:	0403      	lslcc	r3, r0, #16
 800e12a:	2000      	movcs	r0, #0
 800e12c:	2010      	movcc	r0, #16
 800e12e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e132:	bf3c      	itt	cc
 800e134:	021b      	lslcc	r3, r3, #8
 800e136:	3008      	addcc	r0, #8
 800e138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e13c:	bf3c      	itt	cc
 800e13e:	011b      	lslcc	r3, r3, #4
 800e140:	3004      	addcc	r0, #4
 800e142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e146:	bf3c      	itt	cc
 800e148:	009b      	lslcc	r3, r3, #2
 800e14a:	3002      	addcc	r0, #2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	db05      	blt.n	800e15c <__hi0bits+0x3c>
 800e150:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e154:	f100 0001 	add.w	r0, r0, #1
 800e158:	bf08      	it	eq
 800e15a:	2020      	moveq	r0, #32
 800e15c:	4770      	bx	lr

0800e15e <__lo0bits>:
 800e15e:	6803      	ldr	r3, [r0, #0]
 800e160:	4602      	mov	r2, r0
 800e162:	f013 0007 	ands.w	r0, r3, #7
 800e166:	d00b      	beq.n	800e180 <__lo0bits+0x22>
 800e168:	07d9      	lsls	r1, r3, #31
 800e16a:	d421      	bmi.n	800e1b0 <__lo0bits+0x52>
 800e16c:	0798      	lsls	r0, r3, #30
 800e16e:	bf49      	itett	mi
 800e170:	085b      	lsrmi	r3, r3, #1
 800e172:	089b      	lsrpl	r3, r3, #2
 800e174:	2001      	movmi	r0, #1
 800e176:	6013      	strmi	r3, [r2, #0]
 800e178:	bf5c      	itt	pl
 800e17a:	6013      	strpl	r3, [r2, #0]
 800e17c:	2002      	movpl	r0, #2
 800e17e:	4770      	bx	lr
 800e180:	b299      	uxth	r1, r3
 800e182:	b909      	cbnz	r1, 800e188 <__lo0bits+0x2a>
 800e184:	0c1b      	lsrs	r3, r3, #16
 800e186:	2010      	movs	r0, #16
 800e188:	b2d9      	uxtb	r1, r3
 800e18a:	b909      	cbnz	r1, 800e190 <__lo0bits+0x32>
 800e18c:	3008      	adds	r0, #8
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	0719      	lsls	r1, r3, #28
 800e192:	bf04      	itt	eq
 800e194:	091b      	lsreq	r3, r3, #4
 800e196:	3004      	addeq	r0, #4
 800e198:	0799      	lsls	r1, r3, #30
 800e19a:	bf04      	itt	eq
 800e19c:	089b      	lsreq	r3, r3, #2
 800e19e:	3002      	addeq	r0, #2
 800e1a0:	07d9      	lsls	r1, r3, #31
 800e1a2:	d403      	bmi.n	800e1ac <__lo0bits+0x4e>
 800e1a4:	085b      	lsrs	r3, r3, #1
 800e1a6:	f100 0001 	add.w	r0, r0, #1
 800e1aa:	d003      	beq.n	800e1b4 <__lo0bits+0x56>
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	4770      	bx	lr
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	4770      	bx	lr
 800e1b4:	2020      	movs	r0, #32
 800e1b6:	4770      	bx	lr

0800e1b8 <__i2b>:
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	2101      	movs	r1, #1
 800e1be:	f7ff ff07 	bl	800dfd0 <_Balloc>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	b928      	cbnz	r0, 800e1d2 <__i2b+0x1a>
 800e1c6:	4b05      	ldr	r3, [pc, #20]	@ (800e1dc <__i2b+0x24>)
 800e1c8:	4805      	ldr	r0, [pc, #20]	@ (800e1e0 <__i2b+0x28>)
 800e1ca:	f240 1145 	movw	r1, #325	@ 0x145
 800e1ce:	f000 fb4b 	bl	800e868 <__assert_func>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	6144      	str	r4, [r0, #20]
 800e1d6:	6103      	str	r3, [r0, #16]
 800e1d8:	bd10      	pop	{r4, pc}
 800e1da:	bf00      	nop
 800e1dc:	0800ef90 	.word	0x0800ef90
 800e1e0:	0800efa1 	.word	0x0800efa1

0800e1e4 <__multiply>:
 800e1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e8:	4614      	mov	r4, r2
 800e1ea:	690a      	ldr	r2, [r1, #16]
 800e1ec:	6923      	ldr	r3, [r4, #16]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	bfa8      	it	ge
 800e1f2:	4623      	movge	r3, r4
 800e1f4:	460f      	mov	r7, r1
 800e1f6:	bfa4      	itt	ge
 800e1f8:	460c      	movge	r4, r1
 800e1fa:	461f      	movge	r7, r3
 800e1fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e200:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e204:	68a3      	ldr	r3, [r4, #8]
 800e206:	6861      	ldr	r1, [r4, #4]
 800e208:	eb0a 0609 	add.w	r6, sl, r9
 800e20c:	42b3      	cmp	r3, r6
 800e20e:	b085      	sub	sp, #20
 800e210:	bfb8      	it	lt
 800e212:	3101      	addlt	r1, #1
 800e214:	f7ff fedc 	bl	800dfd0 <_Balloc>
 800e218:	b930      	cbnz	r0, 800e228 <__multiply+0x44>
 800e21a:	4602      	mov	r2, r0
 800e21c:	4b44      	ldr	r3, [pc, #272]	@ (800e330 <__multiply+0x14c>)
 800e21e:	4845      	ldr	r0, [pc, #276]	@ (800e334 <__multiply+0x150>)
 800e220:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e224:	f000 fb20 	bl	800e868 <__assert_func>
 800e228:	f100 0514 	add.w	r5, r0, #20
 800e22c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e230:	462b      	mov	r3, r5
 800e232:	2200      	movs	r2, #0
 800e234:	4543      	cmp	r3, r8
 800e236:	d321      	bcc.n	800e27c <__multiply+0x98>
 800e238:	f107 0114 	add.w	r1, r7, #20
 800e23c:	f104 0214 	add.w	r2, r4, #20
 800e240:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e244:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e248:	9302      	str	r3, [sp, #8]
 800e24a:	1b13      	subs	r3, r2, r4
 800e24c:	3b15      	subs	r3, #21
 800e24e:	f023 0303 	bic.w	r3, r3, #3
 800e252:	3304      	adds	r3, #4
 800e254:	f104 0715 	add.w	r7, r4, #21
 800e258:	42ba      	cmp	r2, r7
 800e25a:	bf38      	it	cc
 800e25c:	2304      	movcc	r3, #4
 800e25e:	9301      	str	r3, [sp, #4]
 800e260:	9b02      	ldr	r3, [sp, #8]
 800e262:	9103      	str	r1, [sp, #12]
 800e264:	428b      	cmp	r3, r1
 800e266:	d80c      	bhi.n	800e282 <__multiply+0x9e>
 800e268:	2e00      	cmp	r6, #0
 800e26a:	dd03      	ble.n	800e274 <__multiply+0x90>
 800e26c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e270:	2b00      	cmp	r3, #0
 800e272:	d05b      	beq.n	800e32c <__multiply+0x148>
 800e274:	6106      	str	r6, [r0, #16]
 800e276:	b005      	add	sp, #20
 800e278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27c:	f843 2b04 	str.w	r2, [r3], #4
 800e280:	e7d8      	b.n	800e234 <__multiply+0x50>
 800e282:	f8b1 a000 	ldrh.w	sl, [r1]
 800e286:	f1ba 0f00 	cmp.w	sl, #0
 800e28a:	d024      	beq.n	800e2d6 <__multiply+0xf2>
 800e28c:	f104 0e14 	add.w	lr, r4, #20
 800e290:	46a9      	mov	r9, r5
 800e292:	f04f 0c00 	mov.w	ip, #0
 800e296:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e29a:	f8d9 3000 	ldr.w	r3, [r9]
 800e29e:	fa1f fb87 	uxth.w	fp, r7
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2ac:	f8d9 7000 	ldr.w	r7, [r9]
 800e2b0:	4463      	add	r3, ip
 800e2b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2c4:	4572      	cmp	r2, lr
 800e2c6:	f849 3b04 	str.w	r3, [r9], #4
 800e2ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ce:	d8e2      	bhi.n	800e296 <__multiply+0xb2>
 800e2d0:	9b01      	ldr	r3, [sp, #4]
 800e2d2:	f845 c003 	str.w	ip, [r5, r3]
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2dc:	3104      	adds	r1, #4
 800e2de:	f1b9 0f00 	cmp.w	r9, #0
 800e2e2:	d021      	beq.n	800e328 <__multiply+0x144>
 800e2e4:	682b      	ldr	r3, [r5, #0]
 800e2e6:	f104 0c14 	add.w	ip, r4, #20
 800e2ea:	46ae      	mov	lr, r5
 800e2ec:	f04f 0a00 	mov.w	sl, #0
 800e2f0:	f8bc b000 	ldrh.w	fp, [ip]
 800e2f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2f8:	fb09 770b 	mla	r7, r9, fp, r7
 800e2fc:	4457      	add	r7, sl
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e304:	f84e 3b04 	str.w	r3, [lr], #4
 800e308:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e30c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e310:	f8be 3000 	ldrh.w	r3, [lr]
 800e314:	fb09 330a 	mla	r3, r9, sl, r3
 800e318:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e31c:	4562      	cmp	r2, ip
 800e31e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e322:	d8e5      	bhi.n	800e2f0 <__multiply+0x10c>
 800e324:	9f01      	ldr	r7, [sp, #4]
 800e326:	51eb      	str	r3, [r5, r7]
 800e328:	3504      	adds	r5, #4
 800e32a:	e799      	b.n	800e260 <__multiply+0x7c>
 800e32c:	3e01      	subs	r6, #1
 800e32e:	e79b      	b.n	800e268 <__multiply+0x84>
 800e330:	0800ef90 	.word	0x0800ef90
 800e334:	0800efa1 	.word	0x0800efa1

0800e338 <__pow5mult>:
 800e338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e33c:	4615      	mov	r5, r2
 800e33e:	f012 0203 	ands.w	r2, r2, #3
 800e342:	4607      	mov	r7, r0
 800e344:	460e      	mov	r6, r1
 800e346:	d007      	beq.n	800e358 <__pow5mult+0x20>
 800e348:	4c25      	ldr	r4, [pc, #148]	@ (800e3e0 <__pow5mult+0xa8>)
 800e34a:	3a01      	subs	r2, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e352:	f7ff fe9f 	bl	800e094 <__multadd>
 800e356:	4606      	mov	r6, r0
 800e358:	10ad      	asrs	r5, r5, #2
 800e35a:	d03d      	beq.n	800e3d8 <__pow5mult+0xa0>
 800e35c:	69fc      	ldr	r4, [r7, #28]
 800e35e:	b97c      	cbnz	r4, 800e380 <__pow5mult+0x48>
 800e360:	2010      	movs	r0, #16
 800e362:	f7ff fd7f 	bl	800de64 <malloc>
 800e366:	4602      	mov	r2, r0
 800e368:	61f8      	str	r0, [r7, #28]
 800e36a:	b928      	cbnz	r0, 800e378 <__pow5mult+0x40>
 800e36c:	4b1d      	ldr	r3, [pc, #116]	@ (800e3e4 <__pow5mult+0xac>)
 800e36e:	481e      	ldr	r0, [pc, #120]	@ (800e3e8 <__pow5mult+0xb0>)
 800e370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e374:	f000 fa78 	bl	800e868 <__assert_func>
 800e378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e37c:	6004      	str	r4, [r0, #0]
 800e37e:	60c4      	str	r4, [r0, #12]
 800e380:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e388:	b94c      	cbnz	r4, 800e39e <__pow5mult+0x66>
 800e38a:	f240 2171 	movw	r1, #625	@ 0x271
 800e38e:	4638      	mov	r0, r7
 800e390:	f7ff ff12 	bl	800e1b8 <__i2b>
 800e394:	2300      	movs	r3, #0
 800e396:	f8c8 0008 	str.w	r0, [r8, #8]
 800e39a:	4604      	mov	r4, r0
 800e39c:	6003      	str	r3, [r0, #0]
 800e39e:	f04f 0900 	mov.w	r9, #0
 800e3a2:	07eb      	lsls	r3, r5, #31
 800e3a4:	d50a      	bpl.n	800e3bc <__pow5mult+0x84>
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	f7ff ff1a 	bl	800e1e4 <__multiply>
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4680      	mov	r8, r0
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	f7ff fe4b 	bl	800e050 <_Bfree>
 800e3ba:	4646      	mov	r6, r8
 800e3bc:	106d      	asrs	r5, r5, #1
 800e3be:	d00b      	beq.n	800e3d8 <__pow5mult+0xa0>
 800e3c0:	6820      	ldr	r0, [r4, #0]
 800e3c2:	b938      	cbnz	r0, 800e3d4 <__pow5mult+0x9c>
 800e3c4:	4622      	mov	r2, r4
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff ff0b 	bl	800e1e4 <__multiply>
 800e3ce:	6020      	str	r0, [r4, #0]
 800e3d0:	f8c0 9000 	str.w	r9, [r0]
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	e7e4      	b.n	800e3a2 <__pow5mult+0x6a>
 800e3d8:	4630      	mov	r0, r6
 800e3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3de:	bf00      	nop
 800e3e0:	0800effc 	.word	0x0800effc
 800e3e4:	0800ef21 	.word	0x0800ef21
 800e3e8:	0800efa1 	.word	0x0800efa1

0800e3ec <__lshift>:
 800e3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	460c      	mov	r4, r1
 800e3f2:	6849      	ldr	r1, [r1, #4]
 800e3f4:	6923      	ldr	r3, [r4, #16]
 800e3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3fa:	68a3      	ldr	r3, [r4, #8]
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	4691      	mov	r9, r2
 800e400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e404:	f108 0601 	add.w	r6, r8, #1
 800e408:	42b3      	cmp	r3, r6
 800e40a:	db0b      	blt.n	800e424 <__lshift+0x38>
 800e40c:	4638      	mov	r0, r7
 800e40e:	f7ff fddf 	bl	800dfd0 <_Balloc>
 800e412:	4605      	mov	r5, r0
 800e414:	b948      	cbnz	r0, 800e42a <__lshift+0x3e>
 800e416:	4602      	mov	r2, r0
 800e418:	4b28      	ldr	r3, [pc, #160]	@ (800e4bc <__lshift+0xd0>)
 800e41a:	4829      	ldr	r0, [pc, #164]	@ (800e4c0 <__lshift+0xd4>)
 800e41c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e420:	f000 fa22 	bl	800e868 <__assert_func>
 800e424:	3101      	adds	r1, #1
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	e7ee      	b.n	800e408 <__lshift+0x1c>
 800e42a:	2300      	movs	r3, #0
 800e42c:	f100 0114 	add.w	r1, r0, #20
 800e430:	f100 0210 	add.w	r2, r0, #16
 800e434:	4618      	mov	r0, r3
 800e436:	4553      	cmp	r3, sl
 800e438:	db33      	blt.n	800e4a2 <__lshift+0xb6>
 800e43a:	6920      	ldr	r0, [r4, #16]
 800e43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e440:	f104 0314 	add.w	r3, r4, #20
 800e444:	f019 091f 	ands.w	r9, r9, #31
 800e448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e44c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e450:	d02b      	beq.n	800e4aa <__lshift+0xbe>
 800e452:	f1c9 0e20 	rsb	lr, r9, #32
 800e456:	468a      	mov	sl, r1
 800e458:	2200      	movs	r2, #0
 800e45a:	6818      	ldr	r0, [r3, #0]
 800e45c:	fa00 f009 	lsl.w	r0, r0, r9
 800e460:	4310      	orrs	r0, r2
 800e462:	f84a 0b04 	str.w	r0, [sl], #4
 800e466:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46a:	459c      	cmp	ip, r3
 800e46c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e470:	d8f3      	bhi.n	800e45a <__lshift+0x6e>
 800e472:	ebac 0304 	sub.w	r3, ip, r4
 800e476:	3b15      	subs	r3, #21
 800e478:	f023 0303 	bic.w	r3, r3, #3
 800e47c:	3304      	adds	r3, #4
 800e47e:	f104 0015 	add.w	r0, r4, #21
 800e482:	4584      	cmp	ip, r0
 800e484:	bf38      	it	cc
 800e486:	2304      	movcc	r3, #4
 800e488:	50ca      	str	r2, [r1, r3]
 800e48a:	b10a      	cbz	r2, 800e490 <__lshift+0xa4>
 800e48c:	f108 0602 	add.w	r6, r8, #2
 800e490:	3e01      	subs	r6, #1
 800e492:	4638      	mov	r0, r7
 800e494:	612e      	str	r6, [r5, #16]
 800e496:	4621      	mov	r1, r4
 800e498:	f7ff fdda 	bl	800e050 <_Bfree>
 800e49c:	4628      	mov	r0, r5
 800e49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	e7c5      	b.n	800e436 <__lshift+0x4a>
 800e4aa:	3904      	subs	r1, #4
 800e4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4b4:	459c      	cmp	ip, r3
 800e4b6:	d8f9      	bhi.n	800e4ac <__lshift+0xc0>
 800e4b8:	e7ea      	b.n	800e490 <__lshift+0xa4>
 800e4ba:	bf00      	nop
 800e4bc:	0800ef90 	.word	0x0800ef90
 800e4c0:	0800efa1 	.word	0x0800efa1

0800e4c4 <__mcmp>:
 800e4c4:	690a      	ldr	r2, [r1, #16]
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	6900      	ldr	r0, [r0, #16]
 800e4ca:	1a80      	subs	r0, r0, r2
 800e4cc:	b530      	push	{r4, r5, lr}
 800e4ce:	d10e      	bne.n	800e4ee <__mcmp+0x2a>
 800e4d0:	3314      	adds	r3, #20
 800e4d2:	3114      	adds	r1, #20
 800e4d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4e4:	4295      	cmp	r5, r2
 800e4e6:	d003      	beq.n	800e4f0 <__mcmp+0x2c>
 800e4e8:	d205      	bcs.n	800e4f6 <__mcmp+0x32>
 800e4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ee:	bd30      	pop	{r4, r5, pc}
 800e4f0:	42a3      	cmp	r3, r4
 800e4f2:	d3f3      	bcc.n	800e4dc <__mcmp+0x18>
 800e4f4:	e7fb      	b.n	800e4ee <__mcmp+0x2a>
 800e4f6:	2001      	movs	r0, #1
 800e4f8:	e7f9      	b.n	800e4ee <__mcmp+0x2a>
	...

0800e4fc <__mdiff>:
 800e4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	4689      	mov	r9, r1
 800e502:	4606      	mov	r6, r0
 800e504:	4611      	mov	r1, r2
 800e506:	4648      	mov	r0, r9
 800e508:	4614      	mov	r4, r2
 800e50a:	f7ff ffdb 	bl	800e4c4 <__mcmp>
 800e50e:	1e05      	subs	r5, r0, #0
 800e510:	d112      	bne.n	800e538 <__mdiff+0x3c>
 800e512:	4629      	mov	r1, r5
 800e514:	4630      	mov	r0, r6
 800e516:	f7ff fd5b 	bl	800dfd0 <_Balloc>
 800e51a:	4602      	mov	r2, r0
 800e51c:	b928      	cbnz	r0, 800e52a <__mdiff+0x2e>
 800e51e:	4b3f      	ldr	r3, [pc, #252]	@ (800e61c <__mdiff+0x120>)
 800e520:	f240 2137 	movw	r1, #567	@ 0x237
 800e524:	483e      	ldr	r0, [pc, #248]	@ (800e620 <__mdiff+0x124>)
 800e526:	f000 f99f 	bl	800e868 <__assert_func>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e530:	4610      	mov	r0, r2
 800e532:	b003      	add	sp, #12
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	bfbc      	itt	lt
 800e53a:	464b      	movlt	r3, r9
 800e53c:	46a1      	movlt	r9, r4
 800e53e:	4630      	mov	r0, r6
 800e540:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e544:	bfba      	itte	lt
 800e546:	461c      	movlt	r4, r3
 800e548:	2501      	movlt	r5, #1
 800e54a:	2500      	movge	r5, #0
 800e54c:	f7ff fd40 	bl	800dfd0 <_Balloc>
 800e550:	4602      	mov	r2, r0
 800e552:	b918      	cbnz	r0, 800e55c <__mdiff+0x60>
 800e554:	4b31      	ldr	r3, [pc, #196]	@ (800e61c <__mdiff+0x120>)
 800e556:	f240 2145 	movw	r1, #581	@ 0x245
 800e55a:	e7e3      	b.n	800e524 <__mdiff+0x28>
 800e55c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e560:	6926      	ldr	r6, [r4, #16]
 800e562:	60c5      	str	r5, [r0, #12]
 800e564:	f109 0310 	add.w	r3, r9, #16
 800e568:	f109 0514 	add.w	r5, r9, #20
 800e56c:	f104 0e14 	add.w	lr, r4, #20
 800e570:	f100 0b14 	add.w	fp, r0, #20
 800e574:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e578:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	46d9      	mov	r9, fp
 800e580:	f04f 0c00 	mov.w	ip, #0
 800e584:	9b01      	ldr	r3, [sp, #4]
 800e586:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e58a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	fa1f f38a 	uxth.w	r3, sl
 800e594:	4619      	mov	r1, r3
 800e596:	b283      	uxth	r3, r0
 800e598:	1acb      	subs	r3, r1, r3
 800e59a:	0c00      	lsrs	r0, r0, #16
 800e59c:	4463      	add	r3, ip
 800e59e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5ac:	4576      	cmp	r6, lr
 800e5ae:	f849 3b04 	str.w	r3, [r9], #4
 800e5b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5b6:	d8e5      	bhi.n	800e584 <__mdiff+0x88>
 800e5b8:	1b33      	subs	r3, r6, r4
 800e5ba:	3b15      	subs	r3, #21
 800e5bc:	f023 0303 	bic.w	r3, r3, #3
 800e5c0:	3415      	adds	r4, #21
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	42a6      	cmp	r6, r4
 800e5c6:	bf38      	it	cc
 800e5c8:	2304      	movcc	r3, #4
 800e5ca:	441d      	add	r5, r3
 800e5cc:	445b      	add	r3, fp
 800e5ce:	461e      	mov	r6, r3
 800e5d0:	462c      	mov	r4, r5
 800e5d2:	4544      	cmp	r4, r8
 800e5d4:	d30e      	bcc.n	800e5f4 <__mdiff+0xf8>
 800e5d6:	f108 0103 	add.w	r1, r8, #3
 800e5da:	1b49      	subs	r1, r1, r5
 800e5dc:	f021 0103 	bic.w	r1, r1, #3
 800e5e0:	3d03      	subs	r5, #3
 800e5e2:	45a8      	cmp	r8, r5
 800e5e4:	bf38      	it	cc
 800e5e6:	2100      	movcc	r1, #0
 800e5e8:	440b      	add	r3, r1
 800e5ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5ee:	b191      	cbz	r1, 800e616 <__mdiff+0x11a>
 800e5f0:	6117      	str	r7, [r2, #16]
 800e5f2:	e79d      	b.n	800e530 <__mdiff+0x34>
 800e5f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5f8:	46e6      	mov	lr, ip
 800e5fa:	0c08      	lsrs	r0, r1, #16
 800e5fc:	fa1c fc81 	uxtah	ip, ip, r1
 800e600:	4471      	add	r1, lr
 800e602:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e606:	b289      	uxth	r1, r1
 800e608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e60c:	f846 1b04 	str.w	r1, [r6], #4
 800e610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e614:	e7dd      	b.n	800e5d2 <__mdiff+0xd6>
 800e616:	3f01      	subs	r7, #1
 800e618:	e7e7      	b.n	800e5ea <__mdiff+0xee>
 800e61a:	bf00      	nop
 800e61c:	0800ef90 	.word	0x0800ef90
 800e620:	0800efa1 	.word	0x0800efa1

0800e624 <__d2b>:
 800e624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e628:	460f      	mov	r7, r1
 800e62a:	2101      	movs	r1, #1
 800e62c:	ec59 8b10 	vmov	r8, r9, d0
 800e630:	4616      	mov	r6, r2
 800e632:	f7ff fccd 	bl	800dfd0 <_Balloc>
 800e636:	4604      	mov	r4, r0
 800e638:	b930      	cbnz	r0, 800e648 <__d2b+0x24>
 800e63a:	4602      	mov	r2, r0
 800e63c:	4b23      	ldr	r3, [pc, #140]	@ (800e6cc <__d2b+0xa8>)
 800e63e:	4824      	ldr	r0, [pc, #144]	@ (800e6d0 <__d2b+0xac>)
 800e640:	f240 310f 	movw	r1, #783	@ 0x30f
 800e644:	f000 f910 	bl	800e868 <__assert_func>
 800e648:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e64c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e650:	b10d      	cbz	r5, 800e656 <__d2b+0x32>
 800e652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	f1b8 0300 	subs.w	r3, r8, #0
 800e65c:	d023      	beq.n	800e6a6 <__d2b+0x82>
 800e65e:	4668      	mov	r0, sp
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	f7ff fd7c 	bl	800e15e <__lo0bits>
 800e666:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e66a:	b1d0      	cbz	r0, 800e6a2 <__d2b+0x7e>
 800e66c:	f1c0 0320 	rsb	r3, r0, #32
 800e670:	fa02 f303 	lsl.w	r3, r2, r3
 800e674:	430b      	orrs	r3, r1
 800e676:	40c2      	lsrs	r2, r0
 800e678:	6163      	str	r3, [r4, #20]
 800e67a:	9201      	str	r2, [sp, #4]
 800e67c:	9b01      	ldr	r3, [sp, #4]
 800e67e:	61a3      	str	r3, [r4, #24]
 800e680:	2b00      	cmp	r3, #0
 800e682:	bf0c      	ite	eq
 800e684:	2201      	moveq	r2, #1
 800e686:	2202      	movne	r2, #2
 800e688:	6122      	str	r2, [r4, #16]
 800e68a:	b1a5      	cbz	r5, 800e6b6 <__d2b+0x92>
 800e68c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e690:	4405      	add	r5, r0
 800e692:	603d      	str	r5, [r7, #0]
 800e694:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e698:	6030      	str	r0, [r6, #0]
 800e69a:	4620      	mov	r0, r4
 800e69c:	b003      	add	sp, #12
 800e69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a2:	6161      	str	r1, [r4, #20]
 800e6a4:	e7ea      	b.n	800e67c <__d2b+0x58>
 800e6a6:	a801      	add	r0, sp, #4
 800e6a8:	f7ff fd59 	bl	800e15e <__lo0bits>
 800e6ac:	9b01      	ldr	r3, [sp, #4]
 800e6ae:	6163      	str	r3, [r4, #20]
 800e6b0:	3020      	adds	r0, #32
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	e7e8      	b.n	800e688 <__d2b+0x64>
 800e6b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6be:	6038      	str	r0, [r7, #0]
 800e6c0:	6918      	ldr	r0, [r3, #16]
 800e6c2:	f7ff fd2d 	bl	800e120 <__hi0bits>
 800e6c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6ca:	e7e5      	b.n	800e698 <__d2b+0x74>
 800e6cc:	0800ef90 	.word	0x0800ef90
 800e6d0:	0800efa1 	.word	0x0800efa1

0800e6d4 <__sflush_r>:
 800e6d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6dc:	0716      	lsls	r6, r2, #28
 800e6de:	4605      	mov	r5, r0
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	d454      	bmi.n	800e78e <__sflush_r+0xba>
 800e6e4:	684b      	ldr	r3, [r1, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	dc02      	bgt.n	800e6f0 <__sflush_r+0x1c>
 800e6ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	dd48      	ble.n	800e782 <__sflush_r+0xae>
 800e6f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6f2:	2e00      	cmp	r6, #0
 800e6f4:	d045      	beq.n	800e782 <__sflush_r+0xae>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6fc:	682f      	ldr	r7, [r5, #0]
 800e6fe:	6a21      	ldr	r1, [r4, #32]
 800e700:	602b      	str	r3, [r5, #0]
 800e702:	d030      	beq.n	800e766 <__sflush_r+0x92>
 800e704:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	0759      	lsls	r1, r3, #29
 800e70a:	d505      	bpl.n	800e718 <__sflush_r+0x44>
 800e70c:	6863      	ldr	r3, [r4, #4]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e712:	b10b      	cbz	r3, 800e718 <__sflush_r+0x44>
 800e714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e716:	1ad2      	subs	r2, r2, r3
 800e718:	2300      	movs	r3, #0
 800e71a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e71c:	6a21      	ldr	r1, [r4, #32]
 800e71e:	4628      	mov	r0, r5
 800e720:	47b0      	blx	r6
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	d106      	bne.n	800e736 <__sflush_r+0x62>
 800e728:	6829      	ldr	r1, [r5, #0]
 800e72a:	291d      	cmp	r1, #29
 800e72c:	d82b      	bhi.n	800e786 <__sflush_r+0xb2>
 800e72e:	4a2a      	ldr	r2, [pc, #168]	@ (800e7d8 <__sflush_r+0x104>)
 800e730:	410a      	asrs	r2, r1
 800e732:	07d6      	lsls	r6, r2, #31
 800e734:	d427      	bmi.n	800e786 <__sflush_r+0xb2>
 800e736:	2200      	movs	r2, #0
 800e738:	6062      	str	r2, [r4, #4]
 800e73a:	04d9      	lsls	r1, r3, #19
 800e73c:	6922      	ldr	r2, [r4, #16]
 800e73e:	6022      	str	r2, [r4, #0]
 800e740:	d504      	bpl.n	800e74c <__sflush_r+0x78>
 800e742:	1c42      	adds	r2, r0, #1
 800e744:	d101      	bne.n	800e74a <__sflush_r+0x76>
 800e746:	682b      	ldr	r3, [r5, #0]
 800e748:	b903      	cbnz	r3, 800e74c <__sflush_r+0x78>
 800e74a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e74c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e74e:	602f      	str	r7, [r5, #0]
 800e750:	b1b9      	cbz	r1, 800e782 <__sflush_r+0xae>
 800e752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e756:	4299      	cmp	r1, r3
 800e758:	d002      	beq.n	800e760 <__sflush_r+0x8c>
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7ff fb38 	bl	800ddd0 <_free_r>
 800e760:	2300      	movs	r3, #0
 800e762:	6363      	str	r3, [r4, #52]	@ 0x34
 800e764:	e00d      	b.n	800e782 <__sflush_r+0xae>
 800e766:	2301      	movs	r3, #1
 800e768:	4628      	mov	r0, r5
 800e76a:	47b0      	blx	r6
 800e76c:	4602      	mov	r2, r0
 800e76e:	1c50      	adds	r0, r2, #1
 800e770:	d1c9      	bne.n	800e706 <__sflush_r+0x32>
 800e772:	682b      	ldr	r3, [r5, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0c6      	beq.n	800e706 <__sflush_r+0x32>
 800e778:	2b1d      	cmp	r3, #29
 800e77a:	d001      	beq.n	800e780 <__sflush_r+0xac>
 800e77c:	2b16      	cmp	r3, #22
 800e77e:	d11e      	bne.n	800e7be <__sflush_r+0xea>
 800e780:	602f      	str	r7, [r5, #0]
 800e782:	2000      	movs	r0, #0
 800e784:	e022      	b.n	800e7cc <__sflush_r+0xf8>
 800e786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e78a:	b21b      	sxth	r3, r3
 800e78c:	e01b      	b.n	800e7c6 <__sflush_r+0xf2>
 800e78e:	690f      	ldr	r7, [r1, #16]
 800e790:	2f00      	cmp	r7, #0
 800e792:	d0f6      	beq.n	800e782 <__sflush_r+0xae>
 800e794:	0793      	lsls	r3, r2, #30
 800e796:	680e      	ldr	r6, [r1, #0]
 800e798:	bf08      	it	eq
 800e79a:	694b      	ldreq	r3, [r1, #20]
 800e79c:	600f      	str	r7, [r1, #0]
 800e79e:	bf18      	it	ne
 800e7a0:	2300      	movne	r3, #0
 800e7a2:	eba6 0807 	sub.w	r8, r6, r7
 800e7a6:	608b      	str	r3, [r1, #8]
 800e7a8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ac:	dde9      	ble.n	800e782 <__sflush_r+0xae>
 800e7ae:	6a21      	ldr	r1, [r4, #32]
 800e7b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7b2:	4643      	mov	r3, r8
 800e7b4:	463a      	mov	r2, r7
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b0      	blx	r6
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	dc08      	bgt.n	800e7d0 <__sflush_r+0xfc>
 800e7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d0:	4407      	add	r7, r0
 800e7d2:	eba8 0800 	sub.w	r8, r8, r0
 800e7d6:	e7e7      	b.n	800e7a8 <__sflush_r+0xd4>
 800e7d8:	dfbffffe 	.word	0xdfbffffe

0800e7dc <_fflush_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	690b      	ldr	r3, [r1, #16]
 800e7e0:	4605      	mov	r5, r0
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	b913      	cbnz	r3, 800e7ec <_fflush_r+0x10>
 800e7e6:	2500      	movs	r5, #0
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	b118      	cbz	r0, 800e7f6 <_fflush_r+0x1a>
 800e7ee:	6a03      	ldr	r3, [r0, #32]
 800e7f0:	b90b      	cbnz	r3, 800e7f6 <_fflush_r+0x1a>
 800e7f2:	f7fe fba7 	bl	800cf44 <__sinit>
 800e7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d0f3      	beq.n	800e7e6 <_fflush_r+0xa>
 800e7fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e800:	07d0      	lsls	r0, r2, #31
 800e802:	d404      	bmi.n	800e80e <_fflush_r+0x32>
 800e804:	0599      	lsls	r1, r3, #22
 800e806:	d402      	bmi.n	800e80e <_fflush_r+0x32>
 800e808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e80a:	f7fe fc92 	bl	800d132 <__retarget_lock_acquire_recursive>
 800e80e:	4628      	mov	r0, r5
 800e810:	4621      	mov	r1, r4
 800e812:	f7ff ff5f 	bl	800e6d4 <__sflush_r>
 800e816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e818:	07da      	lsls	r2, r3, #31
 800e81a:	4605      	mov	r5, r0
 800e81c:	d4e4      	bmi.n	800e7e8 <_fflush_r+0xc>
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	059b      	lsls	r3, r3, #22
 800e822:	d4e1      	bmi.n	800e7e8 <_fflush_r+0xc>
 800e824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e826:	f7fe fc85 	bl	800d134 <__retarget_lock_release_recursive>
 800e82a:	e7dd      	b.n	800e7e8 <_fflush_r+0xc>

0800e82c <_sbrk_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d06      	ldr	r5, [pc, #24]	@ (800e848 <_sbrk_r+0x1c>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	602b      	str	r3, [r5, #0]
 800e838:	f7f3 fe30 	bl	800249c <_sbrk>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_sbrk_r+0x1a>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_sbrk_r+0x1a>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	200013a8 	.word	0x200013a8

0800e84c <memcpy>:
 800e84c:	440a      	add	r2, r1
 800e84e:	4291      	cmp	r1, r2
 800e850:	f100 33ff 	add.w	r3, r0, #4294967295
 800e854:	d100      	bne.n	800e858 <memcpy+0xc>
 800e856:	4770      	bx	lr
 800e858:	b510      	push	{r4, lr}
 800e85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e862:	4291      	cmp	r1, r2
 800e864:	d1f9      	bne.n	800e85a <memcpy+0xe>
 800e866:	bd10      	pop	{r4, pc}

0800e868 <__assert_func>:
 800e868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e86a:	4614      	mov	r4, r2
 800e86c:	461a      	mov	r2, r3
 800e86e:	4b09      	ldr	r3, [pc, #36]	@ (800e894 <__assert_func+0x2c>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4605      	mov	r5, r0
 800e874:	68d8      	ldr	r0, [r3, #12]
 800e876:	b954      	cbnz	r4, 800e88e <__assert_func+0x26>
 800e878:	4b07      	ldr	r3, [pc, #28]	@ (800e898 <__assert_func+0x30>)
 800e87a:	461c      	mov	r4, r3
 800e87c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e880:	9100      	str	r1, [sp, #0]
 800e882:	462b      	mov	r3, r5
 800e884:	4905      	ldr	r1, [pc, #20]	@ (800e89c <__assert_func+0x34>)
 800e886:	f000 f841 	bl	800e90c <fiprintf>
 800e88a:	f000 f851 	bl	800e930 <abort>
 800e88e:	4b04      	ldr	r3, [pc, #16]	@ (800e8a0 <__assert_func+0x38>)
 800e890:	e7f4      	b.n	800e87c <__assert_func+0x14>
 800e892:	bf00      	nop
 800e894:	20000040 	.word	0x20000040
 800e898:	0800f13d 	.word	0x0800f13d
 800e89c:	0800f10f 	.word	0x0800f10f
 800e8a0:	0800f102 	.word	0x0800f102

0800e8a4 <_calloc_r>:
 800e8a4:	b570      	push	{r4, r5, r6, lr}
 800e8a6:	fba1 5402 	umull	r5, r4, r1, r2
 800e8aa:	b93c      	cbnz	r4, 800e8bc <_calloc_r+0x18>
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	f7ff fb03 	bl	800deb8 <_malloc_r>
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	b928      	cbnz	r0, 800e8c2 <_calloc_r+0x1e>
 800e8b6:	2600      	movs	r6, #0
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
 800e8bc:	220c      	movs	r2, #12
 800e8be:	6002      	str	r2, [r0, #0]
 800e8c0:	e7f9      	b.n	800e8b6 <_calloc_r+0x12>
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	f7fe fbb6 	bl	800d036 <memset>
 800e8ca:	e7f5      	b.n	800e8b8 <_calloc_r+0x14>

0800e8cc <__ascii_mbtowc>:
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	b901      	cbnz	r1, 800e8d2 <__ascii_mbtowc+0x6>
 800e8d0:	a901      	add	r1, sp, #4
 800e8d2:	b142      	cbz	r2, 800e8e6 <__ascii_mbtowc+0x1a>
 800e8d4:	b14b      	cbz	r3, 800e8ea <__ascii_mbtowc+0x1e>
 800e8d6:	7813      	ldrb	r3, [r2, #0]
 800e8d8:	600b      	str	r3, [r1, #0]
 800e8da:	7812      	ldrb	r2, [r2, #0]
 800e8dc:	1e10      	subs	r0, r2, #0
 800e8de:	bf18      	it	ne
 800e8e0:	2001      	movne	r0, #1
 800e8e2:	b002      	add	sp, #8
 800e8e4:	4770      	bx	lr
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	e7fb      	b.n	800e8e2 <__ascii_mbtowc+0x16>
 800e8ea:	f06f 0001 	mvn.w	r0, #1
 800e8ee:	e7f8      	b.n	800e8e2 <__ascii_mbtowc+0x16>

0800e8f0 <__ascii_wctomb>:
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	b141      	cbz	r1, 800e908 <__ascii_wctomb+0x18>
 800e8f6:	2aff      	cmp	r2, #255	@ 0xff
 800e8f8:	d904      	bls.n	800e904 <__ascii_wctomb+0x14>
 800e8fa:	228a      	movs	r2, #138	@ 0x8a
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e902:	4770      	bx	lr
 800e904:	700a      	strb	r2, [r1, #0]
 800e906:	2001      	movs	r0, #1
 800e908:	4770      	bx	lr
	...

0800e90c <fiprintf>:
 800e90c:	b40e      	push	{r1, r2, r3}
 800e90e:	b503      	push	{r0, r1, lr}
 800e910:	4601      	mov	r1, r0
 800e912:	ab03      	add	r3, sp, #12
 800e914:	4805      	ldr	r0, [pc, #20]	@ (800e92c <fiprintf+0x20>)
 800e916:	f853 2b04 	ldr.w	r2, [r3], #4
 800e91a:	6800      	ldr	r0, [r0, #0]
 800e91c:	9301      	str	r3, [sp, #4]
 800e91e:	f000 f837 	bl	800e990 <_vfiprintf_r>
 800e922:	b002      	add	sp, #8
 800e924:	f85d eb04 	ldr.w	lr, [sp], #4
 800e928:	b003      	add	sp, #12
 800e92a:	4770      	bx	lr
 800e92c:	20000040 	.word	0x20000040

0800e930 <abort>:
 800e930:	b508      	push	{r3, lr}
 800e932:	2006      	movs	r0, #6
 800e934:	f000 fa00 	bl	800ed38 <raise>
 800e938:	2001      	movs	r0, #1
 800e93a:	f7f3 fd37 	bl	80023ac <_exit>

0800e93e <__sfputc_r>:
 800e93e:	6893      	ldr	r3, [r2, #8]
 800e940:	3b01      	subs	r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	b410      	push	{r4}
 800e946:	6093      	str	r3, [r2, #8]
 800e948:	da08      	bge.n	800e95c <__sfputc_r+0x1e>
 800e94a:	6994      	ldr	r4, [r2, #24]
 800e94c:	42a3      	cmp	r3, r4
 800e94e:	db01      	blt.n	800e954 <__sfputc_r+0x16>
 800e950:	290a      	cmp	r1, #10
 800e952:	d103      	bne.n	800e95c <__sfputc_r+0x1e>
 800e954:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e958:	f000 b932 	b.w	800ebc0 <__swbuf_r>
 800e95c:	6813      	ldr	r3, [r2, #0]
 800e95e:	1c58      	adds	r0, r3, #1
 800e960:	6010      	str	r0, [r2, #0]
 800e962:	7019      	strb	r1, [r3, #0]
 800e964:	4608      	mov	r0, r1
 800e966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <__sfputs_r>:
 800e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96e:	4606      	mov	r6, r0
 800e970:	460f      	mov	r7, r1
 800e972:	4614      	mov	r4, r2
 800e974:	18d5      	adds	r5, r2, r3
 800e976:	42ac      	cmp	r4, r5
 800e978:	d101      	bne.n	800e97e <__sfputs_r+0x12>
 800e97a:	2000      	movs	r0, #0
 800e97c:	e007      	b.n	800e98e <__sfputs_r+0x22>
 800e97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e982:	463a      	mov	r2, r7
 800e984:	4630      	mov	r0, r6
 800e986:	f7ff ffda 	bl	800e93e <__sfputc_r>
 800e98a:	1c43      	adds	r3, r0, #1
 800e98c:	d1f3      	bne.n	800e976 <__sfputs_r+0xa>
 800e98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e990 <_vfiprintf_r>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	460d      	mov	r5, r1
 800e996:	b09d      	sub	sp, #116	@ 0x74
 800e998:	4614      	mov	r4, r2
 800e99a:	4698      	mov	r8, r3
 800e99c:	4606      	mov	r6, r0
 800e99e:	b118      	cbz	r0, 800e9a8 <_vfiprintf_r+0x18>
 800e9a0:	6a03      	ldr	r3, [r0, #32]
 800e9a2:	b90b      	cbnz	r3, 800e9a8 <_vfiprintf_r+0x18>
 800e9a4:	f7fe face 	bl	800cf44 <__sinit>
 800e9a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9aa:	07d9      	lsls	r1, r3, #31
 800e9ac:	d405      	bmi.n	800e9ba <_vfiprintf_r+0x2a>
 800e9ae:	89ab      	ldrh	r3, [r5, #12]
 800e9b0:	059a      	lsls	r2, r3, #22
 800e9b2:	d402      	bmi.n	800e9ba <_vfiprintf_r+0x2a>
 800e9b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9b6:	f7fe fbbc 	bl	800d132 <__retarget_lock_acquire_recursive>
 800e9ba:	89ab      	ldrh	r3, [r5, #12]
 800e9bc:	071b      	lsls	r3, r3, #28
 800e9be:	d501      	bpl.n	800e9c4 <_vfiprintf_r+0x34>
 800e9c0:	692b      	ldr	r3, [r5, #16]
 800e9c2:	b99b      	cbnz	r3, 800e9ec <_vfiprintf_r+0x5c>
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 f938 	bl	800ec3c <__swsetup_r>
 800e9cc:	b170      	cbz	r0, 800e9ec <_vfiprintf_r+0x5c>
 800e9ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9d0:	07dc      	lsls	r4, r3, #31
 800e9d2:	d504      	bpl.n	800e9de <_vfiprintf_r+0x4e>
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	b01d      	add	sp, #116	@ 0x74
 800e9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9de:	89ab      	ldrh	r3, [r5, #12]
 800e9e0:	0598      	lsls	r0, r3, #22
 800e9e2:	d4f7      	bmi.n	800e9d4 <_vfiprintf_r+0x44>
 800e9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9e6:	f7fe fba5 	bl	800d134 <__retarget_lock_release_recursive>
 800e9ea:	e7f3      	b.n	800e9d4 <_vfiprintf_r+0x44>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9f0:	2320      	movs	r3, #32
 800e9f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9fa:	2330      	movs	r3, #48	@ 0x30
 800e9fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebac <_vfiprintf_r+0x21c>
 800ea00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea04:	f04f 0901 	mov.w	r9, #1
 800ea08:	4623      	mov	r3, r4
 800ea0a:	469a      	mov	sl, r3
 800ea0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea10:	b10a      	cbz	r2, 800ea16 <_vfiprintf_r+0x86>
 800ea12:	2a25      	cmp	r2, #37	@ 0x25
 800ea14:	d1f9      	bne.n	800ea0a <_vfiprintf_r+0x7a>
 800ea16:	ebba 0b04 	subs.w	fp, sl, r4
 800ea1a:	d00b      	beq.n	800ea34 <_vfiprintf_r+0xa4>
 800ea1c:	465b      	mov	r3, fp
 800ea1e:	4622      	mov	r2, r4
 800ea20:	4629      	mov	r1, r5
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7ff ffa2 	bl	800e96c <__sfputs_r>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	f000 80a7 	beq.w	800eb7c <_vfiprintf_r+0x1ec>
 800ea2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea30:	445a      	add	r2, fp
 800ea32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea34:	f89a 3000 	ldrb.w	r3, [sl]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 809f 	beq.w	800eb7c <_vfiprintf_r+0x1ec>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f04f 32ff 	mov.w	r2, #4294967295
 800ea44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea48:	f10a 0a01 	add.w	sl, sl, #1
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	9307      	str	r3, [sp, #28]
 800ea50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea54:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea56:	4654      	mov	r4, sl
 800ea58:	2205      	movs	r2, #5
 800ea5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea5e:	4853      	ldr	r0, [pc, #332]	@ (800ebac <_vfiprintf_r+0x21c>)
 800ea60:	f7f1 fbde 	bl	8000220 <memchr>
 800ea64:	9a04      	ldr	r2, [sp, #16]
 800ea66:	b9d8      	cbnz	r0, 800eaa0 <_vfiprintf_r+0x110>
 800ea68:	06d1      	lsls	r1, r2, #27
 800ea6a:	bf44      	itt	mi
 800ea6c:	2320      	movmi	r3, #32
 800ea6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea72:	0713      	lsls	r3, r2, #28
 800ea74:	bf44      	itt	mi
 800ea76:	232b      	movmi	r3, #43	@ 0x2b
 800ea78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea82:	d015      	beq.n	800eab0 <_vfiprintf_r+0x120>
 800ea84:	9a07      	ldr	r2, [sp, #28]
 800ea86:	4654      	mov	r4, sl
 800ea88:	2000      	movs	r0, #0
 800ea8a:	f04f 0c0a 	mov.w	ip, #10
 800ea8e:	4621      	mov	r1, r4
 800ea90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea94:	3b30      	subs	r3, #48	@ 0x30
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	d94b      	bls.n	800eb32 <_vfiprintf_r+0x1a2>
 800ea9a:	b1b0      	cbz	r0, 800eaca <_vfiprintf_r+0x13a>
 800ea9c:	9207      	str	r2, [sp, #28]
 800ea9e:	e014      	b.n	800eaca <_vfiprintf_r+0x13a>
 800eaa0:	eba0 0308 	sub.w	r3, r0, r8
 800eaa4:	fa09 f303 	lsl.w	r3, r9, r3
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	9304      	str	r3, [sp, #16]
 800eaac:	46a2      	mov	sl, r4
 800eaae:	e7d2      	b.n	800ea56 <_vfiprintf_r+0xc6>
 800eab0:	9b03      	ldr	r3, [sp, #12]
 800eab2:	1d19      	adds	r1, r3, #4
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	9103      	str	r1, [sp, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	bfbb      	ittet	lt
 800eabc:	425b      	neglt	r3, r3
 800eabe:	f042 0202 	orrlt.w	r2, r2, #2
 800eac2:	9307      	strge	r3, [sp, #28]
 800eac4:	9307      	strlt	r3, [sp, #28]
 800eac6:	bfb8      	it	lt
 800eac8:	9204      	strlt	r2, [sp, #16]
 800eaca:	7823      	ldrb	r3, [r4, #0]
 800eacc:	2b2e      	cmp	r3, #46	@ 0x2e
 800eace:	d10a      	bne.n	800eae6 <_vfiprintf_r+0x156>
 800ead0:	7863      	ldrb	r3, [r4, #1]
 800ead2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ead4:	d132      	bne.n	800eb3c <_vfiprintf_r+0x1ac>
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	1d1a      	adds	r2, r3, #4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	9203      	str	r2, [sp, #12]
 800eade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eae2:	3402      	adds	r4, #2
 800eae4:	9305      	str	r3, [sp, #20]
 800eae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebbc <_vfiprintf_r+0x22c>
 800eaea:	7821      	ldrb	r1, [r4, #0]
 800eaec:	2203      	movs	r2, #3
 800eaee:	4650      	mov	r0, sl
 800eaf0:	f7f1 fb96 	bl	8000220 <memchr>
 800eaf4:	b138      	cbz	r0, 800eb06 <_vfiprintf_r+0x176>
 800eaf6:	9b04      	ldr	r3, [sp, #16]
 800eaf8:	eba0 000a 	sub.w	r0, r0, sl
 800eafc:	2240      	movs	r2, #64	@ 0x40
 800eafe:	4082      	lsls	r2, r0
 800eb00:	4313      	orrs	r3, r2
 800eb02:	3401      	adds	r4, #1
 800eb04:	9304      	str	r3, [sp, #16]
 800eb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb0a:	4829      	ldr	r0, [pc, #164]	@ (800ebb0 <_vfiprintf_r+0x220>)
 800eb0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb10:	2206      	movs	r2, #6
 800eb12:	f7f1 fb85 	bl	8000220 <memchr>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d03f      	beq.n	800eb9a <_vfiprintf_r+0x20a>
 800eb1a:	4b26      	ldr	r3, [pc, #152]	@ (800ebb4 <_vfiprintf_r+0x224>)
 800eb1c:	bb1b      	cbnz	r3, 800eb66 <_vfiprintf_r+0x1d6>
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	3307      	adds	r3, #7
 800eb22:	f023 0307 	bic.w	r3, r3, #7
 800eb26:	3308      	adds	r3, #8
 800eb28:	9303      	str	r3, [sp, #12]
 800eb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2c:	443b      	add	r3, r7
 800eb2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb30:	e76a      	b.n	800ea08 <_vfiprintf_r+0x78>
 800eb32:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb36:	460c      	mov	r4, r1
 800eb38:	2001      	movs	r0, #1
 800eb3a:	e7a8      	b.n	800ea8e <_vfiprintf_r+0xfe>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	3401      	adds	r4, #1
 800eb40:	9305      	str	r3, [sp, #20]
 800eb42:	4619      	mov	r1, r3
 800eb44:	f04f 0c0a 	mov.w	ip, #10
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb4e:	3a30      	subs	r2, #48	@ 0x30
 800eb50:	2a09      	cmp	r2, #9
 800eb52:	d903      	bls.n	800eb5c <_vfiprintf_r+0x1cc>
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d0c6      	beq.n	800eae6 <_vfiprintf_r+0x156>
 800eb58:	9105      	str	r1, [sp, #20]
 800eb5a:	e7c4      	b.n	800eae6 <_vfiprintf_r+0x156>
 800eb5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb60:	4604      	mov	r4, r0
 800eb62:	2301      	movs	r3, #1
 800eb64:	e7f0      	b.n	800eb48 <_vfiprintf_r+0x1b8>
 800eb66:	ab03      	add	r3, sp, #12
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	462a      	mov	r2, r5
 800eb6c:	4b12      	ldr	r3, [pc, #72]	@ (800ebb8 <_vfiprintf_r+0x228>)
 800eb6e:	a904      	add	r1, sp, #16
 800eb70:	4630      	mov	r0, r6
 800eb72:	f7fd fda3 	bl	800c6bc <_printf_float>
 800eb76:	4607      	mov	r7, r0
 800eb78:	1c78      	adds	r0, r7, #1
 800eb7a:	d1d6      	bne.n	800eb2a <_vfiprintf_r+0x19a>
 800eb7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb7e:	07d9      	lsls	r1, r3, #31
 800eb80:	d405      	bmi.n	800eb8e <_vfiprintf_r+0x1fe>
 800eb82:	89ab      	ldrh	r3, [r5, #12]
 800eb84:	059a      	lsls	r2, r3, #22
 800eb86:	d402      	bmi.n	800eb8e <_vfiprintf_r+0x1fe>
 800eb88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb8a:	f7fe fad3 	bl	800d134 <__retarget_lock_release_recursive>
 800eb8e:	89ab      	ldrh	r3, [r5, #12]
 800eb90:	065b      	lsls	r3, r3, #25
 800eb92:	f53f af1f 	bmi.w	800e9d4 <_vfiprintf_r+0x44>
 800eb96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb98:	e71e      	b.n	800e9d8 <_vfiprintf_r+0x48>
 800eb9a:	ab03      	add	r3, sp, #12
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	462a      	mov	r2, r5
 800eba0:	4b05      	ldr	r3, [pc, #20]	@ (800ebb8 <_vfiprintf_r+0x228>)
 800eba2:	a904      	add	r1, sp, #16
 800eba4:	4630      	mov	r0, r6
 800eba6:	f7fe f821 	bl	800cbec <_printf_i>
 800ebaa:	e7e4      	b.n	800eb76 <_vfiprintf_r+0x1e6>
 800ebac:	0800f23f 	.word	0x0800f23f
 800ebb0:	0800f249 	.word	0x0800f249
 800ebb4:	0800c6bd 	.word	0x0800c6bd
 800ebb8:	0800e96d 	.word	0x0800e96d
 800ebbc:	0800f245 	.word	0x0800f245

0800ebc0 <__swbuf_r>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	460e      	mov	r6, r1
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	b118      	cbz	r0, 800ebd2 <__swbuf_r+0x12>
 800ebca:	6a03      	ldr	r3, [r0, #32]
 800ebcc:	b90b      	cbnz	r3, 800ebd2 <__swbuf_r+0x12>
 800ebce:	f7fe f9b9 	bl	800cf44 <__sinit>
 800ebd2:	69a3      	ldr	r3, [r4, #24]
 800ebd4:	60a3      	str	r3, [r4, #8]
 800ebd6:	89a3      	ldrh	r3, [r4, #12]
 800ebd8:	071a      	lsls	r2, r3, #28
 800ebda:	d501      	bpl.n	800ebe0 <__swbuf_r+0x20>
 800ebdc:	6923      	ldr	r3, [r4, #16]
 800ebde:	b943      	cbnz	r3, 800ebf2 <__swbuf_r+0x32>
 800ebe0:	4621      	mov	r1, r4
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	f000 f82a 	bl	800ec3c <__swsetup_r>
 800ebe8:	b118      	cbz	r0, 800ebf2 <__swbuf_r+0x32>
 800ebea:	f04f 37ff 	mov.w	r7, #4294967295
 800ebee:	4638      	mov	r0, r7
 800ebf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	6922      	ldr	r2, [r4, #16]
 800ebf6:	1a98      	subs	r0, r3, r2
 800ebf8:	6963      	ldr	r3, [r4, #20]
 800ebfa:	b2f6      	uxtb	r6, r6
 800ebfc:	4283      	cmp	r3, r0
 800ebfe:	4637      	mov	r7, r6
 800ec00:	dc05      	bgt.n	800ec0e <__swbuf_r+0x4e>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4628      	mov	r0, r5
 800ec06:	f7ff fde9 	bl	800e7dc <_fflush_r>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d1ed      	bne.n	800ebea <__swbuf_r+0x2a>
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	60a3      	str	r3, [r4, #8]
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	701e      	strb	r6, [r3, #0]
 800ec1c:	6962      	ldr	r2, [r4, #20]
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d004      	beq.n	800ec2e <__swbuf_r+0x6e>
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	07db      	lsls	r3, r3, #31
 800ec28:	d5e1      	bpl.n	800ebee <__swbuf_r+0x2e>
 800ec2a:	2e0a      	cmp	r6, #10
 800ec2c:	d1df      	bne.n	800ebee <__swbuf_r+0x2e>
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4628      	mov	r0, r5
 800ec32:	f7ff fdd3 	bl	800e7dc <_fflush_r>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d0d9      	beq.n	800ebee <__swbuf_r+0x2e>
 800ec3a:	e7d6      	b.n	800ebea <__swbuf_r+0x2a>

0800ec3c <__swsetup_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4b29      	ldr	r3, [pc, #164]	@ (800ece4 <__swsetup_r+0xa8>)
 800ec40:	4605      	mov	r5, r0
 800ec42:	6818      	ldr	r0, [r3, #0]
 800ec44:	460c      	mov	r4, r1
 800ec46:	b118      	cbz	r0, 800ec50 <__swsetup_r+0x14>
 800ec48:	6a03      	ldr	r3, [r0, #32]
 800ec4a:	b90b      	cbnz	r3, 800ec50 <__swsetup_r+0x14>
 800ec4c:	f7fe f97a 	bl	800cf44 <__sinit>
 800ec50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec54:	0719      	lsls	r1, r3, #28
 800ec56:	d422      	bmi.n	800ec9e <__swsetup_r+0x62>
 800ec58:	06da      	lsls	r2, r3, #27
 800ec5a:	d407      	bmi.n	800ec6c <__swsetup_r+0x30>
 800ec5c:	2209      	movs	r2, #9
 800ec5e:	602a      	str	r2, [r5, #0]
 800ec60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec64:	81a3      	strh	r3, [r4, #12]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	e033      	b.n	800ecd4 <__swsetup_r+0x98>
 800ec6c:	0758      	lsls	r0, r3, #29
 800ec6e:	d512      	bpl.n	800ec96 <__swsetup_r+0x5a>
 800ec70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec72:	b141      	cbz	r1, 800ec86 <__swsetup_r+0x4a>
 800ec74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec78:	4299      	cmp	r1, r3
 800ec7a:	d002      	beq.n	800ec82 <__swsetup_r+0x46>
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	f7ff f8a7 	bl	800ddd0 <_free_r>
 800ec82:	2300      	movs	r3, #0
 800ec84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec8c:	81a3      	strh	r3, [r4, #12]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6063      	str	r3, [r4, #4]
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	f043 0308 	orr.w	r3, r3, #8
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	6923      	ldr	r3, [r4, #16]
 800eca0:	b94b      	cbnz	r3, 800ecb6 <__swsetup_r+0x7a>
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecac:	d003      	beq.n	800ecb6 <__swsetup_r+0x7a>
 800ecae:	4621      	mov	r1, r4
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f000 f883 	bl	800edbc <__smakebuf_r>
 800ecb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecba:	f013 0201 	ands.w	r2, r3, #1
 800ecbe:	d00a      	beq.n	800ecd6 <__swsetup_r+0x9a>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	60a2      	str	r2, [r4, #8]
 800ecc4:	6962      	ldr	r2, [r4, #20]
 800ecc6:	4252      	negs	r2, r2
 800ecc8:	61a2      	str	r2, [r4, #24]
 800ecca:	6922      	ldr	r2, [r4, #16]
 800eccc:	b942      	cbnz	r2, 800ece0 <__swsetup_r+0xa4>
 800ecce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecd2:	d1c5      	bne.n	800ec60 <__swsetup_r+0x24>
 800ecd4:	bd38      	pop	{r3, r4, r5, pc}
 800ecd6:	0799      	lsls	r1, r3, #30
 800ecd8:	bf58      	it	pl
 800ecda:	6962      	ldrpl	r2, [r4, #20]
 800ecdc:	60a2      	str	r2, [r4, #8]
 800ecde:	e7f4      	b.n	800ecca <__swsetup_r+0x8e>
 800ece0:	2000      	movs	r0, #0
 800ece2:	e7f7      	b.n	800ecd4 <__swsetup_r+0x98>
 800ece4:	20000040 	.word	0x20000040

0800ece8 <_raise_r>:
 800ece8:	291f      	cmp	r1, #31
 800ecea:	b538      	push	{r3, r4, r5, lr}
 800ecec:	4605      	mov	r5, r0
 800ecee:	460c      	mov	r4, r1
 800ecf0:	d904      	bls.n	800ecfc <_raise_r+0x14>
 800ecf2:	2316      	movs	r3, #22
 800ecf4:	6003      	str	r3, [r0, #0]
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ecfe:	b112      	cbz	r2, 800ed06 <_raise_r+0x1e>
 800ed00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed04:	b94b      	cbnz	r3, 800ed1a <_raise_r+0x32>
 800ed06:	4628      	mov	r0, r5
 800ed08:	f000 f830 	bl	800ed6c <_getpid_r>
 800ed0c:	4622      	mov	r2, r4
 800ed0e:	4601      	mov	r1, r0
 800ed10:	4628      	mov	r0, r5
 800ed12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed16:	f000 b817 	b.w	800ed48 <_kill_r>
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d00a      	beq.n	800ed34 <_raise_r+0x4c>
 800ed1e:	1c59      	adds	r1, r3, #1
 800ed20:	d103      	bne.n	800ed2a <_raise_r+0x42>
 800ed22:	2316      	movs	r3, #22
 800ed24:	6003      	str	r3, [r0, #0]
 800ed26:	2001      	movs	r0, #1
 800ed28:	e7e7      	b.n	800ecfa <_raise_r+0x12>
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed30:	4620      	mov	r0, r4
 800ed32:	4798      	blx	r3
 800ed34:	2000      	movs	r0, #0
 800ed36:	e7e0      	b.n	800ecfa <_raise_r+0x12>

0800ed38 <raise>:
 800ed38:	4b02      	ldr	r3, [pc, #8]	@ (800ed44 <raise+0xc>)
 800ed3a:	4601      	mov	r1, r0
 800ed3c:	6818      	ldr	r0, [r3, #0]
 800ed3e:	f7ff bfd3 	b.w	800ece8 <_raise_r>
 800ed42:	bf00      	nop
 800ed44:	20000040 	.word	0x20000040

0800ed48 <_kill_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4d07      	ldr	r5, [pc, #28]	@ (800ed68 <_kill_r+0x20>)
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4604      	mov	r4, r0
 800ed50:	4608      	mov	r0, r1
 800ed52:	4611      	mov	r1, r2
 800ed54:	602b      	str	r3, [r5, #0]
 800ed56:	f7f3 fb19 	bl	800238c <_kill>
 800ed5a:	1c43      	adds	r3, r0, #1
 800ed5c:	d102      	bne.n	800ed64 <_kill_r+0x1c>
 800ed5e:	682b      	ldr	r3, [r5, #0]
 800ed60:	b103      	cbz	r3, 800ed64 <_kill_r+0x1c>
 800ed62:	6023      	str	r3, [r4, #0]
 800ed64:	bd38      	pop	{r3, r4, r5, pc}
 800ed66:	bf00      	nop
 800ed68:	200013a8 	.word	0x200013a8

0800ed6c <_getpid_r>:
 800ed6c:	f7f3 bb06 	b.w	800237c <_getpid>

0800ed70 <__swhatbuf_r>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	460c      	mov	r4, r1
 800ed74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed78:	2900      	cmp	r1, #0
 800ed7a:	b096      	sub	sp, #88	@ 0x58
 800ed7c:	4615      	mov	r5, r2
 800ed7e:	461e      	mov	r6, r3
 800ed80:	da0d      	bge.n	800ed9e <__swhatbuf_r+0x2e>
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed88:	f04f 0100 	mov.w	r1, #0
 800ed8c:	bf14      	ite	ne
 800ed8e:	2340      	movne	r3, #64	@ 0x40
 800ed90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed94:	2000      	movs	r0, #0
 800ed96:	6031      	str	r1, [r6, #0]
 800ed98:	602b      	str	r3, [r5, #0]
 800ed9a:	b016      	add	sp, #88	@ 0x58
 800ed9c:	bd70      	pop	{r4, r5, r6, pc}
 800ed9e:	466a      	mov	r2, sp
 800eda0:	f000 f848 	bl	800ee34 <_fstat_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	dbec      	blt.n	800ed82 <__swhatbuf_r+0x12>
 800eda8:	9901      	ldr	r1, [sp, #4]
 800edaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edb2:	4259      	negs	r1, r3
 800edb4:	4159      	adcs	r1, r3
 800edb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edba:	e7eb      	b.n	800ed94 <__swhatbuf_r+0x24>

0800edbc <__smakebuf_r>:
 800edbc:	898b      	ldrh	r3, [r1, #12]
 800edbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edc0:	079d      	lsls	r5, r3, #30
 800edc2:	4606      	mov	r6, r0
 800edc4:	460c      	mov	r4, r1
 800edc6:	d507      	bpl.n	800edd8 <__smakebuf_r+0x1c>
 800edc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	6123      	str	r3, [r4, #16]
 800edd0:	2301      	movs	r3, #1
 800edd2:	6163      	str	r3, [r4, #20]
 800edd4:	b003      	add	sp, #12
 800edd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd8:	ab01      	add	r3, sp, #4
 800edda:	466a      	mov	r2, sp
 800eddc:	f7ff ffc8 	bl	800ed70 <__swhatbuf_r>
 800ede0:	9f00      	ldr	r7, [sp, #0]
 800ede2:	4605      	mov	r5, r0
 800ede4:	4639      	mov	r1, r7
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7ff f866 	bl	800deb8 <_malloc_r>
 800edec:	b948      	cbnz	r0, 800ee02 <__smakebuf_r+0x46>
 800edee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edf2:	059a      	lsls	r2, r3, #22
 800edf4:	d4ee      	bmi.n	800edd4 <__smakebuf_r+0x18>
 800edf6:	f023 0303 	bic.w	r3, r3, #3
 800edfa:	f043 0302 	orr.w	r3, r3, #2
 800edfe:	81a3      	strh	r3, [r4, #12]
 800ee00:	e7e2      	b.n	800edc8 <__smakebuf_r+0xc>
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	6020      	str	r0, [r4, #0]
 800ee06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee0a:	81a3      	strh	r3, [r4, #12]
 800ee0c:	9b01      	ldr	r3, [sp, #4]
 800ee0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee12:	b15b      	cbz	r3, 800ee2c <__smakebuf_r+0x70>
 800ee14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f000 f81d 	bl	800ee58 <_isatty_r>
 800ee1e:	b128      	cbz	r0, 800ee2c <__smakebuf_r+0x70>
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	f023 0303 	bic.w	r3, r3, #3
 800ee26:	f043 0301 	orr.w	r3, r3, #1
 800ee2a:	81a3      	strh	r3, [r4, #12]
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	431d      	orrs	r5, r3
 800ee30:	81a5      	strh	r5, [r4, #12]
 800ee32:	e7cf      	b.n	800edd4 <__smakebuf_r+0x18>

0800ee34 <_fstat_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	4d07      	ldr	r5, [pc, #28]	@ (800ee54 <_fstat_r+0x20>)
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	4611      	mov	r1, r2
 800ee40:	602b      	str	r3, [r5, #0]
 800ee42:	f7f3 fb03 	bl	800244c <_fstat>
 800ee46:	1c43      	adds	r3, r0, #1
 800ee48:	d102      	bne.n	800ee50 <_fstat_r+0x1c>
 800ee4a:	682b      	ldr	r3, [r5, #0]
 800ee4c:	b103      	cbz	r3, 800ee50 <_fstat_r+0x1c>
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	bd38      	pop	{r3, r4, r5, pc}
 800ee52:	bf00      	nop
 800ee54:	200013a8 	.word	0x200013a8

0800ee58 <_isatty_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d06      	ldr	r5, [pc, #24]	@ (800ee74 <_isatty_r+0x1c>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	602b      	str	r3, [r5, #0]
 800ee64:	f7f3 fb02 	bl	800246c <_isatty>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d102      	bne.n	800ee72 <_isatty_r+0x1a>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	b103      	cbz	r3, 800ee72 <_isatty_r+0x1a>
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	200013a8 	.word	0x200013a8

0800ee78 <_init>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	bf00      	nop
 800ee7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee7e:	bc08      	pop	{r3}
 800ee80:	469e      	mov	lr, r3
 800ee82:	4770      	bx	lr

0800ee84 <_fini>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	bf00      	nop
 800ee88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee8a:	bc08      	pop	{r3}
 800ee8c:	469e      	mov	lr, r3
 800ee8e:	4770      	bx	lr
