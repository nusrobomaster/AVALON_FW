
Avalon_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800ac50  0800ac50  0000bc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b010  0800b010  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b010  0800b010  0000c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b018  0800b018  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b018  0800b018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b024  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  200001e0  0800b204  0000d1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  0800b204  0000d3b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043c4c  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074b3  00000000  00000000  00050e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001e7a5  00000000  00000000  0005830f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f68  00000000  00000000  00076ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000039f4  00000000  00000000  00078a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034488  00000000  00000000  0007c414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004552c  00000000  00000000  000b089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00149b40  00000000  00000000  000f5dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0023f908  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006768  00000000  00000000  0023f9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00246128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00246182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ac38 	.word	0x0800ac38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ac38 	.word	0x0800ac38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eea:	2400      	movs	r4, #0
{
 8000eec:	b08c      	sub	sp, #48	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	2220      	movs	r2, #32
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000ef4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000ef8:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	f007 ff7a 	bl	8008df2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efe:	4828      	ldr	r0, [pc, #160]	@ (8000fa0 <MX_ADC1_Init+0xb8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f04:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8000f08:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 2;
 8000f10:	2202      	movs	r2, #2
 8000f12:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f14:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f18:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f1a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f20:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f24:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f28:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f2e:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f30:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f34:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f36:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	f001 fb35 	bl	80025a8 <HAL_ADC_Init>
 8000f3e:	bb08      	cbnz	r0, 8000f84 <MX_ADC1_Init+0x9c>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f40:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f42:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <MX_ADC1_Init+0xb8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f44:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f46:	a901      	add	r1, sp, #4
 8000f48:	f002 fa80 	bl	800344c <HAL_ADCEx_MultiModeConfigChannel>
 8000f4c:	bb20      	cbnz	r0, 8000f98 <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4e:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <MX_ADC1_Init+0xbc>)
 8000f50:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f52:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f56:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f58:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5c:	9207      	str	r2, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <MX_ADC1_Init+0xb8>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f60:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8000f64:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f68:	f001 fde2 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8000f6c:	b988      	cbnz	r0, 8000f92 <MX_ADC1_Init+0xaa>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <MX_ADC1_Init+0xc0>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f72:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	f001 fdd9 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8000f7e:	b920      	cbnz	r0, 8000f8a <MX_ADC1_Init+0xa2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f80:	b00c      	add	sp, #48	@ 0x30
 8000f82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f84:	f000 fe50 	bl	8001c28 <Error_Handler>
 8000f88:	e7da      	b.n	8000f40 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000f8a:	f000 fe4d 	bl	8001c28 <Error_Handler>
}
 8000f8e:	b00c      	add	sp, #48	@ 0x30
 8000f90:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f92:	f000 fe49 	bl	8001c28 <Error_Handler>
 8000f96:	e7ea      	b.n	8000f6e <MX_ADC1_Init+0x86>
    Error_Handler();
 8000f98:	f000 fe46 	bl	8001c28 <Error_Handler>
 8000f9c:	e7d7      	b.n	8000f4e <MX_ADC1_Init+0x66>
 8000f9e:	bf00      	nop
 8000fa0:	20000398 	.word	0x20000398
 8000fa4:	04300002 	.word	0x04300002
 8000fa8:	08600004 	.word	0x08600004

08000fac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fac:	b500      	push	{lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4668      	mov	r0, sp
 8000fb6:	f007 ff1c 	bl	8008df2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fba:	482a      	ldr	r0, [pc, #168]	@ (8001064 <MX_ADC2_Init+0xb8>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fbc:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8001074 <MX_ADC2_Init+0xc8>
 8000fc0:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8000fc4:	e9c0 c100 	strd	ip, r1, [r0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fc8:	2108      	movs	r1, #8
 8000fca:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 3;
 8000fcc:	2103      	movs	r1, #3
 8000fce:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG3;
 8000fd0:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fd6:	2201      	movs	r2, #1
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG3;
 8000fd8:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fe6:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fe8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fec:	6301      	str	r1, [r0, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fee:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff2:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ff4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ff8:	f001 fad6 	bl	80025a8 <HAL_ADC_Init>
 8000ffc:	bb20      	cbnz	r0, 8001048 <MX_ADC2_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <MX_ADC2_Init+0xbc>)
 8001000:	9200      	str	r2, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001002:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001004:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001006:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001008:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800100c:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800100e:	4815      	ldr	r0, [pc, #84]	@ (8001064 <MX_ADC2_Init+0xb8>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001010:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001012:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8001014:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001018:	f001 fd8a 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800101c:	b9f8      	cbnz	r0, 800105e <MX_ADC2_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <MX_ADC2_Init+0xc0>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001020:	4810      	ldr	r0, [pc, #64]	@ (8001064 <MX_ADC2_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001022:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001024:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001026:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800102a:	f001 fd81 	bl	8002b30 <HAL_ADC_ConfigChannel>
 800102e:	b998      	cbnz	r0, 8001058 <MX_ADC2_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001030:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <MX_ADC2_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <MX_ADC2_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001034:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001036:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001038:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103c:	f001 fd78 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8001040:	b928      	cbnz	r0, 800104e <MX_ADC2_Init+0xa2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001042:	b009      	add	sp, #36	@ 0x24
 8001044:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001048:	f000 fdee 	bl	8001c28 <Error_Handler>
 800104c:	e7d7      	b.n	8000ffe <MX_ADC2_Init+0x52>
    Error_Handler();
 800104e:	f000 fdeb 	bl	8001c28 <Error_Handler>
}
 8001052:	b009      	add	sp, #36	@ 0x24
 8001054:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001058:	f000 fde6 	bl	8001c28 <Error_Handler>
 800105c:	e7e8      	b.n	8001030 <MX_ADC2_Init+0x84>
    Error_Handler();
 800105e:	f000 fde3 	bl	8001c28 <Error_Handler>
 8001062:	e7dc      	b.n	800101e <MX_ADC2_Init+0x72>
 8001064:	2000032c 	.word	0x2000032c
 8001068:	1d500080 	.word	0x1d500080
 800106c:	21800100 	.word	0x21800100
 8001070:	25b00200 	.word	0x25b00200
 8001074:	50000100 	.word	0x50000100

08001078 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001078:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800107a:	2400      	movs	r4, #0
{
 800107c:	b08c      	sub	sp, #48	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	2220      	movs	r2, #32
 8001080:	4621      	mov	r1, r4
 8001082:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001084:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001088:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	f007 feb2 	bl	8008df2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800108e:	4820      	ldr	r0, [pc, #128]	@ (8001110 <MX_ADC3_Init+0x98>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <MX_ADC3_Init+0x9c>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001092:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001096:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800109a:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800109e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010a4:	8383      	strh	r3, [r0, #28]
  hadc3.Init.NbrOfConversion = 1;
 80010a6:	2301      	movs	r3, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ac:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	e9c0 440b 	strd	r4, r4, [r0, #44]	@ 0x2c
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	6182      	str	r2, [r0, #24]
  hadc3.Init.NbrOfConversion = 1;
 80010b6:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010b8:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010bc:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80010be:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c2:	f001 fa71 	bl	80025a8 <HAL_ADC_Init>
 80010c6:	b9c0      	cbnz	r0, 80010fa <MX_ADC3_Init+0x82>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c8:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <MX_ADC3_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80010ce:	a901      	add	r1, sp, #4
 80010d0:	f002 f9bc 	bl	800344c <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	b9c0      	cbnz	r0, 8001108 <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <MX_ADC3_Init+0xa0>)
 80010d8:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010dc:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010de:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e0:	9207      	str	r2, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <MX_ADC3_Init+0x98>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e4:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e6:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010e8:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.Offset = 0;
 80010ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010f0:	f001 fd1e 	bl	8002b30 <HAL_ADC_ConfigChannel>
 80010f4:	b920      	cbnz	r0, 8001100 <MX_ADC3_Init+0x88>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010f6:	b00c      	add	sp, #48	@ 0x30
 80010f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010fa:	f000 fd95 	bl	8001c28 <Error_Handler>
 80010fe:	e7e3      	b.n	80010c8 <MX_ADC3_Init+0x50>
    Error_Handler();
 8001100:	f000 fd92 	bl	8001c28 <Error_Handler>
}
 8001104:	b00c      	add	sp, #48	@ 0x30
 8001106:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001108:	f000 fd8e 	bl	8001c28 <Error_Handler>
 800110c:	e7e3      	b.n	80010d6 <MX_ADC3_Init+0x5e>
 800110e:	bf00      	nop
 8001110:	200002c0 	.word	0x200002c0
 8001114:	50000400 	.word	0x50000400
 8001118:	04300002 	.word	0x04300002

0800111c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	b0a0      	sub	sp, #128	@ 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	2254      	movs	r2, #84	@ 0x54
 8001126:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800112c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001130:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001132:	f007 fe5e 	bl	8008df2 <memset>
  if(adcHandle->Instance==ADC1)
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800113c:	d008      	beq.n	8001150 <HAL_ADC_MspInit+0x34>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 800113e:	4a63      	ldr	r2, [pc, #396]	@ (80012cc <HAL_ADC_MspInit+0x1b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d05b      	beq.n	80011fc <HAL_ADC_MspInit+0xe0>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001144:	4a62      	ldr	r2, [pc, #392]	@ (80012d0 <HAL_ADC_MspInit+0x1b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	f000 808b 	beq.w	8001262 <HAL_ADC_MspInit+0x146>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800114c:	b020      	add	sp, #128	@ 0x80
 800114e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001150:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001154:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800115a:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115c:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115e:	f004 ff83 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	2800      	cmp	r0, #0
 8001164:	f040 80a9 	bne.w	80012ba <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001168:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <HAL_ADC_MspInit+0x1b8>)
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800116e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001170:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001172:	d109      	bne.n	8001188 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <HAL_ADC_MspInit+0x1bc>)
 8001176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800117c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <HAL_ADC_MspInit+0x1bc>)
    hdma_adc1.Instance = DMA1_Channel1;
 800118a:	4d54      	ldr	r5, [pc, #336]	@ (80012dc <HAL_ADC_MspInit+0x1c0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = I_CAP_Pin|V_CAP_Pin;
 800119c:	2203      	movs	r2, #3
 800119e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = I_CAP_Pin|V_CAP_Pin;
 80011a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f003 f852 	bl	8004258 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_ADC_MspInit+0x1c4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011b6:	2305      	movs	r3, #5
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011b8:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011bc:	2380      	movs	r3, #128	@ 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	612b      	str	r3, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011c8:	e9c5 1305 	strd	r1, r3, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011cc:	2220      	movs	r2, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011ce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011da:	4628      	mov	r0, r5
 80011dc:	f002 fad6 	bl	800378c <HAL_DMA_Init>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d167      	bne.n	80012b4 <HAL_ADC_MspInit+0x198>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011e4:	6565      	str	r5, [r4, #84]	@ 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011ec:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011ee:	f002 f9f3 	bl	80035d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f002 fa2c 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 80011f8:	b020      	add	sp, #128	@ 0x80
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001200:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001206:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001208:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120a:	f004 ff2d 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	2800      	cmp	r0, #0
 8001210:	d156      	bne.n	80012c0 <HAL_ADC_MspInit+0x1a4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001212:	4a30      	ldr	r2, [pc, #192]	@ (80012d4 <HAL_ADC_MspInit+0x1b8>)
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001218:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800121a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800121c:	d109      	bne.n	8001232 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <HAL_ADC_MspInit+0x1bc>)
 8001220:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001222:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001226:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_ADC_MspInit+0x1bc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	482b      	ldr	r0, [pc, #172]	@ (80012e4 <HAL_ADC_MspInit+0x1c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    hdma_adc2.Instance = DMA2_Channel1;
 8001238:	4d2b      	ldr	r5, [pc, #172]	@ (80012e8 <HAL_ADC_MspInit+0x1cc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	f042 0204 	orr.w	r2, r2, #4
 800123e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = V_CHASSIS_Pin|I_SOURCE_Pin|I_CHASSIS_Pin;
 8001248:	220e      	movs	r2, #14
 800124a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_CHASSIS_Pin|I_SOURCE_Pin|I_CHASSIS_Pin;
 8001250:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f002 fffe 	bl	8004258 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800125c:	4a23      	ldr	r2, [pc, #140]	@ (80012ec <HAL_ADC_MspInit+0x1d0>)
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800125e:	2324      	movs	r3, #36	@ 0x24
 8001260:	e7aa      	b.n	80011b8 <HAL_ADC_MspInit+0x9c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001262:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001266:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800126c:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800126e:	931d      	str	r3, [sp, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f004 fefa 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	bb38      	cbnz	r0, 80012c6 <HAL_ADC_MspInit+0x1aa>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_ADC_MspInit+0x1bc>)
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001278:	481d      	ldr	r0, [pc, #116]	@ (80012f0 <HAL_ADC_MspInit+0x1d4>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 800127a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800127c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001280:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001284:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001288:	9204      	str	r2, [sp, #16]
 800128a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800128e:	f042 0202 	orr.w	r2, r2, #2
 8001292:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 800129c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 80012a0:	2503      	movs	r5, #3
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012a2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 80012a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f002 ffd4 	bl	8004258 <HAL_GPIO_Init>
}
 80012b0:	b020      	add	sp, #128	@ 0x80
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80012b4:	f000 fcb8 	bl	8001c28 <Error_Handler>
 80012b8:	e794      	b.n	80011e4 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 80012ba:	f000 fcb5 	bl	8001c28 <Error_Handler>
 80012be:	e753      	b.n	8001168 <HAL_ADC_MspInit+0x4c>
      Error_Handler();
 80012c0:	f000 fcb2 	bl	8001c28 <Error_Handler>
 80012c4:	e7a5      	b.n	8001212 <HAL_ADC_MspInit+0xf6>
      Error_Handler();
 80012c6:	f000 fcaf 	bl	8001c28 <Error_Handler>
 80012ca:	e7d4      	b.n	8001276 <HAL_ADC_MspInit+0x15a>
 80012cc:	50000100 	.word	0x50000100
 80012d0:	50000400 	.word	0x50000400
 80012d4:	200001fc 	.word	0x200001fc
 80012d8:	40021000 	.word	0x40021000
 80012dc:	20000260 	.word	0x20000260
 80012e0:	40020008 	.word	0x40020008
 80012e4:	48000800 	.word	0x48000800
 80012e8:	20000200 	.word	0x20000200
 80012ec:	40020408 	.word	0x40020408
 80012f0:	48000400 	.word	0x48000400

080012f4 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <MX_CRC_Init+0x24>)
 80012f6:	4909      	ldr	r1, [pc, #36]	@ (800131c <MX_CRC_Init+0x28>)
{
 80012f8:	b508      	push	{r3, lr}
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012fa:	2201      	movs	r2, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012fc:	2300      	movs	r3, #0
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012fe:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 8001302:	6001      	str	r1, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001304:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001306:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001308:	f002 f9ca 	bl	80036a0 <HAL_CRC_Init>
 800130c:	b900      	cbnz	r0, 8001310 <MX_CRC_Init+0x1c>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800130e:	bd08      	pop	{r3, pc}
 8001310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001314:	f000 bc88 	b.w	8001c28 <Error_Handler>
 8001318:	20000404 	.word	0x20000404
 800131c:	40023000 	.word	0x40023000

08001320 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_CRC_MspInit+0x28>)
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d000      	beq.n	800132a <HAL_CRC_MspInit+0xa>
 8001328:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800132a:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 800132e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001336:	649a      	str	r2, [r3, #72]	@ 0x48
 8001338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023000 	.word	0x40023000

0800134c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_DMA_Init+0x64>)
{
 800134e:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001350:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001352:	f040 0004 	orr.w	r0, r0, #4
 8001356:	6498      	str	r0, [r3, #72]	@ 0x48
 8001358:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
{
 800135a:	b084      	sub	sp, #16
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800135c:	f004 0404 	and.w	r4, r4, #4
 8001360:	9401      	str	r4, [sp, #4]
 8001362:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001364:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8001366:	f044 0402 	orr.w	r4, r4, #2
 800136a:	649c      	str	r4, [r3, #72]	@ 0x48
 800136c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800136e:	f004 0402 	and.w	r4, r4, #2
 8001372:	9402      	str	r4, [sp, #8]
 8001374:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8001378:	f044 0401 	orr.w	r4, r4, #1
 800137c:	649c      	str	r4, [r3, #72]	@ 0x48
 800137e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001386:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001388:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800138a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800138e:	f002 f923 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001392:	200b      	movs	r0, #11
 8001394:	f002 f95c 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2038      	movs	r0, #56	@ 0x38
 800139c:	4611      	mov	r1, r2
 800139e:	f002 f91b 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80013a2:	2038      	movs	r0, #56	@ 0x38

}
 80013a4:	b004      	add	sp, #16
 80013a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80013aa:	f002 b951 	b.w	8003650 <HAL_NVIC_EnableIRQ>
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000

080013b4 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80013b4:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <MX_FDCAN2_Init+0x40>)
{
 80013b6:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 80013b8:	4c0f      	ldr	r4, [pc, #60]	@ (80013f8 <MX_FDCAN2_Init+0x44>)
 80013ba:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013bc:	2300      	movs	r3, #0
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 16;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80013be:	2201      	movs	r2, #1
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80013c0:	2102      	movs	r1, #2
  hfdcan2.Init.NominalPrescaler = 16;
 80013c2:	2410      	movs	r4, #16
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80013c8:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80013cc:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80013d0:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg1 = 1;
  hfdcan2.Init.DataTimeSeg2 = 1;
 80013d4:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 80013d8:	e9c0 330d 	strd	r3, r3, [r0, #52]	@ 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80013dc:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80013de:	8203      	strh	r3, [r0, #16]
  hfdcan2.Init.ProtocolException = DISABLE;
 80013e0:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013e2:	63c3      	str	r3, [r0, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80013e4:	f002 fb0a 	bl	80039fc <HAL_FDCAN_Init>
 80013e8:	b900      	cbnz	r0, 80013ec <MX_FDCAN2_Init+0x38>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80013f0:	f000 bc1a 	b.w	8001c28 <Error_Handler>
 80013f4:	20000490 	.word	0x20000490
 80013f8:	40006800 	.word	0x40006800

080013fc <MX_FDCAN3_Init>:
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80013fc:	4812      	ldr	r0, [pc, #72]	@ (8001448 <MX_FDCAN3_Init+0x4c>)
{
 80013fe:	b510      	push	{r4, lr}
  hfdcan3.Instance = FDCAN3;
 8001400:	4c12      	ldr	r4, [pc, #72]	@ (800144c <MX_FDCAN3_Init+0x50>)
 8001402:	6004      	str	r4, [r0, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8001404:	f240 1401 	movw	r4, #257	@ 0x101
 8001408:	8204      	strh	r4, [r0, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
  hfdcan3.Init.ProtocolException = DISABLE;
  hfdcan3.Init.NominalPrescaler = 1;
 800140a:	2401      	movs	r4, #1
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 800140c:	2102      	movs	r1, #2
  hfdcan3.Init.NominalPrescaler = 1;
 800140e:	6144      	str	r4, [r0, #20]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 8001410:	24a7      	movs	r4, #167	@ 0xa7
 8001412:	e9c0 1406 	strd	r1, r4, [r0, #24]
  hfdcan3.Init.NominalTimeSeg2 = 2;
  hfdcan3.Init.DataPrescaler = 5;
 8001416:	2405      	movs	r4, #5
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001418:	2300      	movs	r3, #0
  hfdcan3.Init.DataSyncJumpWidth = 8;
 800141a:	2208      	movs	r2, #8
  hfdcan3.Init.DataPrescaler = 5;
 800141c:	e9c0 1408 	strd	r1, r4, [r0, #32]
  hfdcan3.Init.DataTimeSeg1 = 8;
  hfdcan3.Init.DataTimeSeg2 = 8;
  hfdcan3.Init.StdFiltersNbr = 28;
 8001420:	211c      	movs	r1, #28
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001422:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan3.Init.DataTimeSeg1 = 8;
 8001426:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
  hfdcan3.Init.StdFiltersNbr = 28;
 800142a:	e9c0 210c 	strd	r2, r1, [r0, #48]	@ 0x30
  hfdcan3.Init.ExtFiltersNbr = 8;
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800142e:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001432:	60c3      	str	r3, [r0, #12]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001434:	7483      	strb	r3, [r0, #18]
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001436:	f002 fae1 	bl	80039fc <HAL_FDCAN_Init>
 800143a:	b900      	cbnz	r0, 800143e <MX_FDCAN3_Init+0x42>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800143c:	bd10      	pop	{r4, pc}
 800143e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001442:	f000 bbf1 	b.w	8001c28 <Error_Handler>
 8001446:	bf00      	nop
 8001448:	2000042c 	.word	0x2000042c
 800144c:	40006c00 	.word	0x40006c00

08001450 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	b09e      	sub	sp, #120	@ 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	2254      	movs	r2, #84	@ 0x54
 800145a:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001460:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001464:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001466:	f007 fcc4 	bl	8008df2 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	4a46      	ldr	r2, [pc, #280]	@ (8001588 <HAL_FDCAN_MspInit+0x138>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d004      	beq.n	800147c <HAL_FDCAN_MspInit+0x2c>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN3)
 8001472:	4a46      	ldr	r2, [pc, #280]	@ (800158c <HAL_FDCAN_MspInit+0x13c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d036      	beq.n	80014e6 <HAL_FDCAN_MspInit+0x96>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8001478:	b01e      	add	sp, #120	@ 0x78
 800147a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800147c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001486:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001488:	9317      	str	r3, [sp, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	f004 fded 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	2800      	cmp	r0, #0
 8001490:	d166      	bne.n	8001560 <HAL_FDCAN_MspInit+0x110>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001492:	4a3f      	ldr	r2, [pc, #252]	@ (8001590 <HAL_FDCAN_MspInit+0x140>)
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001498:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800149a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800149c:	d109      	bne.n	80014b2 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_FDCAN_MspInit+0x144>)
 80014a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014a2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80014a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <HAL_FDCAN_MspInit+0x144>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	4838      	ldr	r0, [pc, #224]	@ (8001598 <HAL_FDCAN_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014b8:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8001570 <HAL_FDCAN_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	f042 0202 	orr.w	r2, r2, #2
 80014c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80014c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8001578 <HAL_FDCAN_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80014d4:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014d6:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80014dc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f002 febb 	bl	8004258 <HAL_GPIO_Init>
}
 80014e2:	b01e      	add	sp, #120	@ 0x78
 80014e4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80014ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ee:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014f0:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80014f2:	9317      	str	r3, [sp, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f004 fdb8 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d134      	bne.n	8001566 <HAL_FDCAN_MspInit+0x116>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014fc:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_FDCAN_MspInit+0x140>)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001502:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001506:	d109      	bne.n	800151c <HAL_FDCAN_MspInit+0xcc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001508:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <HAL_FDCAN_MspInit+0x144>)
 800150a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800150c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001510:	659a      	str	r2, [r3, #88]	@ 0x58
 8001512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_FDCAN_MspInit+0x144>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	481e      	ldr	r0, [pc, #120]	@ (8001598 <HAL_FDCAN_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001522:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001580 <HAL_FDCAN_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	f042 0202 	orr.w	r2, r2, #2
 800152a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800152e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001532:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8001578 <HAL_FDCAN_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 800153e:	230b      	movs	r3, #11
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001540:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001544:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f002 fe86 	bl	8004258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 4, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	2058      	movs	r0, #88	@ 0x58
 8001552:	f002 f841 	bl	80035d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001556:	2058      	movs	r0, #88	@ 0x58
 8001558:	f002 f87a 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 800155c:	b01e      	add	sp, #120	@ 0x78
 800155e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001560:	f000 fb62 	bl	8001c28 <Error_Handler>
 8001564:	e795      	b.n	8001492 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001566:	f000 fb5f 	bl	8001c28 <Error_Handler>
 800156a:	e7c7      	b.n	80014fc <HAL_FDCAN_MspInit+0xac>
 800156c:	f3af 8000 	nop.w
 8001570:	00000060 	.word	0x00000060
 8001574:	00000002 	.word	0x00000002
	...
 8001580:	00000018 	.word	0x00000018
 8001584:	00000002 	.word	0x00000002
 8001588:	40006800 	.word	0x40006800
 800158c:	40006c00 	.word	0x40006c00
 8001590:	20000428 	.word	0x20000428
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400

0800159c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800159c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	2400      	movs	r4, #0
{
 80015a0:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80015a6:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <MX_GPIO_Init+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80015b0:	4d2a      	ldr	r5, [pc, #168]	@ (800165c <MX_GPIO_Init+0xc0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80015b2:	4e2b      	ldr	r6, [pc, #172]	@ (8001660 <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015bc:	f002 0220 	and.w	r2, r2, #32
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c6:	f042 0204 	orr.w	r2, r2, #4
 80015ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ce:	f002 0204 	and.w	r2, r2, #4
 80015d2:	9202      	str	r2, [sp, #8]
 80015d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015e0:	f002 0201 	and.w	r2, r2, #1
 80015e4:	9203      	str	r2, [sp, #12]
 80015e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ea:	f042 0202 	orr.w	r2, r2, #2
 80015ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015f2:	f002 0202 	and.w	r2, r2, #2
 80015f6:	9204      	str	r2, [sp, #16]
 80015f8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 800160a:	4622      	mov	r2, r4
 800160c:	4628      	mov	r0, r5
 800160e:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001610:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8001612:	f002 ff29 	bl	8004468 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001616:	4622      	mov	r2, r4
 8001618:	4630      	mov	r0, r6
 800161a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161e:	f002 ff23 	bl	8004468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001622:	2240      	movs	r2, #64	@ 0x40
 8001624:	2301      	movs	r3, #1
 8001626:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800162a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800162c:	2202      	movs	r2, #2
 800162e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001630:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001632:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001636:	f002 fe0f 	bl	8004258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163e:	2301      	movs	r3, #1
 8001640:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001646:	2200      	movs	r2, #0
 8001648:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800164c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f002 fe02 	bl	8004258 <HAL_GPIO_Init>

}
 8001654:	b00c      	add	sp, #48	@ 0x30
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	48000800 	.word	0x48000800
 8001660:	48000400 	.word	0x48000400

08001664 <HAL_HRTIM_MspInit>:
}

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{

  if(hrtimHandle->Instance==HRTIM1)
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_HRTIM_MspInit+0x3c>)
 8001666:	6802      	ldr	r2, [r0, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d000      	beq.n	800166e <HAL_HRTIM_MspInit+0xa>
 800166c:	4770      	bx	lr
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800166e:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
{
 8001672:	b500      	push	{lr}
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001674:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8001676:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800167a:	6619      	str	r1, [r3, #96]	@ 0x60
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
{
 800167e:	b083      	sub	sp, #12

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001686:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001688:	2043      	movs	r0, #67	@ 0x43
 800168a:	4611      	mov	r1, r2
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800168c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 800168e:	f001 ffa3 	bl	80035d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001692:	2043      	movs	r0, #67	@ 0x43
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001694:	b003      	add	sp, #12
 8001696:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 800169a:	f001 bfd9 	b.w	8003650 <HAL_NVIC_EnableIRQ>
 800169e:	bf00      	nop
 80016a0:	40016800 	.word	0x40016800

080016a4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80016a4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hrtimHandle->Instance==HRTIM1)
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <HAL_HRTIM_MspPostInit+0x7c>)
 80016a8:	6802      	ldr	r2, [r0, #0]
{
 80016aa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	2400      	movs	r4, #0
  if(hrtimHandle->Instance==HRTIM1)
 80016ae:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80016b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80016b8:	9406      	str	r4, [sp, #24]
  if(hrtimHandle->Instance==HRTIM1)
 80016ba:	d001      	beq.n	80016c0 <HAL_HRTIM_MspPostInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80016bc:	b009      	add	sp, #36	@ 0x24
 80016be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c0:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2503      	movs	r5, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	4816      	ldr	r0, [pc, #88]	@ (8001724 <HAL_HRTIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	f042 0204 	orr.w	r2, r2, #4
 80016ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016d2:	f002 0204 	and.w	r2, r2, #4
 80016d6:	9200      	str	r2, [sp, #0]
 80016d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BAT_MOS_LOW_Pin|BAT_MOS_HIGH_Pin;
 80016ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016f0:	2302      	movs	r3, #2
 80016f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	e9cd 5505 	strd	r5, r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f002 fdac 	bl	8004258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAP_MOS_LOW_Pin|CAP_MOS_HIGH_Pin;
 8001700:	f44f 7240 	mov.w	r2, #768	@ 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800170c:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001716:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f002 fd9e 	bl	8004258 <HAL_GPIO_Init>
}
 800171c:	b009      	add	sp, #36	@ 0x24
 800171e:	bd30      	pop	{r4, r5, pc}
 8001720:	40016800 	.word	0x40016800
 8001724:	48000800 	.word	0x48000800

08001728 <MX_HRTIM1_Init>:
{
 8001728:	b510      	push	{r4, lr}
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800172a:	2400      	movs	r4, #0
{
 800172c:	b0bc      	sub	sp, #240	@ 0xf0
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800172e:	2260      	movs	r2, #96	@ 0x60
 8001730:	4621      	mov	r1, r4
 8001732:	a824      	add	r0, sp, #144	@ 0x90
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001734:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001738:	9400      	str	r4, [sp, #0]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800173a:	9406      	str	r4, [sp, #24]
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800173c:	9401      	str	r4, [sp, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800173e:	9409      	str	r4, [sp, #36]	@ 0x24
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001740:	f007 fb57 	bl	8008df2 <memset>
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001744:	2224      	movs	r2, #36	@ 0x24
 8001746:	4621      	mov	r1, r4
 8001748:	a81b      	add	r0, sp, #108	@ 0x6c
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800174a:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 800174e:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8001752:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001756:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800175a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800175c:	9402      	str	r4, [sp, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800175e:	f007 fb48 	bl	8008df2 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001762:	2220      	movs	r2, #32
 8001764:	4621      	mov	r1, r4
 8001766:	a812      	add	r0, sp, #72	@ 0x48
 8001768:	f007 fb43 	bl	8008df2 <memset>
  hhrtim1.Instance = HRTIM1;
 800176c:	48be      	ldr	r0, [pc, #760]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 800176e:	4bbf      	ldr	r3, [pc, #764]	@ (8001a6c <MX_HRTIM1_Init+0x344>)
 8001770:	6003      	str	r3, [r0, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001772:	e9c0 4401 	strd	r4, r4, [r0, #4]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001776:	f002 fe7d 	bl	8004474 <HAL_HRTIM_Init>
 800177a:	2800      	cmp	r0, #0
 800177c:	f040 814a 	bne.w	8001a14 <MX_HRTIM1_Init+0x2ec>
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001780:	48b9      	ldr	r0, [pc, #740]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001782:	210c      	movs	r1, #12
 8001784:	f002 fef0 	bl	8004568 <HAL_HRTIM_DLLCalibrationStart>
 8001788:	2800      	cmp	r0, #0
 800178a:	f040 814c 	bne.w	8001a26 <MX_HRTIM1_Init+0x2fe>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800178e:	48b6      	ldr	r0, [pc, #728]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001790:	210a      	movs	r1, #10
 8001792:	f002 ff21 	bl	80045d8 <HAL_HRTIM_PollForDLLCalibration>
 8001796:	2800      	cmp	r0, #0
 8001798:	f040 814e 	bne.w	8001a38 <MX_HRTIM1_Init+0x310>
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 800179c:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 8001a40 <MX_HRTIM1_Init+0x318>
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80017a0:	48b1      	ldr	r0, [pc, #708]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80017a2:	466a      	mov	r2, sp
 80017a4:	2101      	movs	r1, #1
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80017a6:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80017aa:	f002 ff71 	bl	8004690 <HAL_HRTIM_ADCTriggerConfig>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	f040 81a7 	bne.w	8001b02 <MX_HRTIM1_Init+0x3da>
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80017b4:	48ac      	ldr	r0, [pc, #688]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	f003 f883 	bl	80048c4 <HAL_HRTIM_ADCPostScalerConfig>
 80017be:	2800      	cmp	r0, #0
 80017c0:	f040 819c 	bne.w	8001afc <MX_HRTIM1_Init+0x3d4>
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 80017c4:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8001a48 <MX_HRTIM1_Init+0x320>
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 80017c8:	48a7      	ldr	r0, [pc, #668]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80017ca:	466a      	mov	r2, sp
 80017cc:	2104      	movs	r1, #4
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 80017ce:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 80017d2:	f002 ff5d 	bl	8004690 <HAL_HRTIM_ADCTriggerConfig>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	f040 818d 	bne.w	8001af6 <MX_HRTIM1_Init+0x3ce>
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 80017dc:	48a2      	ldr	r0, [pc, #648]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80017de:	2200      	movs	r2, #0
 80017e0:	2104      	movs	r1, #4
 80017e2:	f003 f86f 	bl	80048c4 <HAL_HRTIM_ADCPostScalerConfig>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	f040 8182 	bne.w	8001af0 <MX_HRTIM1_Init+0x3c8>
  pTimeBaseCfg.RepetitionCounter = 16;
 80017ec:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 80017f0:	2310      	movs	r3, #16
 80017f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80017f6:	2102      	movs	r1, #2
 80017f8:	2308      	movs	r3, #8
 80017fa:	e9cd 1308 	strd	r1, r3, [sp, #32]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80017fe:	489a      	ldr	r0, [pc, #616]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001800:	aa06      	add	r2, sp, #24
 8001802:	2106      	movs	r1, #6
 8001804:	f002 ff0e 	bl	8004624 <HAL_HRTIM_TimeBaseConfig>
 8001808:	2800      	cmp	r0, #0
 800180a:	f040 816e 	bne.w	8001aea <MX_HRTIM1_Init+0x3c2>
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800180e:	2300      	movs	r3, #0
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001810:	ed9f 7b8f 	vldr	d7, [pc, #572]	@ 8001a50 <MX_HRTIM1_Init+0x328>
  pTimerCfg.DMASrcAddress = 0x0000;
 8001814:	e9cd 3325 	strd	r3, r3, [sp, #148]	@ 0x94
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001818:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800181c:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001820:	e9cd 332d 	strd	r3, r3, [sp, #180]	@ 0xb4
  pTimerCfg.DMADstAddress = 0x0000;
 8001824:	9327      	str	r3, [sp, #156]	@ 0x9c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001826:	932f      	str	r3, [sp, #188]	@ 0xbc
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001828:	933b      	str	r3, [sp, #236]	@ 0xec
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 800182a:	2310      	movs	r3, #16
 800182c:	9324      	str	r3, [sp, #144]	@ 0x90
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800182e:	488e      	ldr	r0, [pc, #568]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pTimerCfg.DMASize = 0x1;
 8001830:	2301      	movs	r3, #1
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001832:	aa24      	add	r2, sp, #144	@ 0x90
 8001834:	2106      	movs	r1, #6
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001836:	ed8d 7b30 	vstr	d7, [sp, #192]	@ 0xc0
  pTimerCfg.DMASize = 0x1;
 800183a:	9328      	str	r3, [sp, #160]	@ 0xa0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800183c:	f003 f906 	bl	8004a4c <HAL_HRTIM_WaveformTimerConfig>
 8001840:	2800      	cmp	r0, #0
 8001842:	f040 814f 	bne.w	8001ae4 <MX_HRTIM1_Init+0x3bc>
  pTimeBaseCfg.RepetitionCounter = 0;
 8001846:	2100      	movs	r1, #0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001848:	4887      	ldr	r0, [pc, #540]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 800184a:	aa06      	add	r2, sp, #24
  pTimeBaseCfg.RepetitionCounter = 0;
 800184c:	e9cd 1107 	strd	r1, r1, [sp, #28]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001850:	f002 fee8 	bl	8004624 <HAL_HRTIM_TimeBaseConfig>
 8001854:	2800      	cmp	r0, #0
 8001856:	f040 8142 	bne.w	8001ade <MX_HRTIM1_Init+0x3b6>
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800185a:	2100      	movs	r1, #0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800185c:	4882      	ldr	r0, [pc, #520]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800185e:	9111      	str	r1, [sp, #68]	@ 0x44
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001860:	aa0b      	add	r2, sp, #44	@ 0x2c
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001862:	e9cd 110b 	strd	r1, r1, [sp, #44]	@ 0x2c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001866:	e9cd 110d 	strd	r1, r1, [sp, #52]	@ 0x34
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800186a:	f003 fa6b 	bl	8004d44 <HAL_HRTIM_WaveformTimerControl>
 800186e:	2800      	cmp	r0, #0
 8001870:	f040 8132 	bne.w	8001ad8 <MX_HRTIM1_Init+0x3b0>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001874:	ed9f 7b76 	vldr	d7, [pc, #472]	@ 8001a50 <MX_HRTIM1_Init+0x328>
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800187c:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 8001880:	ed9f 7b75 	vldr	d7, [pc, #468]	@ 8001a58 <MX_HRTIM1_Init+0x330>
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001884:	932e      	str	r3, [sp, #184]	@ 0xb8
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001886:	f44f 7380 	mov.w	r3, #256	@ 0x100
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800188a:	2100      	movs	r1, #0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800188c:	9335      	str	r3, [sp, #212]	@ 0xd4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800188e:	4876      	ldr	r0, [pc, #472]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001890:	9134      	str	r1, [sp, #208]	@ 0xd0
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8001892:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001896:	aa24      	add	r2, sp, #144	@ 0x90
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001898:	e9cd 1132 	strd	r1, r1, [sp, #200]	@ 0xc8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 800189c:	ed8d 7b38 	vstr	d7, [sp, #224]	@ 0xe0
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80018a0:	9136      	str	r1, [sp, #216]	@ 0xd8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 80018a2:	933a      	str	r3, [sp, #232]	@ 0xe8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80018a4:	f003 f8d2 	bl	8004a4c <HAL_HRTIM_WaveformTimerConfig>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f040 8112 	bne.w	8001ad2 <MX_HRTIM1_Init+0x3aa>
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80018ae:	2300      	movs	r3, #0
 80018b0:	9336      	str	r3, [sp, #216]	@ 0xd8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80018b2:	486d      	ldr	r0, [pc, #436]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_E;
 80018b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80018b8:	aa24      	add	r2, sp, #144	@ 0x90
 80018ba:	2104      	movs	r1, #4
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_E;
 80018bc:	9338      	str	r3, [sp, #224]	@ 0xe0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80018be:	f003 f8c5 	bl	8004a4c <HAL_HRTIM_WaveformTimerConfig>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	f040 8102 	bne.w	8001acc <MX_HRTIM1_Init+0x3a4>
  pCompareCfg.CompareValue = 27200;
 80018c8:	f646 2340 	movw	r3, #27200	@ 0x6a40
 80018cc:	9302      	str	r3, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80018ce:	4866      	ldr	r0, [pc, #408]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80018d0:	ab02      	add	r3, sp, #8
 80018d2:	2201      	movs	r2, #1
 80018d4:	2100      	movs	r1, #0
 80018d6:	f003 fafd 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 80018da:	2800      	cmp	r0, #0
 80018dc:	f040 80f3 	bne.w	8001ac6 <MX_HRTIM1_Init+0x39e>
  pCompareCfg.CompareValue = 30000;
 80018e0:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 8001a60 <MX_HRTIM1_Init+0x338>
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80018e4:	2100      	movs	r1, #0
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80018e6:	4860      	ldr	r0, [pc, #384]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80018e8:	9104      	str	r1, [sp, #16]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80018ea:	ab02      	add	r3, sp, #8
 80018ec:	2202      	movs	r2, #2
  pCompareCfg.CompareValue = 30000;
 80018ee:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80018f2:	f003 faef 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	f040 80e2 	bne.w	8001ac0 <MX_HRTIM1_Init+0x398>
  pCompareCfg.CompareValue = 15640;
 80018fc:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001900:	9302      	str	r3, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001902:	4859      	ldr	r0, [pc, #356]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001904:	ab02      	add	r3, sp, #8
 8001906:	2204      	movs	r2, #4
 8001908:	2100      	movs	r1, #0
 800190a:	f003 fae3 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 800190e:	2800      	cmp	r0, #0
 8001910:	f040 80d3 	bne.w	8001aba <MX_HRTIM1_Init+0x392>
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001914:	2100      	movs	r1, #0
  pDeadTimeCfg.RisingValue = 220;
 8001916:	23dc      	movs	r3, #220	@ 0xdc
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001918:	4853      	ldr	r0, [pc, #332]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 800191a:	911b      	str	r1, [sp, #108]	@ 0x6c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800191c:	aa1b      	add	r2, sp, #108	@ 0x6c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800191e:	e9cd 111d 	strd	r1, r1, [sp, #116]	@ 0x74
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001922:	e9cd 1121 	strd	r1, r1, [sp, #132]	@ 0x84
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001926:	911f      	str	r1, [sp, #124]	@ 0x7c
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001928:	9123      	str	r1, [sp, #140]	@ 0x8c
  pDeadTimeCfg.RisingValue = 220;
 800192a:	931c      	str	r3, [sp, #112]	@ 0x70
  pDeadTimeCfg.FallingValue = 220;
 800192c:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800192e:	f003 fa83 	bl	8004e38 <HAL_HRTIM_DeadTimeConfig>
 8001932:	2800      	cmp	r0, #0
 8001934:	f040 80be 	bne.w	8001ab4 <MX_HRTIM1_Init+0x38c>
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001938:	484b      	ldr	r0, [pc, #300]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 800193a:	aa1b      	add	r2, sp, #108	@ 0x6c
 800193c:	2104      	movs	r1, #4
 800193e:	f003 fa7b 	bl	8004e38 <HAL_HRTIM_DeadTimeConfig>
 8001942:	2800      	cmp	r0, #0
 8001944:	f040 80b3 	bne.w	8001aae <MX_HRTIM1_Init+0x386>
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001948:	2210      	movs	r2, #16
 800194a:	2308      	movs	r3, #8
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800194c:	2100      	movs	r1, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800194e:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001952:	4845      	ldr	r0, [pc, #276]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001954:	9112      	str	r1, [sp, #72]	@ 0x48
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001956:	ab12      	add	r3, sp, #72	@ 0x48
 8001958:	2201      	movs	r2, #1
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800195a:	e9cd 1115 	strd	r1, r1, [sp, #84]	@ 0x54
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800195e:	e9cd 1117 	strd	r1, r1, [sp, #92]	@ 0x5c
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001962:	9119      	str	r1, [sp, #100]	@ 0x64
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001964:	f003 fb76 	bl	8005054 <HAL_HRTIM_WaveformOutputConfig>
 8001968:	2800      	cmp	r0, #0
 800196a:	f040 809d 	bne.w	8001aa8 <MX_HRTIM1_Init+0x380>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800196e:	483e      	ldr	r0, [pc, #248]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001970:	ab12      	add	r3, sp, #72	@ 0x48
 8001972:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001976:	2104      	movs	r1, #4
 8001978:	f003 fb6c 	bl	8005054 <HAL_HRTIM_WaveformOutputConfig>
 800197c:	2800      	cmp	r0, #0
 800197e:	f040 8090 	bne.w	8001aa2 <MX_HRTIM1_Init+0x37a>
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001982:	2100      	movs	r1, #0
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001984:	4838      	ldr	r0, [pc, #224]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001986:	ab12      	add	r3, sp, #72	@ 0x48
 8001988:	2202      	movs	r2, #2
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800198a:	e9cd 1113 	strd	r1, r1, [sp, #76]	@ 0x4c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800198e:	f003 fb61 	bl	8005054 <HAL_HRTIM_WaveformOutputConfig>
 8001992:	2800      	cmp	r0, #0
 8001994:	f040 8082 	bne.w	8001a9c <MX_HRTIM1_Init+0x374>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001998:	4833      	ldr	r0, [pc, #204]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 800199a:	ab12      	add	r3, sp, #72	@ 0x48
 800199c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a0:	2104      	movs	r1, #4
 80019a2:	f003 fb57 	bl	8005054 <HAL_HRTIM_WaveformOutputConfig>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d175      	bne.n	8001a96 <MX_HRTIM1_Init+0x36e>
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80019aa:	2300      	movs	r3, #0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80019ac:	482e      	ldr	r0, [pc, #184]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80019ae:	9307      	str	r3, [sp, #28]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80019b0:	aa06      	add	r2, sp, #24
 80019b2:	2104      	movs	r1, #4
 80019b4:	f002 fe36 	bl	8004624 <HAL_HRTIM_TimeBaseConfig>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d169      	bne.n	8001a90 <MX_HRTIM1_Init+0x368>
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 80019bc:	482a      	ldr	r0, [pc, #168]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80019be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80019c0:	2104      	movs	r1, #4
 80019c2:	f003 f9bf 	bl	8004d44 <HAL_HRTIM_WaveformTimerControl>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d15f      	bne.n	8001a8a <MX_HRTIM1_Init+0x362>
  pCompareCfg.CompareValue = 3400;
 80019ca:	f640 5148 	movw	r1, #3400	@ 0xd48
 80019ce:	9102      	str	r1, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80019d0:	4825      	ldr	r0, [pc, #148]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80019d2:	ab02      	add	r3, sp, #8
 80019d4:	2201      	movs	r2, #1
 80019d6:	2104      	movs	r1, #4
 80019d8:	f003 fa7c 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d151      	bne.n	8001a84 <MX_HRTIM1_Init+0x35c>
  pCompareCfg.CompareValue = 30000;
 80019e0:	f247 5130 	movw	r1, #30000	@ 0x7530
 80019e4:	9102      	str	r1, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80019e6:	4820      	ldr	r0, [pc, #128]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 80019e8:	ab02      	add	r3, sp, #8
 80019ea:	2202      	movs	r2, #2
 80019ec:	2104      	movs	r1, #4
 80019ee:	f003 fa71 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d143      	bne.n	8001a7e <MX_HRTIM1_Init+0x356>
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80019f6:	2204      	movs	r2, #4
  pCompareCfg.CompareValue = 15640;
 80019f8:	f643 5418 	movw	r4, #15640	@ 0x3d18
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80019fc:	481a      	ldr	r0, [pc, #104]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
  pCompareCfg.CompareValue = 15640;
 80019fe:	9402      	str	r4, [sp, #8]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001a00:	ab02      	add	r3, sp, #8
 8001a02:	4611      	mov	r1, r2
 8001a04:	f003 fa66 	bl	8004ed4 <HAL_HRTIM_WaveformCompareConfig>
 8001a08:	bb90      	cbnz	r0, 8001a70 <MX_HRTIM1_Init+0x348>
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001a0a:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001a0c:	f7ff fe4a 	bl	80016a4 <HAL_HRTIM_MspPostInit>
}
 8001a10:	b03c      	add	sp, #240	@ 0xf0
 8001a12:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a14:	f000 f908 	bl	8001c28 <Error_Handler>
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001a18:	4813      	ldr	r0, [pc, #76]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001a1a:	210c      	movs	r1, #12
 8001a1c:	f002 fda4 	bl	8004568 <HAL_HRTIM_DLLCalibrationStart>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	f43f aeb4 	beq.w	800178e <MX_HRTIM1_Init+0x66>
    Error_Handler();
 8001a26:	f000 f8ff 	bl	8001c28 <Error_Handler>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001a2a:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <MX_HRTIM1_Init+0x340>)
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	f002 fdd3 	bl	80045d8 <HAL_HRTIM_PollForDLLCalibration>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	f43f aeb2 	beq.w	800179c <MX_HRTIM1_Init+0x74>
    Error_Handler();
 8001a38:	f000 f8f6 	bl	8001c28 <Error_Handler>
 8001a3c:	e6ae      	b.n	800179c <MX_HRTIM1_Init+0x74>
 8001a3e:	bf00      	nop
 8001a40:	00010000 	.word	0x00010000
 8001a44:	00000800 	.word	0x00000800
 8001a48:	00050000 	.word	0x00050000
 8001a4c:	20000000 	.word	0x20000000
	...
 8001a58:	00080000 	.word	0x00080000
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	00007530 	.word	0x00007530
 8001a64:	00000000 	.word	0x00000000
 8001a68:	200004f8 	.word	0x200004f8
 8001a6c:	40016800 	.word	0x40016800
    Error_Handler();
 8001a70:	f000 f8da 	bl	8001c28 <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001a74:	4824      	ldr	r0, [pc, #144]	@ (8001b08 <MX_HRTIM1_Init+0x3e0>)
 8001a76:	f7ff fe15 	bl	80016a4 <HAL_HRTIM_MspPostInit>
}
 8001a7a:	b03c      	add	sp, #240	@ 0xf0
 8001a7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a7e:	f000 f8d3 	bl	8001c28 <Error_Handler>
 8001a82:	e7b8      	b.n	80019f6 <MX_HRTIM1_Init+0x2ce>
    Error_Handler();
 8001a84:	f000 f8d0 	bl	8001c28 <Error_Handler>
 8001a88:	e7aa      	b.n	80019e0 <MX_HRTIM1_Init+0x2b8>
    Error_Handler();
 8001a8a:	f000 f8cd 	bl	8001c28 <Error_Handler>
 8001a8e:	e79c      	b.n	80019ca <MX_HRTIM1_Init+0x2a2>
    Error_Handler();
 8001a90:	f000 f8ca 	bl	8001c28 <Error_Handler>
 8001a94:	e792      	b.n	80019bc <MX_HRTIM1_Init+0x294>
    Error_Handler();
 8001a96:	f000 f8c7 	bl	8001c28 <Error_Handler>
 8001a9a:	e786      	b.n	80019aa <MX_HRTIM1_Init+0x282>
    Error_Handler();
 8001a9c:	f000 f8c4 	bl	8001c28 <Error_Handler>
 8001aa0:	e77a      	b.n	8001998 <MX_HRTIM1_Init+0x270>
    Error_Handler();
 8001aa2:	f000 f8c1 	bl	8001c28 <Error_Handler>
 8001aa6:	e76c      	b.n	8001982 <MX_HRTIM1_Init+0x25a>
    Error_Handler();
 8001aa8:	f000 f8be 	bl	8001c28 <Error_Handler>
 8001aac:	e75f      	b.n	800196e <MX_HRTIM1_Init+0x246>
    Error_Handler();
 8001aae:	f000 f8bb 	bl	8001c28 <Error_Handler>
 8001ab2:	e749      	b.n	8001948 <MX_HRTIM1_Init+0x220>
    Error_Handler();
 8001ab4:	f000 f8b8 	bl	8001c28 <Error_Handler>
 8001ab8:	e73e      	b.n	8001938 <MX_HRTIM1_Init+0x210>
    Error_Handler();
 8001aba:	f000 f8b5 	bl	8001c28 <Error_Handler>
 8001abe:	e729      	b.n	8001914 <MX_HRTIM1_Init+0x1ec>
    Error_Handler();
 8001ac0:	f000 f8b2 	bl	8001c28 <Error_Handler>
 8001ac4:	e71a      	b.n	80018fc <MX_HRTIM1_Init+0x1d4>
    Error_Handler();
 8001ac6:	f000 f8af 	bl	8001c28 <Error_Handler>
 8001aca:	e709      	b.n	80018e0 <MX_HRTIM1_Init+0x1b8>
    Error_Handler();
 8001acc:	f000 f8ac 	bl	8001c28 <Error_Handler>
 8001ad0:	e6fa      	b.n	80018c8 <MX_HRTIM1_Init+0x1a0>
    Error_Handler();
 8001ad2:	f000 f8a9 	bl	8001c28 <Error_Handler>
 8001ad6:	e6ea      	b.n	80018ae <MX_HRTIM1_Init+0x186>
    Error_Handler();
 8001ad8:	f000 f8a6 	bl	8001c28 <Error_Handler>
 8001adc:	e6ca      	b.n	8001874 <MX_HRTIM1_Init+0x14c>
    Error_Handler();
 8001ade:	f000 f8a3 	bl	8001c28 <Error_Handler>
 8001ae2:	e6ba      	b.n	800185a <MX_HRTIM1_Init+0x132>
    Error_Handler();
 8001ae4:	f000 f8a0 	bl	8001c28 <Error_Handler>
 8001ae8:	e6ad      	b.n	8001846 <MX_HRTIM1_Init+0x11e>
    Error_Handler();
 8001aea:	f000 f89d 	bl	8001c28 <Error_Handler>
 8001aee:	e68e      	b.n	800180e <MX_HRTIM1_Init+0xe6>
    Error_Handler();
 8001af0:	f000 f89a 	bl	8001c28 <Error_Handler>
 8001af4:	e67a      	b.n	80017ec <MX_HRTIM1_Init+0xc4>
    Error_Handler();
 8001af6:	f000 f897 	bl	8001c28 <Error_Handler>
 8001afa:	e66f      	b.n	80017dc <MX_HRTIM1_Init+0xb4>
    Error_Handler();
 8001afc:	f000 f894 	bl	8001c28 <Error_Handler>
 8001b00:	e660      	b.n	80017c4 <MX_HRTIM1_Init+0x9c>
    Error_Handler();
 8001b02:	f000 f891 	bl	8001c28 <Error_Handler>
 8001b06:	e655      	b.n	80017b4 <MX_HRTIM1_Init+0x8c>
 8001b08:	200004f8 	.word	0x200004f8

08001b0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b10:	2238      	movs	r2, #56	@ 0x38
 8001b12:	2100      	movs	r1, #0
 8001b14:	a806      	add	r0, sp, #24
 8001b16:	f007 f96c 	bl	8008df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001b20:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001b24:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b26:	f003 fe7f 	bl	8005828 <HAL_PWREx_ControlVoltageScaling>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b2a:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001b2c:	2029      	movs	r0, #41	@ 0x29
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b2e:	e9cd 220b 	strd	r2, r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001b32:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 8001b36:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001b3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3e:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 8001b40:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b44:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b46:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b4e:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b52:	f003 fee3 	bl	800591c <HAL_RCC_OscConfig>
 8001b56:	b108      	cbz	r0, 8001b5c <_Z18SystemClock_Configv+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <_Z18SystemClock_Configv+0x4e>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b62:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b66:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b70:	f004 f952 	bl	8005e18 <HAL_RCC_ClockConfig>
 8001b74:	b108      	cbz	r0, 8001b7a <_Z18SystemClock_Configv+0x6e>
 8001b76:	b672      	cpsid	i
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <_Z18SystemClock_Configv+0x6c>
}
 8001b7a:	b014      	add	sp, #80	@ 0x50
 8001b7c:	bd10      	pop	{r4, pc}
 8001b7e:	bf00      	nop

08001b80 <main>:
{
 8001b80:	b508      	push	{r3, lr}
  HAL_Init();
 8001b82:	f000 fcdd 	bl	8002540 <HAL_Init>
  SystemClock_Config();
 8001b86:	f7ff ffc1 	bl	8001b0c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001b8a:	f7ff fd07 	bl	800159c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b8e:	f7ff fbdd 	bl	800134c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b92:	f7ff f9a9 	bl	8000ee8 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8001b96:	f7ff fc0d 	bl	80013b4 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 8001b9a:	f000 fac1 	bl	8002120 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001b9e:	f000 fc3f 	bl	8002420 <MX_USB_PCD_Init>
  MX_FDCAN3_Init();
 8001ba2:	f7ff fc2b 	bl	80013fc <MX_FDCAN3_Init>
  MX_TIM8_Init();
 8001ba6:	f000 f9bb 	bl	8001f20 <MX_TIM8_Init>
  MX_ADC2_Init();
 8001baa:	f7ff f9ff 	bl	8000fac <MX_ADC2_Init>
  MX_SPI2_Init();
 8001bae:	f000 f861 	bl	8001c74 <MX_SPI2_Init>
  MX_UART4_Init();
 8001bb2:	f000 fa2d 	bl	8002010 <MX_UART4_Init>
  MX_UART5_Init();
 8001bb6:	f000 fa6f 	bl	8002098 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001bba:	f000 faf5 	bl	80021a8 <MX_USART3_UART_Init>
  MX_HRTIM1_Init();
 8001bbe:	f7ff fdb3 	bl	8001728 <MX_HRTIM1_Init>
  MX_ADC3_Init();
 8001bc2:	f7ff fa59 	bl	8001078 <MX_ADC3_Init>
  MX_CRC_Init();
 8001bc6:	f7ff fb95 	bl	80012f4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001bca:	f000 f96d 	bl	8001ea8 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001bce:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <main+0x7c>)
 8001bd0:	f004 fcf4 	bl	80065bc <HAL_TIM_Base_Start_IT>
  initCANComm(&hfdcan3);
 8001bd4:	480a      	ldr	r0, [pc, #40]	@ (8001c00 <main+0x80>)
 8001bd6:	f005 fa95 	bl	8007104 <_Z11initCANCommP19FDCAN_HandleTypeDef>
  supercap_controller.adc_init(filter_lengths);
 8001bda:	490a      	ldr	r1, [pc, #40]	@ (8001c04 <main+0x84>)
 8001bdc:	480a      	ldr	r0, [pc, #40]	@ (8001c08 <main+0x88>)
 8001bde:	f005 fa3b 	bl	8007058 <_ZN11adc_manager8adc_initEPh>
  HAL_Delay(1000);
 8001be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be6:	f000 fccd 	bl	8002584 <HAL_Delay>
  HAL_HRTIM_WaveformCountStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER|HRTIM_TIMERID_TIMER_A|HRTIM_TIMERID_TIMER_E);
 8001bea:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <main+0x8c>)
 8001bec:	f44f 110c 	mov.w	r1, #2293760	@ 0x230000
 8001bf0:	f003 fac8 	bl	8005184 <HAL_HRTIM_WaveformCountStart_IT>
  supercap_controller.init_loop();
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <main+0x88>)
 8001bf6:	f005 fcb5 	bl	8007564 <_ZN24supercap_control_manager9init_loopEv>
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <main+0x7a>
 8001bfc:	20000760 	.word	0x20000760
 8001c00:	2000042c 	.word	0x2000042c
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000654 	.word	0x20000654
 8001c0c:	200004f8 	.word	0x200004f8

08001c10 <TIM2_IRQHandler>:
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <TIM2_IRQHandler+0x10>)
    canComDriver.sendMessage();
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <TIM2_IRQHandler+0x14>)
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f06f 0201 	mvn.w	r2, #1
 8001c1a:	611a      	str	r2, [r3, #16]
    canComDriver.sendMessage();
 8001c1c:	f005 bac6 	b.w	80071ac <_ZN7CANComm11sendMessageEv>
 8001c20:	20000760 	.word	0x20000760
 8001c24:	200005f4 	.word	0x200005f4

08001c28 <Error_Handler>:
 8001c28:	b672      	cpsid	i
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <Error_Handler+0x2>

08001c2c <_GLOBAL__sub_I_supercap_controller>:
	 * @param adc_cap Pointer to ADC for capacitor-side sampling
	 * @param adc_bat Pointer to ADC for battery-side sampling
	 * @param adc_temp Pointer to ADC for temperature sensing
	 */
	adc_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp)
		: adc_cap_(adc_cap), adc_bat_(adc_bat), adc_temp_(adc_temp) {}
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <_GLOBAL__sub_I_supercap_controller+0x2c>)
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <_GLOBAL__sub_I_supercap_controller+0x30>)
public:
    /**
     * @brief Constructor: sets up header configuration for outgoing messages.
     * @param fdcan_ Pointer to FDCAN handle.
     */
    CANComm(FDCAN_HandleTypeDef* fdcan_) : fdcan(fdcan_) { txHeaderConfig(); }
 8001c30:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <_GLOBAL__sub_I_supercap_controller+0x34>)
	 * @param adc_cap Pointer to ADC for supercap measurements
	 * @param adc_bat Pointer to ADC for battery-side measurements
	 * @param adc_temp Pointer to ADC used for temperature sensing
	 */
	supercap_control_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp) :
		adc_manager(adc_cap, adc_bat, adc_temp) {};
 8001c32:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <_GLOBAL__sub_I_supercap_controller+0x38>)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c34:	b410      	push	{r4}
 8001c36:	4c0c      	ldr	r4, [pc, #48]	@ (8001c68 <_GLOBAL__sub_I_supercap_controller+0x3c>)
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <_GLOBAL__sub_I_supercap_controller+0x40>)
 8001c3c:	6519      	str	r1, [r3, #80]	@ 0x50
 8001c3e:	e9c3 4202 	strd	r4, r2, [r3, #8]
 8001c42:	f04f 0c00 	mov.w	ip, #0
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <_GLOBAL__sub_I_supercap_controller+0x44>)
 8001c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c4c:	f883 c000 	strb.w	ip, [r3]
 8001c50:	6002      	str	r2, [r0, #0]
 8001c52:	f005 ba99 	b.w	8007188 <_ZN7CANComm14txHeaderConfigEv>
 8001c56:	bf00      	nop
 8001c58:	20000654 	.word	0x20000654
 8001c5c:	20000398 	.word	0x20000398
 8001c60:	200005f4 	.word	0x200005f4
 8001c64:	42700000 	.word	0x42700000
 8001c68:	2000032c 	.word	0x2000032c
 8001c6c:	200002c0 	.word	0x200002c0
 8001c70:	2000042c 	.word	0x2000042c

08001c74 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c74:	b510      	push	{r4, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c76:	4810      	ldr	r0, [pc, #64]	@ (8001cb8 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c78:	4c10      	ldr	r4, [pc, #64]	@ (8001cbc <MX_SPI2_Init+0x48>)
 8001c7a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c7e:	e9c0 4100 	strd	r4, r1, [r0]
 8001c82:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8001c86:	2300      	movs	r3, #0
 8001c88:	2208      	movs	r2, #8
 8001c8a:	f44f 7440 	mov.w	r4, #768	@ 0x300
 8001c8e:	6181      	str	r1, [r0, #24]
 8001c90:	2107      	movs	r1, #7
 8001c92:	e9c0 3402 	strd	r3, r4, [r0, #8]
 8001c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c9a:	e9c0 2307 	strd	r2, r3, [r0, #28]
 8001c9e:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001ca2:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca6:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ca8:	f004 fb6a 	bl	8006380 <HAL_SPI_Init>
 8001cac:	b900      	cbnz	r0, 8001cb0 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cae:	bd10      	pop	{r4, pc}
 8001cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001cb4:	f7ff bfb8 	b.w	8001c28 <Error_Handler>
 8001cb8:	200006a8 	.word	0x200006a8
 8001cbc:	40003800 	.word	0x40003800

08001cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_SPI_MspInit+0x70>)
 8001cc4:	6801      	ldr	r1, [r0, #0]
{
 8001cc6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI2)
 8001cca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001cd0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001cd4:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI2)
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cd8:	b009      	add	sp, #36	@ 0x24
 8001cda:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ce2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ce6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001d28 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cf6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001cfa:	9200      	str	r2, [sp, #0]
 8001cfc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d00:	f042 0202 	orr.w	r2, r2, #2
 8001d04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d10:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d12:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d18:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f002 fa9d 	bl	8004258 <HAL_GPIO_Init>
}
 8001d1e:	b009      	add	sp, #36	@ 0x24
 8001d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d24:	f3af 8000 	nop.w
 8001d28:	0000f000 	.word	0x0000f000
 8001d2c:	00000002 	.word	0x00000002
 8001d30:	40003800 	.word	0x40003800
 8001d34:	48000400 	.word	0x48000400

08001d38 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_MspInit+0x30>)
 8001d3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001d44:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	f002 0201 	and.w	r2, r2, #1
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d60:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d62:	f003 bdd3 	b.w	800590c <HAL_PWREx_DisableUCPDDeadBattery>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler>
 8001d6e:	bf00      	nop

08001d70 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <HardFault_Handler>
 8001d72:	bf00      	nop

08001d74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler>
 8001d76:	bf00      	nop

08001d78 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <BusFault_Handler>
 8001d7a:	bf00      	nop

08001d7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <UsageFault_Handler>
 8001d7e:	bf00      	nop

08001d80 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop

08001d88 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 bbe8 	b.w	8002560 <HAL_IncTick>

08001d90 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d90:	4801      	ldr	r0, [pc, #4]	@ (8001d98 <DMA1_Channel1_IRQHandler+0x8>)
 8001d92:	f001 bde5 	b.w	8003960 <HAL_DMA_IRQHandler>
 8001d96:	bf00      	nop
 8001d98:	20000260 	.word	0x20000260

08001d9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d9e:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <ADC1_2_IRQHandler+0x14>)
 8001da0:	f000 fd2c 	bl	80027fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <ADC1_2_IRQHandler+0x18>)
 8001daa:	f000 bd27 	b.w	80027fc <HAL_ADC_IRQHandler>
 8001dae:	bf00      	nop
 8001db0:	20000398 	.word	0x20000398
 8001db4:	2000032c 	.word	0x2000032c

08001db8 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001db8:	4801      	ldr	r0, [pc, #4]	@ (8001dc0 <DMA2_Channel1_IRQHandler+0x8>)
 8001dba:	f001 bdd1 	b.w	8003960 <HAL_DMA_IRQHandler>
 8001dbe:	bf00      	nop
 8001dc0:	20000200 	.word	0x20000200

08001dc4 <HRTIM1_Master_IRQHandler>:
void HRTIM1_Master_IRQHandler(void)
{
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8001dc4:	4801      	ldr	r0, [pc, #4]	@ (8001dcc <HRTIM1_Master_IRQHandler+0x8>)
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	f003 ba62 	b.w	8005290 <HAL_HRTIM_IRQHandler>
 8001dcc:	200004f8 	.word	0x200004f8

08001dd0 <FDCAN3_IT0_IRQHandler>:
void FDCAN3_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8001dd0:	4801      	ldr	r0, [pc, #4]	@ (8001dd8 <FDCAN3_IT0_IRQHandler+0x8>)
 8001dd2:	f002 b97d 	b.w	80040d0 <HAL_FDCAN_IRQHandler>
 8001dd6:	bf00      	nop
 8001dd8:	2000042c 	.word	0x2000042c

08001ddc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001ddc:	2001      	movs	r0, #1
 8001dde:	4770      	bx	lr

08001de0 <_kill>:

int _kill(int pid, int sig)
{
 8001de0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de2:	f007 f859 	bl	8008e98 <__errno>
 8001de6:	2316      	movs	r3, #22
 8001de8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <_exit>:

void _exit (int status)
{
 8001df0:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001df2:	f007 f851 	bl	8008e98 <__errno>
 8001df6:	2316      	movs	r3, #22
 8001df8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0xa>

08001dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	1e16      	subs	r6, r2, #0
 8001e00:	dd07      	ble.n	8001e12 <_read+0x16>
 8001e02:	460c      	mov	r4, r1
 8001e04:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001e06:	f3af 8000 	nop.w
 8001e0a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	42a5      	cmp	r5, r4
 8001e10:	d1f9      	bne.n	8001e06 <_read+0xa>
  }

  return len;
}
 8001e12:	4630      	mov	r0, r6
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	bf00      	nop

08001e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	1e16      	subs	r6, r2, #0
 8001e1c:	dd07      	ble.n	8001e2e <_write+0x16>
 8001e1e:	460c      	mov	r4, r1
 8001e20:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001e22:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	42ac      	cmp	r4, r5
 8001e2c:	d1f9      	bne.n	8001e22 <_write+0xa>
  }
  return len;
}
 8001e2e:	4630      	mov	r0, r6
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	bf00      	nop

08001e34 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e40:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr

08001e50 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e52:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001e54:	680b      	ldr	r3, [r1, #0]
{
 8001e56:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4c0c      	ldr	r4, [pc, #48]	@ (8001e8c <_sbrk+0x3c>)
 8001e5a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001e5c:	b12b      	cbz	r3, 8001e6a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4418      	add	r0, r3
 8001e60:	4290      	cmp	r0, r2
 8001e62:	d807      	bhi.n	8001e74 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e64:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <_sbrk+0x40>)
 8001e6c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4418      	add	r0, r3
 8001e70:	4290      	cmp	r0, r2
 8001e72:	d9f7      	bls.n	8001e64 <_sbrk+0x14>
    errno = ENOMEM;
 8001e74:	f007 f810 	bl	8008e98 <__errno>
 8001e78:	230c      	movs	r3, #12
 8001e7a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	2000070c 	.word	0x2000070c
 8001e88:	20020000 	.word	0x20020000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	200013b8 	.word	0x200013b8

08001e94 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e94:	4a03      	ldr	r2, [pc, #12]	@ (8001ea4 <SystemInit+0x10>)
 8001e96:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001e9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea8:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eaa:	481b      	ldr	r0, [pc, #108]	@ (8001f18 <MX_TIM2_Init+0x70>)
 8001eac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
{
 8001eb0:	b089      	sub	sp, #36	@ 0x24
  htim2.Instance = TIM2;
 8001eb2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 16999;
 8001eb4:	f244 2267 	movw	r2, #16999	@ 0x4267
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb8:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 16999;
 8001eba:	6042      	str	r2, [r0, #4]
 8001ebc:	2263      	movs	r2, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ebe:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001ec2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.Prescaler = 16999;
 8001eca:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ece:	9303      	str	r3, [sp, #12]
  htim2.Init.Prescaler = 16999;
 8001ed0:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 99;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed4:	f004 fad2 	bl	800647c <HAL_TIM_Base_Init>
 8001ed8:	b990      	cbnz	r0, 8001f00 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ede:	480e      	ldr	r0, [pc, #56]	@ (8001f18 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee2:	a904      	add	r1, sp, #16
 8001ee4:	f004 fbaa 	bl	800663c <HAL_TIM_ConfigClockSource>
 8001ee8:	b990      	cbnz	r0, 8001f10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <MX_TIM2_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef0:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	f004 fc7c 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef8:	b928      	cbnz	r0, 8001f06 <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efa:	b009      	add	sp, #36	@ 0x24
 8001efc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f00:	f7ff fe92 	bl	8001c28 <Error_Handler>
 8001f04:	e7e9      	b.n	8001eda <MX_TIM2_Init+0x32>
    Error_Handler();
 8001f06:	f7ff fe8f 	bl	8001c28 <Error_Handler>
}
 8001f0a:	b009      	add	sp, #36	@ 0x24
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f10:	f7ff fe8a 	bl	8001c28 <Error_Handler>
 8001f14:	e7e9      	b.n	8001eea <MX_TIM2_Init+0x42>
 8001f16:	bf00      	nop
 8001f18:	20000760 	.word	0x20000760
 8001f1c:	00000000 	.word	0x00000000

08001f20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f20:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f22:	481f      	ldr	r0, [pc, #124]	@ (8001fa0 <MX_TIM8_Init+0x80>)
 8001f24:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <MX_TIM8_Init+0x84>)
 8001f26:	6002      	str	r2, [r0, #0]
{
 8001f28:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	2300      	movs	r3, #0
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 65535;
 8001f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f30:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f34:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	e9cd 3300 	strd	r3, r3, [sp]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f40:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim8.Init.RepetitionCounter = 0;
 8001f44:	e9c0 3305 	strd	r3, r3, [r0, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	9302      	str	r3, [sp, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f4a:	f004 fa97 	bl	800647c <HAL_TIM_Base_Init>
 8001f4e:	b9a8      	cbnz	r0, 8001f7c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f54:	4812      	ldr	r0, [pc, #72]	@ (8001fa0 <MX_TIM8_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f56:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f58:	a904      	add	r1, sp, #16
 8001f5a:	f004 fb6f 	bl	800663c <HAL_TIM_ConfigClockSource>
 8001f5e:	b9a8      	cbnz	r0, 8001f8c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f60:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8001f98 <MX_TIM8_Init+0x78>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f64:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f66:	480e      	ldr	r0, [pc, #56]	@ (8001fa0 <MX_TIM8_Init+0x80>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f6a:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f6c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f70:	f004 fc3e 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f74:	b928      	cbnz	r0, 8001f82 <MX_TIM8_Init+0x62>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f76:	b009      	add	sp, #36	@ 0x24
 8001f78:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f7c:	f7ff fe54 	bl	8001c28 <Error_Handler>
 8001f80:	e7e6      	b.n	8001f50 <MX_TIM8_Init+0x30>
    Error_Handler();
 8001f82:	f7ff fe51 	bl	8001c28 <Error_Handler>
}
 8001f86:	b009      	add	sp, #36	@ 0x24
 8001f88:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f8c:	f7ff fe4c 	bl	8001c28 <Error_Handler>
 8001f90:	e7e6      	b.n	8001f60 <MX_TIM8_Init+0x40>
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	00000020 	.word	0x00000020
 8001f9c:	00000000 	.word	0x00000000
 8001fa0:	20000710 	.word	0x20000710
 8001fa4:	40013400 	.word	0x40013400

08001fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa8:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM2)
 8001faa:	6803      	ldr	r3, [r0, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8001fb0:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM2)
 8001fb2:	d012      	beq.n	8001fda <HAL_TIM_Base_MspInit+0x32>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <HAL_TIM_Base_MspInit+0x60>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d002      	beq.n	8001fc0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fba:	b003      	add	sp, #12
 8001fbc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_TIM_Base_MspInit+0x64>)
 8001fc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fc8:	661a      	str	r2, [r3, #96]	@ 0x60
 8001fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	9b01      	ldr	r3, [sp, #4]
}
 8001fd4:	b003      	add	sp, #12
 8001fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001fde:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8001fe2:	f041 0101 	orr.w	r1, r1, #1
 8001fe6:	6599      	str	r1, [r3, #88]	@ 0x58
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2106      	movs	r1, #6
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001ff6:	f001 faef 	bl	80035d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffa:	201c      	movs	r0, #28
}
 8001ffc:	b003      	add	sp, #12
 8001ffe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002002:	f001 bb25 	b.w	8003650 <HAL_NVIC_EnableIRQ>
 8002006:	bf00      	nop
 8002008:	40013400 	.word	0x40013400
 800200c:	40021000 	.word	0x40021000

08002010 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002010:	b510      	push	{r4, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002012:	481f      	ldr	r0, [pc, #124]	@ (8002090 <MX_UART4_Init+0x80>)
 8002014:	4c1f      	ldr	r4, [pc, #124]	@ (8002094 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 115200;
 8002018:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800201c:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 115200;
 800201e:	e9c0 4100 	strd	r4, r1, [r0]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002022:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002026:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800202a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202e:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8002032:	6283      	str	r3, [r0, #40]	@ 0x28
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002034:	f004 ff1c 	bl	8006e70 <HAL_UART_Init>
 8002038:	b970      	cbnz	r0, 8002058 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203a:	4815      	ldr	r0, [pc, #84]	@ (8002090 <MX_UART4_Init+0x80>)
 800203c:	2100      	movs	r1, #0
 800203e:	f004 ff69 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 8002042:	b988      	cbnz	r0, 8002068 <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	4812      	ldr	r0, [pc, #72]	@ (8002090 <MX_UART4_Init+0x80>)
 8002046:	2100      	movs	r1, #0
 8002048:	f004 ffa6 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 800204c:	b9a0      	cbnz	r0, 8002078 <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800204e:	4810      	ldr	r0, [pc, #64]	@ (8002090 <MX_UART4_Init+0x80>)
 8002050:	f004 ff42 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 8002054:	b9b8      	cbnz	r0, 8002086 <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002056:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002058:	f7ff fde6 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <MX_UART4_Init+0x80>)
 800205e:	2100      	movs	r1, #0
 8002060:	f004 ff58 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 8002064:	2800      	cmp	r0, #0
 8002066:	d0ed      	beq.n	8002044 <MX_UART4_Init+0x34>
    Error_Handler();
 8002068:	f7ff fdde 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <MX_UART4_Init+0x80>)
 800206e:	2100      	movs	r1, #0
 8002070:	f004 ff92 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 8002074:	2800      	cmp	r0, #0
 8002076:	d0ea      	beq.n	800204e <MX_UART4_Init+0x3e>
    Error_Handler();
 8002078:	f7ff fdd6 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_UART4_Init+0x80>)
 800207e:	f004 ff2b 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 8002082:	2800      	cmp	r0, #0
 8002084:	d0e7      	beq.n	8002056 <MX_UART4_Init+0x46>
}
 8002086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800208a:	f7ff bdcd 	b.w	8001c28 <Error_Handler>
 800208e:	bf00      	nop
 8002090:	20000978 	.word	0x20000978
 8002094:	40004c00 	.word	0x40004c00

08002098 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002098:	b510      	push	{r4, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800209a:	481f      	ldr	r0, [pc, #124]	@ (8002118 <MX_UART5_Init+0x80>)
 800209c:	4c1f      	ldr	r4, [pc, #124]	@ (800211c <MX_UART5_Init+0x84>)
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	2300      	movs	r3, #0
  huart5.Init.BaudRate = 115200;
 80020a0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020a4:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 80020a6:	e9c0 4100 	strd	r4, r1, [r0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020ae:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80020ba:	6283      	str	r3, [r0, #40]	@ 0x28
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020bc:	f004 fed8 	bl	8006e70 <HAL_UART_Init>
 80020c0:	b970      	cbnz	r0, 80020e0 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c2:	4815      	ldr	r0, [pc, #84]	@ (8002118 <MX_UART5_Init+0x80>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	f004 ff25 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 80020ca:	b988      	cbnz	r0, 80020f0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020cc:	4812      	ldr	r0, [pc, #72]	@ (8002118 <MX_UART5_Init+0x80>)
 80020ce:	2100      	movs	r1, #0
 80020d0:	f004 ff62 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 80020d4:	b9a0      	cbnz	r0, 8002100 <MX_UART5_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80020d6:	4810      	ldr	r0, [pc, #64]	@ (8002118 <MX_UART5_Init+0x80>)
 80020d8:	f004 fefe 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 80020dc:	b9b8      	cbnz	r0, 800210e <MX_UART5_Init+0x76>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020de:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020e0:	f7ff fda2 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <MX_UART5_Init+0x80>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	f004 ff14 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d0ed      	beq.n	80020cc <MX_UART5_Init+0x34>
    Error_Handler();
 80020f0:	f7ff fd9a 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f4:	4808      	ldr	r0, [pc, #32]	@ (8002118 <MX_UART5_Init+0x80>)
 80020f6:	2100      	movs	r1, #0
 80020f8:	f004 ff4e 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d0ea      	beq.n	80020d6 <MX_UART5_Init+0x3e>
    Error_Handler();
 8002100:	f7ff fd92 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_UART5_Init+0x80>)
 8002106:	f004 fee7 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 800210a:	2800      	cmp	r0, #0
 800210c:	d0e7      	beq.n	80020de <MX_UART5_Init+0x46>
}
 800210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002112:	f7ff bd89 	b.w	8001c28 <Error_Handler>
 8002116:	bf00      	nop
 8002118:	200008e0 	.word	0x200008e0
 800211c:	40005000 	.word	0x40005000

08002120 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002120:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002122:	481f      	ldr	r0, [pc, #124]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 8002124:	4c1f      	ldr	r4, [pc, #124]	@ (80021a4 <MX_USART1_UART_Init+0x84>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8002128:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800212e:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002132:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002136:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213e:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8002142:	6283      	str	r3, [r0, #40]	@ 0x28
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002144:	f004 fe94 	bl	8006e70 <HAL_UART_Init>
 8002148:	b970      	cbnz	r0, 8002168 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214a:	4815      	ldr	r0, [pc, #84]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 800214c:	2100      	movs	r1, #0
 800214e:	f004 fee1 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 8002152:	b988      	cbnz	r0, 8002178 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002154:	4812      	ldr	r0, [pc, #72]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 8002156:	2100      	movs	r1, #0
 8002158:	f004 ff1e 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 800215c:	b9a0      	cbnz	r0, 8002188 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800215e:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 8002160:	f004 feba 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 8002164:	b9b8      	cbnz	r0, 8002196 <MX_USART1_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002166:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002168:	f7ff fd5e 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 800216e:	2100      	movs	r1, #0
 8002170:	f004 fed0 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 8002174:	2800      	cmp	r0, #0
 8002176:	d0ed      	beq.n	8002154 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002178:	f7ff fd56 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217c:	4808      	ldr	r0, [pc, #32]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 800217e:	2100      	movs	r1, #0
 8002180:	f004 ff0a 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 8002184:	2800      	cmp	r0, #0
 8002186:	d0ea      	beq.n	800215e <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002188:	f7ff fd4e 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	@ (80021a0 <MX_USART1_UART_Init+0x80>)
 800218e:	f004 fea3 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 8002192:	2800      	cmp	r0, #0
 8002194:	d0e7      	beq.n	8002166 <MX_USART1_UART_Init+0x46>
}
 8002196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800219a:	f7ff bd45 	b.w	8001c28 <Error_Handler>
 800219e:	bf00      	nop
 80021a0:	20000848 	.word	0x20000848
 80021a4:	40013800 	.word	0x40013800

080021a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021a8:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021aa:	481f      	ldr	r0, [pc, #124]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 80021ac:	4c1f      	ldr	r4, [pc, #124]	@ (800222c <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 80021b0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021b4:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80021b6:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021be:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80021ca:	6283      	str	r3, [r0, #40]	@ 0x28
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021cc:	f004 fe50 	bl	8006e70 <HAL_UART_Init>
 80021d0:	b970      	cbnz	r0, 80021f0 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d2:	4815      	ldr	r0, [pc, #84]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 80021d4:	2100      	movs	r1, #0
 80021d6:	f004 fe9d 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 80021da:	b988      	cbnz	r0, 8002200 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021dc:	4812      	ldr	r0, [pc, #72]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 80021de:	2100      	movs	r1, #0
 80021e0:	f004 feda 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 80021e4:	b9a0      	cbnz	r0, 8002210 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021e6:	4810      	ldr	r0, [pc, #64]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 80021e8:	f004 fe76 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 80021ec:	b9b8      	cbnz	r0, 800221e <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021ee:	bd10      	pop	{r4, pc}
    Error_Handler();
 80021f0:	f7ff fd1a 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f4:	480c      	ldr	r0, [pc, #48]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 80021f6:	2100      	movs	r1, #0
 80021f8:	f004 fe8c 	bl	8006f14 <HAL_UARTEx_SetTxFifoThreshold>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d0ed      	beq.n	80021dc <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8002200:	f7ff fd12 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002204:	4808      	ldr	r0, [pc, #32]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 8002206:	2100      	movs	r1, #0
 8002208:	f004 fec6 	bl	8006f98 <HAL_UARTEx_SetRxFifoThreshold>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0ea      	beq.n	80021e6 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8002210:	f7ff fd0a 	bl	8001c28 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <MX_USART3_UART_Init+0x80>)
 8002216:	f004 fe5f 	bl	8006ed8 <HAL_UARTEx_DisableFifoMode>
 800221a:	2800      	cmp	r0, #0
 800221c:	d0e7      	beq.n	80021ee <MX_USART3_UART_Init+0x46>
}
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002222:	f7ff bd01 	b.w	8001c28 <Error_Handler>
 8002226:	bf00      	nop
 8002228:	200007b0 	.word	0x200007b0
 800222c:	40004800 	.word	0x40004800

08002230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002230:	b5d0      	push	{r4, r6, r7, lr}
 8002232:	4604      	mov	r4, r0
 8002234:	b0a4      	sub	sp, #144	@ 0x90

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002238:	2254      	movs	r2, #84	@ 0x54
 800223a:	a80f      	add	r0, sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8002240:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 8002244:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002246:	f006 fdd4 	bl	8008df2 <memset>
  if(uartHandle->Instance==UART4)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	4a6c      	ldr	r2, [pc, #432]	@ (8002400 <HAL_UART_MspInit+0x1d0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d036      	beq.n	80022c0 <HAL_UART_MspInit+0x90>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 8002252:	4a6c      	ldr	r2, [pc, #432]	@ (8002404 <HAL_UART_MspInit+0x1d4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d05f      	beq.n	8002318 <HAL_UART_MspInit+0xe8>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8002258:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_UART_MspInit+0x1d8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	f000 809b 	beq.w	8002396 <HAL_UART_MspInit+0x166>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002260:	4a6a      	ldr	r2, [pc, #424]	@ (800240c <HAL_UART_MspInit+0x1dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d001      	beq.n	800226a <HAL_UART_MspInit+0x3a>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002266:	b024      	add	sp, #144	@ 0x90
 8002268:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226a:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226c:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002270:	f003 fefa 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	2800      	cmp	r0, #0
 8002276:	f040 80c0 	bne.w	80023fa <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227a:	4b65      	ldr	r3, [pc, #404]	@ (8002410 <HAL_UART_MspInit+0x1e0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	4865      	ldr	r0, [pc, #404]	@ (8002414 <HAL_UART_MspInit+0x1e4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800227e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002280:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002284:	659a      	str	r2, [r3, #88]	@ 0x58
 8002286:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002288:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800228c:	9208      	str	r2, [sp, #32]
 800228e:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002290:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002292:	f042 0202 	orr.w	r2, r2, #2
 8002296:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800229a:	f44f 6640 	mov.w	r6, #3072	@ 0xc00
 800229e:	2702      	movs	r7, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022a4:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022aa:	2600      	movs	r6, #0
 80022ac:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ae:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b2:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022b8:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f001 ffcd 	bl	8004258 <HAL_GPIO_Init>
}
 80022be:	e7d2      	b.n	8002266 <HAL_UART_MspInit+0x36>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022c0:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c2:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022c4:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c6:	f003 fecf 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	f040 808c 	bne.w	80023e8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_UART4_CLK_ENABLE();
 80022d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002410 <HAL_UART_MspInit+0x1e0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	4851      	ldr	r0, [pc, #324]	@ (8002418 <HAL_UART_MspInit+0x1e8>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80022d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022d6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58
 80022dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022de:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022e8:	f042 0204 	orr.w	r2, r2, #4
 80022ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022f0:	f44f 6640 	mov.w	r6, #3072	@ 0xc00
 80022f4:	2702      	movs	r7, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022fa:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002300:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002302:	2305      	movs	r3, #5
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002304:	2600      	movs	r6, #0
 8002306:	2700      	movs	r7, #0
 8002308:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800230e:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002310:	f001 ffa2 	bl	8004258 <HAL_GPIO_Init>
}
 8002314:	b024      	add	sp, #144	@ 0x90
 8002316:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002318:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231a:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800231c:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231e:	f003 fea3 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002322:	2800      	cmp	r0, #0
 8002324:	d163      	bne.n	80023ee <HAL_UART_MspInit+0x1be>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002326:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <HAL_UART_MspInit+0x1e0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	483b      	ldr	r0, [pc, #236]	@ (8002418 <HAL_UART_MspInit+0x1e8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800232a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800232c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002330:	659a      	str	r2, [r3, #88]	@ 0x58
 8002332:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002334:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002338:	9203      	str	r2, [sp, #12]
 800233a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002344:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002346:	f002 0204 	and.w	r2, r2, #4
 800234a:	9204      	str	r2, [sp, #16]
 800234c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800234e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002350:	f042 0208 	orr.w	r2, r2, #8
 8002354:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800235e:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002362:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002366:	2600      	movs	r6, #0
 8002368:	2700      	movs	r7, #0
 800236a:	2302      	movs	r3, #2
 800236c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002370:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002374:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002376:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002378:	f001 ff6e 	bl	8004258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237c:	2204      	movs	r2, #4
 800237e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002380:	4826      	ldr	r0, [pc, #152]	@ (800241c <HAL_UART_MspInit+0x1ec>)
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002382:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002384:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002386:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
 800238a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238e:	f001 ff63 	bl	8004258 <HAL_GPIO_Init>
}
 8002392:	b024      	add	sp, #144	@ 0x90
 8002394:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002396:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002398:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800239a:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239c:	f003 fe64 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80023a0:	bb40      	cbnz	r0, 80023f4 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_UART_MspInit+0x1e0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a4:	481c      	ldr	r0, [pc, #112]	@ (8002418 <HAL_UART_MspInit+0x1e8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80023ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023b0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80023b4:	9206      	str	r2, [sp, #24]
 80023b6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023ba:	f042 0204 	orr.w	r2, r2, #4
 80023be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023c2:	2630      	movs	r6, #48	@ 0x30
 80023c4:	2702      	movs	r7, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ca:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d2:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023d4:	2600      	movs	r6, #0
 80023d6:	2700      	movs	r7, #0
 80023d8:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	9a07      	ldr	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023de:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f001 ff3a 	bl	8004258 <HAL_GPIO_Init>
}
 80023e4:	b024      	add	sp, #144	@ 0x90
 80023e6:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80023e8:	f7ff fc1e 	bl	8001c28 <Error_Handler>
 80023ec:	e770      	b.n	80022d0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80023ee:	f7ff fc1b 	bl	8001c28 <Error_Handler>
 80023f2:	e798      	b.n	8002326 <HAL_UART_MspInit+0xf6>
      Error_Handler();
 80023f4:	f7ff fc18 	bl	8001c28 <Error_Handler>
 80023f8:	e7d3      	b.n	80023a2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80023fa:	f7ff fc15 	bl	8001c28 <Error_Handler>
 80023fe:	e73c      	b.n	800227a <HAL_UART_MspInit+0x4a>
 8002400:	40004c00 	.word	0x40004c00
 8002404:	40005000 	.word	0x40005000
 8002408:	40013800 	.word	0x40013800
 800240c:	40004800 	.word	0x40004800
 8002410:	40021000 	.word	0x40021000
 8002414:	48000400 	.word	0x48000400
 8002418:	48000800 	.word	0x48000800
 800241c:	48000c00 	.word	0x48000c00

08002420 <MX_USB_PCD_Init>:
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002420:	4809      	ldr	r0, [pc, #36]	@ (8002448 <MX_USB_PCD_Init+0x28>)
{
 8002422:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002424:	f44f 7102 	mov.w	r1, #520	@ 0x208
  hpcd_USB_FS.Instance = USB;
 8002428:	4c08      	ldr	r4, [pc, #32]	@ (800244c <MX_USB_PCD_Init+0x2c>)
 800242a:	6004      	str	r4, [r0, #0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800242c:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800242e:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002430:	8081      	strh	r1, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002432:	f8c0 2007 	str.w	r2, [r0, #7]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002436:	72c3      	strb	r3, [r0, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002438:	f003 f8f2 	bl	8005620 <HAL_PCD_Init>
 800243c:	b900      	cbnz	r0, 8002440 <MX_USB_PCD_Init+0x20>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800243e:	bd10      	pop	{r4, pc}
 8002440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002444:	f7ff bbf0 	b.w	8001c28 <Error_Handler>
 8002448:	20000a0c 	.word	0x20000a0c
 800244c:	40005c00 	.word	0x40005c00

08002450 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002450:	b510      	push	{r4, lr}
 8002452:	4604      	mov	r4, r0
 8002454:	b096      	sub	sp, #88	@ 0x58

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002456:	2254      	movs	r2, #84	@ 0x54
 8002458:	2100      	movs	r1, #0
 800245a:	a801      	add	r0, sp, #4
 800245c:	f006 fcc9 	bl	8008df2 <memset>
  if(pcdHandle->Instance==USB)
 8002460:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_PCD_MspInit+0x48>)
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_CLK_ENABLE();
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002468:	b016      	add	sp, #88	@ 0x58
 800246a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800246c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002470:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002472:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002474:	f003 fdf8 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002478:	b958      	cbnz	r0, 8002492 <HAL_PCD_MspInit+0x42>
    __HAL_RCC_USB_CLK_ENABLE();
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_PCD_MspInit+0x4c>)
 800247c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800247e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	9b00      	ldr	r3, [sp, #0]
}
 800248e:	b016      	add	sp, #88	@ 0x58
 8002490:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002492:	f7ff fbc9 	bl	8001c28 <Error_Handler>
 8002496:	e7f0      	b.n	800247a <HAL_PCD_MspInit+0x2a>
 8002498:	40005c00 	.word	0x40005c00
 800249c:	40021000 	.word	0x40021000

080024a0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a4:	f7ff fcf6 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <LoopForever+0x6>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <LoopForever+0xe>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <LoopForever+0x16>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f006 fce9 	bl	8008ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024d2:	f7ff fb55 	bl	8001b80 <main>

080024d6 <LoopForever>:

LoopForever:
    b LoopForever
 80024d6:	e7fe      	b.n	80024d6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024e4:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 80024e8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024ec:	200013b4 	.word	0x200013b4

080024f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC3_IRQHandler>
	...

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_InitTick+0x40>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b90b      	cbnz	r3, 8002500 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002500:	490d      	ldr	r1, [pc, #52]	@ (8002538 <HAL_InitTick+0x44>)
 8002502:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002506:	4605      	mov	r5, r0
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	6808      	ldr	r0, [r1, #0]
 800250e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002512:	f001 f8ab 	bl	800366c <HAL_SYSTICK_Config>
 8002516:	4604      	mov	r4, r0
 8002518:	2800      	cmp	r0, #0
 800251a:	d1ef      	bne.n	80024fc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251c:	2d0f      	cmp	r5, #15
 800251e:	d8ed      	bhi.n	80024fc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	4602      	mov	r2, r0
 8002522:	4629      	mov	r1, r5
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f001 f856 	bl	80035d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_InitTick+0x48>)
 800252e:	4620      	mov	r0, r4
 8002530:	601d      	str	r5, [r3, #0]
}
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000008 	.word	0x20000008
 800253c:	20000010 	.word	0x20000010

08002540 <HAL_Init>:
{
 8002540:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002542:	2003      	movs	r0, #3
 8002544:	f001 f836 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002548:	200f      	movs	r0, #15
 800254a:	f7ff ffd3 	bl	80024f4 <HAL_InitTick>
 800254e:	b110      	cbz	r0, 8002556 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002550:	2401      	movs	r4, #1
}
 8002552:	4620      	mov	r0, r4
 8002554:	bd10      	pop	{r4, pc}
 8002556:	4604      	mov	r4, r0
    HAL_MspInit();
 8002558:	f7ff fbee 	bl	8001d38 <HAL_MspInit>
}
 800255c:	4620      	mov	r0, r4
 800255e:	bd10      	pop	{r4, pc}

08002560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002560:	4a03      	ldr	r2, [pc, #12]	@ (8002570 <HAL_IncTick+0x10>)
 8002562:	4904      	ldr	r1, [pc, #16]	@ (8002574 <HAL_IncTick+0x14>)
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	6809      	ldr	r1, [r1, #0]
 8002568:	440b      	add	r3, r1
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000ce8 	.word	0x20000ce8
 8002574:	2000000c 	.word	0x2000000c

08002578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002578:	4b01      	ldr	r3, [pc, #4]	@ (8002580 <HAL_GetTick+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000ce8 	.word	0x20000ce8

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fff6 	bl	8002578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800258e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002590:	d002      	beq.n	8002598 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_Delay+0x20>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	1b40      	subs	r0, r0, r5
 800259e:	42a0      	cmp	r0, r4
 80025a0:	d3fa      	bcc.n	8002598 <HAL_Delay+0x14>
  {
  }
}
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b530      	push	{r4, r5, lr}
 80025aa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d05c      	beq.n	800266e <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b4:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80025b6:	4604      	mov	r4, r0
 80025b8:	2d00      	cmp	r5, #0
 80025ba:	f000 80cc 	beq.w	8002756 <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025be:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025c0:	6893      	ldr	r3, [r2, #8]
 80025c2:	009d      	lsls	r5, r3, #2
 80025c4:	d505      	bpl.n	80025d2 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025c6:	6893      	ldr	r3, [r2, #8]
 80025c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d0:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025d2:	6893      	ldr	r3, [r2, #8]
 80025d4:	00d8      	lsls	r0, r3, #3
 80025d6:	d419      	bmi.n	800260c <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d8:	4b78      	ldr	r3, [pc, #480]	@ (80027bc <HAL_ADC_Init+0x214>)
 80025da:	4879      	ldr	r0, [pc, #484]	@ (80027c0 <HAL_ADC_Init+0x218>)
 80025dc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80025de:	6891      	ldr	r1, [r2, #8]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	fba0 0303 	umull	r0, r3, r0, r3
 80025e6:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80025f0:	3301      	adds	r3, #1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80025f8:	6091      	str	r1, [r2, #8]
 80025fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80025fc:	9b01      	ldr	r3, [sp, #4]
 80025fe:	b12b      	cbz	r3, 800260c <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 8002600:	9b01      	ldr	r3, [sp, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800260c:	6893      	ldr	r3, [r2, #8]
 800260e:	00d9      	lsls	r1, r3, #3
 8002610:	d430      	bmi.n	8002674 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002614:	f043 0310 	orr.w	r3, r3, #16
 8002618:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800261c:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	4303      	orrs	r3, r0
 8002620:	6623      	str	r3, [r4, #96]	@ 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002622:	6893      	ldr	r3, [r2, #8]
 8002624:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002628:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800262a:	d11c      	bne.n	8002666 <HAL_ADC_Init+0xbe>
 800262c:	06db      	lsls	r3, r3, #27
 800262e:	d41a      	bmi.n	8002666 <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002632:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800263c:	6893      	ldr	r3, [r2, #8]
 800263e:	07dd      	lsls	r5, r3, #31
 8002640:	d432      	bmi.n	80026a8 <HAL_ADC_Init+0x100>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002642:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002646:	d017      	beq.n	8002678 <HAL_ADC_Init+0xd0>
 8002648:	4b5e      	ldr	r3, [pc, #376]	@ (80027c4 <HAL_ADC_Init+0x21c>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d014      	beq.n	8002678 <HAL_ADC_Init+0xd0>
 800264e:	495e      	ldr	r1, [pc, #376]	@ (80027c8 <HAL_ADC_Init+0x220>)
 8002650:	4b5e      	ldr	r3, [pc, #376]	@ (80027cc <HAL_ADC_Init+0x224>)
 8002652:	6889      	ldr	r1, [r1, #8]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	430b      	orrs	r3, r1
 8002658:	495d      	ldr	r1, [pc, #372]	@ (80027d0 <HAL_ADC_Init+0x228>)
 800265a:	6889      	ldr	r1, [r1, #8]
 800265c:	430b      	orrs	r3, r1
 800265e:	07d9      	lsls	r1, r3, #31
 8002660:	d422      	bmi.n	80026a8 <HAL_ADC_Init+0x100>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002662:	495c      	ldr	r1, [pc, #368]	@ (80027d4 <HAL_ADC_Init+0x22c>)
 8002664:	e01a      	b.n	800269c <HAL_ADC_Init+0xf4>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002670:	b003      	add	sp, #12
 8002672:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2000      	movs	r0, #0
 8002676:	e7d4      	b.n	8002622 <HAL_ADC_Init+0x7a>
 8002678:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800267c:	4b51      	ldr	r3, [pc, #324]	@ (80027c4 <HAL_ADC_Init+0x21c>)
 800267e:	688d      	ldr	r5, [r1, #8]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	07c9      	lsls	r1, r1, #31
 8002684:	d410      	bmi.n	80026a8 <HAL_ADC_Init+0x100>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002686:	07ed      	lsls	r5, r5, #31
 8002688:	d40e      	bmi.n	80026a8 <HAL_ADC_Init+0x100>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800268a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800268e:	f000 8092 	beq.w	80027b6 <HAL_ADC_Init+0x20e>
 8002692:	4950      	ldr	r1, [pc, #320]	@ (80027d4 <HAL_ADC_Init+0x22c>)
 8002694:	4d50      	ldr	r5, [pc, #320]	@ (80027d8 <HAL_ADC_Init+0x230>)
 8002696:	429a      	cmp	r2, r3
 8002698:	bf08      	it	eq
 800269a:	4629      	moveq	r1, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800269c:	688b      	ldr	r3, [r1, #8]
 800269e:	6865      	ldr	r5, [r4, #4]
 80026a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80026a4:	432b      	orrs	r3, r5
 80026a6:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 80026a8:	68e5      	ldr	r5, [r4, #12]
 80026aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026ac:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 80026b0:	432b      	orrs	r3, r5
 80026b2:	68a5      	ldr	r5, [r4, #8]
 80026b4:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b6:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b8:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80026ba:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c2:	d04e      	beq.n	8002762 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80026c6:	b121      	cbz	r1, 80026d2 <HAL_ADC_Init+0x12a>
                   | hadc->Init.ExternalTrigConvEdge
 80026c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ca:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80026ce:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d0:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026d2:	68d5      	ldr	r5, [r2, #12]
 80026d4:	4941      	ldr	r1, [pc, #260]	@ (80027dc <HAL_ADC_Init+0x234>)
 80026d6:	4029      	ands	r1, r5
 80026d8:	4319      	orrs	r1, r3
 80026da:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026dc:	6913      	ldr	r3, [r2, #16]
 80026de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026e0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026e8:	6893      	ldr	r3, [r2, #8]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	d424      	bmi.n	8002738 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026ee:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026f0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f4:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026f6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026fa:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026fc:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002700:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002704:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8002706:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002708:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800270a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800270c:	2900      	cmp	r1, #0
 800270e:	d035      	beq.n	800277c <HAL_ADC_Init+0x1d4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002714:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002716:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800271a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800271e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002722:	430b      	orrs	r3, r1
 8002724:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8002728:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800272c:	2b01      	cmp	r3, #1
 800272e:	d031      	beq.n	8002794 <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002730:	6913      	ldr	r3, [r2, #16]
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002738:	6963      	ldr	r3, [r4, #20]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d016      	beq.n	800276c <HAL_ADC_Init+0x1c4>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800273e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002740:	f023 030f 	bic.w	r3, r3, #15
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002746:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8002752:	b003      	add	sp, #12
 8002754:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002756:	f7fe fce1 	bl	800111c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800275a:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 800275c:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8002760:	e72d      	b.n	80025be <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002762:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002764:	3901      	subs	r1, #1
 8002766:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800276a:	e7ab      	b.n	80026c4 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800276c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800276e:	6a23      	ldr	r3, [r4, #32]
 8002770:	f021 010f 	bic.w	r1, r1, #15
 8002774:	3b01      	subs	r3, #1
 8002776:	430b      	orrs	r3, r1
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	e7e4      	b.n	8002746 <HAL_ADC_Init+0x19e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800277c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002780:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002782:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8002786:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800278a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800278e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002792:	e7c9      	b.n	8002728 <HAL_ADC_Init+0x180>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002798:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800279a:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 800279e:	f021 0104 	bic.w	r1, r1, #4
 80027a2:	432b      	orrs	r3, r5
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6113      	str	r3, [r2, #16]
 80027b4:	e7c0      	b.n	8002738 <HAL_ADC_Init+0x190>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <HAL_ADC_Init+0x230>)
 80027b8:	e770      	b.n	800269c <HAL_ADC_Init+0xf4>
 80027ba:	bf00      	nop
 80027bc:	20000008 	.word	0x20000008
 80027c0:	053e2d63 	.word	0x053e2d63
 80027c4:	50000100 	.word	0x50000100
 80027c8:	50000400 	.word	0x50000400
 80027cc:	50000500 	.word	0x50000500
 80027d0:	50000600 	.word	0x50000600
 80027d4:	50000700 	.word	0x50000700
 80027d8:	50000300 	.word	0x50000300
 80027dc:	fff04007 	.word	0xfff04007

080027e0 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop

080027e4 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80027ec:	f7ff fffa 	bl	80027e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f0:	bd08      	pop	{r3, pc}
 80027f2:	bf00      	nop

080027f4 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <HAL_ADC_IRQHandler>:
{
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027fe:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002804:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002806:	685f      	ldr	r7, [r3, #4]
{
 8002808:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280a:	f000 80d2 	beq.w	80029b2 <HAL_ADC_IRQHandler+0x1b6>
 800280e:	4895      	ldr	r0, [pc, #596]	@ (8002a64 <HAL_ADC_IRQHandler+0x268>)
 8002810:	4a95      	ldr	r2, [pc, #596]	@ (8002a68 <HAL_ADC_IRQHandler+0x26c>)
 8002812:	4996      	ldr	r1, [pc, #600]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 8002814:	4283      	cmp	r3, r0
 8002816:	bf08      	it	eq
 8002818:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800281a:	6895      	ldr	r5, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800281c:	07b1      	lsls	r1, r6, #30
 800281e:	f005 051f 	and.w	r5, r5, #31
 8002822:	d502      	bpl.n	800282a <HAL_ADC_IRQHandler+0x2e>
 8002824:	07ba      	lsls	r2, r7, #30
 8002826:	f100 80b6 	bmi.w	8002996 <HAL_ADC_IRQHandler+0x19a>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800282a:	0771      	lsls	r1, r6, #29
 800282c:	f140 8086 	bpl.w	800293c <HAL_ADC_IRQHandler+0x140>
 8002830:	077a      	lsls	r2, r7, #29
 8002832:	f140 8083 	bpl.w	800293c <HAL_ADC_IRQHandler+0x140>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002836:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002838:	06d2      	lsls	r2, r2, #27
 800283a:	d403      	bmi.n	8002844 <HAL_ADC_IRQHandler+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800283e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002842:	65e2      	str	r2, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800284a:	d121      	bne.n	8002890 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284c:	4a85      	ldr	r2, [pc, #532]	@ (8002a64 <HAL_ADC_IRQHandler+0x268>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f000 80ec 	beq.w	8002a2c <HAL_ADC_IRQHandler+0x230>
 8002854:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 8114 	beq.w	8002a86 <HAL_ADC_IRQHandler+0x28a>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800285e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002860:	0491      	lsls	r1, r2, #18
 8002862:	d415      	bmi.n	8002890 <HAL_ADC_IRQHandler+0x94>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	0712      	lsls	r2, r2, #28
 8002868:	d512      	bpl.n	8002890 <HAL_ADC_IRQHandler+0x94>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	0750      	lsls	r0, r2, #29
 800286e:	f100 8101 	bmi.w	8002a74 <HAL_ADC_IRQHandler+0x278>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	f022 020c 	bic.w	r2, r2, #12
 8002878:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800287a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800287c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002880:	65e3      	str	r3, [r4, #92]	@ 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002882:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002884:	04d9      	lsls	r1, r3, #19
 8002886:	d403      	bmi.n	8002890 <HAL_ADC_IRQHandler+0x94>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002888:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff ffa5 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	220c      	movs	r2, #12
 800289a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800289c:	06b2      	lsls	r2, r6, #26
 800289e:	d554      	bpl.n	800294a <HAL_ADC_IRQHandler+0x14e>
 80028a0:	06b8      	lsls	r0, r7, #26
 80028a2:	d552      	bpl.n	800294a <HAL_ADC_IRQHandler+0x14e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80028a6:	06d0      	lsls	r0, r2, #27
 80028a8:	d403      	bmi.n	80028b2 <HAL_ADC_IRQHandler+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028b0:	65e2      	str	r2, [r4, #92]	@ 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b2:	496c      	ldr	r1, [pc, #432]	@ (8002a64 <HAL_ADC_IRQHandler+0x268>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b6:	68d8      	ldr	r0, [r3, #12]
 80028b8:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028ba:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 80028be:	f000 80bf 	beq.w	8002a40 <HAL_ADC_IRQHandler+0x244>
 80028c2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80028c6:	428b      	cmp	r3, r1
 80028c8:	f000 80c4 	beq.w	8002a54 <HAL_ADC_IRQHandler+0x258>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028cc:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80028ce:	b9d2      	cbnz	r2, 8002906 <HAL_ADC_IRQHandler+0x10a>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028d0:	018a      	lsls	r2, r1, #6
 80028d2:	f100 80a3 	bmi.w	8002a1c <HAL_ADC_IRQHandler+0x220>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	0650      	lsls	r0, r2, #25
 80028da:	d514      	bpl.n	8002906 <HAL_ADC_IRQHandler+0x10a>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028dc:	0289      	lsls	r1, r1, #10
 80028de:	d412      	bmi.n	8002906 <HAL_ADC_IRQHandler+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	0712      	lsls	r2, r2, #28
 80028e4:	f100 80d3 	bmi.w	8002a8e <HAL_ADC_IRQHandler+0x292>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028ee:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80028f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80028f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80028fa:	05d8      	lsls	r0, r3, #23
 80028fc:	d403      	bmi.n	8002906 <HAL_ADC_IRQHandler+0x10a>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002906:	4620      	mov	r0, r4
 8002908:	f000 fd96 	bl	8003438 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	2260      	movs	r2, #96	@ 0x60
 8002910:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002912:	0631      	lsls	r1, r6, #24
 8002914:	d501      	bpl.n	800291a <HAL_ADC_IRQHandler+0x11e>
 8002916:	063a      	lsls	r2, r7, #24
 8002918:	d459      	bmi.n	80029ce <HAL_ADC_IRQHandler+0x1d2>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800291a:	05f0      	lsls	r0, r6, #23
 800291c:	d501      	bpl.n	8002922 <HAL_ADC_IRQHandler+0x126>
 800291e:	05f9      	lsls	r1, r7, #23
 8002920:	d460      	bmi.n	80029e4 <HAL_ADC_IRQHandler+0x1e8>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002922:	05b2      	lsls	r2, r6, #22
 8002924:	d501      	bpl.n	800292a <HAL_ADC_IRQHandler+0x12e>
 8002926:	05b8      	lsls	r0, r7, #22
 8002928:	d445      	bmi.n	80029b6 <HAL_ADC_IRQHandler+0x1ba>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800292a:	06f1      	lsls	r1, r6, #27
 800292c:	d501      	bpl.n	8002932 <HAL_ADC_IRQHandler+0x136>
 800292e:	06fa      	lsls	r2, r7, #27
 8002930:	d410      	bmi.n	8002954 <HAL_ADC_IRQHandler+0x158>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002932:	0571      	lsls	r1, r6, #21
 8002934:	d501      	bpl.n	800293a <HAL_ADC_IRQHandler+0x13e>
 8002936:	057a      	lsls	r2, r7, #21
 8002938:	d460      	bmi.n	80029fc <HAL_ADC_IRQHandler+0x200>
}
 800293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800293c:	0730      	lsls	r0, r6, #28
 800293e:	d5ad      	bpl.n	800289c <HAL_ADC_IRQHandler+0xa0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002940:	0739      	lsls	r1, r7, #28
 8002942:	f53f af78 	bmi.w	8002836 <HAL_ADC_IRQHandler+0x3a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002946:	06b2      	lsls	r2, r6, #26
 8002948:	d4aa      	bmi.n	80028a0 <HAL_ADC_IRQHandler+0xa4>
 800294a:	0671      	lsls	r1, r6, #25
 800294c:	d5e1      	bpl.n	8002912 <HAL_ADC_IRQHandler+0x116>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800294e:	067a      	lsls	r2, r7, #25
 8002950:	d5df      	bpl.n	8002912 <HAL_ADC_IRQHandler+0x116>
 8002952:	e7a7      	b.n	80028a4 <HAL_ADC_IRQHandler+0xa8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002954:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002956:	b17a      	cbz	r2, 8002978 <HAL_ADC_IRQHandler+0x17c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002958:	2d00      	cmp	r5, #0
 800295a:	d07e      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x25e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800295c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002960:	f000 8093 	beq.w	8002a8a <HAL_ADC_IRQHandler+0x28e>
 8002964:	483f      	ldr	r0, [pc, #252]	@ (8002a64 <HAL_ADC_IRQHandler+0x268>)
 8002966:	4a40      	ldr	r2, [pc, #256]	@ (8002a68 <HAL_ADC_IRQHandler+0x26c>)
 8002968:	4940      	ldr	r1, [pc, #256]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 800296a:	4283      	cmp	r3, r0
 800296c:	bf08      	it	eq
 800296e:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	f412 4f60 	tst.w	r2, #57344	@ 0xe000
 8002976:	d00b      	beq.n	8002990 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002978:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800297a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800297e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002980:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	6623      	str	r3, [r4, #96]	@ 0x60
      HAL_ADC_ErrorCallback(hadc);
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff ff35 	bl	80027f8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	2210      	movs	r2, #16
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e7cd      	b.n	8002932 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002996:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002998:	06d8      	lsls	r0, r3, #27
 800299a:	d403      	bmi.n	80029a4 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800299c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800299e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029a2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029a4:	4620      	mov	r0, r4
 80029a6:	f000 fd4f 	bl	8003448 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e73b      	b.n	800282a <HAL_ADC_IRQHandler+0x2e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a6c <HAL_ADC_IRQHandler+0x270>)
 80029b4:	e731      	b.n	800281a <HAL_ADC_IRQHandler+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029b6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029bc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 fd40 	bl	8003444 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e7ad      	b.n	800292a <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ff0c 	bl	80027f4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e79a      	b.n	800291a <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 fd27 	bl	8003440 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e792      	b.n	8002922 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029fc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a02:	65e2      	str	r2, [r4, #92]	@ 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a04:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a0a:	f042 0208 	orr.w	r2, r2, #8
 8002a0e:	6622      	str	r2, [r4, #96]	@ 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a10:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a12:	6019      	str	r1, [r3, #0]
}
 8002a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a18:	f000 bd10 	b.w	800343c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a1c:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a20:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a24:	4302      	orrs	r2, r0
 8002a26:	f47f af6e 	bne.w	8002906 <HAL_ADC_IRQHandler+0x10a>
 8002a2a:	e754      	b.n	80028d6 <HAL_ADC_IRQHandler+0xda>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8002a30:	f240 2221 	movw	r2, #545	@ 0x221
 8002a34:	40ea      	lsrs	r2, r5
 8002a36:	07d0      	lsls	r0, r2, #31
 8002a38:	f53f af11 	bmi.w	800285e <HAL_ADC_IRQHandler+0x62>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a3c:	68ca      	ldr	r2, [r1, #12]
 8002a3e:	e70f      	b.n	8002860 <HAL_ADC_IRQHandler+0x64>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a40:	f04f 4ca0 	mov.w	ip, #1342177280	@ 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a44:	21c1      	movs	r1, #193	@ 0xc1
 8002a46:	40e9      	lsrs	r1, r5
 8002a48:	07c9      	lsls	r1, r1, #31
 8002a4a:	f53f af3f 	bmi.w	80028cc <HAL_ADC_IRQHandler+0xd0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a4e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8002a52:	e73c      	b.n	80028ce <HAL_ADC_IRQHandler+0xd2>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a54:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8002a70 <HAL_ADC_IRQHandler+0x274>
 8002a58:	e7f4      	b.n	8002a44 <HAL_ADC_IRQHandler+0x248>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	07d0      	lsls	r0, r2, #31
 8002a5e:	d597      	bpl.n	8002990 <HAL_ADC_IRQHandler+0x194>
 8002a60:	e78a      	b.n	8002978 <HAL_ADC_IRQHandler+0x17c>
 8002a62:	bf00      	nop
 8002a64:	50000100 	.word	0x50000100
 8002a68:	50000700 	.word	0x50000700
 8002a6c:	50000300 	.word	0x50000300
 8002a70:	50000400 	.word	0x50000400
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	65e3      	str	r3, [r4, #92]	@ 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6623      	str	r3, [r4, #96]	@ 0x60
 8002a84:	e704      	b.n	8002890 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a86:	4906      	ldr	r1, [pc, #24]	@ (8002aa0 <HAL_ADC_IRQHandler+0x2a4>)
 8002a88:	e7d2      	b.n	8002a30 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a8a:	4a06      	ldr	r2, [pc, #24]	@ (8002aa4 <HAL_ADC_IRQHandler+0x2a8>)
 8002a8c:	e770      	b.n	8002970 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	65e3      	str	r3, [r4, #92]	@ 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6623      	str	r3, [r4, #96]	@ 0x60
 8002a9e:	e732      	b.n	8002906 <HAL_ADC_IRQHandler+0x10a>
 8002aa0:	50000400 	.word	0x50000400
 8002aa4:	50000300 	.word	0x50000300

08002aa8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aac:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8002ab0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ab4:	d11d      	bne.n	8002af2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ab6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abc:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002abe:	680a      	ldr	r2, [r1, #0]
 8002ac0:	f012 0f08 	tst.w	r2, #8
 8002ac4:	68ca      	ldr	r2, [r1, #12]
 8002ac6:	d01b      	beq.n	8002b00 <ADC_DMAConvCplt+0x58>
 8002ac8:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002acc:	d10d      	bne.n	8002aea <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ace:	68ca      	ldr	r2, [r1, #12]
 8002ad0:	0494      	lsls	r4, r2, #18
 8002ad2:	d40a      	bmi.n	8002aea <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ada:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ade:	04d1      	lsls	r1, r2, #19
 8002ae0:	d403      	bmi.n	8002aea <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe78 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
}
 8002af0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002af2:	06d2      	lsls	r2, r2, #27
 8002af4:	d40a      	bmi.n	8002b0c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b00:	0790      	lsls	r0, r2, #30
 8002b02:	d5e7      	bpl.n	8002ad4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fe6b 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
 8002b0a:	e7f1      	b.n	8002af0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe73 	bl	80027f8 <HAL_ADC_ErrorCallback>
}
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002b16:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b18:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b1e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b20:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b28:	f7ff fe66 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b2c:	bd08      	pop	{r3, pc}
 8002b2e:	bf00      	nop

08002b30 <HAL_ADC_ConfigChannel>:
{
 8002b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002b34:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8002b38:	b082      	sub	sp, #8
 8002b3a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002b3c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002b44:	f000 811e 	beq.w	8002d84 <HAL_ADC_ConfigChannel+0x254>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b48:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b50:	6894      	ldr	r4, [r2, #8]
 8002b52:	0764      	lsls	r4, r4, #29
 8002b54:	d467      	bmi.n	8002c26 <HAL_ADC_ConfigChannel+0xf6>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b56:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b58:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8002b5c:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b60:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8002b64:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b66:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8002b6a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002b6e:	f854 500e 	ldr.w	r5, [r4, lr]
 8002b72:	261f      	movs	r6, #31
 8002b74:	fa00 f00c 	lsl.w	r0, r0, ip
 8002b78:	fa06 fc0c 	lsl.w	ip, r6, ip
 8002b7c:	ea25 0c0c 	bic.w	ip, r5, ip
 8002b80:	ea40 000c 	orr.w	r0, r0, ip
 8002b84:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b88:	6890      	ldr	r0, [r2, #8]
 8002b8a:	0747      	lsls	r7, r0, #29
 8002b8c:	d555      	bpl.n	8002c3a <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b8e:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b90:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b92:	6894      	ldr	r4, [r2, #8]
 8002b94:	07e5      	lsls	r5, r4, #31
 8002b96:	d412      	bmi.n	8002bbe <HAL_ADC_ConfigChannel+0x8e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b98:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002b9a:	4cba      	ldr	r4, [pc, #744]	@ (8002e84 <HAL_ADC_ConfigChannel+0x354>)
 8002b9c:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8002ba0:	f006 0718 	and.w	r7, r6, #24
 8002ba4:	40fc      	lsrs	r4, r7
 8002ba6:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8002baa:	4004      	ands	r4, r0
 8002bac:	ea25 0507 	bic.w	r5, r5, r7
 8002bb0:	432c      	orrs	r4, r5
 8002bb2:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb6:	4cb4      	ldr	r4, [pc, #720]	@ (8002e88 <HAL_ADC_ConfigChannel+0x358>)
 8002bb8:	42a6      	cmp	r6, r4
 8002bba:	f000 8090 	beq.w	8002cde <HAL_ADC_ConfigChannel+0x1ae>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bbe:	49b3      	ldr	r1, [pc, #716]	@ (8002e8c <HAL_ADC_ConfigChannel+0x35c>)
 8002bc0:	4208      	tst	r0, r1
 8002bc2:	d02e      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc4:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002bc8:	f000 80da 	beq.w	8002d80 <HAL_ADC_ConfigChannel+0x250>
 8002bcc:	4db0      	ldr	r5, [pc, #704]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002bce:	49b1      	ldr	r1, [pc, #708]	@ (8002e94 <HAL_ADC_ConfigChannel+0x364>)
 8002bd0:	4cb1      	ldr	r4, [pc, #708]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002bd2:	42aa      	cmp	r2, r5
 8002bd4:	bf08      	it	eq
 8002bd6:	4621      	moveq	r1, r4
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bd8:	4cb0      	ldr	r4, [pc, #704]	@ (8002e9c <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bda:	6889      	ldr	r1, [r1, #8]
 8002bdc:	42a0      	cmp	r0, r4
 8002bde:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8002be2:	f000 80d3 	beq.w	8002d8c <HAL_ADC_ConfigChannel+0x25c>
 8002be6:	4cae      	ldr	r4, [pc, #696]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x370>)
 8002be8:	42a0      	cmp	r0, r4
 8002bea:	f000 80cf 	beq.w	8002d8c <HAL_ADC_ConfigChannel+0x25c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bee:	4cad      	ldr	r4, [pc, #692]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x374>)
 8002bf0:	42a0      	cmp	r0, r4
 8002bf2:	f000 80f4 	beq.w	8002dde <HAL_ADC_ConfigChannel+0x2ae>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf6:	4cac      	ldr	r4, [pc, #688]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x378>)
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d112      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfc:	0249      	lsls	r1, r1, #9
 8002bfe:	d410      	bmi.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c00:	49a3      	ldr	r1, [pc, #652]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002c02:	428a      	cmp	r2, r1
 8002c04:	d00d      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c06:	48a4      	ldr	r0, [pc, #656]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002c08:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8002c0c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002c10:	bf08      	it	eq
 8002c12:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c14:	688a      	ldr	r2, [r1, #8]
 8002c16:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002c1a:	432a      	orrs	r2, r5
 8002c1c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002c20:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c22:	2000      	movs	r0, #0
 8002c24:	e003      	b.n	8002c2e <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c28:	f042 0220 	orr.w	r2, r2, #32
 8002c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002c34:	b002      	add	sp, #8
 8002c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c3a:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c3c:	6808      	ldr	r0, [r1, #0]
 8002c3e:	0726      	lsls	r6, r4, #28
 8002c40:	d4a7      	bmi.n	8002b92 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c42:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8002c44:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8002c48:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c4a:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8002c4c:	40b4      	lsls	r4, r6
 8002c4e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c52:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8002c56:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c5a:	f102 0714 	add.w	r7, r2, #20
 8002c5e:	f000 812d 	beq.w	8002ebc <HAL_ADC_ConfigChannel+0x38c>
  MODIFY_REG(*preg,
 8002c62:	40b5      	lsls	r5, r6
 8002c64:	583e      	ldr	r6, [r7, r0]
 8002c66:	4034      	ands	r4, r6
 8002c68:	432c      	orrs	r4, r5
 8002c6a:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c6c:	6950      	ldr	r0, [r2, #20]
 8002c6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c72:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c74:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c78:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c7a:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c7c:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c7e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c82:	4684      	mov	ip, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c84:	f000 80d6 	beq.w	8002e34 <HAL_ADC_ConfigChannel+0x304>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c88:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002c8c:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8002c8e:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8002c92:	40b5      	lsls	r5, r6
 8002c94:	4e85      	ldr	r6, [pc, #532]	@ (8002eac <HAL_ADC_ConfigChannel+0x37c>)
 8002c96:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002c9a:	ea0c 0606 	and.w	r6, ip, r6
 8002c9e:	4306      	orrs	r6, r0
 8002ca0:	4335      	orrs	r5, r6
 8002ca2:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8002ca6:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002caa:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8002cac:	698e      	ldr	r6, [r1, #24]
 8002cae:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002cb2:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8002cb6:	4330      	orrs	r0, r6
 8002cb8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbc:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cbe:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8002cc0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8002cc4:	f1a5 0501 	sub.w	r5, r5, #1
 8002cc8:	fab5 f585 	clz	r5, r5
 8002ccc:	096d      	lsrs	r5, r5, #5
 8002cce:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8002cd2:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8002cd6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cda:	6808      	ldr	r0, [r1, #0]
}
 8002cdc:	e759      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cde:	2f00      	cmp	r7, #0
 8002ce0:	f000 8092 	beq.w	8002e08 <HAL_ADC_ConfigChannel+0x2d8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ce8:	2c00      	cmp	r4, #0
 8002cea:	f000 80ef 	beq.w	8002ecc <HAL_ADC_ConfigChannel+0x39c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002cee:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	3401      	adds	r4, #1
 8002cf4:	f004 041f 	and.w	r4, r4, #31
 8002cf8:	2c09      	cmp	r4, #9
 8002cfa:	f240 80e7 	bls.w	8002ecc <HAL_ADC_ConfigChannel+0x39c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002d02:	2c00      	cmp	r4, #0
 8002d04:	f000 8186 	beq.w	8003014 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d08:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d0c:	3401      	adds	r4, #1
 8002d0e:	06a4      	lsls	r4, r4, #26
 8002d10:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002d18:	2d00      	cmp	r5, #0
 8002d1a:	f000 8180 	beq.w	800301e <HAL_ADC_ConfigChannel+0x4ee>
  return __builtin_clz(value);
 8002d1e:	fab5 f585 	clz	r5, r5
 8002d22:	3501      	adds	r5, #1
 8002d24:	f005 051f 	and.w	r5, r5, #31
 8002d28:	2601      	movs	r6, #1
 8002d2a:	fa06 f505 	lsl.w	r5, r6, r5
 8002d2e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002d34:	2800      	cmp	r0, #0
 8002d36:	f000 8170 	beq.w	800301a <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 8002d3a:	fab0 f080 	clz	r0, r0
 8002d3e:	1c45      	adds	r5, r0, #1
 8002d40:	f005 051f 	and.w	r5, r5, #31
 8002d44:	2003      	movs	r0, #3
 8002d46:	f06f 061d 	mvn.w	r6, #29
 8002d4a:	fb10 6005 	smlabb	r0, r0, r5, r6
 8002d4e:	0500      	lsls	r0, r0, #20
 8002d50:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d54:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d56:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8002d58:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d5a:	f005 0504 	and.w	r5, r5, #4
 8002d5e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8002d62:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002d66:	fa04 f700 	lsl.w	r7, r4, r0
 8002d6a:	f04f 0c07 	mov.w	ip, #7
 8002d6e:	5974      	ldr	r4, [r6, r5]
 8002d70:	fa0c f000 	lsl.w	r0, ip, r0
 8002d74:	ea24 0000 	bic.w	r0, r4, r0
 8002d78:	4338      	orrs	r0, r7
 8002d7a:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d7c:	6808      	ldr	r0, [r1, #0]
}
 8002d7e:	e71e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x8e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d80:	4945      	ldr	r1, [pc, #276]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002d82:	e729      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0xa8>
  __HAL_LOCK(hadc);
 8002d84:	2002      	movs	r0, #2
}
 8002d86:	b002      	add	sp, #8
 8002d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d8c:	020c      	lsls	r4, r1, #8
 8002d8e:	f53f af48 	bmi.w	8002c22 <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d92:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002d96:	d04b      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x300>
 8002d98:	4945      	ldr	r1, [pc, #276]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x380>)
 8002d9a:	428a      	cmp	r2, r1
 8002d9c:	f47f af41 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da0:	483c      	ldr	r0, [pc, #240]	@ (8002e94 <HAL_ADC_ConfigChannel+0x364>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da2:	4a44      	ldr	r2, [pc, #272]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x384>)
 8002da4:	4c44      	ldr	r4, [pc, #272]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x388>)
 8002da6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002da8:	6881      	ldr	r1, [r0, #8]
 8002daa:	0992      	lsrs	r2, r2, #6
 8002dac:	fba4 4202 	umull	r4, r2, r4, r2
 8002db0:	0992      	lsrs	r2, r2, #6
 8002db2:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002db6:	3201      	adds	r2, #1
 8002db8:	4329      	orrs	r1, r5
 8002dba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002dc4:	6081      	str	r1, [r0, #8]
 8002dc6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002dc8:	9a01      	ldr	r2, [sp, #4]
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	f43f af29 	beq.w	8002c22 <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 8002dd0:	9a01      	ldr	r2, [sp, #4]
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002dd6:	9a01      	ldr	r2, [sp, #4]
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d1f9      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x2a0>
 8002ddc:	e721      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dde:	01c8      	lsls	r0, r1, #7
 8002de0:	f53f af1f 	bmi.w	8002c22 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de4:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002de8:	f000 810a 	beq.w	8003000 <HAL_ADC_ConfigChannel+0x4d0>
 8002dec:	4c28      	ldr	r4, [pc, #160]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002dee:	4929      	ldr	r1, [pc, #164]	@ (8002e94 <HAL_ADC_ConfigChannel+0x364>)
 8002df0:	4829      	ldr	r0, [pc, #164]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002df2:	42a2      	cmp	r2, r4
 8002df4:	bf08      	it	eq
 8002df6:	4601      	moveq	r1, r0
 8002df8:	688a      	ldr	r2, [r1, #8]
 8002dfa:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002dfe:	432a      	orrs	r2, r5
 8002e00:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002e04:	608a      	str	r2, [r1, #8]
}
 8002e06:	e70c      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e08:	0e80      	lsrs	r0, r0, #26
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f000 051f 	and.w	r5, r0, #31
 8002e10:	2401      	movs	r4, #1
 8002e12:	0680      	lsls	r0, r0, #26
 8002e14:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002e18:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e1c:	ea44 0400 	orr.w	r4, r4, r0
 8002e20:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e24:	d977      	bls.n	8002f16 <HAL_ADC_ConfigChannel+0x3e6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e26:	381e      	subs	r0, #30
 8002e28:	0500      	lsls	r0, r0, #20
 8002e2a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8002e2e:	e791      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e30:	4819      	ldr	r0, [pc, #100]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002e32:	e7b6      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x272>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e34:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8002e36:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e38:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e40:	2e00      	cmp	r6, #0
 8002e42:	d16a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x3ea>
 8002e44:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e48:	4285      	cmp	r5, r0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_ADC_ConfigChannel+0x44c>
 8002e4e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002e50:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e52:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002e56:	4285      	cmp	r5, r0
 8002e58:	f000 80a2 	beq.w	8002fa0 <HAL_ADC_ConfigChannel+0x470>
 8002e5c:	68a5      	ldr	r5, [r4, #8]
 8002e5e:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e60:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e64:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002e68:	4285      	cmp	r5, r0
 8002e6a:	f000 80ae 	beq.w	8002fca <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e6e:	68e5      	ldr	r5, [r4, #12]
 8002e70:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e72:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e76:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8002e7a:	42a0      	cmp	r0, r4
 8002e7c:	f000 80ba 	beq.w	8002ff4 <HAL_ADC_ConfigChannel+0x4c4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e80:	4660      	mov	r0, ip
 8002e82:	e686      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x62>
 8002e84:	0007ffff 	.word	0x0007ffff
 8002e88:	407f0000 	.word	0x407f0000
 8002e8c:	80080000 	.word	0x80080000
 8002e90:	50000100 	.word	0x50000100
 8002e94:	50000700 	.word	0x50000700
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	c3210000 	.word	0xc3210000
 8002ea0:	90c00010 	.word	0x90c00010
 8002ea4:	c7520000 	.word	0xc7520000
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	03fff000 	.word	0x03fff000
 8002eb0:	50000600 	.word	0x50000600
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	053e2d63 	.word	0x053e2d63
  MODIFY_REG(*preg,
 8002ebc:	583d      	ldr	r5, [r7, r0]
 8002ebe:	402c      	ands	r4, r5
 8002ec0:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ec2:	6950      	ldr	r0, [r2, #20]
 8002ec4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002ec8:	6150      	str	r0, [r2, #20]
}
 8002eca:	e6d3      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002ed0:	2c00      	cmp	r4, #0
 8002ed2:	f000 8099 	beq.w	8003008 <HAL_ADC_ConfigChannel+0x4d8>
  return __builtin_clz(value);
 8002ed6:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eda:	3401      	adds	r4, #1
 8002edc:	06a4      	lsls	r4, r4, #26
 8002ede:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002ee6:	2d00      	cmp	r5, #0
 8002ee8:	f000 808c 	beq.w	8003004 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8002eec:	fab5 f585 	clz	r5, r5
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	f005 051f 	and.w	r5, r5, #31
 8002ef6:	2601      	movs	r6, #1
 8002ef8:	fa06 f505 	lsl.w	r5, r6, r5
 8002efc:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002f02:	2800      	cmp	r0, #0
 8002f04:	f000 8083 	beq.w	800300e <HAL_ADC_ConfigChannel+0x4de>
  return __builtin_clz(value);
 8002f08:	fab0 f080 	clz	r0, r0
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	f000 001f 	and.w	r0, r0, #31
 8002f12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f16:	0500      	lsls	r0, r0, #20
 8002f18:	e71c      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8002f1e:	b11e      	cbz	r6, 8002f28 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002f20:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f24:	42b5      	cmp	r5, r6
 8002f26:	d029      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f28:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002f2a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f2c:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f34:	f104 0708 	add.w	r7, r4, #8
 8002f38:	46be      	mov	lr, r7
  if (value == 0U)
 8002f3a:	b11e      	cbz	r6, 8002f44 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f3c:	fab6 f686 	clz	r6, r6
 8002f40:	42ae      	cmp	r6, r5
 8002f42:	d02f      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f44:	68a5      	ldr	r5, [r4, #8]
 8002f46:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f48:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f50:	f104 060c 	add.w	r6, r4, #12
 8002f54:	46b0      	mov	r8, r6
  if (value == 0U)
 8002f56:	f1be 0f00 	cmp.w	lr, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8002f5c:	fabe fe8e 	clz	lr, lr
 8002f60:	45ae      	cmp	lr, r5
 8002f62:	d034      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f64:	68e5      	ldr	r5, [r4, #12]
 8002f66:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f68:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	f43f ae0e 	beq.w	8002b92 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8002f76:	fab5 f085 	clz	r0, r5
 8002f7a:	e77e      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8002f7c:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002f7e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002f82:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f84:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f88:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002f8a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002f8c:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f90:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f94:	4660      	mov	r0, ip
 8002f96:	2e00      	cmp	r6, #0
 8002f98:	d1ca      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x400>
 8002f9a:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002f9e:	e75a      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x326>
 8002fa0:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8002fa4:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002fa6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002faa:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fac:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fb0:	68a0      	ldr	r0, [r4, #8]
 8002fb2:	68a5      	ldr	r5, [r4, #8]
 8002fb4:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb8:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fba:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fbe:	4660      	mov	r0, ip
 8002fc0:	2e00      	cmp	r6, #0
 8002fc2:	d1c3      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x41c>
 8002fc4:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002fc8:	e74e      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x338>
 8002fca:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002fd4:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fda:	68e0      	ldr	r0, [r4, #12]
 8002fdc:	68e4      	ldr	r4, [r4, #12]
 8002fde:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe2:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fe4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe8:	4660      	mov	r0, ip
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	d1be      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x43c>
 8002fee:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002ff2:	e742      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8002ff4:	6830      	ldr	r0, [r6, #0]
 8002ff6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ffa:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ffc:	6808      	ldr	r0, [r1, #0]
}
 8002ffe:	e5c8      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x62>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003000:	4908      	ldr	r1, [pc, #32]	@ (8003024 <HAL_ADC_ConfigChannel+0x4f4>)
 8003002:	e6f9      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x2c8>
 8003004:	2502      	movs	r5, #2
 8003006:	e779      	b.n	8002efc <HAL_ADC_ConfigChannel+0x3cc>
 8003008:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800300c:	e769      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x3b2>
 800300e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8003012:	e69f      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x224>
 8003014:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8003018:	e67c      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1e4>
 800301a:	4803      	ldr	r0, [pc, #12]	@ (8003028 <HAL_ADC_ConfigChannel+0x4f8>)
 800301c:	e69a      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x224>
 800301e:	2502      	movs	r5, #2
 8003020:	e685      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1fe>
 8003022:	bf00      	nop
 8003024:	50000300 	.word	0x50000300
 8003028:	fe500000 	.word	0xfe500000

0800302c <ADC_Enable>:
{
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003032:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8003034:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	07d2      	lsls	r2, r2, #31
 800303a:	d434      	bmi.n	80030a6 <ADC_Enable+0x7a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	4a2d      	ldr	r2, [pc, #180]	@ (80030f4 <ADC_Enable+0xc8>)
 8003040:	4211      	tst	r1, r2
 8003042:	4604      	mov	r4, r0
 8003044:	d132      	bne.n	80030ac <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800304c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003050:	f042 0201 	orr.w	r2, r2, #1
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	d048      	beq.n	80030ee <ADC_Enable+0xc2>
 800305c:	4826      	ldr	r0, [pc, #152]	@ (80030f8 <ADC_Enable+0xcc>)
 800305e:	4a27      	ldr	r2, [pc, #156]	@ (80030fc <ADC_Enable+0xd0>)
 8003060:	4927      	ldr	r1, [pc, #156]	@ (8003100 <ADC_Enable+0xd4>)
 8003062:	4283      	cmp	r3, r0
 8003064:	bf08      	it	eq
 8003066:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003068:	6893      	ldr	r3, [r2, #8]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	d429      	bmi.n	80030c2 <ADC_Enable+0x96>
    tickstart = HAL_GetTick();
 800306e:	f7ff fa83 	bl	8002578 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8003078:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307a:	d414      	bmi.n	80030a6 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 800307c:	4e21      	ldr	r6, [pc, #132]	@ (8003104 <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	07d0      	lsls	r0, r2, #31
 8003082:	d404      	bmi.n	800308e <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	4032      	ands	r2, r6
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800308e:	f7ff fa73 	bl	8002578 <HAL_GetTick>
 8003092:	1b43      	subs	r3, r0, r5
 8003094:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003096:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003098:	d902      	bls.n	80030a0 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	07d1      	lsls	r1, r2, #31
 800309e:	d505      	bpl.n	80030ac <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	07d2      	lsls	r2, r2, #31
 80030a4:	d5eb      	bpl.n	800307e <ADC_Enable+0x52>
  return HAL_OK;
 80030a6:	2000      	movs	r0, #0
}
 80030a8:	b002      	add	sp, #8
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6623      	str	r3, [r4, #96]	@ 0x60
}
 80030be:	b002      	add	sp, #8
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <ADC_Enable+0xdc>)
 80030c4:	4a11      	ldr	r2, [pc, #68]	@ (800310c <ADC_Enable+0xe0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	3301      	adds	r3, #1
 80030d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030da:	9b01      	ldr	r3, [sp, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0c6      	beq.n	800306e <ADC_Enable+0x42>
        wait_loop_index--;
 80030e0:	9b01      	ldr	r3, [sp, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f9      	bne.n	80030e0 <ADC_Enable+0xb4>
 80030ec:	e7bf      	b.n	800306e <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030ee:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <ADC_Enable+0xd4>)
 80030f0:	e7ba      	b.n	8003068 <ADC_Enable+0x3c>
 80030f2:	bf00      	nop
 80030f4:	8000003f 	.word	0x8000003f
 80030f8:	50000100 	.word	0x50000100
 80030fc:	50000700 	.word	0x50000700
 8003100:	50000300 	.word	0x50000300
 8003104:	7fffffc0 	.word	0x7fffffc0
 8003108:	20000008 	.word	0x20000008
 800310c:	053e2d63 	.word	0x053e2d63

08003110 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311a:	d052      	beq.n	80031c2 <HAL_ADC_Start+0xb2>
 800311c:	4839      	ldr	r0, [pc, #228]	@ (8003204 <HAL_ADC_Start+0xf4>)
 800311e:	4a3a      	ldr	r2, [pc, #232]	@ (8003208 <HAL_ADC_Start+0xf8>)
 8003120:	493a      	ldr	r1, [pc, #232]	@ (800320c <HAL_ADC_Start+0xfc>)
 8003122:	4283      	cmp	r3, r0
 8003124:	bf08      	it	eq
 8003126:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003128:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312a:	689d      	ldr	r5, [r3, #8]
 800312c:	f015 0504 	ands.w	r5, r5, #4
 8003130:	d145      	bne.n	80031be <HAL_ADC_Start+0xae>
    __HAL_LOCK(hadc);
 8003132:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d041      	beq.n	80031be <HAL_ADC_Start+0xae>
 800313a:	2301      	movs	r3, #1
 800313c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff73 	bl	800302c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003146:	2800      	cmp	r0, #0
 8003148:	d13d      	bne.n	80031c6 <HAL_ADC_Start+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 800314a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314c:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800314e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800315c:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <HAL_ADC_Start+0xf4>)
 800315e:	429a      	cmp	r2, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003160:	f006 061f 	and.w	r6, r6, #31
 8003164:	d044      	beq.n	80031f0 <HAL_ADC_Start+0xe0>
 8003166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800316a:	429a      	cmp	r2, r3
 800316c:	d045      	beq.n	80031fa <HAL_ADC_Start+0xea>
 800316e:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003170:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003172:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003176:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003178:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800317a:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800317e:	bf1c      	itt	ne
 8003180:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 8003182:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003186:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003188:	231c      	movs	r3, #28
 800318a:	6013      	str	r3, [r2, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800318c:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003196:	d019      	beq.n	80031cc <HAL_ADC_Start+0xbc>
 8003198:	f240 2321 	movw	r3, #545	@ 0x221
 800319c:	40f3      	lsrs	r3, r6
 800319e:	07dd      	lsls	r5, r3, #31
 80031a0:	d414      	bmi.n	80031cc <HAL_ADC_Start+0xbc>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80031a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a8:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031aa:	68cb      	ldr	r3, [r1, #12]
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	d505      	bpl.n	80031bc <HAL_ADC_Start+0xac>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031b0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80031b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031ba:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80031bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80031be:	2002      	movs	r0, #2
}
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <HAL_ADC_Start+0xfc>)
 80031c4:	e7b0      	b.n	8003128 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 80031c6:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
}
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031cc:	68d3      	ldr	r3, [r2, #12]
 80031ce:	0199      	lsls	r1, r3, #6
 80031d0:	d505      	bpl.n	80031de <HAL_ADC_Start+0xce>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80031d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
  MODIFY_REG(ADCx->CR,
 80031de:	6893      	ldr	r3, [r2, #8]
 80031e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6093      	str	r3, [r2, #8]
}
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031f0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031f4:	2e00      	cmp	r6, #0
 80031f6:	d1bf      	bne.n	8003178 <HAL_ADC_Start+0x68>
 80031f8:	e7ba      	b.n	8003170 <HAL_ADC_Start+0x60>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031fa:	4905      	ldr	r1, [pc, #20]	@ (8003210 <HAL_ADC_Start+0x100>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031fc:	2e00      	cmp	r6, #0
 80031fe:	d1bb      	bne.n	8003178 <HAL_ADC_Start+0x68>
 8003200:	e7b6      	b.n	8003170 <HAL_ADC_Start+0x60>
 8003202:	bf00      	nop
 8003204:	50000100 	.word	0x50000100
 8003208:	50000700 	.word	0x50000700
 800320c:	50000300 	.word	0x50000300
 8003210:	50000400 	.word	0x50000400

08003214 <HAL_ADC_Start_DMA>:
{
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003218:	6805      	ldr	r5, [r0, #0]
 800321a:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
{
 800321e:	4604      	mov	r4, r0
 8003220:	460e      	mov	r6, r1
 8003222:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003224:	d022      	beq.n	800326c <HAL_ADC_Start_DMA+0x58>
 8003226:	4a39      	ldr	r2, [pc, #228]	@ (800330c <HAL_ADC_Start_DMA+0xf8>)
 8003228:	4839      	ldr	r0, [pc, #228]	@ (8003310 <HAL_ADC_Start_DMA+0xfc>)
 800322a:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <HAL_ADC_Start_DMA+0x100>)
 800322c:	4295      	cmp	r5, r2
 800322e:	bf08      	it	eq
 8003230:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003232:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003234:	68ab      	ldr	r3, [r5, #8]
 8003236:	075b      	lsls	r3, r3, #29
 8003238:	d415      	bmi.n	8003266 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 800323a:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 800323e:	2b01      	cmp	r3, #1
 8003240:	d011      	beq.n	8003266 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003242:	4b35      	ldr	r3, [pc, #212]	@ (8003318 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8003244:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003246:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003248:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 800324c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003250:	d00e      	beq.n	8003270 <HAL_ADC_Start_DMA+0x5c>
 8003252:	f240 2321 	movw	r3, #545	@ 0x221
 8003256:	fa23 f308 	lsr.w	r3, r3, r8
 800325a:	4003      	ands	r3, r0
 800325c:	d108      	bne.n	8003270 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 800325e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8003262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003266:	2002      	movs	r0, #2
}
 8003268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800326c:	4829      	ldr	r0, [pc, #164]	@ (8003314 <HAL_ADC_Start_DMA+0x100>)
 800326e:	e7e0      	b.n	8003232 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff fedb 	bl	800302c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003276:	2800      	cmp	r0, #0
 8003278:	d13f      	bne.n	80032fa <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 800327a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800327c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800327e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328a:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800328c:	4b1f      	ldr	r3, [pc, #124]	@ (800330c <HAL_ADC_Start_DMA+0xf8>)
 800328e:	4299      	cmp	r1, r3
 8003290:	d038      	beq.n	8003304 <HAL_ADC_Start_DMA+0xf0>
 8003292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003296:	4299      	cmp	r1, r3
 8003298:	d034      	beq.n	8003304 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800329a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800329c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80032a0:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032a4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80032a6:	4d1d      	ldr	r5, [pc, #116]	@ (800331c <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032a8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032ac:	bf1c      	itt	ne
 80032ae:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 80032b0:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032b6:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032b8:	4d19      	ldr	r5, [pc, #100]	@ (8003320 <HAL_ADC_Start_DMA+0x10c>)
 80032ba:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032bc:	4d19      	ldr	r5, [pc, #100]	@ (8003324 <HAL_ADC_Start_DMA+0x110>)
 80032be:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c0:	251c      	movs	r5, #28
 80032c2:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80032c4:	2500      	movs	r5, #0
 80032c6:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032ca:	684d      	ldr	r5, [r1, #4]
 80032cc:	f045 0510 	orr.w	r5, r5, #16
 80032d0:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032d2:	68cd      	ldr	r5, [r1, #12]
 80032d4:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032d8:	463b      	mov	r3, r7
 80032da:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032dc:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032de:	3140      	adds	r1, #64	@ 0x40
 80032e0:	f000 fae6 	bl	80038b0 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032e4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80032e6:	6893      	ldr	r3, [r2, #8]
 80032e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6093      	str	r3, [r2, #8]
}
 80032f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003304:	f1b8 0f00 	cmp.w	r8, #0
 8003308:	d1cb      	bne.n	80032a2 <HAL_ADC_Start_DMA+0x8e>
 800330a:	e7c6      	b.n	800329a <HAL_ADC_Start_DMA+0x86>
 800330c:	50000100 	.word	0x50000100
 8003310:	50000700 	.word	0x50000700
 8003314:	50000300 	.word	0x50000300
 8003318:	50000600 	.word	0x50000600
 800331c:	08002aa9 	.word	0x08002aa9
 8003320:	080027e9 	.word	0x080027e9
 8003324:	08002b15 	.word	0x08002b15

08003328 <ADC_Disable>:
{
 8003328:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800332a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	0795      	lsls	r5, r2, #30
 8003330:	d502      	bpl.n	8003338 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003332:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003334:	2000      	movs	r0, #0
}
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	07d4      	lsls	r4, r2, #31
 800333c:	d5fa      	bpl.n	8003334 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	f002 020d 	and.w	r2, r2, #13
 8003344:	2a01      	cmp	r2, #1
 8003346:	4604      	mov	r4, r0
 8003348:	d009      	beq.n	800335e <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800334c:	f043 0310 	orr.w	r3, r3, #16
 8003350:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
}
 800335c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003364:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003368:	2103      	movs	r1, #3
 800336a:	f042 0202 	orr.w	r2, r2, #2
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003372:	f7ff f901 	bl	8002578 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800337c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337e:	d403      	bmi.n	8003388 <ADC_Disable+0x60>
 8003380:	e7d8      	b.n	8003334 <ADC_Disable+0xc>
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	07db      	lsls	r3, r3, #31
 8003386:	d5d5      	bpl.n	8003334 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003388:	f7ff f8f6 	bl	8002578 <HAL_GetTick>
 800338c:	1b40      	subs	r0, r0, r5
 800338e:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003390:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003392:	d9f6      	bls.n	8003382 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	07d2      	lsls	r2, r2, #31
 8003398:	d5f3      	bpl.n	8003382 <ADC_Disable+0x5a>
 800339a:	e7d6      	b.n	800334a <ADC_Disable+0x22>

0800339c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800339c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800339e:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 80033a2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80033a4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80033a6:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80033a8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80033aa:	d03f      	beq.n	800342c <HAL_ADCEx_Calibration_Start+0x90>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033b2:	4604      	mov	r4, r0
 80033b4:	460d      	mov	r5, r1
 80033b6:	f7ff ffb7 	bl	8003328 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
  if (tmp_hal_status == HAL_OK)
 80033bc:	b9e8      	cbnz	r0, 80033fa <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033c2:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033c6:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
  MODIFY_REG(ADCx->CR,
 80033ce:	6893      	ldr	r3, [r2, #8]
 80033d0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80033d4:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 80033d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033dc:	430b      	orrs	r3, r1
 80033de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033e2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033e4:	6893      	ldr	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033e6:	4913      	ldr	r1, [pc, #76]	@ (8003434 <HAL_ADCEx_Calibration_Start+0x98>)
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0e      	blt.n	800340a <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80033f8:	e002      	b.n	8003400 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	f043 0310 	orr.w	r3, r3, #16
 80033fe:	65e3      	str	r3, [r4, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003400:	2300      	movs	r3, #0
 8003402:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003406:	b003      	add	sp, #12
 8003408:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	3301      	adds	r3, #1
 800340e:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	428b      	cmp	r3, r1
 8003414:	d9e6      	bls.n	80033e4 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003416:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003418:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800341c:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800341e:	f043 0310 	orr.w	r3, r3, #16
 8003422:	65e3      	str	r3, [r4, #92]	@ 0x5c
        __HAL_UNLOCK(hadc);
 8003424:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
        return HAL_ERROR;
 8003428:	2001      	movs	r0, #1
 800342a:	e7ec      	b.n	8003406 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 800342c:	2002      	movs	r0, #2
}
 800342e:	b003      	add	sp, #12
 8003430:	bd30      	pop	{r4, r5, pc}
 8003432:	bf00      	nop
 8003434:	0004de01 	.word	0x0004de01

08003438 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop

08003444 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800344c:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800344e:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003452:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8003454:	2a01      	cmp	r2, #1
{
 8003456:	b09d      	sub	sp, #116	@ 0x74
  __HAL_LOCK(hadc);
 8003458:	d057      	beq.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800345a:	6802      	ldr	r2, [r0, #0]
 800345c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800345e:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8003460:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003462:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003466:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8003468:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800346c:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800346e:	d00b      	beq.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8003470:	4d4a      	ldr	r5, [pc, #296]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003472:	42aa      	cmp	r2, r5
 8003474:	d047      	beq.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003476:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003478:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347c:	f042 0220 	orr.w	r2, r2, #32
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003482:	b01d      	add	sp, #116	@ 0x74
 8003484:	bc70      	pop	{r4, r5, r6}
 8003486:	4770      	bx	lr
 8003488:	4845      	ldr	r0, [pc, #276]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800348a:	6880      	ldr	r0, [r0, #8]
 800348c:	0740      	lsls	r0, r0, #29
 800348e:	d50b      	bpl.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003490:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003492:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003494:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003498:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349a:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80034a2:	b01d      	add	sp, #116	@ 0x74
 80034a4:	bc70      	pop	{r4, r5, r6}
 80034a6:	4770      	bx	lr
 80034a8:	6890      	ldr	r0, [r2, #8]
 80034aa:	0740      	lsls	r0, r0, #29
 80034ac:	d4f1      	bmi.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034ae:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80034b2:	d02e      	beq.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 80034b4:	483a      	ldr	r0, [pc, #232]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034b6:	4282      	cmp	r2, r0
 80034b8:	d02b      	beq.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	d05a      	beq.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034be:	4839      	ldr	r0, [pc, #228]	@ (80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80034c0:	684c      	ldr	r4, [r1, #4]
 80034c2:	6882      	ldr	r2, [r0, #8]
 80034c4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034c8:	4322      	orrs	r2, r4
 80034ca:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 80034ce:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80034d2:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034d4:	4a31      	ldr	r2, [pc, #196]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034d6:	4c34      	ldr	r4, [pc, #208]	@ (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034d8:	6895      	ldr	r5, [r2, #8]
 80034da:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80034de:	6892      	ldr	r2, [r2, #8]
 80034e0:	68a4      	ldr	r4, [r4, #8]
 80034e2:	07e4      	lsls	r4, r4, #31
 80034e4:	d40d      	bmi.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e6:	432a      	orrs	r2, r5
 80034e8:	43d2      	mvns	r2, r2
 80034ea:	f002 0201 	and.w	r2, r2, #1
 80034ee:	b142      	cbz	r2, 8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 80034f0:	6884      	ldr	r4, [r0, #8]
 80034f2:	688a      	ldr	r2, [r1, #8]
 80034f4:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 80034f8:	4332      	orrs	r2, r6
 80034fa:	f021 010f 	bic.w	r1, r1, #15
 80034fe:	430a      	orrs	r2, r1
 8003500:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003502:	2000      	movs	r0, #0
 8003504:	e7ca      	b.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8003506:	4829      	ldr	r0, [pc, #164]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8003508:	e7bf      	b.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800350a:	2002      	movs	r0, #2
}
 800350c:	b01d      	add	sp, #116	@ 0x74
 800350e:	bc70      	pop	{r4, r5, r6}
 8003510:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003512:	b1b6      	cbz	r6, 8003542 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003514:	4826      	ldr	r0, [pc, #152]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003516:	684c      	ldr	r4, [r1, #4]
 8003518:	6882      	ldr	r2, [r0, #8]
 800351a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800351e:	4322      	orrs	r2, r4
 8003520:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8003524:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8003528:	6082      	str	r2, [r0, #8]
 800352a:	481d      	ldr	r0, [pc, #116]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800352c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003530:	6892      	ldr	r2, [r2, #8]
 8003532:	6880      	ldr	r0, [r0, #8]
 8003534:	07c0      	lsls	r0, r0, #31
 8003536:	d4e4      	bmi.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003538:	43d2      	mvns	r2, r2
 800353a:	481d      	ldr	r0, [pc, #116]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800353c:	f002 0201 	and.w	r2, r2, #1
 8003540:	e7d5      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003542:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003544:	688a      	ldr	r2, [r1, #8]
 8003546:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800354a:	608a      	str	r2, [r1, #8]
 800354c:	4914      	ldr	r1, [pc, #80]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800354e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	6889      	ldr	r1, [r1, #8]
 8003556:	07cd      	lsls	r5, r1, #31
 8003558:	d4d3      	bmi.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800355a:	43d2      	mvns	r2, r2
 800355c:	4914      	ldr	r1, [pc, #80]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800355e:	f002 0201 	and.w	r2, r2, #1
 8003562:	2a00      	cmp	r2, #0
 8003564:	d0cd      	beq.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003566:	688a      	ldr	r2, [r1, #8]
 8003568:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 800356c:	f022 020f 	bic.w	r2, r2, #15
 8003570:	608a      	str	r2, [r1, #8]
 8003572:	e7c6      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003574:	490b      	ldr	r1, [pc, #44]	@ (80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003576:	4c09      	ldr	r4, [pc, #36]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800357e:	608a      	str	r2, [r1, #8]
 8003580:	68a4      	ldr	r4, [r4, #8]
 8003582:	f8d0 2408 	ldr.w	r2, [r0, #1032]	@ 0x408
 8003586:	f500 60a0 	add.w	r0, r0, #1280	@ 0x500
 800358a:	6880      	ldr	r0, [r0, #8]
 800358c:	07c5      	lsls	r5, r0, #31
 800358e:	d4b8      	bmi.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003590:	4322      	orrs	r2, r4
 8003592:	43d2      	mvns	r2, r2
 8003594:	f002 0201 	and.w	r2, r2, #1
 8003598:	e7e3      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800359a:	bf00      	nop
 800359c:	50000400 	.word	0x50000400
 80035a0:	50000100 	.word	0x50000100
 80035a4:	50000700 	.word	0x50000700
 80035a8:	50000600 	.word	0x50000600
 80035ac:	50000500 	.word	0x50000500
 80035b0:	50000300 	.word	0x50000300

080035b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b4:	4907      	ldr	r1, [pc, #28]	@ (80035d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80035ce:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_NVIC_SetPriority+0x70>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e2:	f1c3 0e07 	rsb	lr, r3, #7
 80035e6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ee:	bf28      	it	cs
 80035f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f4:	f1bc 0f06 	cmp.w	ip, #6
 80035f8:	d91c      	bls.n	8003634 <HAL_NVIC_SetPriority+0x5c>
 80035fa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	fa03 f30c 	lsl.w	r3, r3, ip
 8003606:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	fa03 f30e 	lsl.w	r3, r3, lr
 8003612:	ea21 0303 	bic.w	r3, r1, r3
 8003616:	fa03 f30c 	lsl.w	r3, r3, ip
 800361a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800361e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003622:	db0a      	blt.n	800363a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003628:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800362c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003630:	f85d fb04 	ldr.w	pc, [sp], #4
 8003634:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003636:	4694      	mov	ip, r2
 8003638:	e7e7      	b.n	800360a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	4a04      	ldr	r2, [pc, #16]	@ (800364c <HAL_NVIC_SetPriority+0x74>)
 800363c:	f000 000f 	and.w	r0, r0, #15
 8003640:	4402      	add	r2, r0
 8003642:	7613      	strb	r3, [r2, #24]
 8003644:	f85d fb04 	ldr.w	pc, [sp], #4
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	e000ecfc 	.word	0xe000ecfc

08003650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003650:	2800      	cmp	r0, #0
 8003652:	db07      	blt.n	8003664 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003654:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <HAL_NVIC_EnableIRQ+0x18>)
 8003656:	0941      	lsrs	r1, r0, #5
 8003658:	2301      	movs	r3, #1
 800365a:	f000 001f 	and.w	r0, r0, #31
 800365e:	4083      	lsls	r3, r0
 8003660:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100

0800366c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	3801      	subs	r0, #1
 800366e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003672:	d301      	bcc.n	8003678 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003674:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003676:	4770      	bx	lr
{
 8003678:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367e:	4c07      	ldr	r4, [pc, #28]	@ (800369c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003680:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003686:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800368e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	619a      	str	r2, [r3, #24]
}
 8003692:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	6119      	str	r1, [r3, #16]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d036      	beq.n	8003712 <HAL_CRC_Init+0x72>
{
 80036a4:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80036a6:	7f43      	ldrb	r3, [r0, #29]
 80036a8:	4604      	mov	r4, r0
 80036aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036ae:	b363      	cbz	r3, 800370a <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80036b0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80036b2:	2202      	movs	r2, #2
 80036b4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80036b6:	b9f3      	cbnz	r3, 80036f6 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_CRC_Init+0x78>)
 80036bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	f022 0218 	bic.w	r2, r2, #24
 80036c4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80036c6:	7962      	ldrb	r2, [r4, #5]
 80036c8:	b18a      	cbz	r2, 80036ee <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80036ca:	6922      	ldr	r2, [r4, #16]
 80036cc:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	6961      	ldr	r1, [r4, #20]
 80036d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69a1      	ldr	r1, [r4, #24]
 80036de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e2:	430a      	orrs	r2, r1
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036e4:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036e6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80036e8:	7761      	strb	r1, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295
 80036f2:	611a      	str	r2, [r3, #16]
 80036f4:	e7eb      	b.n	80036ce <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80036f6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 f80e 	bl	800371c <HAL_CRCEx_Polynomial_Set>
 8003700:	b908      	cbnz	r0, 8003706 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	e7df      	b.n	80036c6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 8003706:	2001      	movs	r0, #1
}
 8003708:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800370a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800370c:	f7fd fe08 	bl	8001320 <HAL_CRC_MspInit>
 8003710:	e7ce      	b.n	80036b0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8003712:	2001      	movs	r0, #1
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	04c11db7 	.word	0x04c11db7

0800371c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800371c:	07cb      	lsls	r3, r1, #31
 800371e:	d51a      	bpl.n	8003756 <HAL_CRCEx_Polynomial_Set+0x3a>
{
 8003720:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003722:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003724:	3b01      	subs	r3, #1
 8003726:	1c5c      	adds	r4, r3, #1
 8003728:	fa21 fc03 	lsr.w	ip, r1, r3
 800372c:	d015      	beq.n	800375a <HAL_CRCEx_Polynomial_Set+0x3e>
 800372e:	f01c 0f01 	tst.w	ip, #1
 8003732:	d0f7      	beq.n	8003724 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8003734:	2a18      	cmp	r2, #24
 8003736:	d811      	bhi.n	800375c <HAL_CRCEx_Polynomial_Set+0x40>
 8003738:	e8df f002 	tbb	[pc, r2]
 800373c:	10101016 	.word	0x10101016
 8003740:	10101010 	.word	0x10101010
 8003744:	10101024 	.word	0x10101024
 8003748:	10101010 	.word	0x10101010
 800374c:	10101021 	.word	0x10101021
 8003750:	10101010 	.word	0x10101010
 8003754:	14          	.byte	0x14
 8003755:	00          	.byte	0x00
 8003756:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8003758:	4770      	bx	lr
    switch (PolyLength)
 800375a:	b12a      	cbz	r2, 8003768 <HAL_CRCEx_Polynomial_Set+0x4c>
 800375c:	2001      	movs	r0, #1
}
 800375e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003762:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 8003764:	2b06      	cmp	r3, #6
 8003766:	d8f9      	bhi.n	800375c <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003768:	6804      	ldr	r4, [r0, #0]
 800376a:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800376c:	68a3      	ldr	r3, [r4, #8]
 800376e:	f023 0318 	bic.w	r3, r3, #24
 8003772:	4313      	orrs	r3, r2
 8003774:	2000      	movs	r0, #0
 8003776:	60a3      	str	r3, [r4, #8]
}
 8003778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800377c:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 800377e:	2b07      	cmp	r3, #7
 8003780:	d9f2      	bls.n	8003768 <HAL_CRCEx_Polynomial_Set+0x4c>
 8003782:	e7eb      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d9ef      	bls.n	8003768 <HAL_CRCEx_Polynomial_Set+0x4c>
 8003788:	e7e8      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0x40>
 800378a:	bf00      	nop

0800378c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800378c:	2800      	cmp	r0, #0
 800378e:	d076      	beq.n	800387e <HAL_DMA_Init+0xf2>
{
 8003790:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003792:	4a3c      	ldr	r2, [pc, #240]	@ (8003884 <HAL_DMA_Init+0xf8>)
 8003794:	6804      	ldr	r4, [r0, #0]
 8003796:	4294      	cmp	r4, r2
 8003798:	4603      	mov	r3, r0
 800379a:	d95c      	bls.n	8003856 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800379c:	493a      	ldr	r1, [pc, #232]	@ (8003888 <HAL_DMA_Init+0xfc>)
 800379e:	4a3b      	ldr	r2, [pc, #236]	@ (800388c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80037a0:	483b      	ldr	r0, [pc, #236]	@ (8003890 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037a2:	4421      	add	r1, r4
 80037a4:	fba2 2101 	umull	r2, r1, r2, r1
 80037a8:	0909      	lsrs	r1, r1, #4
 80037aa:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ac:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ae:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80037b4:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037b6:	4e35      	ldr	r6, [pc, #212]	@ (800388c <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037b8:	4f36      	ldr	r7, [pc, #216]	@ (8003894 <HAL_DMA_Init+0x108>)
 80037ba:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037be:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80037c0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	4302      	orrs	r2, r0
 80037c4:	6958      	ldr	r0, [r3, #20]
 80037c6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c8:	6998      	ldr	r0, [r3, #24]
 80037ca:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 80037cc:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037ce:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d2:	69d8      	ldr	r0, [r3, #28]
 80037d4:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037d6:	b2e0      	uxtb	r0, r4
 80037d8:	3808      	subs	r0, #8
 80037da:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80037de:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037e0:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e4:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 80037e6:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 80037ea:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037ec:	4e25      	ldr	r6, [pc, #148]	@ (8003884 <HAL_DMA_Init+0xf8>)
 80037ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003898 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037f0:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037f4:	42b4      	cmp	r4, r6
 80037f6:	bf98      	it	ls
 80037f8:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037fa:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037fe:	2401      	movs	r4, #1
 8003800:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003804:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003806:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800380a:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800380e:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003810:	649e      	str	r6, [r3, #72]	@ 0x48
 8003812:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003816:	d027      	beq.n	8003868 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003818:	685e      	ldr	r6, [r3, #4]
 800381a:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800381c:	3e01      	subs	r6, #1
 800381e:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003820:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003824:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003828:	d824      	bhi.n	8003874 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800382a:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800382c:	481c      	ldr	r0, [pc, #112]	@ (80038a0 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800382e:	442a      	add	r2, r5
 8003830:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003832:	3d01      	subs	r5, #1
 8003834:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003836:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003838:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800383c:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800383e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003840:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <HAL_DMA_Init+0x118>)
 8003842:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003844:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8003846:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800384a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800384e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8003852:	bcf0      	pop	{r4, r5, r6, r7}
 8003854:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003856:	4914      	ldr	r1, [pc, #80]	@ (80038a8 <HAL_DMA_Init+0x11c>)
 8003858:	4a0c      	ldr	r2, [pc, #48]	@ (800388c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 800385a:	4814      	ldr	r0, [pc, #80]	@ (80038ac <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800385c:	4421      	add	r1, r4
 800385e:	fba2 2101 	umull	r2, r1, r2, r1
 8003862:	0909      	lsrs	r1, r1, #4
 8003864:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8003866:	e7a1      	b.n	80037ac <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003868:	2400      	movs	r4, #0
 800386a:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800386c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003870:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8003874:	2200      	movs	r2, #0
 8003876:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800387c:	e7e2      	b.n	8003844 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40020407 	.word	0x40020407
 8003888:	bffdfbf8 	.word	0xbffdfbf8
 800388c:	cccccccd 	.word	0xcccccccd
 8003890:	40020400 	.word	0x40020400
 8003894:	40020800 	.word	0x40020800
 8003898:	40020820 	.word	0x40020820
 800389c:	1000823f 	.word	0x1000823f
 80038a0:	40020940 	.word	0x40020940
 80038a4:	40020900 	.word	0x40020900
 80038a8:	bffdfff8 	.word	0xbffdfff8
 80038ac:	40020000 	.word	0x40020000

080038b0 <HAL_DMA_Start_IT>:
{
 80038b0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80038b2:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 80038b6:	2c01      	cmp	r4, #1
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_Start_IT+0x1e>
 80038ba:	2401      	movs	r4, #1
 80038bc:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80038c0:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 80038c4:	2c01      	cmp	r4, #1
 80038c6:	d005      	beq.n	80038d4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80038c8:	2300      	movs	r3, #0
 80038ca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 80038ce:	2002      	movs	r0, #2
}
 80038d0:	bcf0      	pop	{r4, r5, r6, r7}
 80038d2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	2402      	movs	r4, #2
 80038d6:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038da:	2400      	movs	r4, #0
 80038dc:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80038de:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e0:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80038e2:	6825      	ldr	r5, [r4, #0]
 80038e4:	f025 0501 	bic.w	r5, r5, #1
 80038e8:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ea:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 80038ee:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80038f0:	b115      	cbz	r5, 80038f8 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f2:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 80038f6:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f8:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80038fa:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80038fc:	f006 0c1f 	and.w	ip, r6, #31
 8003900:	2601      	movs	r6, #1
 8003902:	fa06 f60c 	lsl.w	r6, r6, ip
 8003906:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003908:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800390a:	6883      	ldr	r3, [r0, #8]
 800390c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800390e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8003910:	bf0b      	itete	eq
 8003912:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003914:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003916:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003918:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800391a:	b1bb      	cbz	r3, 800394c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f043 030e 	orr.w	r3, r3, #14
 8003922:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003924:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	03d2      	lsls	r2, r2, #15
 800392a:	d503      	bpl.n	8003934 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003932:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003934:	b11d      	cbz	r5, 800393e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003946:	6023      	str	r3, [r4, #0]
}
 8003948:	bcf0      	pop	{r4, r5, r6, r7}
 800394a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f043 030a 	orr.w	r3, r3, #10
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	e7e2      	b.n	8003924 <HAL_DMA_Start_IT+0x74>
 800395e:	bf00      	nop

08003960 <HAL_DMA_IRQHandler>:
{
 8003960:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003962:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003964:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003966:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003968:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800396a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	420a      	tst	r2, r1
 8003976:	d00e      	beq.n	8003996 <HAL_DMA_IRQHandler+0x36>
 8003978:	f014 0f04 	tst.w	r4, #4
 800397c:	d00b      	beq.n	8003996 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397e:	682b      	ldr	r3, [r5, #0]
 8003980:	069b      	lsls	r3, r3, #26
 8003982:	d403      	bmi.n	800398c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800398c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800398e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003990:	b1cb      	cbz	r3, 80039c6 <HAL_DMA_IRQHandler+0x66>
}
 8003992:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003994:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003996:	2202      	movs	r2, #2
 8003998:	409a      	lsls	r2, r3
 800399a:	420a      	tst	r2, r1
 800399c:	d015      	beq.n	80039ca <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800399e:	f014 0f02 	tst.w	r4, #2
 80039a2:	d012      	beq.n	80039ca <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	0699      	lsls	r1, r3, #26
 80039a8:	d406      	bmi.n	80039b8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	f023 030a 	bic.w	r3, r3, #10
 80039b0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 80039b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ba:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80039bc:	2100      	movs	r1, #0
 80039be:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <HAL_DMA_IRQHandler+0x32>
}
 80039c6:	bc70      	pop	{r4, r5, r6}
 80039c8:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039ca:	2208      	movs	r2, #8
 80039cc:	409a      	lsls	r2, r3
 80039ce:	420a      	tst	r2, r1
 80039d0:	d0f9      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 80039d2:	0722      	lsls	r2, r4, #28
 80039d4:	d5f7      	bpl.n	80039c6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d6:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80039d8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039da:	f022 020e 	bic.w	r2, r2, #14
 80039de:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80039e6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ea:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80039ec:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80039f0:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d0e6      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x66>
}
 80039f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80039fa:	4708      	bx	r1

080039fc <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f000 811c 	beq.w	8003c3a <HAL_FDCAN_Init+0x23e>
{
 8003a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a06:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d073      	beq.n	8003afc <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	6993      	ldr	r3, [r2, #24]
 8003a18:	f023 0310 	bic.w	r3, r3, #16
 8003a1c:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1e:	f7fe fdab 	bl	8002578 <HAL_GetTick>
 8003a22:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a24:	e004      	b.n	8003a30 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a26:	f7fe fda7 	bl	8002578 <HAL_GetTick>
 8003a2a:	1b40      	subs	r0, r0, r5
 8003a2c:	280a      	cmp	r0, #10
 8003a2e:	d85b      	bhi.n	8003ae8 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	0712      	lsls	r2, r2, #28
 8003a36:	d4f6      	bmi.n	8003a26 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a40:	f7fe fd9a 	bl	8002578 <HAL_GetTick>
 8003a44:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a46:	e004      	b.n	8003a52 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a48:	f7fe fd96 	bl	8002578 <HAL_GetTick>
 8003a4c:	1b40      	subs	r0, r0, r5
 8003a4e:	280a      	cmp	r0, #10
 8003a50:	d84a      	bhi.n	8003ae8 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	698b      	ldr	r3, [r1, #24]
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	d5f6      	bpl.n	8003a48 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a5a:	698b      	ldr	r3, [r1, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8003c5c <HAL_FDCAN_Init+0x260>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8003a62:	4291      	cmp	r1, r2
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a64:	618b      	str	r3, [r1, #24]
  if (hfdcan->Instance == FDCAN1)
 8003a66:	f000 80d5 	beq.w	8003c14 <HAL_FDCAN_Init+0x218>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a6a:	7c23      	ldrb	r3, [r4, #16]
 8003a6c:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a6e:	698b      	ldr	r3, [r1, #24]
 8003a70:	bf0c      	ite	eq
 8003a72:	f023 0340 	biceq.w	r3, r3, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a76:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
 8003a7a:	618b      	str	r3, [r1, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a7c:	7c63      	ldrb	r3, [r4, #17]
 8003a7e:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a80:	698b      	ldr	r3, [r1, #24]
 8003a82:	bf0c      	ite	eq
 8003a84:	f443 4380 	orreq.w	r3, r3, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a88:	f423 4380 	bicne.w	r3, r3, #16384	@ 0x4000
 8003a8c:	618b      	str	r3, [r1, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003a8e:	7ca3      	ldrb	r3, [r4, #18]
 8003a90:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a92:	698b      	ldr	r3, [r1, #24]
 8003a94:	bf0c      	ite	eq
 8003a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a9e:	618b      	str	r3, [r1, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003aa0:	698b      	ldr	r3, [r1, #24]
 8003aa2:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003aa4:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aaa:	4303      	orrs	r3, r0
 8003aac:	618b      	str	r3, [r1, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003aae:	698b      	ldr	r3, [r1, #24]
 8003ab0:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 8003ab4:	618b      	str	r3, [r1, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ab6:	690b      	ldr	r3, [r1, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ab8:	2a01      	cmp	r2, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	610b      	str	r3, [r1, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ac0:	d021      	beq.n	8003b06 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ac2:	b322      	cbz	r2, 8003b0e <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003ac4:	2a02      	cmp	r2, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ac6:	698b      	ldr	r3, [r1, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003ac8:	f000 80c4 	beq.w	8003c54 <HAL_FDCAN_Init+0x258>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad0:	618b      	str	r3, [r1, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ad2:	690b      	ldr	r3, [r1, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ad4:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ad6:	f043 0310 	orr.w	r3, r3, #16
 8003ada:	610b      	str	r3, [r1, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003adc:	d117      	bne.n	8003b0e <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ade:	698b      	ldr	r3, [r1, #24]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	618b      	str	r3, [r1, #24]
 8003ae6:	e012      	b.n	8003b0e <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ae8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003aea:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003af2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8003afc:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8003b00:	f7fd fca6 	bl	8001450 <HAL_FDCAN_MspInit>
 8003b04:	e786      	b.n	8003a14 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b06:	698b      	ldr	r3, [r1, #24]
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	618b      	str	r3, [r1, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b0e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b12:	3b01      	subs	r3, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b14:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b16:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b18:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b1c:	6a22      	ldr	r2, [r4, #32]
 8003b1e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b20:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003b22:	6962      	ldr	r2, [r4, #20]
 8003b24:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003b2a:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b2e:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003b30:	d10e      	bne.n	8003b50 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b32:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b36:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b38:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b3a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b3c:	011b      	lsls	r3, r3, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b3e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003b44:	4313      	orrs	r3, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003b46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003b48:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b4e:	60cb      	str	r3, [r1, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b50:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
 8003b54:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003b56:	4a42      	ldr	r2, [pc, #264]	@ (8003c60 <HAL_FDCAN_Init+0x264>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b58:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8003b5a:	4291      	cmp	r1, r2
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b5c:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
  if (hfdcan->Instance == FDCAN2)
 8003b60:	d06d      	beq.n	8003c3e <HAL_FDCAN_Init+0x242>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003b62:	4840      	ldr	r0, [pc, #256]	@ (8003c64 <HAL_FDCAN_Init+0x268>)
 8003b64:	4b40      	ldr	r3, [pc, #256]	@ (8003c68 <HAL_FDCAN_Init+0x26c>)
 8003b66:	4e41      	ldr	r6, [pc, #260]	@ (8003c6c <HAL_FDCAN_Init+0x270>)
 8003b68:	4d41      	ldr	r5, [pc, #260]	@ (8003c70 <HAL_FDCAN_Init+0x274>)
 8003b6a:	4f42      	ldr	r7, [pc, #264]	@ (8003c74 <HAL_FDCAN_Init+0x278>)
 8003b6c:	4281      	cmp	r1, r0
 8003b6e:	f502 527d 	add.w	r2, r2, #16192	@ 0x3f40
 8003b72:	f102 0210 	add.w	r2, r2, #16
 8003b76:	bf08      	it	eq
 8003b78:	461a      	moveq	r2, r3
 8003b7a:	f1a3 03d8 	sub.w	r3, r3, #216	@ 0xd8
 8003b7e:	bf08      	it	eq
 8003b80:	4698      	moveq	r8, r3
 8003b82:	f500 5062 	add.w	r0, r0, #14464	@ 0x3880
 8003b86:	f1a3 0318 	sub.w	r3, r3, #24
 8003b8a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8003b8e:	bf08      	it	eq
 8003b90:	461e      	moveq	r6, r3
 8003b92:	f1a3 03d8 	sub.w	r3, r3, #216	@ 0xd8
 8003b96:	bf0c      	ite	eq
 8003b98:	461f      	moveq	r7, r3
 8003b9a:	4684      	movne	ip, r0
 8003b9c:	f1a3 03d8 	sub.w	r3, r3, #216	@ 0xd8
 8003ba0:	f1a0 0040 	sub.w	r0, r0, #64	@ 0x40
 8003ba4:	bf0c      	ite	eq
 8003ba6:	469c      	moveq	ip, r3
 8003ba8:	4686      	movne	lr, r0
 8003baa:	f1a3 0340 	sub.w	r3, r3, #64	@ 0x40
 8003bae:	f500 60c6 	add.w	r0, r0, #1584	@ 0x630
 8003bb2:	bf0c      	ite	eq
 8003bb4:	469e      	moveq	lr, r3
 8003bb6:	46a8      	movne	r8, r5
 8003bb8:	f5a3 63e2 	sub.w	r3, r3, #1808	@ 0x710
 8003bbc:	bf08      	it	eq
 8003bbe:	4603      	moveq	r3, r0

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003bc0:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
 8003bc4:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003bc6:	6423      	str	r3, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003bc8:	f420 10f8 	bic.w	r0, r0, #2031616	@ 0x1f0000
 8003bcc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003bd0:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003bd4:	f8d1 0080 	ldr.w	r0, [r1, #128]	@ 0x80
 8003bd8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003bda:	f8c4 e044 	str.w	lr, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003bde:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 8003be2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8003be6:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	4291      	cmp	r1, r2

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003bee:	e9c4 c712 	strd	ip, r7, [r4, #72]	@ 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003bf2:	6526      	str	r6, [r4, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003bf4:	f8c4 8054 	str.w	r8, [r4, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003bf8:	d911      	bls.n	8003c1e <HAL_FDCAN_Init+0x222>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d3fb      	bcc.n	8003bfc <HAL_FDCAN_Init+0x200>
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c04:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c06:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c08:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c0a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c0e:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8003c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003c14:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <HAL_FDCAN_Init+0x27c>)
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8003c1c:	e725      	b.n	8003a6a <HAL_FDCAN_Init+0x6e>
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	0892      	lsrs	r2, r2, #2
 8003c24:	3201      	adds	r2, #1
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	2100      	movs	r1, #0
 8003c30:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1fb      	bne.n	8003c30 <HAL_FDCAN_Init+0x234>
 8003c38:	e7e4      	b.n	8003c04 <HAL_FDCAN_Init+0x208>
    return HAL_ERROR;
 8003c3a:	2001      	movs	r0, #1
}
 8003c3c:	4770      	bx	lr
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8003c7c <HAL_FDCAN_Init+0x280>)
 8003c40:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8003c8c <HAL_FDCAN_Init+0x290>
 8003c44:	4e0e      	ldr	r6, [pc, #56]	@ (8003c80 <HAL_FDCAN_Init+0x284>)
 8003c46:	4f0f      	ldr	r7, [pc, #60]	@ (8003c84 <HAL_FDCAN_Init+0x288>)
 8003c48:	f8df c044 	ldr.w	ip, [pc, #68]	@ 8003c90 <HAL_FDCAN_Init+0x294>
 8003c4c:	f8df e044 	ldr.w	lr, [pc, #68]	@ 8003c94 <HAL_FDCAN_Init+0x298>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_FDCAN_Init+0x28c>)
 8003c52:	e7b5      	b.n	8003bc0 <HAL_FDCAN_Init+0x1c4>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c54:	f043 0320 	orr.w	r3, r3, #32
 8003c58:	618b      	str	r3, [r1, #24]
 8003c5a:	e758      	b.n	8003b0e <HAL_FDCAN_Init+0x112>
 8003c5c:	40006400 	.word	0x40006400
 8003c60:	40006800 	.word	0x40006800
 8003c64:	40006c00 	.word	0x40006c00
 8003c68:	4000adf0 	.word	0x4000adf0
 8003c6c:	4000a660 	.word	0x4000a660
 8003c70:	4000a678 	.word	0x4000a678
 8003c74:	4000a588 	.word	0x4000a588
 8003c78:	40006000 	.word	0x40006000
 8003c7c:	4000aaa0 	.word	0x4000aaa0
 8003c80:	4000a9b0 	.word	0x4000a9b0
 8003c84:	4000a8d8 	.word	0x4000a8d8
 8003c88:	4000a750 	.word	0x4000a750
 8003c8c:	4000a9c8 	.word	0x4000a9c8
 8003c90:	4000a800 	.word	0x4000a800
 8003c94:	4000a7c0 	.word	0x4000a7c0

08003c98 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c98:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	2a01      	cmp	r2, #1
{
 8003ca0:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003ca2:	d905      	bls.n	8003cb0 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ca4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003ca6:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003cac:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8003cae:	4770      	bx	lr
{
 8003cb0:	b470      	push	{r4, r5, r6}
                         (sFilterConfig->FilterConfig << 27U) |
 8003cb2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003cb6:	680e      	ldr	r6, [r1, #0]
                         (sFilterConfig->FilterID1 << 16U)    |
 8003cb8:	6908      	ldr	r0, [r1, #16]
                         sFilterConfig->FilterID2);
 8003cba:	694c      	ldr	r4, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003cbc:	6849      	ldr	r1, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003cbe:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003cc0:	b956      	cbnz	r6, 8003cd8 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003cc2:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 8003cc6:	4322      	orrs	r2, r4
      *FilterAddress = FilterElementW1;
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003cca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
}
 8003cce:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
      *FilterAddress = FilterElementW1;
 8003cd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003cd6:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003cda:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8003cde:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003ce2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003ce6:	4322      	orrs	r2, r4
    return HAL_OK;
 8003ce8:	2000      	movs	r0, #0
}
 8003cea:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 8003cec:	605a      	str	r2, [r3, #4]
}
 8003cee:	4770      	bx	lr

08003cf0 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8003cf0:	4684      	mov	ip, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003cf2:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 8003cf6:	2801      	cmp	r0, #1
 8003cf8:	d007      	beq.n	8003d0a <HAL_FDCAN_ConfigGlobalFilter+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003cfa:	f8dc 3060 	ldr.w	r3, [ip, #96]	@ 0x60
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d04:	f8cc 3060 	str.w	r3, [ip, #96]	@ 0x60
}
 8003d08:	4770      	bx	lr
{
 8003d0a:	b410      	push	{r4}
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003d0c:	9801      	ldr	r0, [sp, #4]
 8003d0e:	f8dc 4000 	ldr.w	r4, [ip]
 8003d12:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
 8003d16:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003d1a:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8003d1e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8003d22:	f020 033f 	bic.w	r3, r0, #63	@ 0x3f
 8003d26:	430b      	orrs	r3, r1
 8003d28:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8003d2c:	2000      	movs	r0, #0
}
 8003d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_FDCAN_ConfigTxDelayCompensation>:
{
 8003d34:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d36:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 8003d3a:	2801      	cmp	r0, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_FDCAN_ConfigTxDelayCompensation+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d40:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8003d44:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d46:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8003d48:	4770      	bx	lr
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d50:	649a      	str	r2, [r3, #72]	@ 0x48
    return HAL_OK;
 8003d52:	2000      	movs	r0, #0
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d58:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8003d5c:	2a01      	cmp	r2, #1
{
 8003d5e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d60:	d005      	beq.n	8003d6e <HAL_FDCAN_EnableTxDelayCompensation+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d62:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003d64:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8003d68:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d6a:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8003d6c:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8003d6e:	6802      	ldr	r2, [r0, #0]
 8003d70:	68d3      	ldr	r3, [r2, #12]
 8003d72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
    return HAL_OK;
 8003d76:	2000      	movs	r0, #0
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8003d78:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003d7a:	4770      	bx	lr

08003d7c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d7c:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8003d80:	2a01      	cmp	r2, #1
{
 8003d82:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d84:	d005      	beq.n	8003d92 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d86:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003d88:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d8e:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8003d90:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d92:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d9a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d9c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8003da4:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003da6:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003dae:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003db2:	2b02      	cmp	r3, #2
{
 8003db4:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003db6:	d10b      	bne.n	8003dd0 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003db8:	6805      	ldr	r5, [r0, #0]
 8003dba:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 8003dbe:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 8003dc2:	d00b      	beq.n	8003ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003dc4:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dca:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8003dcc:	2001      	movs	r0, #1
}
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003dd0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8003dd8:	2001      	movs	r0, #1
}
 8003dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003ddc:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003de0:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003de2:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003de4:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8003de6:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003de8:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d137      	bne.n	8003e60 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 8003df0:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003df2:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8003df6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8003dfa:	4303      	orrs	r3, r0
 8003dfc:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 8003dfe:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 8003e00:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e02:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 8003e04:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e0c:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 8003e10:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e14:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e18:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e1c:	4c13      	ldr	r4, [pc, #76]	@ (8003e6c <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 8003e1e:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e20:	68cb      	ldr	r3, [r1, #12]
 8003e22:	5ce3      	ldrb	r3, [r4, r3]
 8003e24:	b1a3      	cbz	r3, 8003e50 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e26:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e28:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e2a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e2c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8003e30:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e32:	433b      	orrs	r3, r7
 8003e34:	7857      	ldrb	r7, [r2, #1]
 8003e36:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e3a:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e3e:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e42:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e44:	68cb      	ldr	r3, [r1, #12]
 8003e46:	5ce3      	ldrb	r3, [r4, r3]
 8003e48:	459c      	cmp	ip, r3
 8003e4a:	f102 0204 	add.w	r2, r2, #4
 8003e4e:	d3ea      	bcc.n	8003e26 <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003e50:	2301      	movs	r3, #1
 8003e52:	40b3      	lsls	r3, r6
 8003e54:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 8003e58:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e5a:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 8003e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8003e60:	4327      	orrs	r7, r4
 8003e62:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e64:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 8003e68:	e7c5      	b.n	8003df6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 8003e6a:	bf00      	nop
 8003e6c:	0800ac68 	.word	0x0800ac68

08003e70 <HAL_FDCAN_GetRxMessage>:
{
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e74:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8003e78:	2c02      	cmp	r4, #2
 8003e7a:	d10d      	bne.n	8003e98 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e7c:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003e7e:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e80:	d010      	beq.n	8003ea4 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003e82:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8003e86:	0727      	lsls	r7, r4, #28
 8003e88:	d16f      	bne.n	8003f6a <HAL_FDCAN_GetRxMessage+0xfa>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e8a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e90:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8003e92:	2001      	movs	r0, #1
}
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e98:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e7f7      	b.n	8003e94 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ea4:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8003ea8:	0727      	lsls	r7, r4, #28
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003eac:	f8d5 6090 	ldr.w	r6, [r5, #144]	@ 0x90
 8003eb0:	f3c6 6400 	ubfx	r4, r6, #24, #1
 8003eb4:	01f6      	lsls	r6, r6, #7
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003eb6:	bf48      	it	mi
 8003eb8:	f8d5 4080 	ldrmi.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ebc:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ec0:	bf48      	it	mi
 8003ec2:	f3c4 2440 	ubfxmi	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ec6:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8003eca:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003ece:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003ed0:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 8003ed4:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003ed8:	6826      	ldr	r6, [r4, #0]
 8003eda:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8003ede:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ee0:	2e00      	cmp	r6, #0
 8003ee2:	d15e      	bne.n	8003fa2 <HAL_FDCAN_GetRxMessage+0x132>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003ee4:	6826      	ldr	r6, [r4, #0]
 8003ee6:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8003eea:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003eec:	6826      	ldr	r6, [r4, #0]
 8003eee:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 8003ef2:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003ef4:	6826      	ldr	r6, [r4, #0]
 8003ef6:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8003efa:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003efc:	88a6      	ldrh	r6, [r4, #4]
 8003efe:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003f00:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8003f04:	f00c 0c0f 	and.w	ip, ip, #15
 8003f08:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003f0c:	6866      	ldr	r6, [r4, #4]
 8003f0e:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 8003f12:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003f14:	6866      	ldr	r6, [r4, #4]
 8003f16:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 8003f1a:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003f1c:	79e6      	ldrb	r6, [r4, #7]
 8003f1e:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 8003f22:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f24:	4e22      	ldr	r6, [pc, #136]	@ (8003fb0 <HAL_FDCAN_GetRxMessage+0x140>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003f26:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f28:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003f2c:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 8003f30:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f34:	f1be 0f00 	cmp.w	lr, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_FDCAN_GetRxMessage+0xec>
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8003f40:	46f4      	mov	ip, lr
 8003f42:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 8003f46:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f4a:	68d5      	ldr	r5, [r2, #12]
 8003f4c:	f1ac 0c06 	sub.w	ip, ip, #6
 8003f50:	5d75      	ldrb	r5, [r6, r5]
 8003f52:	ebac 0c04 	sub.w	ip, ip, r4
 8003f56:	4565      	cmp	r5, ip
 8003f58:	d8f2      	bhi.n	8003f40 <HAL_FDCAN_GetRxMessage+0xd0>
 8003f5a:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003f5c:	2940      	cmp	r1, #64	@ 0x40
 8003f5e:	d024      	beq.n	8003faa <HAL_FDCAN_GetRxMessage+0x13a>
      hfdcan->Instance->RXF1A = GetIndex;
 8003f60:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 8003f64:	2000      	movs	r0, #0
}
 8003f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003f6a:	f8d5 6098 	ldr.w	r6, [r5, #152]	@ 0x98
 8003f6e:	f3c6 6400 	ubfx	r4, r6, #24, #1
 8003f72:	01f6      	lsls	r6, r6, #7
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f74:	bf48      	it	mi
 8003f76:	f8d5 4080 	ldrmi.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003f7a:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003f7e:	bf48      	it	mi
 8003f80:	f3c4 2400 	ubfxmi	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003f84:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8003f88:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003f8c:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8003f8e:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 8003f92:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003f96:	6826      	ldr	r6, [r4, #0]
 8003f98:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8003f9c:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003f9e:	2e00      	cmp	r6, #0
 8003fa0:	d0a0      	beq.n	8003ee4 <HAL_FDCAN_GetRxMessage+0x74>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003fa2:	6826      	ldr	r6, [r4, #0]
 8003fa4:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8003fa8:	e79f      	b.n	8003eea <HAL_FDCAN_GetRxMessage+0x7a>
      hfdcan->Instance->RXF0A = GetIndex;
 8003faa:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 8003fae:	e7d9      	b.n	8003f64 <HAL_FDCAN_GetRxMessage+0xf4>
 8003fb0:	0800ac68 	.word	0x0800ac68

08003fb4 <HAL_FDCAN_ActivateNotification>:
{
 8003fb4:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003fb6:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003fba:	3801      	subs	r0, #1
 8003fbc:	2801      	cmp	r0, #1
 8003fbe:	d905      	bls.n	8003fcc <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fc2:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8003fca:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003fcc:	681b      	ldr	r3, [r3, #0]
{
 8003fce:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003fd0:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003fd4:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003fd6:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003fda:	d009      	beq.n	8003ff0 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003fdc:	07c6      	lsls	r6, r0, #31
 8003fde:	d407      	bmi.n	8003ff0 <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003fe0:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8003fe2:	f045 0501 	orr.w	r5, r5, #1
 8003fe6:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003fe8:	b154      	cbz	r4, 8004000 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003fea:	0784      	lsls	r4, r0, #30
 8003fec:	d42f      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 8003fee:	e007      	b.n	8004000 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003ff0:	b304      	cbz	r4, 8004034 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003ff2:	0786      	lsls	r6, r0, #30
 8003ff4:	d41e      	bmi.n	8004034 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ff6:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8003ff8:	f046 0601 	orr.w	r6, r6, #1
 8003ffc:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003ffe:	bb25      	cbnz	r5, 800404a <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004000:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8004004:	d001      	beq.n	800400a <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004006:	0746      	lsls	r6, r0, #29
 8004008:	d421      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 800400a:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 800400e:	d001      	beq.n	8004014 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004010:	0705      	lsls	r5, r0, #28
 8004012:	d41c      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 8004014:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8004018:	d001      	beq.n	800401e <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800401a:	06c4      	lsls	r4, r0, #27
 800401c:	d417      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 800401e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8004022:	d001      	beq.n	8004028 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004024:	0686      	lsls	r6, r0, #26
 8004026:	d412      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 8004028:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 800402c:	d013      	beq.n	8004056 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800402e:	0645      	lsls	r5, r0, #25
 8004030:	d40d      	bmi.n	800404e <HAL_FDCAN_ActivateNotification+0x9a>
 8004032:	e010      	b.n	8004056 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004034:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8004038:	d021      	beq.n	800407e <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800403a:	0746      	lsls	r6, r0, #29
 800403c:	d41f      	bmi.n	800407e <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800403e:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8004040:	f046 0601 	orr.w	r6, r6, #1
 8004044:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004046:	2d00      	cmp	r5, #0
 8004048:	d0ce      	beq.n	8003fe8 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800404a:	07c5      	lsls	r5, r0, #31
 800404c:	d5cc      	bpl.n	8003fe8 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800404e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8004050:	f040 0002 	orr.w	r0, r0, #2
 8004054:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004056:	060c      	lsls	r4, r1, #24
 8004058:	d504      	bpl.n	8004064 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800405a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800405e:	4310      	orrs	r0, r2
 8004060:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004064:	05c8      	lsls	r0, r1, #23
 8004066:	d504      	bpl.n	8004072 <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004068:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800406c:	4302      	orrs	r2, r0
 800406e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004072:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004074:	430a      	orrs	r2, r1
    return HAL_OK;
 8004076:	2000      	movs	r0, #0
}
 8004078:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800407c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800407e:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 8004082:	d001      	beq.n	8004088 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004084:	0706      	lsls	r6, r0, #28
 8004086:	d5da      	bpl.n	800403e <HAL_FDCAN_ActivateNotification+0x8a>
 8004088:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 800408c:	d001      	beq.n	8004092 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800408e:	06c6      	lsls	r6, r0, #27
 8004090:	d5d5      	bpl.n	800403e <HAL_FDCAN_ActivateNotification+0x8a>
 8004092:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8004096:	d001      	beq.n	800409c <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004098:	0686      	lsls	r6, r0, #26
 800409a:	d5d0      	bpl.n	800403e <HAL_FDCAN_ActivateNotification+0x8a>
 800409c:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 80040a0:	d0d1      	beq.n	8004046 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80040a2:	0646      	lsls	r6, r0, #25
 80040a4:	d5cb      	bpl.n	800403e <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	d09e      	beq.n	8003fe8 <HAL_FDCAN_ActivateNotification+0x34>
 80040aa:	e7ce      	b.n	800404a <HAL_FDCAN_ActivateNotification+0x96>

080040ac <HAL_FDCAN_TxEventFifoCallback>:
}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop

080040b0 <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop

080040b8 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <HAL_FDCAN_IRQHandler>:
{
 80040d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80040d4:	6803      	ldr	r3, [r0, #0]
 80040d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80040d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040da:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80040de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80040e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040e2:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80040e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80040e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80040ea:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80040ec:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 80040f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80040f2:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 80040f4:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80040f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 80040f8:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 80040fc:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 80040fe:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004100:	0669      	lsls	r1, r5, #25
{
 8004102:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004104:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004108:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 800410c:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 8004110:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004114:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004118:	d502      	bpl.n	8004120 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800411a:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 800411e:	d172      	bne.n	8004206 <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004120:	05ea      	lsls	r2, r5, #23
 8004122:	d502      	bpl.n	800412a <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004124:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8004128:	d15d      	bne.n	80041e6 <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 800412a:	f1ba 0f00 	cmp.w	sl, #0
 800412e:	d14a      	bne.n	80041c6 <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 8004130:	f1b9 0f00 	cmp.w	r9, #0
 8004134:	d135      	bne.n	80041a2 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	d13c      	bne.n	80041b6 <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800413c:	05ab      	lsls	r3, r5, #22
 800413e:	d502      	bpl.n	8004146 <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004140:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8004144:	d174      	bne.n	8004230 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004146:	0628      	lsls	r0, r5, #24
 8004148:	d502      	bpl.n	8004150 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800414a:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 800414e:	d177      	bne.n	8004240 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004150:	04a9      	lsls	r1, r5, #18
 8004152:	d502      	bpl.n	800415a <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004154:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 8004158:	d15a      	bne.n	8004210 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800415a:	042a      	lsls	r2, r5, #16
 800415c:	d502      	bpl.n	8004164 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800415e:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8004162:	d15d      	bne.n	8004220 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004164:	046b      	lsls	r3, r5, #17
 8004166:	d50a      	bpl.n	800417e <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004168:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 800416c:	d007      	beq.n	800417e <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004174:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004176:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417c:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 800417e:	b94f      	cbnz	r7, 8004194 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8004180:	b126      	cbz	r6, 800418c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8004186:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004188:	4333      	orrs	r3, r6
 800418a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800418c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800418e:	bb2b      	cbnz	r3, 80041dc <HAL_FDCAN_IRQHandler+0x10c>
}
 8004190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004194:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004196:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004198:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800419a:	4620      	mov	r0, r4
 800419c:	f003 f8aa 	bl	80072f4 <HAL_FDCAN_ErrorStatusCallback>
 80041a0:	e7ee      	b.n	8004180 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80041a2:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80041a4:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80041a6:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80041aa:	4620      	mov	r0, r4
 80041ac:	f003 f84e 	bl	800724c <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	d0c2      	beq.n	800413c <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80041b6:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80041b8:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80041ba:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80041be:	4620      	mov	r0, r4
 80041c0:	f7ff ff76 	bl	80040b0 <HAL_FDCAN_RxFifo1Callback>
 80041c4:	e7ba      	b.n	800413c <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80041c6:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80041c8:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80041ca:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7ff ff6c 	bl	80040ac <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 80041d4:	f1b9 0f00 	cmp.w	r9, #0
 80041d8:	d0ad      	beq.n	8004136 <HAL_FDCAN_IRQHandler+0x66>
 80041da:	e7e2      	b.n	80041a2 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff ff75 	bl	80040cc <HAL_FDCAN_ErrorCallback>
}
 80041e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80041ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80041f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80041f4:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80041f6:	4011      	ands	r1, r2
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7ff ff5f 	bl	80040bc <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 80041fe:	f1ba 0f00 	cmp.w	sl, #0
 8004202:	d095      	beq.n	8004130 <HAL_FDCAN_IRQHandler+0x60>
 8004204:	e7df      	b.n	80041c6 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004206:	2240      	movs	r2, #64	@ 0x40
 8004208:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800420a:	f7ff ff5d 	bl	80040c8 <HAL_FDCAN_HighPriorityMessageCallback>
 800420e:	e787      	b.n	8004120 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004216:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff ff51 	bl	80040c0 <HAL_FDCAN_TimestampWraparoundCallback>
 800421e:	e79c      	b.n	800415a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004226:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff ff4b 	bl	80040c4 <HAL_FDCAN_TimeoutOccurredCallback>
 800422e:	e799      	b.n	8004164 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004236:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004238:	4620      	mov	r0, r4
 800423a:	f7ff ff3b 	bl	80040b4 <HAL_FDCAN_TxFifoEmptyCallback>
 800423e:	e782      	b.n	8004146 <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004246:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800424a:	2080      	movs	r0, #128	@ 0x80
 800424c:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800424e:	4011      	ands	r1, r2
 8004250:	4620      	mov	r0, r4
 8004252:	f7ff ff31 	bl	80040b8 <HAL_FDCAN_TxBufferCompleteCallback>
 8004256:	e77b      	b.n	8004150 <HAL_FDCAN_IRQHandler+0x80>

08004258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800425c:	680c      	ldr	r4, [r1, #0]
{
 800425e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004260:	2c00      	cmp	r4, #0
 8004262:	f000 8089 	beq.w	8004378 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8004266:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004268:	f04f 0b01 	mov.w	fp, #1
 800426c:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8004270:	ea1e 0a04 	ands.w	sl, lr, r4
 8004274:	d07b      	beq.n	800436e <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004276:	684d      	ldr	r5, [r1, #4]
 8004278:	f005 0203 	and.w	r2, r5, #3
 800427c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004280:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004282:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004286:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800428a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800428e:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004292:	d974      	bls.n	800437e <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004294:	2a03      	cmp	r2, #3
 8004296:	f040 80b0 	bne.w	80043fa <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800429e:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a2:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042a8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80042ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ae:	d05e      	beq.n	800436e <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b0:	4f66      	ldr	r7, [pc, #408]	@ (800444c <HAL_GPIO_Init+0x1f4>)
 80042b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	663a      	str	r2, [r7, #96]	@ 0x60
 80042ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042bc:	f002 0201 	and.w	r2, r2, #1
 80042c0:	9203      	str	r2, [sp, #12]
 80042c2:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c4:	f023 0203 	bic.w	r2, r3, #3
 80042c8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80042cc:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80042d4:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80042da:	260f      	movs	r6, #15
 80042dc:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042e0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042e4:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042e8:	d01d      	beq.n	8004326 <HAL_GPIO_Init+0xce>
 80042ea:	4e59      	ldr	r6, [pc, #356]	@ (8004450 <HAL_GPIO_Init+0x1f8>)
 80042ec:	42b0      	cmp	r0, r6
 80042ee:	f000 8097 	beq.w	8004420 <HAL_GPIO_Init+0x1c8>
 80042f2:	4e58      	ldr	r6, [pc, #352]	@ (8004454 <HAL_GPIO_Init+0x1fc>)
 80042f4:	42b0      	cmp	r0, r6
 80042f6:	f000 809a 	beq.w	800442e <HAL_GPIO_Init+0x1d6>
 80042fa:	f8df e160 	ldr.w	lr, [pc, #352]	@ 800445c <HAL_GPIO_Init+0x204>
 80042fe:	4570      	cmp	r0, lr
 8004300:	f000 8087 	beq.w	8004412 <HAL_GPIO_Init+0x1ba>
 8004304:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8004460 <HAL_GPIO_Init+0x208>
 8004308:	4570      	cmp	r0, lr
 800430a:	f000 8097 	beq.w	800443c <HAL_GPIO_Init+0x1e4>
 800430e:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8004464 <HAL_GPIO_Init+0x20c>
 8004312:	4570      	cmp	r0, lr
 8004314:	bf0c      	ite	eq
 8004316:	f04f 0e05 	moveq.w	lr, #5
 800431a:	f04f 0e06 	movne.w	lr, #6
 800431e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004322:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004326:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004328:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_GPIO_Init+0x200>)
 800432a:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800432c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800432e:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004332:	4e49      	ldr	r6, [pc, #292]	@ (8004458 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004334:	bf54      	ite	pl
 8004336:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004338:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800433c:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800433e:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004340:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004342:	4e45      	ldr	r6, [pc, #276]	@ (8004458 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004344:	bf54      	ite	pl
 8004346:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004348:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800434c:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 800434e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004350:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004352:	4e41      	ldr	r6, [pc, #260]	@ (8004458 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004354:	bf54      	ite	pl
 8004356:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004358:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800435c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800435e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004360:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004362:	4d3d      	ldr	r5, [pc, #244]	@ (8004458 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8004364:	bf54      	ite	pl
 8004366:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004368:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800436c:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800436e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004370:	fa34 f203 	lsrs.w	r2, r4, r3
 8004374:	f47f af7a 	bne.w	800426c <HAL_GPIO_Init+0x14>
  }
}
 8004378:	b005      	add	sp, #20
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800437e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004384:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004388:	fa06 f80c 	lsl.w	r8, r6, ip
 800438c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8004390:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004394:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004398:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800439a:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439e:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80043a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80043a6:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80043aa:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80043ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b2:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b6:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ba:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043be:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80043c0:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c4:	f47f af69 	bne.w	800429a <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043c8:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80043ca:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043ce:	f003 0e07 	and.w	lr, r3, #7
 80043d2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80043d6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043da:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 80043de:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043e2:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043e4:	260f      	movs	r6, #15
 80043e6:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043ea:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043ec:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043f0:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80043f4:	f8c8 e020 	str.w	lr, [r8, #32]
 80043f8:	e74f      	b.n	800429a <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 80043fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fe:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004400:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004404:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004408:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 800440c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	e743      	b.n	800429a <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004412:	f04f 0e03 	mov.w	lr, #3
 8004416:	fa0e fc0c 	lsl.w	ip, lr, ip
 800441a:	ea47 070c 	orr.w	r7, r7, ip
 800441e:	e782      	b.n	8004326 <HAL_GPIO_Init+0xce>
 8004420:	f04f 0e01 	mov.w	lr, #1
 8004424:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004428:	ea47 070c 	orr.w	r7, r7, ip
 800442c:	e77b      	b.n	8004326 <HAL_GPIO_Init+0xce>
 800442e:	f04f 0e02 	mov.w	lr, #2
 8004432:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004436:	ea47 070c 	orr.w	r7, r7, ip
 800443a:	e774      	b.n	8004326 <HAL_GPIO_Init+0xce>
 800443c:	f04f 0e04 	mov.w	lr, #4
 8004440:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004444:	ea47 070c 	orr.w	r7, r7, ip
 8004448:	e76d      	b.n	8004326 <HAL_GPIO_Init+0xce>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	48000400 	.word	0x48000400
 8004454:	48000800 	.word	0x48000800
 8004458:	40010400 	.word	0x40010400
 800445c:	48000c00 	.word	0x48000c00
 8004460:	48001000 	.word	0x48001000
 8004464:	48001400 	.word	0x48001400

08004468 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004468:	b10a      	cbz	r2, 800446e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800446a:	6181      	str	r1, [r0, #24]
 800446c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop

08004474 <HAL_HRTIM_Init>:
{
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004474:	2800      	cmp	r0, #0
 8004476:	d066      	beq.n	8004546 <HAL_HRTIM_Init+0xd2>
{
 8004478:	b510      	push	{r4, lr}
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800447a:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800447c:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800447e:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004480:	07d2      	lsls	r2, r2, #31
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004482:	e9c0 3338 	strd	r3, r3, [r0, #224]	@ 0xe0
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004486:	e9c0 333a 	strd	r3, r3, [r0, #232]	@ 0xe8
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800448a:	e9c0 333c 	strd	r3, r3, [r0, #240]	@ 0xf0
{
 800448e:	b082      	sub	sp, #8
 8004490:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004492:	f880 10dd 	strb.w	r1, [r0, #221]	@ 0xdd
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004496:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800449a:	d50f      	bpl.n	80044bc <HAL_HRTIM_Init+0x48>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800449c:	6801      	ldr	r1, [r0, #0]
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <HAL_HRTIM_Init+0xf0>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	d052      	beq.n	800454a <HAL_HRTIM_Init+0xd6>
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80044a4:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044a8:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80044aa:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 80044ae:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80044b2:	4302      	orrs	r2, r0
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80044b4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044b8:	4313      	orrs	r3, r2

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80044ba:	600b      	str	r3, [r1, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80044bc:	4620      	mov	r0, r4
 80044be:	f7fd f8d1 	bl	8001664 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80044c2:	68a3      	ldr	r3, [r4, #8]
 80044c4:	079b      	lsls	r3, r3, #30
 80044c6:	d508      	bpl.n	80044da <HAL_HRTIM_Init+0x66>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044c8:	6821      	ldr	r1, [r4, #0]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80044ca:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044cc:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80044d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80044d6:	4313      	orrs	r3, r2

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80044d8:	600b      	str	r3, [r1, #0]

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80044da:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044dc:	2201      	movs	r2, #1
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
  }

  return HAL_OK;
 80044de:	4618      	mov	r0, r3
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80044e0:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80044e4:	e9c4 3308 	strd	r3, r3, [r4, #32]
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80044e8:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80044ec:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80044f0:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80044f4:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80044f8:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80044fc:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004500:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004504:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004508:	e9c4 331e 	strd	r3, r3, [r4, #120]	@ 0x78
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800450c:	e9c4 3321 	strd	r3, r3, [r4, #132]	@ 0x84
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004510:	e9c4 3323 	strd	r3, r3, [r4, #140]	@ 0x8c
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004514:	e9c4 3325 	strd	r3, r3, [r4, #148]	@ 0x94
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004518:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 800451c:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004520:	62a3      	str	r3, [r4, #40]	@ 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004522:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004526:	e9c4 3329 	strd	r3, r3, [r4, #164]	@ 0xa4
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800452a:	e9c4 332b 	strd	r3, r3, [r4, #172]	@ 0xac
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800452e:	e9c4 332f 	strd	r3, r3, [r4, #188]	@ 0xbc
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004532:	e9c4 3331 	strd	r3, r3, [r4, #196]	@ 0xc4
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004536:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 800453a:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800453e:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
}
 8004542:	b002      	add	sp, #8
 8004544:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004546:	2001      	movs	r0, #1
}
 8004548:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800454a:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
 800454e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004550:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004554:	661a      	str	r2, [r3, #96]	@ 0x60
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	9b01      	ldr	r3, [sp, #4]
 8004560:	e7a0      	b.n	80044a4 <HAL_HRTIM_Init+0x30>
 8004562:	bf00      	nop
 8004564:	40016800 	.word	0x40016800

08004568 <HAL_HRTIM_DLLCalibrationStart>:
{
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004568:	f890 30dc 	ldrb.w	r3, [r0, #220]	@ 0xdc
 800456c:	2b01      	cmp	r3, #1
 800456e:	d030      	beq.n	80045d2 <HAL_HRTIM_DLLCalibrationStart+0x6a>

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004570:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8004572:	2201      	movs	r2, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004574:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004578:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hhrtim);
 800457a:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800457e:	f1b1 3fff 	cmp.w	r1, #4294967295
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004582:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004586:	d015      	beq.n	80045b4 <HAL_HRTIM_DLLCalibrationStart+0x4c>
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004588:	f042 0202 	orr.w	r2, r2, #2
 800458c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004590:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004594:	f022 020c 	bic.w	r2, r2, #12
 8004598:	430a      	orrs	r2, r1
 800459a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800459e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd

  return HAL_OK;
 80045b0:	2000      	movs	r0, #0
 80045b2:	4770      	bx	lr
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80045b4:	f022 0202 	bic.w	r2, r2, #2
 80045b8:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80045bc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  return HAL_OK;
 80045ce:	2000      	movs	r0, #0
 80045d0:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 80045d2:	2002      	movs	r0, #2
}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop

080045d8 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4604      	mov	r4, r0
 80045dc:	460d      	mov	r5, r1
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80045de:	f7fd ffcb 	bl	8002578 <HAL_GetTick>
 80045e2:	1c6e      	adds	r6, r5, #1

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	bf18      	it	ne
 80045e8:	4606      	movne	r6, r0
 80045ea:	d111      	bne.n	8004610 <HAL_HRTIM_PollForDLLCalibration+0x38>
 80045ec:	f8d2 3388 	ldr.w	r3, [r2, #904]	@ 0x388
 80045f0:	03d9      	lsls	r1, r3, #15
 80045f2:	d5fb      	bpl.n	80045ec <HAL_HRTIM_PollForDLLCalibration+0x14>

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80045f4:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80045fc:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc

  return HAL_OK;
}
 8004600:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fd ffb9 	bl	8002578 <HAL_GetTick>
 8004606:	1b80      	subs	r0, r0, r6
 8004608:	42a8      	cmp	r0, r5
 800460a:	d806      	bhi.n	800461a <HAL_HRTIM_PollForDLLCalibration+0x42>
 800460c:	b12d      	cbz	r5, 800461a <HAL_HRTIM_PollForDLLCalibration+0x42>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	f8d2 3388 	ldr.w	r3, [r2, #904]	@ 0x388
 8004614:	03db      	lsls	r3, r3, #15
 8004616:	d5f4      	bpl.n	8004602 <HAL_HRTIM_PollForDLLCalibration+0x2a>
 8004618:	e7ec      	b.n	80045f4 <HAL_HRTIM_PollForDLLCalibration+0x1c>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800461a:	2307      	movs	r3, #7
 800461c:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004620:	2003      	movs	r0, #3
}
 8004622:	bd70      	pop	{r4, r5, r6, pc}

08004624 <HAL_HRTIM_TimeBaseConfig>:
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004624:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 8004628:	f1bc 0f02 	cmp.w	ip, #2
 800462c:	d02c      	beq.n	8004688 <HAL_HRTIM_TimeBaseConfig+0x64>
 800462e:	4603      	mov	r3, r0
  {
     return HAL_BUSY;
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004630:	2002      	movs	r0, #2
{
 8004632:	b4f0      	push	{r4, r5, r6, r7}

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004634:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004636:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800463a:	e9d2 7602 	ldrd	r7, r6, [r2, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800463e:	e9d2 4500 	ldrd	r4, r5, [r2]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004642:	6818      	ldr	r0, [r3, #0]
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004644:	d015      	beq.n	8004672 <HAL_HRTIM_TimeBaseConfig+0x4e>
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004646:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 800464a:	f8d1 2080 	ldr.w	r2, [r1, #128]	@ 0x80

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800464e:	f022 0207 	bic.w	r2, r2, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004652:	433a      	orrs	r2, r7

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004654:	f022 0218 	bic.w	r2, r2, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004658:	4332      	orrs	r2, r6

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800465a:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800465e:	f8c1 4094 	str.w	r4, [r1, #148]	@ 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004662:	f8c1 5098 	str.w	r5, [r1, #152]	@ 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004666:	2201      	movs	r2, #1
 8004668:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  return HAL_OK;
 800466c:	2000      	movs	r0, #0
}
 800466e:	bcf0      	pop	{r4, r5, r6, r7}
 8004670:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004672:	6802      	ldr	r2, [r0, #0]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004674:	f022 0207 	bic.w	r2, r2, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004678:	433a      	orrs	r2, r7
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800467a:	f022 0218 	bic.w	r2, r2, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800467e:	4332      	orrs	r2, r6
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004680:	6002      	str	r2, [r0, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004682:	6144      	str	r4, [r0, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004684:	6185      	str	r5, [r0, #24]
}
 8004686:	e7ee      	b.n	8004666 <HAL_HRTIM_TimeBaseConfig+0x42>
 8004688:	fa5f f08c 	uxtb.w	r0, ip
}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <HAL_HRTIM_ADCTriggerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004690:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 8004694:	f1bc 0f02 	cmp.w	ip, #2
{
 8004698:	4603      	mov	r3, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800469a:	fa5f f08c 	uxtb.w	r0, ip
 800469e:	f000 80dc 	beq.w	800485a <HAL_HRTIM_ADCTriggerConfig+0x1ca>
  __HAL_LOCK(hhrtim);
 80046a2:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 80046a6:	2801      	cmp	r0, #1
 80046a8:	f000 80d8 	beq.w	800485c <HAL_HRTIM_ADCTriggerConfig+0x1cc>
 80046ac:	2001      	movs	r0, #1
{
 80046ae:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hhrtim);
 80046b0:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80046b4:	681c      	ldr	r4, [r3, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046b6:	2002      	movs	r0, #2
 80046b8:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  switch (ADCTrigger)
 80046bc:	2920      	cmp	r1, #32
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80046be:	f8d4 6380 	ldr.w	r6, [r4, #896]	@ 0x380
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 80046c2:	f8d4 53fc 	ldr.w	r5, [r4, #1020]	@ 0x3fc
  switch (ADCTrigger)
 80046c6:	d818      	bhi.n	80046fa <HAL_HRTIM_ADCTriggerConfig+0x6a>
 80046c8:	2900      	cmp	r1, #0
 80046ca:	f000 80f1 	beq.w	80048b0 <HAL_HRTIM_ADCTriggerConfig+0x220>
 80046ce:	1e48      	subs	r0, r1, #1
 80046d0:	281f      	cmp	r0, #31
 80046d2:	f200 80e0 	bhi.w	8004896 <HAL_HRTIM_ADCTriggerConfig+0x206>
 80046d6:	e8df f000 	tbb	[pc, r0]
 80046da:	8372      	.short	0x8372
 80046dc:	dede95de 	.word	0xdede95de
 80046e0:	dedea5de 	.word	0xdedea5de
 80046e4:	dededede 	.word	0xdededede
 80046e8:	dedeb5de 	.word	0xdedeb5de
 80046ec:	dededede 	.word	0xdededede
 80046f0:	dededede 	.word	0xdededede
 80046f4:	dededede 	.word	0xdededede
 80046f8:	62de      	.short	0x62de
 80046fa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80046fe:	f000 80bb 	beq.w	8004878 <HAL_HRTIM_ADCTriggerConfig+0x1e8>
 8004702:	d927      	bls.n	8004754 <HAL_HRTIM_ADCTriggerConfig+0xc4>
 8004704:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004708:	f040 80aa 	bne.w	8004860 <HAL_HRTIM_ADCTriggerConfig+0x1d0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800470c:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8004710:	0109      	lsls	r1, r1, #4
 8004712:	f401 01e0 	and.w	r1, r1, #7340032	@ 0x700000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8004716:	f425 05e0 	bic.w	r5, r5, #7340032	@ 0x700000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 800471a:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 800471c:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8004720:	0692      	lsls	r2, r2, #26
 8004722:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8004726:	f021 41f8 	bic.w	r1, r1, #2080374784	@ 0x7c000000
 800472a:	f8c4 13f8 	str.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800472e:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
 8004732:	430a      	orrs	r2, r1
 8004734:	f8c4 23f8 	str.w	r2, [r4, #1016]	@ 0x3f8
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004738:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 800473c:	2a07      	cmp	r2, #7
 800473e:	d05e      	beq.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8004740:	f8c4 53fc 	str.w	r5, [r4, #1020]	@ 0x3fc
  __HAL_UNLOCK(hhrtim);
 8004744:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004746:	2201      	movs	r2, #1
 8004748:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 800474c:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
}
 8004750:	bc70      	pop	{r4, r5, r6}
 8004752:	4770      	bx	lr
  switch (ADCTrigger)
 8004754:	2940      	cmp	r1, #64	@ 0x40
 8004756:	d012      	beq.n	800477e <HAL_HRTIM_ADCTriggerConfig+0xee>
 8004758:	2980      	cmp	r1, #128	@ 0x80
 800475a:	f040 8081 	bne.w	8004860 <HAL_HRTIM_ADCTriggerConfig+0x1d0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 800475e:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8004762:	0909      	lsrs	r1, r1, #4
 8004764:	f401 41e0 	and.w	r1, r1, #28672	@ 0x7000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8004768:	f425 45e0 	bic.w	r5, r5, #28672	@ 0x7000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 800476c:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800476e:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8004772:	0412      	lsls	r2, r2, #16
 8004774:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8004778:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800477c:	e7d5      	b.n	800472a <HAL_HRTIM_ADCTriggerConfig+0x9a>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800477e:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8004782:	0a09      	lsrs	r1, r1, #8
 8004784:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8004788:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800478c:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800478e:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8004792:	0292      	lsls	r2, r2, #10
 8004794:	f402 42f8 	and.w	r2, r2, #31744	@ 0x7c00
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8004798:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800479c:	e7c5      	b.n	800472a <HAL_HRTIM_ADCTriggerConfig+0x9a>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 800479e:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80047a2:	0b09      	lsrs	r1, r1, #12
 80047a4:	f001 0170 	and.w	r1, r1, #112	@ 0x70
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80047a8:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80047ac:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80047ae:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 80047b2:	0152      	lsls	r2, r2, #5
 80047b4:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80047b8:	f421 7178 	bic.w	r1, r1, #992	@ 0x3e0
 80047bc:	e7b5      	b.n	800472a <HAL_HRTIM_ADCTriggerConfig+0x9a>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 80047be:	e9d2 1200 	ldrd	r1, r2, [r2]
 80047c2:	f8c4 23bc 	str.w	r2, [r4, #956]	@ 0x3bc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047c6:	f893 00dd 	ldrb.w	r0, [r3, #221]	@ 0xdd
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80047ca:	f426 26e0 	bic.w	r6, r6, #458752	@ 0x70000
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80047ce:	f401 22e0 	and.w	r2, r1, #458752	@ 0x70000
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047d2:	2807      	cmp	r0, #7
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80047d4:	ea46 0602 	orr.w	r6, r6, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047d8:	d011      	beq.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80047da:	f8c4 6380 	str.w	r6, [r4, #896]	@ 0x380
 80047de:	e7b1      	b.n	8004744 <HAL_HRTIM_ADCTriggerConfig+0xb4>
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 80047e0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80047e4:	f8c4 23c0 	str.w	r2, [r4, #960]	@ 0x3c0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047e8:	f893 00dd 	ldrb.w	r0, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80047ec:	00ca      	lsls	r2, r1, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 80047ee:	f426 1660 	bic.w	r6, r6, #3670016	@ 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80047f2:	f402 1260 	and.w	r2, r2, #3670016	@ 0x380000
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047f6:	2807      	cmp	r0, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80047f8:	ea46 0602 	orr.w	r6, r6, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80047fc:	d1ed      	bne.n	80047da <HAL_HRTIM_ADCTriggerConfig+0x14a>
     return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
}
 8004800:	bc70      	pop	{r4, r5, r6}
 8004802:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8004804:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004808:	f8c4 23c4 	str.w	r2, [r4, #964]	@ 0x3c4
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800480c:	f893 00dd 	ldrb.w	r0, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8004810:	018a      	lsls	r2, r1, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8004812:	f026 76e0 	bic.w	r6, r6, #29360128	@ 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8004816:	f002 72e0 	and.w	r2, r2, #29360128	@ 0x1c00000
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800481a:	2807      	cmp	r0, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800481c:	ea46 0602 	orr.w	r6, r6, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004820:	d1db      	bne.n	80047da <HAL_HRTIM_ADCTriggerConfig+0x14a>
 8004822:	e7ec      	b.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8004824:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004828:	f8c4 23c8 	str.w	r2, [r4, #968]	@ 0x3c8
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800482c:	f893 00dd 	ldrb.w	r0, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8004830:	024a      	lsls	r2, r1, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8004832:	f026 6660 	bic.w	r6, r6, #234881024	@ 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8004836:	f002 6260 	and.w	r2, r2, #234881024	@ 0xe000000
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800483a:	2807      	cmp	r0, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800483c:	ea46 0602 	orr.w	r6, r6, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004840:	d1cb      	bne.n	80047da <HAL_HRTIM_ADCTriggerConfig+0x14a>
 8004842:	e7dc      	b.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8004844:	8851      	ldrh	r1, [r2, #2]
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8004846:	6852      	ldr	r2, [r2, #4]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8004848:	f361 0502 	bfi	r5, r1, #0, #3
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 800484c:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8004850:	f002 021f 	and.w	r2, r2, #31
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8004854:	f021 011f 	bic.w	r1, r1, #31
 8004858:	e767      	b.n	800472a <HAL_HRTIM_ADCTriggerConfig+0x9a>
}
 800485a:	4770      	bx	lr
     return HAL_BUSY;
 800485c:	2002      	movs	r0, #2
 800485e:	4770      	bx	lr
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004860:	2207      	movs	r2, #7
 8004862:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004866:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 800486a:	2100      	movs	r1, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800486c:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 800486e:	f883 10dc 	strb.w	r1, [r3, #220]	@ 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004872:	f47f af65 	bne.w	8004740 <HAL_HRTIM_ADCTriggerConfig+0xb0>
 8004876:	e7c2      	b.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8004878:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 800487c:	f425 25e0 	bic.w	r5, r5, #458752	@ 0x70000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8004880:	f401 21e0 	and.w	r1, r1, #458752	@ 0x70000
 8004884:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8004886:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800488a:	0552      	lsls	r2, r2, #21
 800488c:	f002 7278 	and.w	r2, r2, #65011712	@ 0x3e00000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8004890:	f021 7178 	bic.w	r1, r1, #65011712	@ 0x3e00000
 8004894:	e749      	b.n	800472a <HAL_HRTIM_ADCTriggerConfig+0x9a>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004896:	2207      	movs	r2, #7
 8004898:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800489c:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 80048a0:	2000      	movs	r0, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80048a2:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 80048a4:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80048a8:	d0a9      	beq.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80048aa:	290f      	cmp	r1, #15
 80048ac:	d995      	bls.n	80047da <HAL_HRTIM_ADCTriggerConfig+0x14a>
 80048ae:	e747      	b.n	8004740 <HAL_HRTIM_ADCTriggerConfig+0xb0>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80048b0:	2207      	movs	r2, #7
 80048b2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80048b6:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 80048ba:	f883 10dc 	strb.w	r1, [r3, #220]	@ 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80048be:	2a07      	cmp	r2, #7
 80048c0:	d18b      	bne.n	80047da <HAL_HRTIM_ADCTriggerConfig+0x14a>
 80048c2:	e79c      	b.n	80047fe <HAL_HRTIM_ADCTriggerConfig+0x16e>

080048c4 <HAL_HRTIM_ADCPostScalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80048c4:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 80048c8:	f1bc 0f02 	cmp.w	ip, #2
{
 80048cc:	4603      	mov	r3, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80048ce:	fa5f f08c 	uxtb.w	r0, ip
 80048d2:	d053      	beq.n	800497c <HAL_HRTIM_ADCPostScalerConfig+0xb8>
  __HAL_LOCK(hhrtim);
 80048d4:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 80048d8:	2801      	cmp	r0, #1
 80048da:	f000 80a9 	beq.w	8004a30 <HAL_HRTIM_ADCPostScalerConfig+0x16c>
 80048de:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048e2:	2002      	movs	r0, #2
  switch (ADCTrigger)
 80048e4:	2920      	cmp	r1, #32
  __HAL_LOCK(hhrtim);
 80048e6:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048ea:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  switch (ADCTrigger)
 80048ee:	d816      	bhi.n	800491e <HAL_HRTIM_ADCPostScalerConfig+0x5a>
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d044      	beq.n	800497e <HAL_HRTIM_ADCPostScalerConfig+0xba>
 80048f4:	3901      	subs	r1, #1
 80048f6:	291f      	cmp	r1, #31
 80048f8:	d841      	bhi.n	800497e <HAL_HRTIM_ADCPostScalerConfig+0xba>
 80048fa:	e8df f001 	tbb	[pc, r1]
 80048fe:	8176      	.short	0x8176
 8004900:	40408d40 	.word	0x40408d40
 8004904:	40405e40 	.word	0x40405e40
 8004908:	40404040 	.word	0x40404040
 800490c:	40406a40 	.word	0x40406a40
 8004910:	40404040 	.word	0x40404040
 8004914:	40404040 	.word	0x40404040
 8004918:	40404040 	.word	0x40404040
 800491c:	5340      	.short	0x5340
 800491e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004922:	f000 8087 	beq.w	8004a34 <HAL_HRTIM_ADCPostScalerConfig+0x170>
 8004926:	d918      	bls.n	800495a <HAL_HRTIM_ADCPostScalerConfig+0x96>
 8004928:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800492c:	d127      	bne.n	800497e <HAL_HRTIM_ADCPostScalerConfig+0xba>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8004934:	0612      	lsls	r2, r2, #24
 8004936:	f002 52f8 	and.w	r2, r2, #520093696	@ 0x1f000000
 800493a:	f021 51f8 	bic.w	r1, r1, #520093696	@ 0x1f000000
 800493e:	430a      	orrs	r2, r1
 8004940:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004944:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 8004948:	2a07      	cmp	r2, #7
 800494a:	d016      	beq.n	800497a <HAL_HRTIM_ADCPostScalerConfig+0xb6>
  __HAL_UNLOCK(hhrtim);
 800494c:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800494e:	2201      	movs	r2, #1
 8004950:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8004954:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  return HAL_OK;
 8004958:	4770      	bx	lr
  switch (ADCTrigger)
 800495a:	2940      	cmp	r1, #64	@ 0x40
 800495c:	d016      	beq.n	800498c <HAL_HRTIM_ADCPostScalerConfig+0xc8>
 800495e:	2980      	cmp	r1, #128	@ 0x80
 8004960:	d10d      	bne.n	800497e <HAL_HRTIM_ADCPostScalerConfig+0xba>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8004968:	0312      	lsls	r2, r2, #12
 800496a:	f402 32f8 	and.w	r2, r2, #126976	@ 0x1f000
 800496e:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8004972:	430a      	orrs	r2, r1
 8004974:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
      break;
 8004978:	e7e4      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
     return HAL_ERROR;
 800497a:	2001      	movs	r0, #1
}
 800497c:	4770      	bx	lr
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800497e:	2107      	movs	r1, #7
      __HAL_UNLOCK(hhrtim);
 8004980:	2200      	movs	r2, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004982:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8004986:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
      break;
 800498a:	e7db      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8004992:	0192      	lsls	r2, r2, #6
 8004994:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8004998:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 800499c:	430a      	orrs	r2, r1
 800499e:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
      break;
 80049a2:	e7cf      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	f021 011f 	bic.w	r1, r1, #31
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
      break;
 80049b8:	e7c4      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 80049c0:	0492      	lsls	r2, r2, #18
 80049c2:	f402 02f8 	and.w	r2, r2, #8126464	@ 0x7c0000
 80049c6:	f421 01f8 	bic.w	r1, r1, #8126464	@ 0x7c0000
 80049ca:	430a      	orrs	r2, r1
 80049cc:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
      break;
 80049d0:	e7b8      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 80049d8:	0612      	lsls	r2, r2, #24
 80049da:	f002 52f8 	and.w	r2, r2, #520093696	@ 0x1f000000
 80049de:	f021 51f8 	bic.w	r1, r1, #520093696	@ 0x1f000000
 80049e2:	430a      	orrs	r2, r1
 80049e4:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
      break;
 80049e8:	e7ac      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 80049f0:	f002 021f 	and.w	r2, r2, #31
 80049f4:	f021 011f 	bic.w	r1, r1, #31
 80049f8:	430a      	orrs	r2, r1
 80049fa:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
      break;
 80049fe:	e7a1      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8004a06:	0192      	lsls	r2, r2, #6
 8004a08:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8004a0c:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8004a10:	430a      	orrs	r2, r1
 8004a12:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
      break;
 8004a16:	e795      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8004a1e:	0312      	lsls	r2, r2, #12
 8004a20:	f402 32f8 	and.w	r2, r2, #126976	@ 0x1f000
 8004a24:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
      break;
 8004a2e:	e789      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>
     return HAL_BUSY;
 8004a30:	2002      	movs	r0, #2
 8004a32:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8004a3a:	0492      	lsls	r2, r2, #18
 8004a3c:	f402 02f8 	and.w	r2, r2, #8126464	@ 0x7c0000
 8004a40:	f421 01f8 	bic.w	r1, r1, #8126464	@ 0x7c0000
 8004a44:	430a      	orrs	r2, r1
 8004a46:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
      break;
 8004a4a:	e77b      	b.n	8004944 <HAL_HRTIM_ADCPostScalerConfig+0x80>

08004a4c <HAL_HRTIM_WaveformTimerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004a4c:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8004a50:	2b02      	cmp	r3, #2
{
 8004a52:	4684      	mov	ip, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004a54:	b2d8      	uxtb	r0, r3
 8004a56:	f000 816f 	beq.w	8004d38 <HAL_HRTIM_WaveformTimerConfig+0x2ec>
  __HAL_LOCK(hhrtim);
 8004a5a:	f89c 30dc 	ldrb.w	r3, [ip, #220]	@ 0xdc
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f000 816b 	beq.w	8004d3a <HAL_HRTIM_WaveformTimerConfig+0x2ee>
{
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hhrtim);
 8004a68:	2001      	movs	r0, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004a6a:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8004a6c:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004a70:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004a74:	2906      	cmp	r1, #6
{
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004a76:	f8dc 0000 	ldr.w	r0, [ip]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004a7a:	6955      	ldr	r5, [r2, #20]
{
 8004a7c:	b083      	sub	sp, #12
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004a7e:	f000 80ca 	beq.w	8004c16 <HAL_HRTIM_WaveformTimerConfig+0x1ca>
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004a82:	eb00 1ec1 	add.w	lr, r0, r1, lsl #7

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
  hrtim_timcr |= pTimerCfg->HalfModeEnable;

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004a86:	2d20      	cmp	r5, #32
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004a88:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
 8004a8c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a90:	f8ce 3080 	str.w	r3, [lr, #128]	@ 0x80
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a94:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a98:	f8de 60e8 	ldr.w	r6, [lr, #232]	@ 0xe8
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004a9c:	f8de a0e4 	ldr.w	sl, [lr, #228]	@ 0xe4
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004aa0:	f8d0 43a0 	ldr.w	r4, [r0, #928]	@ 0x3a0
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004aa4:	f023 0920 	bic.w	r9, r3, #32
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004aa8:	ea4f 17c1 	mov.w	r7, r1, lsl #7
 8004aac:	ea49 0905 	orr.w	r9, r9, r5
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_HRTIM_WaveformTimerConfig+0x84>
 8004ab2:	6993      	ldr	r3, [r2, #24]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_HRTIM_WaveformTimerConfig+0x84>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	f000 8138 	beq.w	8004d2e <HAL_HRTIM_WaveformTimerConfig+0x2e2>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004abe:	2b04      	cmp	r3, #4
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004ac0:	bf06      	itte	eq
 8004ac2:	f029 0980 	biceq.w	r9, r9, #128	@ 0x80
 8004ac6:	f449 7980 	orreq.w	r9, r9, #256	@ 0x100
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004aca:	f429 79d0 	bicne.w	r9, r9, #416	@ 0x1a0
 8004ace:	e003      	b.n	8004ad8 <HAL_HRTIM_WaveformTimerConfig+0x8c>
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004ad0:	f429 79c0 	bic.w	r9, r9, #384	@ 0x180
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004ad4:	f049 0920 	orr.w	r9, r9, #32
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004ad8:	69d3      	ldr	r3, [r2, #28]
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
  hrtim_timcr |= pTimerCfg->PushPull;

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004ada:	6d95      	ldr	r5, [r2, #88]	@ 0x58
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004adc:	f429 6900 	bic.w	r9, r9, #2048	@ 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004ae0:	ea49 0903 	orr.w	r9, r9, r3
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004ae4:	6a13      	ldr	r3, [r2, #32]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004ae6:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004aea:	ea49 0903 	orr.w	r9, r9, r3
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004aee:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004af0:	f029 69c0 	bic.w	r9, r9, #100663296	@ 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004af4:	ea49 0903 	orr.w	r9, r9, r3
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004af8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004afa:	f029 6900 	bic.w	r9, r9, #134217728	@ 0x8000000
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004afe:	ea49 0903 	orr.w	r9, r9, r3
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004b02:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b04:	9301      	str	r3, [sp, #4]
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004b06:	f029 4970 	bic.w	r9, r9, #4026531840	@ 0xf0000000
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004b0a:	ea49 0903 	orr.w	r9, r9, r3
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004b0e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004b10:	f429 3900 	bic.w	r9, r9, #131072	@ 0x20000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004b18:	bf08      	it	eq
 8004b1a:	f449 3900 	orreq.w	r9, r9, #131072	@ 0x20000
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004b1e:	f029 0340 	bic.w	r3, r9, #64	@ 0x40
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
  hrtim_timcr |= pTimerCfg->UpdateTrigger;

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b22:	f026 4900 	bic.w	r9, r6, #2147483648	@ 0x80000000
  hrtim_timcr |= pTimerCfg->PushPull;
 8004b26:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8004b28:	4333      	orrs	r3, r6
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004b2e:	432b      	orrs	r3, r5
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b30:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b32:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b36:	f005 083f 	and.w	r8, r5, #63	@ 0x3f
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b3a:	6d15      	ldr	r5, [r2, #80]	@ 0x50
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b3c:	f029 093f 	bic.w	r9, r9, #63	@ 0x3f
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b44:	ea49 0908 	orr.w	r9, r9, r8
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b48:	432b      	orrs	r3, r5

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b4a:	f8d2 8048 	ldr.w	r8, [r2, #72]	@ 0x48
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b4e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b50:	f428 5b80 	bic.w	fp, r8, #4096	@ 0x1000
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b54:	ea49 0905 	orr.w	r9, r9, r5
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b58:	6c55      	ldr	r5, [r2, #68]	@ 0x44
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b5a:	f42a 7a80 	bic.w	sl, sl, #256	@ 0x100
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b5e:	f5bb 6f60 	cmp.w	fp, #3584	@ 0xe00
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b62:	ea4a 0a05 	orr.w	sl, sl, r5
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b66:	d053      	beq.n	8004c10 <HAL_HRTIM_WaveformTimerConfig+0x1c4>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004b68:	f42a 5af0 	bic.w	sl, sl, #7680	@ 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004b6c:	ea48 0a0a 	orr.w	sl, r8, sl
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004b70:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004b72:	f42a 4a80 	bic.w	sl, sl, #16384	@ 0x4000
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004b76:	ea4a 0805 	orr.w	r8, sl, r5

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004b7a:	f8d2 a054 	ldr.w	sl, [r2, #84]	@ 0x54

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004b7e:	2905      	cmp	r1, #5
 8004b80:	d809      	bhi.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
 8004b82:	e8df f001 	tbb	[pc, r1]
 8004b86:	c8ce      	.short	0xc8ce
 8004b88:	b603bcc2 	.word	0xb603bcc2
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004b8c:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004b8e:	f424 1400 	bic.w	r4, r4, #2097152	@ 0x200000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004b92:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
    break;
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004b96:	4407      	add	r7, r0
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004b98:	f8ce 3080 	str.w	r3, [lr, #128]	@ 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004b9c:	f8c7 90e8 	str.w	r9, [r7, #232]	@ 0xe8
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004ba0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004ba4:	f8c7 80e4 	str.w	r8, [r7, #228]	@ 0xe4
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004ba8:	f8c7 a0d4 	str.w	sl, [r7, #212]	@ 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004bac:	f8c0 43a0 	str.w	r4, [r0, #928]	@ 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004bb0:	e9d2 a901 	ldrd	sl, r9, [r2, #4]
 8004bb4:	e9d2 4703 	ldrd	r4, r7, [r2, #12]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3320      	adds	r3, #32
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004bbc:	6815      	ldr	r5, [r2, #0]
 8004bbe:	f84c 5003 	str.w	r5, [ip, r3]
 8004bc2:	eb0c 0603 	add.w	r6, ip, r3
 8004bc6:	e9c6 a901 	strd	sl, r9, [r6, #4]
 8004bca:	e9c6 4703 	strd	r4, r7, [r6, #12]
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 8004bce:	2905      	cmp	r1, #5
 8004bd0:	d80a      	bhi.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
 8004bd2:	e8df f001 	tbb	[pc, r1]
 8004bd6:	8403      	.short	0x8403
 8004bd8:	686f767d 	.word	0x686f767d
      break;
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004bdc:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8004be8:	9b01      	ldr	r3, [sp, #4]
 8004bea:	b943      	cbnz	r3, 8004bfe <HAL_HRTIM_WaveformTimerConfig+0x1b2>
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8004bec:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
 8004bf0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bf2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bf6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8004bfa:	f8ce 3080 	str.w	r3, [lr, #128]	@ 0x80
  __HAL_UNLOCK(hhrtim);
 8004bfe:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8004c06:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
}
 8004c0a:	b003      	add	sp, #12
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004c10:	2e40      	cmp	r6, #64	@ 0x40
 8004c12:	d1ad      	bne.n	8004b70 <HAL_HRTIM_WaveformTimerConfig+0x124>
 8004c14:	e7a8      	b.n	8004b68 <HAL_HRTIM_WaveformTimerConfig+0x11c>
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004c16:	6804      	ldr	r4, [r0, #0]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004c18:	f8d0 13a0 	ldr.w	r1, [r0, #928]	@ 0x3a0
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c1c:	f024 0420 	bic.w	r4, r4, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004c20:	432c      	orrs	r4, r5
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004c22:	2d20      	cmp	r5, #32
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004c24:	f024 03c0 	bic.w	r3, r4, #192	@ 0xc0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004c28:	d060      	beq.n	8004cec <HAL_HRTIM_WaveformTimerConfig+0x2a0>
 8004c2a:	6995      	ldr	r5, [r2, #24]
 8004c2c:	2d02      	cmp	r5, #2
 8004c2e:	d05d      	beq.n	8004cec <HAL_HRTIM_WaveformTimerConfig+0x2a0>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004c30:	2d03      	cmp	r5, #3
 8004c32:	f000 8084 	beq.w	8004d3e <HAL_HRTIM_WaveformTimerConfig+0x2f2>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004c36:	2d04      	cmp	r5, #4
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004c38:	bf0c      	ite	eq
 8004c3a:	f043 0380 	orreq.w	r3, r3, #128	@ 0x80
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c3e:	f024 03e0 	bicne.w	r3, r4, #224	@ 0xe0
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004c42:	69d4      	ldr	r4, [r2, #28]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004c44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004c48:	4323      	orrs	r3, r4
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004c4a:	6a14      	ldr	r4, [r2, #32]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004c50:	4323      	orrs	r3, r4
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004c52:	6a54      	ldr	r4, [r2, #36]	@ 0x24
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004c54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004c58:	4323      	orrs	r3, r4
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004c5a:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004c5c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004c60:	4323      	orrs	r3, r4
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004c62:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004c64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004c68:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004c6c:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004c6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004c72:	4323      	orrs	r3, r4
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004c74:	6b14      	ldr	r4, [r2, #48]	@ 0x30
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004c76:	6003      	str	r3, [r0, #0]
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004c78:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004c7c:	4321      	orrs	r1, r4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c7e:	f8c0 13a0 	str.w	r1, [r0, #928]	@ 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004c82:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8004c86:	e9d2 5400 	ldrd	r5, r4, [r2]
 8004c8a:	6912      	ldr	r2, [r2, #16]
 8004c8c:	f8cc 20d8 	str.w	r2, [ip, #216]	@ 0xd8
 8004c90:	e9cc 5432 	strd	r5, r4, [ip, #200]	@ 0xc8
 8004c94:	e9cc 1334 	strd	r1, r3, [ip, #208]	@ 0xd0
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004c98:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004ca4:	e7ab      	b.n	8004bfe <HAL_HRTIM_WaveformTimerConfig+0x1b2>
      break;
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8004ca6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cae:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004cb2:	e799      	b.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004cb4:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004cc0:	e792      	b.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004cc2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004cc6:	f043 0310 	orr.w	r3, r3, #16
 8004cca:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004cce:	e78b      	b.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004cd0:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004cdc:	e784      	b.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004cde:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004cea:	e77d      	b.n	8004be8 <HAL_HRTIM_WaveformTimerConfig+0x19c>
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	e7a7      	b.n	8004c42 <HAL_HRTIM_WaveformTimerConfig+0x1f6>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8004cf2:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004cf4:	f424 0480 	bic.w	r4, r4, #4194304	@ 0x400000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8004cf8:	ea44 1486 	orr.w	r4, r4, r6, lsl #6
      break;
 8004cfc:	e74b      	b.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004cfe:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004d00:	f424 1480 	bic.w	r4, r4, #1048576	@ 0x100000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004d04:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
      break;
 8004d08:	e745      	b.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004d0a:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004d0c:	f424 2400 	bic.w	r4, r4, #524288	@ 0x80000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004d10:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
      break;
 8004d14:	e73f      	b.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004d16:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004d18:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004d1c:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
      break;
 8004d20:	e739      	b.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004d22:	6b16      	ldr	r6, [r2, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004d24:	f424 3400 	bic.w	r4, r4, #131072	@ 0x20000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004d28:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
      break;
 8004d2c:	e733      	b.n	8004b96 <HAL_HRTIM_WaveformTimerConfig+0x14a>
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004d2e:	f429 7980 	bic.w	r9, r9, #256	@ 0x100
 8004d32:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8004d36:	e6cf      	b.n	8004ad8 <HAL_HRTIM_WaveformTimerConfig+0x8c>
}
 8004d38:	4770      	bx	lr
     return HAL_BUSY;
 8004d3a:	2002      	movs	r0, #2
 8004d3c:	4770      	bx	lr
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004d42:	e77e      	b.n	8004c42 <HAL_HRTIM_WaveformTimerConfig+0x1f6>

08004d44 <HAL_HRTIM_WaveformTimerControl>:
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004d44:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8004d48:	2b02      	cmp	r3, #2
{
 8004d4a:	4684      	mov	ip, r0
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004d4c:	b2d8      	uxtb	r0, r3
 8004d4e:	d046      	beq.n	8004dde <HAL_HRTIM_WaveformTimerControl+0x9a>
    __HAL_LOCK(hhrtim);
 8004d50:	f89c 30dc 	ldrb.w	r3, [ip, #220]	@ 0xdc
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d06d      	beq.n	8004e34 <HAL_HRTIM_WaveformTimerControl+0xf0>
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004d58:	f8dc 0000 	ldr.w	r0, [ip]
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004d5c:	2302      	movs	r3, #2
{
 8004d5e:	b510      	push	{r4, lr}
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004d60:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004d64:	eb00 13c1 	add.w	r3, r0, r1, lsl #7
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8004d68:	6814      	ldr	r4, [r2, #0]
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004d6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8004d6e:	f023 0310 	bic.w	r3, r3, #16
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8004d72:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004d76:	6854      	ldr	r4, [r2, #4]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8004d78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004d7c:	4323      	orrs	r3, r4
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8004d7e:	68d4      	ldr	r4, [r2, #12]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8004d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8004d84:	4323      	orrs	r3, r4
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8004d86:	6894      	ldr	r4, [r2, #8]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8004d88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8004d8c:	4323      	orrs	r3, r4
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8004d8e:	6994      	ldr	r4, [r2, #24]
 8004d90:	2c01      	cmp	r4, #1
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004d92:	ea4f 1ec1 	mov.w	lr, r1, lsl #7
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8004d96:	d017      	beq.n	8004dc8 <HAL_HRTIM_WaveformTimerControl+0x84>
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8004d98:	4486      	add	lr, r0
 8004d9a:	f8ce 30ec 	str.w	r3, [lr, #236]	@ 0xec
  switch (TimerIdx)
 8004d9e:	2906      	cmp	r1, #6
 8004da0:	d80b      	bhi.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
 8004da2:	e8df f001 	tbb	[pc, r1]
 8004da6:	2b24      	.short	0x2b24
 8004da8:	40043932 	.word	0x40043932
 8004dac:	1d          	.byte	0x1d
 8004dad:	00          	.byte	0x00
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004dae:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004db2:	f043 0320 	orr.w	r3, r3, #32
 8004db6:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
    __HAL_UNLOCK(hhrtim);
 8004dba:	2000      	movs	r0, #0
    hhrtim->State = HAL_HRTIM_STATE_READY;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
    __HAL_UNLOCK(hhrtim);
 8004dc2:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
}
 8004dc6:	bd10      	pop	{r4, pc}
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8004dc8:	6914      	ldr	r4, [r2, #16]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8004dca:	6952      	ldr	r2, [r2, #20]
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8004dd0:	4323      	orrs	r3, r4
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8004dd2:	f023 0302 	bic.w	r3, r3, #2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8004dd6:	4313      	orrs	r3, r2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	e7dc      	b.n	8004d98 <HAL_HRTIM_WaveformTimerControl+0x54>
}
 8004dde:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004de0:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004dec:	e7e5      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004dee:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004dfa:	e7de      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004dfc:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004e00:	f043 0304 	orr.w	r3, r3, #4
 8004e04:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004e08:	e7d7      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004e0a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004e0e:	f043 0308 	orr.w	r3, r3, #8
 8004e12:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004e16:	e7d0      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004e18:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004e1c:	f043 0310 	orr.w	r3, r3, #16
 8004e20:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004e24:	e7c9      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8004e26:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8004e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e2e:	f8c0 3384 	str.w	r3, [r0, #900]	@ 0x384
      break;
 8004e32:	e7c2      	b.n	8004dba <HAL_HRTIM_WaveformTimerControl+0x76>
       return HAL_BUSY;
 8004e34:	2002      	movs	r0, #2
 8004e36:	4770      	bx	lr

08004e38 <HAL_HRTIM_DeadTimeConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e38:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8004e3c:	2b02      	cmp	r3, #2
{
 8004e3e:	4684      	mov	ip, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e40:	b2d8      	uxtb	r0, r3
 8004e42:	d03f      	beq.n	8004ec4 <HAL_HRTIM_DeadTimeConfig+0x8c>
  __HAL_LOCK(hhrtim);
 8004e44:	f89c 30dc 	ldrb.w	r3, [ip, #220]	@ 0xdc
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d03c      	beq.n	8004ec6 <HAL_HRTIM_DeadTimeConfig+0x8e>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e4c:	2302      	movs	r3, #2
{
 8004e4e:	b510      	push	{r4, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e50:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8004e54:	e9d2 0300 	ldrd	r0, r3, [r2]
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8004e5c:	f400 50e0 	and.w	r0, r0, #7168	@ 0x1c00
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8004e60:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8004e62:	6893      	ldr	r3, [r2, #8]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8004e64:	6954      	ldr	r4, [r2, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8004e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6a:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8004e6c:	6913      	ldr	r3, [r2, #16]
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e72:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8004e74:	68d3      	ldr	r3, [r2, #12]
 8004e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e7a:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8004e7c:	6990      	ldr	r0, [r2, #24]
 8004e7e:	f000 7000 	and.w	r0, r0, #33554432	@ 0x2000000
 8004e82:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8004e84:	6a10      	ldr	r0, [r2, #32]
 8004e86:	f000 4080 	and.w	r0, r0, #1073741824	@ 0x40000000
 8004e8a:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8004e8c:	69d0      	ldr	r0, [r2, #28]
 8004e8e:	f000 4200 	and.w	r2, r0, #2147483648	@ 0x80000000
 8004e92:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004e94:	f8dc 2000 	ldr.w	r2, [ip]
 8004e98:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8004e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8004ecc <HAL_HRTIM_DeadTimeConfig+0x94>)
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004e9e:	f8d1 00b8 	ldr.w	r0, [r1, #184]	@ 0xb8
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8004ea2:	ea02 4204 	and.w	r2, r2, r4, lsl #16
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8004ea6:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004ea8:	4a09      	ldr	r2, [pc, #36]	@ (8004ed0 <HAL_HRTIM_DeadTimeConfig+0x98>)
 8004eaa:	4002      	ands	r2, r0
  __HAL_UNLOCK(hhrtim);
 8004eac:	f04f 0e00 	mov.w	lr, #0
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004eb0:	4313      	orrs	r3, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004eb2:	2201      	movs	r2, #1
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8004eb4:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004eb8:	f88c 20dd 	strb.w	r2, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8004ebc:	f88c e0dc 	strb.w	lr, [ip, #220]	@ 0xdc
  return HAL_OK;
 8004ec0:	4670      	mov	r0, lr
}
 8004ec2:	bd10      	pop	{r4, pc}
 8004ec4:	4770      	bx	lr
     return HAL_BUSY;
 8004ec6:	2002      	movs	r0, #2
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	01ff0000 	.word	0x01ff0000
 8004ed0:	3c002000 	.word	0x3c002000

08004ed4 <HAL_HRTIM_WaveformCompareConfig>:
{
 8004ed4:	b500      	push	{lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ed6:	f890 e0dd 	ldrb.w	lr, [r0, #221]	@ 0xdd
 8004eda:	f1be 0f02 	cmp.w	lr, #2
{
 8004ede:	4684      	mov	ip, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ee0:	fa5f f08e 	uxtb.w	r0, lr
 8004ee4:	d027      	beq.n	8004f36 <HAL_HRTIM_WaveformCompareConfig+0x62>
  __HAL_LOCK(hhrtim);
 8004ee6:	f89c 00dc 	ldrb.w	r0, [ip, #220]	@ 0xdc
 8004eea:	2801      	cmp	r0, #1
 8004eec:	f000 80a0 	beq.w	8005030 <HAL_HRTIM_WaveformCompareConfig+0x15c>
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004ef6:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004ef8:	f04f 0002 	mov.w	r0, #2
 8004efc:	f88c 00dd 	strb.w	r0, [ip, #221]	@ 0xdd
    switch (CompareUnit)
 8004f00:	f102 32ff 	add.w	r2, r2, #4294967295
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004f04:	d019      	beq.n	8004f3a <HAL_HRTIM_WaveformCompareConfig+0x66>
    switch (CompareUnit)
 8004f06:	2a07      	cmp	r2, #7
 8004f08:	d805      	bhi.n	8004f16 <HAL_HRTIM_WaveformCompareConfig+0x42>
 8004f0a:	e8df f002 	tbb	[pc, r2]
 8004f0e:	612b      	.short	0x612b
 8004f10:	04043904 	.word	0x04043904
 8004f14:	4104      	.short	0x4104
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004f16:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 8004f18:	2300      	movs	r3, #0
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004f1a:	f88c 20dd 	strb.w	r2, [ip, #221]	@ 0xdd
        __HAL_UNLOCK(hhrtim);
 8004f1e:	f88c 30dc 	strb.w	r3, [ip, #220]	@ 0xdc
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004f22:	f89c 30dd 	ldrb.w	r3, [ip, #221]	@ 0xdd
 8004f26:	2b07      	cmp	r3, #7
 8004f28:	d027      	beq.n	8004f7a <HAL_HRTIM_WaveformCompareConfig+0xa6>
  __HAL_UNLOCK(hhrtim);
 8004f2a:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8004f32:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
}
 8004f36:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (CompareUnit)
 8004f3a:	2a07      	cmp	r2, #7
 8004f3c:	d8eb      	bhi.n	8004f16 <HAL_HRTIM_WaveformCompareConfig+0x42>
 8004f3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f44 <HAL_HRTIM_WaveformCompareConfig+0x70>)
 8004f40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f44:	0800501d 	.word	0x0800501d
 8004f48:	08005013 	.word	0x08005013
 8004f4c:	08004f17 	.word	0x08004f17
 8004f50:	08005027 	.word	0x08005027
 8004f54:	08004f17 	.word	0x08004f17
 8004f58:	08004f17 	.word	0x08004f17
 8004f5c:	08004f17 	.word	0x08004f17
 8004f60:	08005009 	.word	0x08005009
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8004f64:	f8dc 2000 	ldr.w	r2, [ip]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8004f6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004f72:	f89c 30dd 	ldrb.w	r3, [ip, #221]	@ 0xdd
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d1d7      	bne.n	8004f2a <HAL_HRTIM_WaveformCompareConfig+0x56>
     return HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
}
 8004f7c:	f85d fb04 	ldr.w	pc, [sp], #4
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004f80:	f8dc 2000 	ldr.w	r2, [ip]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8004f8a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
        break;
 8004f8e:	e7c8      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8004f90:	f8dc 2000 	ldr.w	r2, [ip]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004f9a:	6859      	ldr	r1, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8004f9c:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d04f      	beq.n	8005044 <HAL_HRTIM_WaveformCompareConfig+0x170>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8004fa4:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
 8004fa8:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8004fac:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004fb0:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004fb4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8004fb8:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8004fbc:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004fc0:	d01e      	beq.n	8005000 <HAL_HRTIM_WaveformCompareConfig+0x12c>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8004fc2:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004fc6:	d1ac      	bne.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004fce:	e7a8      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004fd0:	f8dc 2000 	ldr.w	r2, [ip]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004fda:	6859      	ldr	r1, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004fdc:	f8c2 00a4 	str.w	r0, [r2, #164]	@ 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004fe0:	b349      	cbz	r1, 8005036 <HAL_HRTIM_WaveformCompareConfig+0x162>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8004fe2:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
 8004fe6:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8004fea:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8004fee:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004ff2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8004ff6:	ea40 0001 	orr.w	r0, r0, r1
 8004ffa:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8004ffe:	d1e0      	bne.n	8004fc2 <HAL_HRTIM_WaveformCompareConfig+0xee>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005006:	e78c      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005008:	f8dc 2000 	ldr.w	r2, [ip]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005010:	e787      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005012:	f8dc 2000 	ldr.w	r2, [ip]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6253      	str	r3, [r2, #36]	@ 0x24
        break;
 800501a:	e782      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800501c:	f8dc 2000 	ldr.w	r2, [ip]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61d3      	str	r3, [r2, #28]
        break;
 8005024:	e77d      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005026:	f8dc 2000 	ldr.w	r2, [ip]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800502e:	e778      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
     return HAL_BUSY;
 8005030:	2002      	movs	r0, #2
}
 8005032:	f85d fb04 	ldr.w	pc, [sp], #4
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005036:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 800503a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800503e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005042:	e76e      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005044:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8005048:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800504c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005050:	e767      	b.n	8004f22 <HAL_HRTIM_WaveformCompareConfig+0x4e>
 8005052:	bf00      	nop

08005054 <HAL_HRTIM_WaveformOutputConfig>:
{
 8005054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005058:	f890 40dd 	ldrb.w	r4, [r0, #221]	@ 0xdd
 800505c:	2c02      	cmp	r4, #2
{
 800505e:	4684      	mov	ip, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005060:	b2e0      	uxtb	r0, r4
 8005062:	d046      	beq.n	80050f2 <HAL_HRTIM_WaveformOutputConfig+0x9e>
  __HAL_LOCK(hhrtim);
 8005064:	f89c 00dc 	ldrb.w	r0, [ip, #220]	@ 0xdc
 8005068:	2801      	cmp	r0, #1
     return HAL_BUSY;
 800506a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hhrtim);
 800506e:	d040      	beq.n	80050f2 <HAL_HRTIM_WaveformOutputConfig+0x9e>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005070:	f88c 00dd 	strb.w	r0, [ip, #221]	@ 0xdd
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005074:	f8dc 0000 	ldr.w	r0, [ip]
 8005078:	ea4f 1ec1 	mov.w	lr, r1, lsl #7
 800507c:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
  switch (Output)
 8005080:	2a40      	cmp	r2, #64	@ 0x40
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005082:	f8d1 50e4 	ldr.w	r5, [r1, #228]	@ 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005086:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
  switch (Output)
 800508a:	d04f      	beq.n	800512c <HAL_HRTIM_WaveformOutputConfig+0xd8>
 800508c:	d833      	bhi.n	80050f6 <HAL_HRTIM_WaveformOutputConfig+0xa2>
 800508e:	2a01      	cmp	r2, #1
 8005090:	d04c      	beq.n	800512c <HAL_HRTIM_WaveformOutputConfig+0xd8>
 8005092:	3a02      	subs	r2, #2
 8005094:	2a1e      	cmp	r2, #30
 8005096:	d809      	bhi.n	80050ac <HAL_HRTIM_WaveformOutputConfig+0x58>
 8005098:	2401      	movs	r4, #1
 800509a:	fa04 f202 	lsl.w	r2, r4, r2
 800509e:	4c2b      	ldr	r4, [pc, #172]	@ (800514c <HAL_HRTIM_WaveformOutputConfig+0xf8>)
 80050a0:	4222      	tst	r2, r4
 80050a2:	d132      	bne.n	800510a <HAL_HRTIM_WaveformOutputConfig+0xb6>
 80050a4:	f244 0404 	movw	r4, #16388	@ 0x4004
 80050a8:	4222      	tst	r2, r4
 80050aa:	d13f      	bne.n	800512c <HAL_HRTIM_WaveformOutputConfig+0xd8>
{
 80050ac:	f06f 02fe 	mvn.w	r2, #254	@ 0xfe
  uint32_t shift = 0U;
 80050b0:	2400      	movs	r4, #0
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80050b2:	4015      	ands	r5, r2
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	40a2      	lsls	r2, r4
 80050b8:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80050ba:	68dd      	ldr	r5, [r3, #12]
 80050bc:	40a5      	lsls	r5, r4
 80050be:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80050c0:	e9d3 6504 	ldrd	r6, r5, [r3, #16]
 80050c4:	fa05 f704 	lsl.w	r7, r5, r4
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80050c8:	fa06 f804 	lsl.w	r8, r6, r4
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80050cc:	699d      	ldr	r5, [r3, #24]
 80050ce:	ea42 0208 	orr.w	r2, r2, r8
 80050d2:	40a5      	lsls	r5, r4
 80050d4:	433a      	orrs	r2, r7
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050d6:	2e08      	cmp	r6, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80050d8:	ea42 0205 	orr.w	r2, r2, r5
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050dc:	d02f      	beq.n	800513e <HAL_HRTIM_WaveformOutputConfig+0xea>
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80050de:	eb00 030e 	add.w	r3, r0, lr
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050e2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hhrtim);
 80050e4:	2000      	movs	r0, #0
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80050e6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050ea:	f88c 10dd 	strb.w	r1, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80050ee:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
}
 80050f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (Output)
 80050f6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80050fa:	d006      	beq.n	800510a <HAL_HRTIM_WaveformOutputConfig+0xb6>
 80050fc:	d911      	bls.n	8005122 <HAL_HRTIM_WaveformOutputConfig+0xce>
 80050fe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005102:	d013      	beq.n	800512c <HAL_HRTIM_WaveformOutputConfig+0xd8>
 8005104:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005108:	d1d0      	bne.n	80050ac <HAL_HRTIM_WaveformOutputConfig+0x58>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800510a:	eb00 020e 	add.w	r2, r0, lr
 800510e:	685c      	ldr	r4, [r3, #4]
 8005110:	f8c2 40c4 	str.w	r4, [r2, #196]	@ 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005114:	689c      	ldr	r4, [r3, #8]
 8005116:	f8c2 40c8 	str.w	r4, [r2, #200]	@ 0xc8
      break;
 800511a:	f46f 027e 	mvn.w	r2, #16646144	@ 0xfe0000
      shift = 16U;
 800511e:	2410      	movs	r4, #16
      break;
 8005120:	e7c7      	b.n	80050b2 <HAL_HRTIM_WaveformOutputConfig+0x5e>
  switch (Output)
 8005122:	2a80      	cmp	r2, #128	@ 0x80
 8005124:	d0f1      	beq.n	800510a <HAL_HRTIM_WaveformOutputConfig+0xb6>
 8005126:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800512a:	d1bf      	bne.n	80050ac <HAL_HRTIM_WaveformOutputConfig+0x58>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800512c:	eb00 020e 	add.w	r2, r0, lr
 8005130:	685c      	ldr	r4, [r3, #4]
 8005132:	f8c2 40bc 	str.w	r4, [r2, #188]	@ 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005136:	689c      	ldr	r4, [r3, #8]
 8005138:	f8c2 40c0 	str.w	r4, [r2, #192]	@ 0xc0
      break;
 800513c:	e7b6      	b.n	80050ac <HAL_HRTIM_WaveformOutputConfig+0x58>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800513e:	f011 2f02 	tst.w	r1, #33554944	@ 0x2000200
 8005142:	d1cc      	bne.n	80050de <HAL_HRTIM_WaveformOutputConfig+0x8a>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	40a3      	lsls	r3, r4
 8005148:	431a      	orrs	r2, r3
 800514a:	e7c8      	b.n	80050de <HAL_HRTIM_WaveformOutputConfig+0x8a>
 800514c:	40000041 	.word	0x40000041

08005150 <HAL_HRTIM_WaveformOutputStart>:
  __HAL_LOCK(hhrtim);
 8005150:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 8005154:	2a01      	cmp	r2, #1
{
 8005156:	4603      	mov	r3, r0
  __HAL_LOCK(hhrtim);
 8005158:	d011      	beq.n	800517e <HAL_HRTIM_WaveformOutputStart+0x2e>
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800515a:	6800      	ldr	r0, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800515c:	2202      	movs	r2, #2
 800515e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005162:	f8d0 2394 	ldr.w	r2, [r0, #916]	@ 0x394
  __HAL_UNLOCK(hhrtim);
 8005166:	f04f 0c00 	mov.w	ip, #0
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800516a:	430a      	orrs	r2, r1
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800516c:	2101      	movs	r1, #1
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800516e:	f8c0 2394 	str.w	r2, [r0, #916]	@ 0x394
  return HAL_OK;
 8005172:	4660      	mov	r0, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005174:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8005178:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  return HAL_OK;
 800517c:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 800517e:	2002      	movs	r0, #2
}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop

08005184 <HAL_HRTIM_WaveformCountStart_IT>:
  __HAL_LOCK(hhrtim);
 8005184:	f890 20dc 	ldrb.w	r2, [r0, #220]	@ 0xdc
 8005188:	2a01      	cmp	r2, #1
 800518a:	d051      	beq.n	8005230 <HAL_HRTIM_WaveformCountStart_IT+0xac>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800518c:	4603      	mov	r3, r0
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800518e:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005190:	2002      	movs	r0, #2
{
 8005192:	b510      	push	{r4, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005194:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8005198:	f8d2 0390 	ldr.w	r0, [r2, #912]	@ 0x390
 800519c:	685c      	ldr	r4, [r3, #4]
 800519e:	4320      	orrs	r0, r4
 80051a0:	f8c2 0390 	str.w	r0, [r2, #912]	@ 0x390
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80051a4:	03c8      	lsls	r0, r1, #15
 80051a6:	d504      	bpl.n	80051b2 <HAL_HRTIM_WaveformCountStart_IT+0x2e>
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80051a8:	68d0      	ldr	r0, [r2, #12]
 80051aa:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 80051ae:	4320      	orrs	r0, r4
 80051b0:	60d0      	str	r0, [r2, #12]
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80051b2:	038c      	lsls	r4, r1, #14
 80051b4:	d505      	bpl.n	80051c2 <HAL_HRTIM_WaveformCountStart_IT+0x3e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80051b6:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80051ba:	6a1c      	ldr	r4, [r3, #32]
 80051bc:	4320      	orrs	r0, r4
 80051be:	f8c2 008c 	str.w	r0, [r2, #140]	@ 0x8c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80051c2:	0348      	lsls	r0, r1, #13
 80051c4:	d505      	bpl.n	80051d2 <HAL_HRTIM_WaveformCountStart_IT+0x4e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80051c6:	f8d2 010c 	ldr.w	r0, [r2, #268]	@ 0x10c
 80051ca:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80051cc:	4320      	orrs	r0, r4
 80051ce:	f8c2 010c 	str.w	r0, [r2, #268]	@ 0x10c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80051d2:	030c      	lsls	r4, r1, #12
 80051d4:	d505      	bpl.n	80051e2 <HAL_HRTIM_WaveformCountStart_IT+0x5e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80051d6:	f8d2 018c 	ldr.w	r0, [r2, #396]	@ 0x18c
 80051da:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80051dc:	4320      	orrs	r0, r4
 80051de:	f8c2 018c 	str.w	r0, [r2, #396]	@ 0x18c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80051e2:	02c8      	lsls	r0, r1, #11
 80051e4:	d505      	bpl.n	80051f2 <HAL_HRTIM_WaveformCountStart_IT+0x6e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80051e6:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 80051ea:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
 80051ec:	4320      	orrs	r0, r4
 80051ee:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80051f2:	028c      	lsls	r4, r1, #10
 80051f4:	d506      	bpl.n	8005204 <HAL_HRTIM_WaveformCountStart_IT+0x80>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80051f6:	f8d2 028c 	ldr.w	r0, [r2, #652]	@ 0x28c
 80051fa:	f8d3 4090 	ldr.w	r4, [r3, #144]	@ 0x90
 80051fe:	4320      	orrs	r0, r4
 8005200:	f8c2 028c 	str.w	r0, [r2, #652]	@ 0x28c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8005204:	0248      	lsls	r0, r1, #9
 8005206:	d506      	bpl.n	8005216 <HAL_HRTIM_WaveformCountStart_IT+0x92>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8005208:	f8d2 030c 	ldr.w	r0, [r2, #780]	@ 0x30c
 800520c:	f8d3 40ac 	ldr.w	r4, [r3, #172]	@ 0xac
 8005210:	4320      	orrs	r0, r4
 8005212:	f8c2 030c 	str.w	r0, [r2, #780]	@ 0x30c
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005216:	6810      	ldr	r0, [r2, #0]
  __HAL_UNLOCK(hhrtim);
 8005218:	f04f 0c00 	mov.w	ip, #0
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800521c:	4301      	orrs	r1, r0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800521e:	f04f 0e01 	mov.w	lr, #1
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005222:	6011      	str	r1, [r2, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005224:	f883 e0dd 	strb.w	lr, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8005228:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  return HAL_OK;}
 800522c:	4660      	mov	r0, ip
 800522e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhrtim);
 8005230:	2002      	movs	r0, #2
  return HAL_OK;}
 8005232:	4770      	bx	lr

08005234 <HAL_HRTIM_Fault1Callback>:
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop

08005238 <HAL_HRTIM_Fault2Callback>:
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <HAL_HRTIM_Fault3Callback>:
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop

08005240 <HAL_HRTIM_Fault4Callback>:
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop

08005244 <HAL_HRTIM_Fault5Callback>:
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop

08005248 <HAL_HRTIM_Fault6Callback>:
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop

0800524c <HAL_HRTIM_SystemFaultCallback>:
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <HAL_HRTIM_DLLCalibrationReadyCallback>:
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop

08005254 <HAL_HRTIM_BurstModePeriodCallback>:
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop

08005258 <HAL_HRTIM_SynchronizationEventCallback>:
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop

0800525c <HAL_HRTIM_RegistersUpdateCallback>:
}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <HAL_HRTIM_Compare1EventCallback>:
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <HAL_HRTIM_Compare2EventCallback>:
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <HAL_HRTIM_Compare3EventCallback>:
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <HAL_HRTIM_Compare4EventCallback>:
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <HAL_HRTIM_Capture1EventCallback>:
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <HAL_HRTIM_Capture2EventCallback>:
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <HAL_HRTIM_DelayedProtectionCallback>:
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop

0800527c <HAL_HRTIM_CounterResetCallback>:
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop

08005280 <HAL_HRTIM_Output1SetCallback>:
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <HAL_HRTIM_Output1ResetCallback>:
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop

08005288 <HAL_HRTIM_Output2SetCallback>:
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop

0800528c <HAL_HRTIM_Output2ResetCallback>:
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <HAL_HRTIM_IRQHandler>:
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8005290:	29ff      	cmp	r1, #255	@ 0xff
{
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005296:	6803      	ldr	r3, [r0, #0]
{
 8005298:	4607      	mov	r7, r0
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800529a:	f000 8090 	beq.w	80053be <HAL_HRTIM_IRQHandler+0x12e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800529e:	2906      	cmp	r1, #6
 80052a0:	460d      	mov	r5, r1
 80052a2:	d050      	beq.n	8005346 <HAL_HRTIM_IRQHandler+0xb6>
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80052a4:	1c4a      	adds	r2, r1, #1
 80052a6:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80052aa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80052ae:	6854      	ldr	r4, [r2, #4]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80052b0:	f8d3 608c 	ldr.w	r6, [r3, #140]	@ 0x8c

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80052b4:	07e2      	lsls	r2, r4, #31
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80052b6:	ea4f 18c1 	mov.w	r8, r1, lsl #7
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80052ba:	d502      	bpl.n	80052c2 <HAL_HRTIM_IRQHandler+0x32>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80052bc:	07f2      	lsls	r2, r6, #31
 80052be:	f100 80ac 	bmi.w	800541a <HAL_HRTIM_IRQHandler+0x18a>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80052c2:	07a2      	lsls	r2, r4, #30
 80052c4:	d502      	bpl.n	80052cc <HAL_HRTIM_IRQHandler+0x3c>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80052c6:	07b3      	lsls	r3, r6, #30
 80052c8:	f100 80b8 	bmi.w	800543c <HAL_HRTIM_IRQHandler+0x1ac>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80052cc:	0760      	lsls	r0, r4, #29
 80052ce:	d502      	bpl.n	80052d6 <HAL_HRTIM_IRQHandler+0x46>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80052d0:	0771      	lsls	r1, r6, #29
 80052d2:	f100 80bd 	bmi.w	8005450 <HAL_HRTIM_IRQHandler+0x1c0>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80052d6:	0722      	lsls	r2, r4, #28
 80052d8:	d502      	bpl.n	80052e0 <HAL_HRTIM_IRQHandler+0x50>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80052da:	0733      	lsls	r3, r6, #28
 80052dc:	f100 80c2 	bmi.w	8005464 <HAL_HRTIM_IRQHandler+0x1d4>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80052e0:	06e0      	lsls	r0, r4, #27
 80052e2:	d502      	bpl.n	80052ea <HAL_HRTIM_IRQHandler+0x5a>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80052e4:	06f1      	lsls	r1, r6, #27
 80052e6:	f100 80c7 	bmi.w	8005478 <HAL_HRTIM_IRQHandler+0x1e8>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80052ea:	0662      	lsls	r2, r4, #25
 80052ec:	d502      	bpl.n	80052f4 <HAL_HRTIM_IRQHandler+0x64>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80052ee:	0673      	lsls	r3, r6, #25
 80052f0:	f100 80cc 	bmi.w	800548c <HAL_HRTIM_IRQHandler+0x1fc>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80052f4:	0620      	lsls	r0, r4, #24
 80052f6:	d502      	bpl.n	80052fe <HAL_HRTIM_IRQHandler+0x6e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80052f8:	0631      	lsls	r1, r6, #24
 80052fa:	f100 80d1 	bmi.w	80054a0 <HAL_HRTIM_IRQHandler+0x210>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80052fe:	05e2      	lsls	r2, r4, #23
 8005300:	d502      	bpl.n	8005308 <HAL_HRTIM_IRQHandler+0x78>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8005302:	05f3      	lsls	r3, r6, #23
 8005304:	f100 80d6 	bmi.w	80054b4 <HAL_HRTIM_IRQHandler+0x224>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8005308:	05a0      	lsls	r0, r4, #22
 800530a:	d502      	bpl.n	8005312 <HAL_HRTIM_IRQHandler+0x82>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800530c:	05b1      	lsls	r1, r6, #22
 800530e:	f100 80dc 	bmi.w	80054ca <HAL_HRTIM_IRQHandler+0x23a>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005312:	0562      	lsls	r2, r4, #21
 8005314:	d502      	bpl.n	800531c <HAL_HRTIM_IRQHandler+0x8c>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005316:	0573      	lsls	r3, r6, #21
 8005318:	f100 80e2 	bmi.w	80054e0 <HAL_HRTIM_IRQHandler+0x250>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800531c:	0520      	lsls	r0, r4, #20
 800531e:	d502      	bpl.n	8005326 <HAL_HRTIM_IRQHandler+0x96>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005320:	0531      	lsls	r1, r6, #20
 8005322:	f100 80e8 	bmi.w	80054f6 <HAL_HRTIM_IRQHandler+0x266>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005326:	04e2      	lsls	r2, r4, #19
 8005328:	d502      	bpl.n	8005330 <HAL_HRTIM_IRQHandler+0xa0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800532a:	04f3      	lsls	r3, r6, #19
 800532c:	f100 80ee 	bmi.w	800550c <HAL_HRTIM_IRQHandler+0x27c>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005330:	04a0      	lsls	r0, r4, #18
 8005332:	d502      	bpl.n	800533a <HAL_HRTIM_IRQHandler+0xaa>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8005334:	04b1      	lsls	r1, r6, #18
 8005336:	f100 80f4 	bmi.w	8005522 <HAL_HRTIM_IRQHandler+0x292>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800533a:	0462      	lsls	r2, r4, #17
 800533c:	d501      	bpl.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800533e:	0473      	lsls	r3, r6, #17
 8005340:	d471      	bmi.n	8005426 <HAL_HRTIM_IRQHandler+0x196>
}
 8005342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005346:	f8d3 6388 	ldr.w	r6, [r3, #904]	@ 0x388
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800534a:	f8d3 8390 	ldr.w	r8, [r3, #912]	@ 0x390
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 800534e:	685c      	ldr	r4, [r3, #4]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8005350:	68dd      	ldr	r5, [r3, #12]
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8005352:	03f1      	lsls	r1, r6, #15
 8005354:	d503      	bpl.n	800535e <HAL_HRTIM_IRQHandler+0xce>
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8005356:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 800535a:	f040 80ed 	bne.w	8005538 <HAL_HRTIM_IRQHandler+0x2a8>
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800535e:	03b2      	lsls	r2, r6, #14
 8005360:	d503      	bpl.n	800536a <HAL_HRTIM_IRQHandler+0xda>
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005362:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
 8005366:	f040 80f4 	bne.w	8005552 <HAL_HRTIM_IRQHandler+0x2c2>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800536a:	07e3      	lsls	r3, r4, #31
 800536c:	d502      	bpl.n	8005374 <HAL_HRTIM_IRQHandler+0xe4>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800536e:	07ee      	lsls	r6, r5, #31
 8005370:	f100 80f8 	bmi.w	8005564 <HAL_HRTIM_IRQHandler+0x2d4>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8005374:	07a0      	lsls	r0, r4, #30
 8005376:	d502      	bpl.n	800537e <HAL_HRTIM_IRQHandler+0xee>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8005378:	07a9      	lsls	r1, r5, #30
 800537a:	f100 80fb 	bmi.w	8005574 <HAL_HRTIM_IRQHandler+0x2e4>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800537e:	0762      	lsls	r2, r4, #29
 8005380:	d502      	bpl.n	8005388 <HAL_HRTIM_IRQHandler+0xf8>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8005382:	076b      	lsls	r3, r5, #29
 8005384:	f100 80fe 	bmi.w	8005584 <HAL_HRTIM_IRQHandler+0x2f4>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8005388:	0726      	lsls	r6, r4, #28
 800538a:	d502      	bpl.n	8005392 <HAL_HRTIM_IRQHandler+0x102>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 800538c:	0728      	lsls	r0, r5, #28
 800538e:	f100 8101 	bmi.w	8005594 <HAL_HRTIM_IRQHandler+0x304>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8005392:	06e1      	lsls	r1, r4, #27
 8005394:	d502      	bpl.n	800539c <HAL_HRTIM_IRQHandler+0x10c>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005396:	06ea      	lsls	r2, r5, #27
 8005398:	f100 8104 	bmi.w	80055a4 <HAL_HRTIM_IRQHandler+0x314>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800539c:	06a3      	lsls	r3, r4, #26
 800539e:	d502      	bpl.n	80053a6 <HAL_HRTIM_IRQHandler+0x116>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80053a0:	06ae      	lsls	r6, r5, #26
 80053a2:	f100 8107 	bmi.w	80055b4 <HAL_HRTIM_IRQHandler+0x324>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80053a6:	0660      	lsls	r0, r4, #25
 80053a8:	d5cb      	bpl.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80053aa:	0669      	lsls	r1, r5, #25
 80053ac:	d5c9      	bpl.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2240      	movs	r2, #64	@ 0x40
 80053b2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053b4:	2106      	movs	r1, #6
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ff50 	bl	800525c <HAL_HRTIM_RegistersUpdateCallback>
 80053bc:	e7c1      	b.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80053be:	f8d3 4388 	ldr.w	r4, [r3, #904]	@ 0x388
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80053c2:	f8d3 5390 	ldr.w	r5, [r3, #912]	@ 0x390
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80053c6:	07e2      	lsls	r2, r4, #31
 80053c8:	d502      	bpl.n	80053d0 <HAL_HRTIM_IRQHandler+0x140>
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80053ca:	07ee      	lsls	r6, r5, #31
 80053cc:	f100 80f9 	bmi.w	80055c2 <HAL_HRTIM_IRQHandler+0x332>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80053d0:	07a0      	lsls	r0, r4, #30
 80053d2:	d502      	bpl.n	80053da <HAL_HRTIM_IRQHandler+0x14a>
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80053d4:	07a9      	lsls	r1, r5, #30
 80053d6:	f100 80fa 	bmi.w	80055ce <HAL_HRTIM_IRQHandler+0x33e>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80053da:	0762      	lsls	r2, r4, #29
 80053dc:	d502      	bpl.n	80053e4 <HAL_HRTIM_IRQHandler+0x154>
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80053de:	076b      	lsls	r3, r5, #29
 80053e0:	f100 80fd 	bmi.w	80055de <HAL_HRTIM_IRQHandler+0x34e>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80053e4:	0726      	lsls	r6, r4, #28
 80053e6:	d502      	bpl.n	80053ee <HAL_HRTIM_IRQHandler+0x15e>
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80053e8:	0728      	lsls	r0, r5, #28
 80053ea:	f100 8100 	bmi.w	80055ee <HAL_HRTIM_IRQHandler+0x35e>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80053ee:	06e1      	lsls	r1, r4, #27
 80053f0:	d502      	bpl.n	80053f8 <HAL_HRTIM_IRQHandler+0x168>
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80053f2:	06ea      	lsls	r2, r5, #27
 80053f4:	f100 8103 	bmi.w	80055fe <HAL_HRTIM_IRQHandler+0x36e>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 80053f8:	0663      	lsls	r3, r4, #25
 80053fa:	d502      	bpl.n	8005402 <HAL_HRTIM_IRQHandler+0x172>
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 80053fc:	066e      	lsls	r6, r5, #25
 80053fe:	f100 8106 	bmi.w	800560e <HAL_HRTIM_IRQHandler+0x37e>
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8005402:	06a4      	lsls	r4, r4, #26
 8005404:	d59d      	bpl.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8005406:	06a8      	lsls	r0, r5, #26
 8005408:	d59b      	bpl.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8005412:	4638      	mov	r0, r7
 8005414:	f7ff ff1a 	bl	800524c <HAL_HRTIM_SystemFaultCallback>
 8005418:	e793      	b.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800541a:	2201      	movs	r2, #1
 800541c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8005420:	f7ff ff1e 	bl	8005260 <HAL_HRTIM_Compare1EventCallback>
 8005424:	e74d      	b.n	80052c2 <HAL_HRTIM_IRQHandler+0x32>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	4443      	add	r3, r8
 800542a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800542e:	4629      	mov	r1, r5
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ff1f 	bl	8005278 <HAL_HRTIM_DelayedProtectionCallback>
}
 800543a:	e782      	b.n	8005342 <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4443      	add	r3, r8
 8005440:	2202      	movs	r2, #2
 8005442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8005446:	4629      	mov	r1, r5
 8005448:	4638      	mov	r0, r7
 800544a:	f7ff ff0b 	bl	8005264 <HAL_HRTIM_Compare2EventCallback>
 800544e:	e73d      	b.n	80052cc <HAL_HRTIM_IRQHandler+0x3c>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4443      	add	r3, r8
 8005454:	2204      	movs	r2, #4
 8005456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800545a:	4629      	mov	r1, r5
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff ff03 	bl	8005268 <HAL_HRTIM_Compare3EventCallback>
 8005462:	e738      	b.n	80052d6 <HAL_HRTIM_IRQHandler+0x46>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4443      	add	r3, r8
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800546e:	4629      	mov	r1, r5
 8005470:	4638      	mov	r0, r7
 8005472:	f7ff fefb 	bl	800526c <HAL_HRTIM_Compare4EventCallback>
 8005476:	e733      	b.n	80052e0 <HAL_HRTIM_IRQHandler+0x50>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4443      	add	r3, r8
 800547c:	2210      	movs	r2, #16
 800547e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005482:	4629      	mov	r1, r5
 8005484:	4638      	mov	r0, r7
 8005486:	f002 f939 	bl	80076fc <HAL_HRTIM_RepetitionEventCallback>
 800548a:	e72e      	b.n	80052ea <HAL_HRTIM_IRQHandler+0x5a>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4443      	add	r3, r8
 8005490:	2240      	movs	r2, #64	@ 0x40
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8005496:	4629      	mov	r1, r5
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff fedf 	bl	800525c <HAL_HRTIM_RegistersUpdateCallback>
 800549e:	e729      	b.n	80052f4 <HAL_HRTIM_IRQHandler+0x64>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4443      	add	r3, r8
 80054a4:	2280      	movs	r2, #128	@ 0x80
 80054a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80054aa:	4629      	mov	r1, r5
 80054ac:	4638      	mov	r0, r7
 80054ae:	f7ff fedf 	bl	8005270 <HAL_HRTIM_Capture1EventCallback>
 80054b2:	e724      	b.n	80052fe <HAL_HRTIM_IRQHandler+0x6e>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4443      	add	r3, r8
 80054b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80054c0:	4629      	mov	r1, r5
 80054c2:	4638      	mov	r0, r7
 80054c4:	f7ff fed6 	bl	8005274 <HAL_HRTIM_Capture2EventCallback>
 80054c8:	e71e      	b.n	8005308 <HAL_HRTIM_IRQHandler+0x78>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	4443      	add	r3, r8
 80054ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80054d6:	4629      	mov	r1, r5
 80054d8:	4638      	mov	r0, r7
 80054da:	f7ff fed1 	bl	8005280 <HAL_HRTIM_Output1SetCallback>
 80054de:	e718      	b.n	8005312 <HAL_HRTIM_IRQHandler+0x82>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4443      	add	r3, r8
 80054e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80054ec:	4629      	mov	r1, r5
 80054ee:	4638      	mov	r0, r7
 80054f0:	f7ff fec8 	bl	8005284 <HAL_HRTIM_Output1ResetCallback>
 80054f4:	e712      	b.n	800531c <HAL_HRTIM_IRQHandler+0x8c>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	4443      	add	r3, r8
 80054fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff febf 	bl	8005288 <HAL_HRTIM_Output2SetCallback>
 800550a:	e70c      	b.n	8005326 <HAL_HRTIM_IRQHandler+0x96>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4443      	add	r3, r8
 8005510:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8005518:	4629      	mov	r1, r5
 800551a:	4638      	mov	r0, r7
 800551c:	f7ff feb6 	bl	800528c <HAL_HRTIM_Output2ResetCallback>
 8005520:	e706      	b.n	8005330 <HAL_HRTIM_IRQHandler+0xa0>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	4443      	add	r3, r8
 8005526:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800552a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff fea3 	bl	800527c <HAL_HRTIM_CounterResetCallback>
 8005536:	e700      	b.n	800533a <HAL_HRTIM_IRQHandler+0xaa>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005538:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800553c:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005540:	2301      	movs	r3, #1
 8005542:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8005546:	2300      	movs	r3, #0
 8005548:	f880 30dc 	strb.w	r3, [r0, #220]	@ 0xdc
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 800554c:	f7ff fe80 	bl	8005250 <HAL_HRTIM_DLLCalibrationReadyCallback>
 8005550:	e705      	b.n	800535e <HAL_HRTIM_IRQHandler+0xce>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005558:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800555c:	4638      	mov	r0, r7
 800555e:	f7ff fe79 	bl	8005254 <HAL_HRTIM_BurstModePeriodCallback>
 8005562:	e702      	b.n	800536a <HAL_HRTIM_IRQHandler+0xda>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800556a:	2106      	movs	r1, #6
 800556c:	4638      	mov	r0, r7
 800556e:	f7ff fe77 	bl	8005260 <HAL_HRTIM_Compare1EventCallback>
 8005572:	e6ff      	b.n	8005374 <HAL_HRTIM_IRQHandler+0xe4>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800557a:	2106      	movs	r1, #6
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff fe71 	bl	8005264 <HAL_HRTIM_Compare2EventCallback>
 8005582:	e6fc      	b.n	800537e <HAL_HRTIM_IRQHandler+0xee>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800558a:	2106      	movs	r1, #6
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff fe6b 	bl	8005268 <HAL_HRTIM_Compare3EventCallback>
 8005592:	e6f9      	b.n	8005388 <HAL_HRTIM_IRQHandler+0xf8>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2208      	movs	r2, #8
 8005598:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800559a:	2106      	movs	r1, #6
 800559c:	4638      	mov	r0, r7
 800559e:	f7ff fe65 	bl	800526c <HAL_HRTIM_Compare4EventCallback>
 80055a2:	e6f6      	b.n	8005392 <HAL_HRTIM_IRQHandler+0x102>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2210      	movs	r2, #16
 80055a8:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80055aa:	2106      	movs	r1, #6
 80055ac:	4638      	mov	r0, r7
 80055ae:	f002 f8a5 	bl	80076fc <HAL_HRTIM_RepetitionEventCallback>
 80055b2:	e6f3      	b.n	800539c <HAL_HRTIM_IRQHandler+0x10c>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2220      	movs	r2, #32
 80055b8:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff fe4c 	bl	8005258 <HAL_HRTIM_SynchronizationEventCallback>
 80055c0:	e6f1      	b.n	80053a6 <HAL_HRTIM_IRQHandler+0x116>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80055c2:	2201      	movs	r2, #1
 80055c4:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault1Callback(hhrtim);
 80055c8:	f7ff fe34 	bl	8005234 <HAL_HRTIM_Fault1Callback>
 80055cc:	e700      	b.n	80053d0 <HAL_HRTIM_IRQHandler+0x140>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault2Callback(hhrtim);
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff fe2e 	bl	8005238 <HAL_HRTIM_Fault2Callback>
 80055dc:	e6fd      	b.n	80053da <HAL_HRTIM_IRQHandler+0x14a>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2204      	movs	r2, #4
 80055e2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault3Callback(hhrtim);
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff fe28 	bl	800523c <HAL_HRTIM_Fault3Callback>
 80055ec:	e6fa      	b.n	80053e4 <HAL_HRTIM_IRQHandler+0x154>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2208      	movs	r2, #8
 80055f2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault4Callback(hhrtim);
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7ff fe22 	bl	8005240 <HAL_HRTIM_Fault4Callback>
 80055fc:	e6f7      	b.n	80053ee <HAL_HRTIM_IRQHandler+0x15e>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2210      	movs	r2, #16
 8005602:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault5Callback(hhrtim);
 8005606:	4638      	mov	r0, r7
 8005608:	f7ff fe1c 	bl	8005244 <HAL_HRTIM_Fault5Callback>
 800560c:	e6f4      	b.n	80053f8 <HAL_HRTIM_IRQHandler+0x168>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2240      	movs	r2, #64	@ 0x40
 8005612:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c
      HAL_HRTIM_Fault6Callback(hhrtim);
 8005616:	4638      	mov	r0, r7
 8005618:	f7ff fe16 	bl	8005248 <HAL_HRTIM_Fault6Callback>
 800561c:	e6f1      	b.n	8005402 <HAL_HRTIM_IRQHandler+0x172>
 800561e:	bf00      	nop

08005620 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005620:	2800      	cmp	r0, #0
 8005622:	f000 80d7 	beq.w	80057d4 <HAL_PCD_Init+0x1b4>
{
 8005626:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005628:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800562c:	4604      	mov	r4, r0
 800562e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80c9 	beq.w	80057ca <HAL_PCD_Init+0x1aa>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005638:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800563a:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800563c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  __HAL_PCD_DISABLE(hpcd);
 8005640:	f001 fcec 	bl	800701c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005644:	7922      	ldrb	r2, [r4, #4]
 8005646:	2a00      	cmp	r2, #0
 8005648:	f000 80ae 	beq.w	80057a8 <HAL_PCD_Init+0x188>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800564c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 800564e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005652:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005654:	e9c4 3308 	strd	r3, r3, [r4, #32]
    hpcd->IN_ep[i].num = i;
 8005658:	8221      	strh	r1, [r4, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800565a:	74e3      	strb	r3, [r4, #19]
    hpcd->IN_ep[i].xfer_len = 0U;
 800565c:	62a3      	str	r3, [r4, #40]	@ 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800565e:	f000 80c0 	beq.w	80057e2 <HAL_PCD_Init+0x1c2>
    hpcd->IN_ep[i].num = i;
 8005662:	f240 1101 	movw	r1, #257	@ 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005666:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005668:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].num = i;
 800566c:	8721      	strh	r1, [r4, #56]	@ 0x38
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800566e:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
    hpcd->IN_ep[i].xfer_len = 0U;
 8005672:	6523      	str	r3, [r4, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005674:	d044      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 8005676:	f44f 7181 	mov.w	r1, #258	@ 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567a:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 800567c:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    hpcd->IN_ep[i].num = i;
 8005680:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005684:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    hpcd->IN_ep[i].xfer_len = 0U;
 8005688:	67a3      	str	r3, [r4, #120]	@ 0x78
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800568a:	d039      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 800568c:	f240 1103 	movw	r1, #259	@ 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005690:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005692:	e9c4 3326 	strd	r3, r3, [r4, #152]	@ 0x98
    hpcd->IN_ep[i].num = i;
 8005696:	f8a4 1088 	strh.w	r1, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800569a:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
    hpcd->IN_ep[i].xfer_len = 0U;
 800569e:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a2:	d02d      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 80056a4:	f44f 7182 	mov.w	r1, #260	@ 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a8:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056aa:	e9c4 3330 	strd	r3, r3, [r4, #192]	@ 0xc0
    hpcd->IN_ep[i].num = i;
 80056ae:	f8a4 10b0 	strh.w	r1, [r4, #176]	@ 0xb0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056b2:	f884 30b3 	strb.w	r3, [r4, #179]	@ 0xb3
    hpcd->IN_ep[i].xfer_len = 0U;
 80056b6:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ba:	d021      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 80056bc:	f240 1105 	movw	r1, #261	@ 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c0:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056c2:	e9c4 333a 	strd	r3, r3, [r4, #232]	@ 0xe8
    hpcd->IN_ep[i].num = i;
 80056c6:	f8a4 10d8 	strh.w	r1, [r4, #216]	@ 0xd8
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056ca:	f884 30db 	strb.w	r3, [r4, #219]	@ 0xdb
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ce:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d2:	d015      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].num = i;
 80056d4:	f44f 7183 	mov.w	r1, #262	@ 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d8:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056da:	e9c4 3344 	strd	r3, r3, [r4, #272]	@ 0x110
    hpcd->IN_ep[i].num = i;
 80056de:	f8a4 1100 	strh.w	r1, [r4, #256]	@ 0x100
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056e2:	f884 3103 	strb.w	r3, [r4, #259]	@ 0x103
    hpcd->IN_ep[i].xfer_len = 0U;
 80056e6:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ea:	d009      	beq.n	8005700 <HAL_PCD_Init+0xe0>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056ec:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].num = i;
 80056f0:	f240 1107 	movw	r1, #263	@ 0x107
 80056f4:	f8a4 1128 	strh.w	r1, [r4, #296]	@ 0x128
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056f8:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    hpcd->IN_ep[i].xfer_len = 0U;
 80056fc:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
    hpcd->OUT_ep[i].num = i;
 8005700:	2300      	movs	r3, #0
 8005702:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005704:	2a02      	cmp	r2, #2
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005706:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
 800570a:	e9c4 3362 	strd	r3, r3, [r4, #392]	@ 0x188
    hpcd->OUT_ep[i].num = i;
 800570e:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005712:	f884 3153 	strb.w	r3, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005716:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
    hpcd->OUT_ep[i].num = i;
 800571a:	f8a4 1178 	strh.w	r1, [r4, #376]	@ 0x178
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800571e:	f884 317b 	strb.w	r3, [r4, #379]	@ 0x17b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005722:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005726:	d03f      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 8005728:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800572c:	e9c4 336c 	strd	r3, r3, [r4, #432]	@ 0x1b0
    hpcd->OUT_ep[i].num = i;
 8005730:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005734:	f884 31a3 	strb.w	r3, [r4, #419]	@ 0x1a3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005738:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573c:	d034      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 800573e:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005740:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005742:	e9c4 3376 	strd	r3, r3, [r4, #472]	@ 0x1d8
    hpcd->OUT_ep[i].num = i;
 8005746:	f8a4 11c8 	strh.w	r1, [r4, #456]	@ 0x1c8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800574a:	f884 31cb 	strb.w	r3, [r4, #459]	@ 0x1cb
    hpcd->OUT_ep[i].xfer_len = 0U;
 800574e:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005752:	d029      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 8005754:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005756:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005758:	e9c4 3380 	strd	r3, r3, [r4, #512]	@ 0x200
    hpcd->OUT_ep[i].num = i;
 800575c:	f8a4 11f0 	strh.w	r1, [r4, #496]	@ 0x1f0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005760:	f884 31f3 	strb.w	r3, [r4, #499]	@ 0x1f3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005764:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005768:	d01e      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 800576a:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800576c:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800576e:	e9c4 338a 	strd	r3, r3, [r4, #552]	@ 0x228
    hpcd->OUT_ep[i].num = i;
 8005772:	f8a4 1218 	strh.w	r1, [r4, #536]	@ 0x218
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005776:	f884 321b 	strb.w	r3, [r4, #539]	@ 0x21b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800577a:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800577e:	d013      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].num = i;
 8005780:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005782:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005784:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
    hpcd->OUT_ep[i].num = i;
 8005788:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800578c:	f884 3243 	strb.w	r3, [r4, #579]	@ 0x243
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005790:	f8c4 3258 	str.w	r3, [r4, #600]	@ 0x258
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005794:	d008      	beq.n	80057a8 <HAL_PCD_Init+0x188>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005796:	e9c4 339e 	strd	r3, r3, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].num = i;
 800579a:	2207      	movs	r2, #7
 800579c:	f8a4 2268 	strh.w	r2, [r4, #616]	@ 0x268
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057a0:	f884 326b 	strb.w	r3, [r4, #619]	@ 0x26b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057a4:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80057a8:	4623      	mov	r3, r4
 80057aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80057ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80057b2:	f001 fc3d 	bl	8007030 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057b6:	7aa3      	ldrb	r3, [r4, #10]
  hpcd->State = HAL_PCD_STATE_READY;
 80057b8:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 80057ba:	2100      	movs	r1, #0
  if (hpcd->Init.lpm_enable == 1U)
 80057bc:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 80057be:	7321      	strb	r1, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80057c0:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
  if (hpcd->Init.lpm_enable == 1U)
 80057c4:	d008      	beq.n	80057d8 <HAL_PCD_Init+0x1b8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80057c6:	2000      	movs	r0, #0
}
 80057c8:	bd10      	pop	{r4, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80057ca:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 80057ce:	f7fc fe3f 	bl	8002450 <HAL_PCD_MspInit>
 80057d2:	e731      	b.n	8005638 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
}
 80057d6:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f80b 	bl	80057f4 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80057de:	2000      	movs	r0, #0
}
 80057e0:	bd10      	pop	{r4, pc}
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057e2:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->OUT_ep[i].num = i;
 80057e6:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057ea:	f884 3153 	strb.w	r3, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057ee:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f2:	e7d9      	b.n	80057a8 <HAL_PCD_Init+0x188>

080057f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057f4:	4602      	mov	r2, r0

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80057f6:	2000      	movs	r0, #0
  USB_TypeDef *USBx = hpcd->Instance;
 80057f8:	6811      	ldr	r1, [r2, #0]
{
 80057fa:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 80057fc:	f882 02c8 	strb.w	r0, [r2, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005800:	f8b1 3054 	ldrh.w	r3, [r1, #84]	@ 0x54
  hpcd->lpm_active = 1U;
 8005804:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005806:	b29b      	uxth	r3, r3
 8005808:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 800580a:	f8c2 42d0 	str.w	r4, [r2, #720]	@ 0x2d0
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800580e:	f8a1 3054 	strh.w	r3, [r1, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005812:	f8b1 3054 	ldrh.w	r3, [r1, #84]	@ 0x54

  return HAL_OK;
}
 8005816:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800581a:	b29b      	uxth	r3, r3
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	f8a1 3054 	strh.w	r3, [r1, #84]	@ 0x54
}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800582a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800582c:	b960      	cbnz	r0, 8005848 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800582e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005836:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800583a:	d01b      	beq.n	8005874 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800583c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005844:	2000      	movs	r0, #0
}
 8005846:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005848:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800584c:	d006      	beq.n	800585c <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800584e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005856:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005858:	2000      	movs	r0, #0
}
 800585a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800585c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005864:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005868:	d029      	beq.n	80058be <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800586a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005872:	e7f1      	b.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800587c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800587e:	4821      	ldr	r0, [pc, #132]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005880:	4921      	ldr	r1, [pc, #132]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005882:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800588a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	2032      	movs	r0, #50	@ 0x32
 8005890:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005894:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005896:	fba1 1303 	umull	r1, r3, r1, r3
 800589a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800589e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a2:	d506      	bpl.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058a4:	e000      	b.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0x80>
 80058a6:	b123      	cbz	r3, 80058b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058a8:	6951      	ldr	r1, [r2, #20]
 80058aa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80058ac:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058b0:	d4f9      	bmi.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	055b      	lsls	r3, r3, #21
 80058b8:	d5ce      	bpl.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80058ba:	2003      	movs	r0, #3
 80058bc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c6:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058c8:	480e      	ldr	r0, [pc, #56]	@ (8005904 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80058ca:	490f      	ldr	r1, [pc, #60]	@ (8005908 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058d4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058d6:	6803      	ldr	r3, [r0, #0]
 80058d8:	2032      	movs	r0, #50	@ 0x32
 80058da:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058de:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e0:	fba1 1303 	umull	r1, r3, r1, r3
 80058e4:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e6:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e8:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ec:	d5e1      	bpl.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058ee:	e001      	b.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0xcc>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0de      	beq.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058f4:	6951      	ldr	r1, [r2, #20]
 80058f6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80058f8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fc:	d5d9      	bpl.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058fe:	e7f7      	b.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005900:	40007000 	.word	0x40007000
 8005904:	20000008 	.word	0x20000008
 8005908:	431bde83 	.word	0x431bde83

0800590c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800590c:	4a02      	ldr	r2, [pc, #8]	@ (8005918 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800590e:	6893      	ldr	r3, [r2, #8]
 8005910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005914:	6093      	str	r3, [r2, #8]
}
 8005916:	4770      	bx	lr
 8005918:	40007000 	.word	0x40007000

0800591c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800591c:	2800      	cmp	r0, #0
 800591e:	f000 81bd 	beq.w	8005c9c <HAL_RCC_OscConfig+0x380>
{
 8005922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	07d9      	lsls	r1, r3, #31
{
 800592a:	b082      	sub	sp, #8
 800592c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592e:	d512      	bpl.n	8005956 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005930:	49a6      	ldr	r1, [pc, #664]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005932:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005934:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005936:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800593a:	2a0c      	cmp	r2, #12
 800593c:	f000 80d0 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x1c4>
 8005940:	2a08      	cmp	r2, #8
 8005942:	f040 80d2 	bne.w	8005aea <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005946:	4aa1      	ldr	r2, [pc, #644]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	0392      	lsls	r2, r2, #14
 800594c:	d503      	bpl.n	8005956 <HAL_RCC_OscConfig+0x3a>
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2a00      	cmp	r2, #0
 8005952:	f000 8137 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	079a      	lsls	r2, r3, #30
 8005958:	d522      	bpl.n	80059a0 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800595a:	4a9c      	ldr	r2, [pc, #624]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 800595c:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800595e:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005960:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005964:	2b0c      	cmp	r3, #12
 8005966:	f000 80f8 	beq.w	8005b5a <HAL_RCC_OscConfig+0x23e>
 800596a:	2b04      	cmp	r3, #4
 800596c:	f040 80fa 	bne.w	8005b64 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005970:	4b96      	ldr	r3, [pc, #600]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	055b      	lsls	r3, r3, #21
 8005976:	d503      	bpl.n	8005980 <HAL_RCC_OscConfig+0x64>
 8005978:	68e3      	ldr	r3, [r4, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8122 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005980:	4a92      	ldr	r2, [pc, #584]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005982:	6920      	ldr	r0, [r4, #16]
 8005984:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005986:	4992      	ldr	r1, [pc, #584]	@ (8005bd0 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800598c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005990:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005992:	6808      	ldr	r0, [r1, #0]
 8005994:	f7fc fdae 	bl	80024f4 <HAL_InitTick>
 8005998:	2800      	cmp	r0, #0
 800599a:	f040 8113 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	071a      	lsls	r2, r3, #28
 80059a2:	d519      	bpl.n	80059d8 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059a4:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a6:	4d89      	ldr	r5, [pc, #548]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80c2 	beq.w	8005b32 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80059ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fc fddd 	bl	8002578 <HAL_GetTick>
 80059be:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059c0:	e005      	b.n	80059ce <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c2:	f7fc fdd9 	bl	8002578 <HAL_GetTick>
 80059c6:	1b80      	subs	r0, r0, r6
 80059c8:	2802      	cmp	r0, #2
 80059ca:	f200 8117 	bhi.w	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80059d2:	079b      	lsls	r3, r3, #30
 80059d4:	d5f5      	bpl.n	80059c2 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	075d      	lsls	r5, r3, #29
 80059da:	d541      	bpl.n	8005a60 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059dc:	4b7b      	ldr	r3, [pc, #492]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 80059de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059e0:	00d0      	lsls	r0, r2, #3
 80059e2:	f100 810f 	bmi.w	8005c04 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80059ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80059ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80059f8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059fa:	4e76      	ldr	r6, [pc, #472]	@ (8005bd4 <HAL_RCC_OscConfig+0x2b8>)
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	05d9      	lsls	r1, r3, #23
 8005a00:	f140 812e 	bpl.w	8005c60 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a04:	68a3      	ldr	r3, [r4, #8]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	f000 80fe 	beq.w	8005c08 <HAL_RCC_OscConfig+0x2ec>
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	f000 8184 	beq.w	8005d1a <HAL_RCC_OscConfig+0x3fe>
 8005a12:	4e6e      	ldr	r6, [pc, #440]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005a14:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005a20:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005a24:	f022 0204 	bic.w	r2, r2, #4
 8005a28:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 80f2 	bne.w	8005c16 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fc fda1 	bl	8002578 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005a3a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a3c:	e005      	b.n	8005a4a <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7fc fd9b 	bl	8002578 <HAL_GetTick>
 8005a42:	1bc0      	subs	r0, r0, r7
 8005a44:	4540      	cmp	r0, r8
 8005a46:	f200 80d9 	bhi.w	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a4a:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005a4e:	0799      	lsls	r1, r3, #30
 8005a50:	d4f5      	bmi.n	8005a3e <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a52:	b125      	cbz	r5, 8005a5e <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a54:	4a5d      	ldr	r2, [pc, #372]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005a56:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	069a      	lsls	r2, r3, #26
 8005a62:	d518      	bpl.n	8005a96 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a64:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a66:	4d59      	ldr	r5, [pc, #356]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80e5 	beq.w	8005c38 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8005a6e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fc fd7d 	bl	8002578 <HAL_GetTick>
 8005a7e:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a80:	e005      	b.n	8005a8e <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a82:	f7fc fd79 	bl	8002578 <HAL_GetTick>
 8005a86:	1b80      	subs	r0, r0, r6
 8005a88:	2802      	cmp	r0, #2
 8005a8a:	f200 80b7 	bhi.w	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a8e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005a92:	079b      	lsls	r3, r3, #30
 8005a94:	d5f5      	bpl.n	8005a82 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a96:	69e3      	ldr	r3, [r4, #28]
 8005a98:	b1f3      	cbz	r3, 8005ad8 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a9a:	4d4c      	ldr	r5, [pc, #304]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005a9c:	68aa      	ldr	r2, [r5, #8]
 8005a9e:	f002 020c 	and.w	r2, r2, #12
 8005aa2:	2a0c      	cmp	r2, #12
 8005aa4:	f000 8147 	beq.w	8005d36 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aa8:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ab2:	f000 80f5 	beq.w	8005ca0 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fc fd5f 	bl	8002578 <HAL_GetTick>
 8005aba:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005abc:	e005      	b.n	8005aca <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abe:	f7fc fd5b 	bl	8002578 <HAL_GetTick>
 8005ac2:	1b00      	subs	r0, r0, r4
 8005ac4:	2802      	cmp	r0, #2
 8005ac6:	f200 8099 	bhi.w	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aca:	682b      	ldr	r3, [r5, #0]
 8005acc:	019b      	lsls	r3, r3, #6
 8005ace:	d4f6      	bmi.n	8005abe <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ad0:	68ea      	ldr	r2, [r5, #12]
 8005ad2:	4b41      	ldr	r3, [pc, #260]	@ (8005bd8 <HAL_RCC_OscConfig+0x2bc>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8005ad8:	2000      	movs	r0, #0
}
 8005ada:	b002      	add	sp, #8
 8005adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ae0:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ae4:	2903      	cmp	r1, #3
 8005ae6:	f43f af2e 	beq.w	8005946 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d055      	beq.n	8005b9e <HAL_RCC_OscConfig+0x282>
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af6:	f000 80c4 	beq.w	8005c82 <HAL_RCC_OscConfig+0x366>
 8005afa:	4d34      	ldr	r5, [pc, #208]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005afc:	682a      	ldr	r2, [r5, #0]
 8005afe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b02:	602a      	str	r2, [r5, #0]
 8005b04:	682a      	ldr	r2, [r5, #0]
 8005b06:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b0a:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d14b      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8005b10:	f7fc fd32 	bl	8002578 <HAL_GetTick>
 8005b14:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b16:	e004      	b.n	8005b22 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b18:	f7fc fd2e 	bl	8002578 <HAL_GetTick>
 8005b1c:	1b80      	subs	r0, r0, r6
 8005b1e:	2864      	cmp	r0, #100	@ 0x64
 8005b20:	d86c      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	0399      	lsls	r1, r3, #14
 8005b26:	d4f7      	bmi.n	8005b18 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	079a      	lsls	r2, r3, #30
 8005b2c:	f57f af38 	bpl.w	80059a0 <HAL_RCC_OscConfig+0x84>
 8005b30:	e713      	b.n	800595a <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8005b32:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005b3e:	f7fc fd1b 	bl	8002578 <HAL_GetTick>
 8005b42:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b44:	e004      	b.n	8005b50 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fc fd17 	bl	8002578 <HAL_GetTick>
 8005b4a:	1b80      	subs	r0, r0, r6
 8005b4c:	2802      	cmp	r0, #2
 8005b4e:	d855      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b50:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005b54:	079f      	lsls	r7, r3, #30
 8005b56:	d4f6      	bmi.n	8005b46 <HAL_RCC_OscConfig+0x22a>
 8005b58:	e73d      	b.n	80059d6 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b5a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b5e:	2a02      	cmp	r2, #2
 8005b60:	f43f af06 	beq.w	8005970 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b64:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005b66:	4d19      	ldr	r5, [pc, #100]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d037      	beq.n	8005bdc <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b74:	f7fc fd00 	bl	8002578 <HAL_GetTick>
 8005b78:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b7a:	e004      	b.n	8005b86 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7c:	f7fc fcfc 	bl	8002578 <HAL_GetTick>
 8005b80:	1b80      	subs	r0, r0, r6
 8005b82:	2802      	cmp	r0, #2
 8005b84:	d83a      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	055f      	lsls	r7, r3, #21
 8005b8a:	d5f7      	bpl.n	8005b7c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8c:	686b      	ldr	r3, [r5, #4]
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005b94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b98:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	e700      	b.n	80059a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
 8005ba0:	6813      	ldr	r3, [r2, #0]
 8005ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ba8:	f7fc fce6 	bl	8002578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bac:	4e07      	ldr	r6, [pc, #28]	@ (8005bcc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005bae:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb0:	e004      	b.n	8005bbc <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb2:	f7fc fce1 	bl	8002578 <HAL_GetTick>
 8005bb6:	1b40      	subs	r0, r0, r5
 8005bb8:	2864      	cmp	r0, #100	@ 0x64
 8005bba:	d81f      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbc:	6833      	ldr	r3, [r6, #0]
 8005bbe:	039f      	lsls	r7, r3, #14
 8005bc0:	d5f7      	bpl.n	8005bb2 <HAL_RCC_OscConfig+0x296>
 8005bc2:	e7b1      	b.n	8005b28 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
}
 8005bc6:	b002      	add	sp, #8
 8005bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	20000010 	.word	0x20000010
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005be4:	f7fc fcc8 	bl	8002578 <HAL_GetTick>
 8005be8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	0559      	lsls	r1, r3, #21
 8005bee:	f57f aed6 	bpl.w	800599e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf2:	f7fc fcc1 	bl	8002578 <HAL_GetTick>
 8005bf6:	1b80      	subs	r0, r0, r6
 8005bf8:	2802      	cmp	r0, #2
 8005bfa:	d9f6      	bls.n	8005bea <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005bfc:	2003      	movs	r0, #3
}
 8005bfe:	b002      	add	sp, #8
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005c04:	2500      	movs	r5, #0
 8005c06:	e6f8      	b.n	80059fa <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c08:	4a65      	ldr	r2, [pc, #404]	@ (8005da0 <HAL_RCC_OscConfig+0x484>)
 8005c0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005c16:	f7fc fcaf 	bl	8002578 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1a:	4f61      	ldr	r7, [pc, #388]	@ (8005da0 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8005c1c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c22:	e004      	b.n	8005c2e <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c24:	f7fc fca8 	bl	8002578 <HAL_GetTick>
 8005c28:	1b80      	subs	r0, r0, r6
 8005c2a:	4540      	cmp	r0, r8
 8005c2c:	d8e6      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c32:	079b      	lsls	r3, r3, #30
 8005c34:	d5f6      	bpl.n	8005c24 <HAL_RCC_OscConfig+0x308>
 8005c36:	e70c      	b.n	8005a52 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8005c38:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005c44:	f7fc fc98 	bl	8002578 <HAL_GetTick>
 8005c48:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c4a:	e004      	b.n	8005c56 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c4c:	f7fc fc94 	bl	8002578 <HAL_GetTick>
 8005c50:	1b80      	subs	r0, r0, r6
 8005c52:	2802      	cmp	r0, #2
 8005c54:	d8d2      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c56:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005c5a:	079f      	lsls	r7, r3, #30
 8005c5c:	d4f6      	bmi.n	8005c4c <HAL_RCC_OscConfig+0x330>
 8005c5e:	e71a      	b.n	8005a96 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005c68:	f7fc fc86 	bl	8002578 <HAL_GetTick>
 8005c6c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6e:	6833      	ldr	r3, [r6, #0]
 8005c70:	05da      	lsls	r2, r3, #23
 8005c72:	f53f aec7 	bmi.w	8005a04 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c76:	f7fc fc7f 	bl	8002578 <HAL_GetTick>
 8005c7a:	1bc0      	subs	r0, r0, r7
 8005c7c:	2802      	cmp	r0, #2
 8005c7e:	d9f6      	bls.n	8005c6e <HAL_RCC_OscConfig+0x352>
 8005c80:	e7bc      	b.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c86:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c98:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c9a:	e785      	b.n	8005ba8 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8005c9c:	2001      	movs	r0, #1
}
 8005c9e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005ca0:	f7fc fc6a 	bl	8002578 <HAL_GetTick>
 8005ca4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca6:	e004      	b.n	8005cb2 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fc fc66 	bl	8002578 <HAL_GetTick>
 8005cac:	1b80      	subs	r0, r0, r6
 8005cae:	2802      	cmp	r0, #2
 8005cb0:	d8a4      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	0199      	lsls	r1, r3, #6
 8005cb6:	d4f7      	bmi.n	8005ca8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb8:	68e9      	ldr	r1, [r5, #12]
 8005cba:	4b3a      	ldr	r3, [pc, #232]	@ (8005da4 <HAL_RCC_OscConfig+0x488>)
 8005cbc:	6a22      	ldr	r2, [r4, #32]
 8005cbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc0:	4e37      	ldr	r6, [pc, #220]	@ (8005da0 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8005cca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005cce:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005cd2:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005cd6:	3801      	subs	r0, #1
 8005cd8:	0849      	lsrs	r1, r1, #1
 8005cda:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005cde:	3901      	subs	r1, #1
 8005ce0:	0852      	lsrs	r2, r2, #1
 8005ce2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005cec:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cf4:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf6:	68eb      	ldr	r3, [r5, #12]
 8005cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cfc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005cfe:	f7fc fc3b 	bl	8002578 <HAL_GetTick>
 8005d02:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d04:	e005      	b.n	8005d12 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d06:	f7fc fc37 	bl	8002578 <HAL_GetTick>
 8005d0a:	1b00      	subs	r0, r0, r4
 8005d0c:	2802      	cmp	r0, #2
 8005d0e:	f63f af75 	bhi.w	8005bfc <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d12:	6833      	ldr	r3, [r6, #0]
 8005d14:	019a      	lsls	r2, r3, #6
 8005d16:	d5f6      	bpl.n	8005d06 <HAL_RCC_OscConfig+0x3ea>
 8005d18:	e6de      	b.n	8005ad8 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1a:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_RCC_OscConfig+0x484>)
 8005d1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d20:	f042 0204 	orr.w	r2, r2, #4
 8005d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005d28:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d34:	e76f      	b.n	8005c16 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f43f af44 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8005d3c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3e:	6a22      	ldr	r2, [r4, #32]
 8005d40:	f003 0103 	and.w	r1, r3, #3
 8005d44:	4291      	cmp	r1, r2
 8005d46:	f47f af3d 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d4a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d50:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005d56:	f47f af35 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d5a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005d5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d60:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005d64:	f47f af2e 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d68:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005d6a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d6e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005d72:	f47f af27 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005d78:	0852      	lsrs	r2, r2, #1
 8005d7a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005d7e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d80:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005d84:	f47f af1e 	bne.w	8005bc4 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d88:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005d8a:	0852      	lsrs	r2, r2, #1
 8005d8c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005d90:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d92:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005d96:	bf14      	ite	ne
 8005d98:	2001      	movne	r0, #1
 8005d9a:	2000      	moveq	r0, #0
 8005d9c:	e69d      	b.n	8005ada <HAL_RCC_OscConfig+0x1be>
 8005d9e:	bf00      	nop
 8005da0:	40021000 	.word	0x40021000
 8005da4:	019f800c 	.word	0x019f800c

08005da8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005da8:	4b18      	ldr	r3, [pc, #96]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x64>)
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	f002 020c 	and.w	r2, r2, #12
 8005db0:	2a04      	cmp	r2, #4
 8005db2:	d026      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	f002 020c 	and.w	r2, r2, #12
 8005dba:	2a08      	cmp	r2, #8
 8005dbc:	d023      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	f002 020c 	and.w	r2, r2, #12
 8005dc4:	2a0c      	cmp	r2, #12
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005dc8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005dca:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dcc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dce:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dd0:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dd2:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005dd6:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dd8:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ddc:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de0:	bf0c      	ite	eq
 8005de2:	4b0b      	ldreq	r3, [pc, #44]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de4:	4b0b      	ldrne	r3, [pc, #44]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005de6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dec:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005df0:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x64>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005df8:	3301      	adds	r3, #1
 8005dfa:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005dfc:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005e00:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005e02:	4804      	ldr	r0, [pc, #16]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005e04:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005e06:	4802      	ldr	r0, [pc, #8]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x68>)
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	02dc6c00 	.word	0x02dc6c00
 8005e14:	00f42400 	.word	0x00f42400

08005e18 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f000 80ee 	beq.w	8005ffa <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1e:	4a78      	ldr	r2, [pc, #480]	@ (8006000 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	6813      	ldr	r3, [r2, #0]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	460d      	mov	r5, r1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	d20c      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	f023 030f 	bic.w	r3, r3, #15
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3c:	6813      	ldr	r3, [r2, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	428b      	cmp	r3, r1
 8005e44:	d002      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005e46:	2001      	movs	r0, #1
}
 8005e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	07df      	lsls	r7, r3, #31
 8005e50:	d569      	bpl.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e52:	6867      	ldr	r7, [r4, #4]
 8005e54:	2f03      	cmp	r7, #3
 8005e56:	f000 80a0 	beq.w	8005f9a <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e60:	f000 8097 	beq.w	8005f92 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e64:	055b      	lsls	r3, r3, #21
 8005e66:	d5ee      	bpl.n	8005e46 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e68:	f7ff ff9e 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005e6c:	4b66      	ldr	r3, [pc, #408]	@ (8006008 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	f240 80c0 	bls.w	8005ff4 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e74:	4a63      	ldr	r2, [pc, #396]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005e76:	6893      	ldr	r3, [r2, #8]
 8005e78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e82:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e86:	4e5f      	ldr	r6, [pc, #380]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005e88:	68b3      	ldr	r3, [r6, #8]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	433b      	orrs	r3, r7
 8005e90:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005e92:	f7fc fb71 	bl	8002578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e96:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005e9a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9c:	e004      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e9e:	f7fc fb6b 	bl	8002578 <HAL_GetTick>
 8005ea2:	1bc0      	subs	r0, r0, r7
 8005ea4:	4540      	cmp	r0, r8
 8005ea6:	d871      	bhi.n	8005f8c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea8:	68b3      	ldr	r3, [r6, #8]
 8005eaa:	6862      	ldr	r2, [r4, #4]
 8005eac:	f003 030c 	and.w	r3, r3, #12
 8005eb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005eb4:	d1f3      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	079f      	lsls	r7, r3, #30
 8005eba:	d436      	bmi.n	8005f2a <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005ebc:	f1b9 0f00 	cmp.w	r9, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ec2:	68b3      	ldr	r3, [r6, #8]
 8005ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eca:	4e4d      	ldr	r6, [pc, #308]	@ (8006000 <HAL_RCC_ClockConfig+0x1e8>)
 8005ecc:	6833      	ldr	r3, [r6, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	42ab      	cmp	r3, r5
 8005ed4:	d846      	bhi.n	8005f64 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	075a      	lsls	r2, r3, #29
 8005eda:	d506      	bpl.n	8005eea <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005edc:	4949      	ldr	r1, [pc, #292]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005ede:	68e0      	ldr	r0, [r4, #12]
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ee6:	4302      	orrs	r2, r0
 8005ee8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eea:	071b      	lsls	r3, r3, #28
 8005eec:	d507      	bpl.n	8005efe <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eee:	4a45      	ldr	r2, [pc, #276]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005ef0:	6921      	ldr	r1, [r4, #16]
 8005ef2:	6893      	ldr	r3, [r2, #8]
 8005ef4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005ef8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005efc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005efe:	f7ff ff53 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005f02:	4a40      	ldr	r2, [pc, #256]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005f04:	4c41      	ldr	r4, [pc, #260]	@ (800600c <HAL_RCC_ClockConfig+0x1f4>)
 8005f06:	6892      	ldr	r2, [r2, #8]
 8005f08:	4941      	ldr	r1, [pc, #260]	@ (8006010 <HAL_RCC_ClockConfig+0x1f8>)
 8005f0a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005f0e:	4603      	mov	r3, r0
 8005f10:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005f12:	4840      	ldr	r0, [pc, #256]	@ (8006014 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f14:	f002 021f 	and.w	r2, r2, #31
 8005f18:	40d3      	lsrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005f1c:	6800      	ldr	r0, [r0, #0]
}
 8005f1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005f22:	f7fc bae7 	b.w	80024f4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f26:	079e      	lsls	r6, r3, #30
 8005f28:	d5cf      	bpl.n	8005eca <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2a:	0758      	lsls	r0, r3, #29
 8005f2c:	d504      	bpl.n	8005f38 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f2e:	4935      	ldr	r1, [pc, #212]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005f30:	688a      	ldr	r2, [r1, #8]
 8005f32:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005f36:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f38:	0719      	lsls	r1, r3, #28
 8005f3a:	d506      	bpl.n	8005f4a <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f3c:	4a31      	ldr	r2, [pc, #196]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3e:	6893      	ldr	r3, [r2, #8]
 8005f40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f44:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f48:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005f4c:	68a1      	ldr	r1, [r4, #8]
 8005f4e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4e2b      	ldr	r6, [pc, #172]	@ (8006000 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f56:	430b      	orrs	r3, r1
 8005f58:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f5a:	6833      	ldr	r3, [r6, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	d9b8      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	f023 030f 	bic.w	r3, r3, #15
 8005f6a:	432b      	orrs	r3, r5
 8005f6c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f6e:	f7fc fb03 	bl	8002578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f72:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005f76:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f78:	6833      	ldr	r3, [r6, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	d0a9      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f82:	f7fc faf9 	bl	8002578 <HAL_GetTick>
 8005f86:	1bc0      	subs	r0, r0, r7
 8005f88:	4540      	cmp	r0, r8
 8005f8a:	d9f5      	bls.n	8005f78 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005f8c:	2003      	movs	r0, #3
}
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f92:	039a      	lsls	r2, r3, #14
 8005f94:	f53f af68 	bmi.w	8005e68 <HAL_RCC_ClockConfig+0x50>
 8005f98:	e755      	b.n	8005e46 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
 8005f9c:	6811      	ldr	r1, [r2, #0]
 8005f9e:	0188      	lsls	r0, r1, #6
 8005fa0:	f57f af51 	bpl.w	8005e46 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fa4:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fa6:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa8:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005faa:	4e17      	ldr	r6, [pc, #92]	@ (8006008 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fac:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005fb0:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fb2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fb6:	bf0c      	ite	eq
 8005fb8:	4817      	ldreq	r0, [pc, #92]	@ (8006018 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fba:	4818      	ldrne	r0, [pc, #96]	@ (800601c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fbc:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fbe:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fc2:	4810      	ldr	r0, [pc, #64]	@ (8006004 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fc4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005fc8:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fcc:	68c1      	ldr	r1, [r0, #12]
 8005fce:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005fd2:	3101      	adds	r1, #1
 8005fd4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8005fd6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8005fda:	42b2      	cmp	r2, r6
 8005fdc:	d90a      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fde:	6882      	ldr	r2, [r0, #8]
 8005fe0:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8005fe4:	f43f af46 	beq.w	8005e74 <HAL_RCC_ClockConfig+0x5c>
 8005fe8:	0799      	lsls	r1, r3, #30
 8005fea:	d503      	bpl.n	8005ff4 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f43f af40 	beq.w	8005e74 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ff4:	f04f 0900 	mov.w	r9, #0
 8005ff8:	e745      	b.n	8005e86 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40022000 	.word	0x40022000
 8006004:	40021000 	.word	0x40021000
 8006008:	04c4b400 	.word	0x04c4b400
 800600c:	0800ac58 	.word	0x0800ac58
 8006010:	20000008 	.word	0x20000008
 8006014:	20000010 	.word	0x20000010
 8006018:	02dc6c00 	.word	0x02dc6c00
 800601c:	00f42400 	.word	0x00f42400

08006020 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006020:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006022:	4a06      	ldr	r2, [pc, #24]	@ (800603c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006024:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006026:	4906      	ldr	r1, [pc, #24]	@ (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006028:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800602c:	6808      	ldr	r0, [r1, #0]
 800602e:	5cd3      	ldrb	r3, [r2, r3]
 8006030:	f003 031f 	and.w	r3, r3, #31
}
 8006034:	40d8      	lsrs	r0, r3
 8006036:	4770      	bx	lr
 8006038:	40021000 	.word	0x40021000
 800603c:	0800ac50 	.word	0x0800ac50
 8006040:	20000008 	.word	0x20000008

08006044 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006046:	4a06      	ldr	r2, [pc, #24]	@ (8006060 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006048:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800604a:	4906      	ldr	r1, [pc, #24]	@ (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800604c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006050:	6808      	ldr	r0, [r1, #0]
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
}
 8006058:	40d8      	lsrs	r0, r3
 800605a:	4770      	bx	lr
 800605c:	40021000 	.word	0x40021000
 8006060:	0800ac50 	.word	0x0800ac50
 8006064:	20000008 	.word	0x20000008

08006068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800606c:	6803      	ldr	r3, [r0, #0]
{
 800606e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006070:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006074:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006076:	d052      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006078:	4bac      	ldr	r3, [pc, #688]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800607a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800607c:	00d5      	lsls	r5, r2, #3
 800607e:	f140 813a 	bpl.w	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006084:	4daa      	ldr	r5, [pc, #680]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800608e:	f7fc fa73 	bl	8002578 <HAL_GetTick>
 8006092:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006094:	e005      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006096:	f7fc fa6f 	bl	8002578 <HAL_GetTick>
 800609a:	1b83      	subs	r3, r0, r6
 800609c:	2b02      	cmp	r3, #2
 800609e:	f200 8135 	bhi.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	05d8      	lsls	r0, r3, #23
 80060a6:	d5f6      	bpl.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060a8:	4da0      	ldr	r5, [pc, #640]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060aa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060ac:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060b0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80060b4:	d026      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d024      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ba:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060be:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80060c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ca:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80060ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060d6:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060da:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80060dc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060e0:	d510      	bpl.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fa49 	bl	8002578 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80060ea:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ec:	e005      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fc fa43 	bl	8002578 <HAL_GetTick>
 80060f2:	1b80      	subs	r0, r0, r6
 80060f4:	4540      	cmp	r0, r8
 80060f6:	f200 8109 	bhi.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	d5f5      	bpl.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006102:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006104:	4989      	ldr	r1, [pc, #548]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006106:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800610a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006114:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006116:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8006118:	2f00      	cmp	r7, #0
 800611a:	f040 80fc 	bne.w	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800611e:	07dd      	lsls	r5, r3, #31
 8006120:	d508      	bpl.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006122:	4982      	ldr	r1, [pc, #520]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006124:	6865      	ldr	r5, [r4, #4]
 8006126:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800612a:	f022 0203 	bic.w	r2, r2, #3
 800612e:	432a      	orrs	r2, r5
 8006130:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006134:	0799      	lsls	r1, r3, #30
 8006136:	d508      	bpl.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006138:	497c      	ldr	r1, [pc, #496]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800613a:	68a5      	ldr	r5, [r4, #8]
 800613c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006140:	f022 020c 	bic.w	r2, r2, #12
 8006144:	432a      	orrs	r2, r5
 8006146:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800614a:	075a      	lsls	r2, r3, #29
 800614c:	d508      	bpl.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800614e:	4977      	ldr	r1, [pc, #476]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006150:	68e5      	ldr	r5, [r4, #12]
 8006152:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006156:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800615a:	432a      	orrs	r2, r5
 800615c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006160:	071f      	lsls	r7, r3, #28
 8006162:	d508      	bpl.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006164:	4971      	ldr	r1, [pc, #452]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006166:	6925      	ldr	r5, [r4, #16]
 8006168:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800616c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006170:	432a      	orrs	r2, r5
 8006172:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006176:	06de      	lsls	r6, r3, #27
 8006178:	d508      	bpl.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800617a:	496c      	ldr	r1, [pc, #432]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800617c:	6965      	ldr	r5, [r4, #20]
 800617e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006182:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006186:	432a      	orrs	r2, r5
 8006188:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800618c:	069d      	lsls	r5, r3, #26
 800618e:	d508      	bpl.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006190:	4966      	ldr	r1, [pc, #408]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006192:	69a5      	ldr	r5, [r4, #24]
 8006194:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006198:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800619c:	432a      	orrs	r2, r5
 800619e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061a2:	0659      	lsls	r1, r3, #25
 80061a4:	d508      	bpl.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061a6:	4961      	ldr	r1, [pc, #388]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061a8:	69e5      	ldr	r5, [r4, #28]
 80061aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061ae:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80061b2:	432a      	orrs	r2, r5
 80061b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b8:	061a      	lsls	r2, r3, #24
 80061ba:	d508      	bpl.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061bc:	495b      	ldr	r1, [pc, #364]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061be:	6a25      	ldr	r5, [r4, #32]
 80061c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061c4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80061c8:	432a      	orrs	r2, r5
 80061ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ce:	05df      	lsls	r7, r3, #23
 80061d0:	d508      	bpl.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061d2:	4956      	ldr	r1, [pc, #344]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061d4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80061d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061da:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80061de:	432a      	orrs	r2, r5
 80061e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061e4:	039e      	lsls	r6, r3, #14
 80061e6:	d508      	bpl.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061e8:	4950      	ldr	r1, [pc, #320]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ea:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80061ec:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80061f0:	f022 0203 	bic.w	r2, r2, #3
 80061f4:	432a      	orrs	r2, r5
 80061f6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061fa:	059d      	lsls	r5, r3, #22
 80061fc:	d508      	bpl.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061fe:	494b      	ldr	r1, [pc, #300]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006200:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006202:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006206:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800620a:	432a      	orrs	r2, r5
 800620c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006210:	0559      	lsls	r1, r3, #21
 8006212:	d50b      	bpl.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006214:	4945      	ldr	r1, [pc, #276]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006216:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006218:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800621c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006220:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006222:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006226:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800622a:	d07a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800622c:	051a      	lsls	r2, r3, #20
 800622e:	d50b      	bpl.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006230:	493e      	ldr	r1, [pc, #248]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006232:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006234:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006238:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800623c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800623e:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006242:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006246:	d075      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006248:	04df      	lsls	r7, r3, #19
 800624a:	d50b      	bpl.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800624c:	4937      	ldr	r1, [pc, #220]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800624e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006250:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006254:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006258:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800625a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800625e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006262:	d06c      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006264:	049e      	lsls	r6, r3, #18
 8006266:	d50b      	bpl.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006268:	4930      	ldr	r1, [pc, #192]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800626a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800626c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006270:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006274:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006276:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800627a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800627e:	d063      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006280:	045d      	lsls	r5, r3, #17
 8006282:	d50b      	bpl.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006284:	4929      	ldr	r1, [pc, #164]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006286:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8006288:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800628c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006290:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006292:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006296:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800629a:	d05a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800629c:	0419      	lsls	r1, r3, #16
 800629e:	d50b      	bpl.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062a0:	4922      	ldr	r1, [pc, #136]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062a2:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80062a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80062a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80062ac:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062ae:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062b6:	d051      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80062b8:	03da      	lsls	r2, r3, #15
 80062ba:	d50b      	bpl.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80062bc:	491b      	ldr	r1, [pc, #108]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062be:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80062c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80062c4:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80062c8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80062ca:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80062ce:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80062d2:	d048      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062d4:	035b      	lsls	r3, r3, #13
 80062d6:	d50b      	bpl.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062d8:	4a14      	ldr	r2, [pc, #80]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062da:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80062dc:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80062e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80062e4:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062e6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062ee:	d03f      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 80062f0:	b002      	add	sp, #8
 80062f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80062fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006308:	2701      	movs	r7, #1
 800630a:	e6bb      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800630c:	6823      	ldr	r3, [r4, #0]
        status = ret;
 800630e:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8006310:	2f00      	cmp	r7, #0
 8006312:	f43f af04 	beq.w	800611e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006316:	4905      	ldr	r1, [pc, #20]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006318:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800631a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800631e:	658a      	str	r2, [r1, #88]	@ 0x58
 8006320:	e6fd      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006322:	68ca      	ldr	r2, [r1, #12]
 8006324:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006328:	60ca      	str	r2, [r1, #12]
 800632a:	e77f      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006334:	68ca      	ldr	r2, [r1, #12]
 8006336:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800633a:	60ca      	str	r2, [r1, #12]
 800633c:	e784      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800633e:	68ca      	ldr	r2, [r1, #12]
 8006340:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006344:	60ca      	str	r2, [r1, #12]
 8006346:	e78d      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	68ca      	ldr	r2, [r1, #12]
 800634a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800634e:	60ca      	str	r2, [r1, #12]
 8006350:	e796      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006352:	68ca      	ldr	r2, [r1, #12]
 8006354:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006358:	60ca      	str	r2, [r1, #12]
 800635a:	e79f      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800635c:	68ca      	ldr	r2, [r1, #12]
 800635e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006362:	60ca      	str	r2, [r1, #12]
 8006364:	e7a8      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006366:	68ca      	ldr	r2, [r1, #12]
 8006368:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800636c:	60ca      	str	r2, [r1, #12]
 800636e:	e7b1      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006370:	68d3      	ldr	r3, [r2, #12]
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006376:	60d3      	str	r3, [r2, #12]
}
 8006378:	b002      	add	sp, #8
 800637a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637e:	bf00      	nop

08006380 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006380:	2800      	cmp	r0, #0
 8006382:	d077      	beq.n	8006474 <HAL_SPI_Init+0xf4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006384:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8006386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800638c:	2a00      	cmp	r2, #0
 800638e:	d057      	beq.n	8006440 <HAL_SPI_Init+0xc0>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006390:	2300      	movs	r3, #0
 8006392:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006396:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639a:	2100      	movs	r1, #0
 800639c:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800639e:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d05a      	beq.n	800645c <HAL_SPI_Init+0xdc>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a6:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a8:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80063aa:	2302      	movs	r3, #2
 80063ac:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80063b0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063b2:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80063b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ba:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063bc:	d846      	bhi.n	800644c <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063be:	d154      	bne.n	800646a <HAL_SPI_Init+0xea>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063c0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063c6:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	69a6      	ldr	r6, [r4, #24]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063ce:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063d8:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80063dc:	431a      	orrs	r2, r3
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	4313      	orrs	r3, r2
 80063e6:	6962      	ldr	r2, [r4, #20]
 80063e8:	f002 0201 	and.w	r2, r2, #1
 80063ec:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063f0:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063fc:	69e3      	ldr	r3, [r4, #28]
 80063fe:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8006402:	6a23      	ldr	r3, [r4, #32]
 8006404:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8006408:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800640c:	4313      	orrs	r3, r2
 800640e:	ea43 0308 	orr.w	r3, r3, r8
 8006412:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006414:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006416:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006418:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800641c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800641e:	ea4e 0306 	orr.w	r3, lr, r6
 8006422:	ea43 030c 	orr.w	r3, r3, ip
 8006426:	4303      	orrs	r3, r0
 8006428:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800642a:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800642e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006432:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006434:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006436:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006438:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006440:	6843      	ldr	r3, [r0, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006446:	d0a6      	beq.n	8006396 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006448:	61c2      	str	r2, [r0, #28]
 800644a:	e7a4      	b.n	8006396 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800644c:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8006450:	d112      	bne.n	8006478 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006452:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006454:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006456:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800645a:	e7b6      	b.n	80063ca <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 800645c:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006460:	4620      	mov	r0, r4
 8006462:	f7fb fc2d 	bl	8001cc0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006466:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006468:	e79d      	b.n	80063a6 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800646a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646e:	2500      	movs	r5, #0
 8006470:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006472:	e7aa      	b.n	80063ca <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8006474:	2001      	movs	r0, #1
}
 8006476:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006478:	2000      	movs	r0, #0
 800647a:	e7f8      	b.n	800646e <HAL_SPI_Init+0xee>

0800647c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647c:	2800      	cmp	r0, #0
 800647e:	f000 8099 	beq.w	80065b4 <HAL_TIM_Base_Init+0x138>
{
 8006482:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006484:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006488:	4604      	mov	r4, r0
 800648a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800648e:	2b00      	cmp	r3, #0
 8006490:	d07d      	beq.n	800658e <HAL_TIM_Base_Init+0x112>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006492:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006494:	4948      	ldr	r1, [pc, #288]	@ (80065b8 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006496:	2202      	movs	r2, #2
 8006498:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800649c:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800649e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	d061      	beq.n	8006566 <HAL_TIM_Base_Init+0xea>
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a6:	d029      	beq.n	80064fc <HAL_TIM_Base_Init+0x80>
 80064a8:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80064ac:	428b      	cmp	r3, r1
 80064ae:	d025      	beq.n	80064fc <HAL_TIM_Base_Init+0x80>
 80064b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064b4:	428b      	cmp	r3, r1
 80064b6:	d021      	beq.n	80064fc <HAL_TIM_Base_Init+0x80>
 80064b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064bc:	428b      	cmp	r3, r1
 80064be:	d01d      	beq.n	80064fc <HAL_TIM_Base_Init+0x80>
 80064c0:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 80064c4:	428b      	cmp	r3, r1
 80064c6:	d04e      	beq.n	8006566 <HAL_TIM_Base_Init+0xea>
 80064c8:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d04a      	beq.n	8006566 <HAL_TIM_Base_Init+0xea>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d0:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 80064d4:	428b      	cmp	r3, r1
 80064d6:	d05f      	beq.n	8006598 <HAL_TIM_Base_Init+0x11c>
 80064d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064dc:	428b      	cmp	r3, r1
 80064de:	d05b      	beq.n	8006598 <HAL_TIM_Base_Init+0x11c>
 80064e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064e4:	428b      	cmp	r3, r1
 80064e6:	d057      	beq.n	8006598 <HAL_TIM_Base_Init+0x11c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e8:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ea:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064f2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80064f4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064f8:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fa:	e010      	b.n	800651e <HAL_TIM_Base_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 80064fc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064fe:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006504:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006506:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650c:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006512:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006514:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006516:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006518:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800651c:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	07d2      	lsls	r2, r2, #31
 8006526:	d503      	bpl.n	8006530 <HAL_TIM_Base_Init+0xb4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006530:	2301      	movs	r3, #1
 8006532:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800653a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800653e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006542:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006546:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800654a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006552:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006556:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800655a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800655e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006562:	2000      	movs	r0, #0
}
 8006564:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006566:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006568:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800656a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800656e:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006570:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006574:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006576:	69a1      	ldr	r1, [r4, #24]
 8006578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800657c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800657e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006580:	68e2      	ldr	r2, [r4, #12]
 8006582:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006584:	6862      	ldr	r2, [r4, #4]
 8006586:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006588:	6962      	ldr	r2, [r4, #20]
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
 800658c:	e7c7      	b.n	800651e <HAL_TIM_Base_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 800658e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006592:	f7fb fd09 	bl	8001fa8 <HAL_TIM_Base_MspInit>
 8006596:	e77c      	b.n	8006492 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006598:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800659c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a0:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a8:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80065aa:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80065ac:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ae:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065b0:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b2:	e7e9      	b.n	8006588 <HAL_TIM_Base_Init+0x10c>
    return HAL_ERROR;
 80065b4:	2001      	movs	r0, #1
}
 80065b6:	4770      	bx	lr
 80065b8:	40012c00 	.word	0x40012c00

080065bc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80065bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d132      	bne.n	800662a <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c6:	491a      	ldr	r1, [pc, #104]	@ (8006630 <HAL_TIM_Base_Start_IT+0x74>)
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	2202      	movs	r2, #2
 80065ca:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ce:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d8:	d019      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065de:	d016      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065e0:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <HAL_TIM_Base_Start_IT+0x78>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00f      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00b      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065f6:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 80065fe:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006602:	4293      	cmp	r3, r2
 8006604:	d003      	beq.n	800660e <HAL_TIM_Base_Start_IT+0x52>
 8006606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800660a:	4293      	cmp	r3, r2
 800660c:	d107      	bne.n	800661e <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800660e:	6899      	ldr	r1, [r3, #8]
 8006610:	4a09      	ldr	r2, [pc, #36]	@ (8006638 <HAL_TIM_Base_Start_IT+0x7c>)
 8006612:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	2a06      	cmp	r2, #6
 8006616:	d006      	beq.n	8006626 <HAL_TIM_Base_Start_IT+0x6a>
 8006618:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800661c:	d003      	beq.n	8006626 <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f042 0201 	orr.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006626:	2000      	movs	r0, #0
 8006628:	4770      	bx	lr
    return HAL_ERROR;
 800662a:	2001      	movs	r0, #1
}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40000400 	.word	0x40000400
 8006638:	00010007 	.word	0x00010007

0800663c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800663c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	f000 8091 	beq.w	8006768 <HAL_TIM_ConfigClockSource+0x12c>
 8006646:	4602      	mov	r2, r0
{
 8006648:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800664a:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800664c:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800664e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006652:	2001      	movs	r0, #1
 8006654:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006658:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800665a:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800665c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800665e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006660:	680b      	ldr	r3, [r1, #0]
 8006662:	2b70      	cmp	r3, #112	@ 0x70
 8006664:	f000 80ac 	beq.w	80067c0 <HAL_TIM_ConfigClockSource+0x184>
 8006668:	d827      	bhi.n	80066ba <HAL_TIM_ConfigClockSource+0x7e>
 800666a:	2b50      	cmp	r3, #80	@ 0x50
 800666c:	d07e      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x130>
 800666e:	d93e      	bls.n	80066ee <HAL_TIM_ConfigClockSource+0xb2>
 8006670:	2b60      	cmp	r3, #96	@ 0x60
 8006672:	d11a      	bne.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006674:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockFilter);
 8006676:	68c8      	ldr	r0, [r1, #12]
                               sClockSourceConfig->ClockPolarity,
 8006678:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667a:	6a21      	ldr	r1, [r4, #32]
 800667c:	f021 0110 	bic.w	r1, r1, #16
 8006680:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006682:	69a1      	ldr	r1, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006684:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006688:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800668c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006690:	ea41 3100 	orr.w	r1, r1, r0, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006694:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006696:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006698:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800669a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066a2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80066aa:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80066ac:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80066b2:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80066b6:	bc30      	pop	{r4, r5}
 80066b8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066be:	d06f      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0x164>
 80066c0:	d941      	bls.n	8006746 <HAL_TIM_ConfigClockSource+0x10a>
 80066c2:	4948      	ldr	r1, [pc, #288]	@ (80067e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 80066c4:	428b      	cmp	r3, r1
 80066c6:	d008      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
 80066c8:	d92d      	bls.n	8006726 <HAL_TIM_ConfigClockSource+0xea>
 80066ca:	4947      	ldr	r1, [pc, #284]	@ (80067e8 <HAL_TIM_ConfigClockSource+0x1ac>)
 80066cc:	428b      	cmp	r3, r1
 80066ce:	d004      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
 80066d0:	f023 0c20 	bic.w	ip, r3, #32
 80066d4:	3910      	subs	r1, #16
 80066d6:	458c      	cmp	ip, r1
 80066d8:	d1e7      	bne.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 80066da:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066dc:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80066e0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e4:	4319      	orrs	r1, r3
 80066e6:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80066ea:	60a1      	str	r1, [r4, #8]
}
 80066ec:	e02e      	b.n	800674c <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 80066ee:	2b40      	cmp	r3, #64	@ 0x40
 80066f0:	d12e      	bne.n	8006750 <HAL_TIM_ConfigClockSource+0x114>
                               sClockSourceConfig->ClockPolarity,
 80066f2:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80066f4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80066f6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80066fc:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fe:	6a23      	ldr	r3, [r4, #32]
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006708:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800670c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006710:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006712:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006714:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006716:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800671a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006722:	60a3      	str	r3, [r4, #8]
}
 8006724:	e012      	b.n	800674c <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 8006726:	3920      	subs	r1, #32
 8006728:	428b      	cmp	r3, r1
 800672a:	d0d6      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
 800672c:	d904      	bls.n	8006738 <HAL_TIM_ConfigClockSource+0xfc>
 800672e:	492f      	ldr	r1, [pc, #188]	@ (80067ec <HAL_TIM_ConfigClockSource+0x1b0>)
 8006730:	428b      	cmp	r3, r1
 8006732:	d0d2      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006734:	2001      	movs	r0, #1
 8006736:	e7b8      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006738:	f023 0110 	bic.w	r1, r3, #16
 800673c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006740:	d0cb      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006742:	2001      	movs	r0, #1
 8006744:	e7b1      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	d1ae      	bne.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800674c:	2000      	movs	r0, #0
 800674e:	e7ac      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006750:	d8ab      	bhi.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d0c1      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
 8006756:	d903      	bls.n	8006760 <HAL_TIM_ConfigClockSource+0x124>
 8006758:	2b30      	cmp	r3, #48	@ 0x30
 800675a:	d0be      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800675c:	2001      	movs	r0, #1
 800675e:	e7a4      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8006760:	f033 0110 	bics.w	r1, r3, #16
 8006764:	d1a1      	bne.n	80066aa <HAL_TIM_ConfigClockSource+0x6e>
 8006766:	e7b8      	b.n	80066da <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8006768:	2002      	movs	r0, #2
}
 800676a:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 800676c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800676e:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8006770:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006772:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006776:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006778:	6a23      	ldr	r3, [r4, #32]
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006780:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006786:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800678a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800678c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800678e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006790:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006798:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800679c:	60a3      	str	r3, [r4, #8]
}
 800679e:	e7d5      	b.n	800674c <HAL_TIM_ConfigClockSource+0x110>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80067a4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a6:	432b      	orrs	r3, r5
 80067a8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067aa:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80067b2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067bc:	60a3      	str	r3, [r4, #8]
      break;
 80067be:	e7c5      	b.n	800674c <HAL_TIM_ConfigClockSource+0x110>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80067c4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c6:	432b      	orrs	r3, r5
 80067c8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ca:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80067d2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80067d4:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80067d6:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80067dc:	60a3      	str	r3, [r4, #8]
      break;
 80067de:	e7b5      	b.n	800674c <HAL_TIM_ConfigClockSource+0x110>
 80067e0:	ffce0088 	.word	0xffce0088
 80067e4:	00100040 	.word	0x00100040
 80067e8:	00100060 	.word	0x00100060
 80067ec:	00100030 	.word	0x00100030

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d04e      	beq.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 80067f8:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067fa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067fc:	4d27      	ldr	r5, [pc, #156]	@ (800689c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067fe:	2302      	movs	r3, #2
 8006800:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006804:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006806:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006808:	680c      	ldr	r4, [r1, #0]
 800680a:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 800680c:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800680e:	d02c      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006810:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006814:	42aa      	cmp	r2, r5
 8006816:	d033      	beq.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006818:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 800681c:	42aa      	cmp	r2, r5
 800681e:	d024      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006820:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006828:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800682e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006830:	d00e      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006832:	4b1b      	ldr	r3, [pc, #108]	@ (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d00b      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800683c:	429a      	cmp	r2, r3
 800683e:	d007      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006844:	429a      	cmp	r2, r3
 8006846:	d003      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006848:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 800684c:	429a      	cmp	r2, r3
 800684e:	d104      	bne.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006850:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006852:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006856:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006858:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800685a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800685c:	2301      	movs	r3, #1
 800685e:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006862:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8006866:	bc30      	pop	{r4, r5}
 8006868:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800686a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800686c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006870:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006872:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800687a:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800687c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687e:	e7e7      	b.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006880:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006882:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006886:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006888:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800688c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006890:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8006892:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006894:	e7dc      	b.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  __HAL_LOCK(htim);
 8006896:	2002      	movs	r0, #2
}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40000400 	.word	0x40000400

080068a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80068a8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068aa:	6882      	ldr	r2, [r0, #8]
 80068ac:	6900      	ldr	r0, [r0, #16]
 80068ae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b2:	4302      	orrs	r2, r0
 80068b4:	430a      	orrs	r2, r1
 80068b6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b8:	49a0      	ldr	r1, [pc, #640]	@ (8006b3c <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068bc:	4029      	ands	r1, r5
 80068be:	430a      	orrs	r2, r1
 80068c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068c6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80068cc:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ce:	499c      	ldr	r1, [pc, #624]	@ (8006b40 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068d2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068d4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068d8:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80068dc:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068e0:	f000 80d1 	beq.w	8006a86 <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 80068e4:	6a26      	ldr	r6, [r4, #32]
 80068e6:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ee:	f022 020f 	bic.w	r2, r2, #15
 80068f2:	432a      	orrs	r2, r5
 80068f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068f6:	4a93      	ldr	r2, [pc, #588]	@ (8006b44 <UART_SetConfig+0x2a0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d039      	beq.n	8006970 <UART_SetConfig+0xcc>
 80068fc:	4a92      	ldr	r2, [pc, #584]	@ (8006b48 <UART_SetConfig+0x2a4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d012      	beq.n	8006928 <UART_SetConfig+0x84>
 8006902:	4a92      	ldr	r2, [pc, #584]	@ (8006b4c <UART_SetConfig+0x2a8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	f000 80a6 	beq.w	8006a56 <UART_SetConfig+0x1b2>
 800690a:	4a91      	ldr	r2, [pc, #580]	@ (8006b50 <UART_SetConfig+0x2ac>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d043      	beq.n	8006998 <UART_SetConfig+0xf4>
 8006910:	4a90      	ldr	r2, [pc, #576]	@ (8006b54 <UART_SetConfig+0x2b0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	f000 808f 	beq.w	8006a36 <UART_SetConfig+0x192>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8006918:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800691a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800691c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006920:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006924:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8006926:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006928:	4b8b      	ldr	r3, [pc, #556]	@ (8006b58 <UART_SetConfig+0x2b4>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692e:	f003 030c 	and.w	r3, r3, #12
 8006932:	2b0c      	cmp	r3, #12
 8006934:	d8f0      	bhi.n	8006918 <UART_SetConfig+0x74>
 8006936:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <UART_SetConfig+0x98>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	08006919 	.word	0x08006919
 8006944:	08006919 	.word	0x08006919
 8006948:	08006919 	.word	0x08006919
 800694c:	080069b1 	.word	0x080069b1
 8006950:	08006919 	.word	0x08006919
 8006954:	08006919 	.word	0x08006919
 8006958:	08006919 	.word	0x08006919
 800695c:	080069f9 	.word	0x080069f9
 8006960:	08006919 	.word	0x08006919
 8006964:	08006919 	.word	0x08006919
 8006968:	08006919 	.word	0x08006919
 800696c:	080069c9 	.word	0x080069c9
 8006970:	4b79      	ldr	r3, [pc, #484]	@ (8006b58 <UART_SetConfig+0x2b4>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d03c      	beq.n	80069f8 <UART_SetConfig+0x154>
 800697e:	2b03      	cmp	r3, #3
 8006980:	d022      	beq.n	80069c8 <UART_SetConfig+0x124>
 8006982:	2b01      	cmp	r3, #1
 8006984:	d014      	beq.n	80069b0 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006986:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800698a:	f000 80ce 	beq.w	8006b2a <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 800698e:	f7ff fb59 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006992:	b9a8      	cbnz	r0, 80069c0 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8006994:	2000      	movs	r0, #0
 8006996:	e7c0      	b.n	800691a <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006998:	4b6f      	ldr	r3, [pc, #444]	@ (8006b58 <UART_SetConfig+0x2b4>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069a2:	2b80      	cmp	r3, #128	@ 0x80
 80069a4:	d028      	beq.n	80069f8 <UART_SetConfig+0x154>
 80069a6:	d863      	bhi.n	8006a70 <UART_SetConfig+0x1cc>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04e      	beq.n	8006a4a <UART_SetConfig+0x1a6>
 80069ac:	2b40      	cmp	r3, #64	@ 0x40
 80069ae:	d1b3      	bne.n	8006918 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80069b4:	f000 80be 	beq.w	8006b34 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 80069b8:	f7ff f9f6 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0e9      	beq.n	8006994 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80069c2:	e006      	b.n	80069d2 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069c4:	2b30      	cmp	r3, #48	@ 0x30
 80069c6:	d1a7      	bne.n	8006918 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80069cc:	d018      	beq.n	8006a00 <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	4a61      	ldr	r2, [pc, #388]	@ (8006b5c <UART_SetConfig+0x2b8>)
 80069d6:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80069da:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069de:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80069e6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ea:	f1a0 0310 	sub.w	r3, r0, #16
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d892      	bhi.n	8006918 <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	60d8      	str	r0, [r3, #12]
 80069f6:	e7cd      	b.n	8006994 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4858      	ldr	r0, [pc, #352]	@ (8006b60 <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fe:	d1e8      	bne.n	80069d2 <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a00:	6862      	ldr	r2, [r4, #4]
 8006a02:	4b56      	ldr	r3, [pc, #344]	@ (8006b5c <UART_SetConfig+0x2b8>)
 8006a04:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006a08:	fbb0 f0f1 	udiv	r0, r0, r1
 8006a0c:	0853      	lsrs	r3, r2, #1
 8006a0e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a12:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a16:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1a:	f1a3 0210 	sub.w	r2, r3, #16
 8006a1e:	428a      	cmp	r2, r1
 8006a20:	f63f af7a 	bhi.w	8006918 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a24:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006a28:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a2a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a2c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60cb      	str	r3, [r1, #12]
 8006a34:	e7ae      	b.n	8006994 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a36:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <UART_SetConfig+0x2b4>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a44:	d0d8      	beq.n	80069f8 <UART_SetConfig+0x154>
 8006a46:	d81a      	bhi.n	8006a7e <UART_SetConfig+0x1da>
 8006a48:	b9ab      	cbnz	r3, 8006a76 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006a4e:	d065      	beq.n	8006b1c <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7ff fae6 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
        break;
 8006a54:	e79d      	b.n	8006992 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a56:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <UART_SetConfig+0x2b4>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d0c9      	beq.n	80069f8 <UART_SetConfig+0x154>
 8006a64:	d8ae      	bhi.n	80069c4 <UART_SetConfig+0x120>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0ef      	beq.n	8006a4a <UART_SetConfig+0x1a6>
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d0a0      	beq.n	80069b0 <UART_SetConfig+0x10c>
 8006a6e:	e753      	b.n	8006918 <UART_SetConfig+0x74>
 8006a70:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a72:	d0a9      	beq.n	80069c8 <UART_SetConfig+0x124>
 8006a74:	e750      	b.n	8006918 <UART_SetConfig+0x74>
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7a:	d099      	beq.n	80069b0 <UART_SetConfig+0x10c>
 8006a7c:	e74c      	b.n	8006918 <UART_SetConfig+0x74>
 8006a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a82:	d0a1      	beq.n	80069c8 <UART_SetConfig+0x124>
 8006a84:	e748      	b.n	8006918 <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a86:	4311      	orrs	r1, r2
 8006a88:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a8c:	4932      	ldr	r1, [pc, #200]	@ (8006b58 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a8e:	f022 020f 	bic.w	r2, r2, #15
 8006a92:	432a      	orrs	r2, r5
 8006a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a96:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa2:	d045      	beq.n	8006b30 <UART_SetConfig+0x28c>
 8006aa4:	d833      	bhi.n	8006b0e <UART_SetConfig+0x26a>
 8006aa6:	b37b      	cbz	r3, 8006b08 <UART_SetConfig+0x264>
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aac:	f47f af34 	bne.w	8006918 <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab0:	f7ff f97a 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f43f af6d 	beq.w	8006994 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006aba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006abc:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006abe:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ac4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006ac8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006acc:	4299      	cmp	r1, r3
 8006ace:	f63f af23 	bhi.w	8006918 <UART_SetConfig+0x74>
 8006ad2:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006ad6:	f63f af1f 	bhi.w	8006918 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ada:	2300      	movs	r3, #0
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fa f88b 	bl	8000bf8 <__aeabi_uldivmod>
 8006ae2:	0872      	lsrs	r2, r6, #1
 8006ae4:	0203      	lsls	r3, r0, #8
 8006ae6:	0209      	lsls	r1, r1, #8
 8006ae8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006aec:	1898      	adds	r0, r3, r2
 8006aee:	f141 0100 	adc.w	r1, r1, #0
 8006af2:	4632      	mov	r2, r6
 8006af4:	2300      	movs	r3, #0
 8006af6:	f7fa f87f 	bl	8000bf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <UART_SetConfig+0x2c0>)
 8006afc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006b00:	429a      	cmp	r2, r3
 8006b02:	f63f af09 	bhi.w	8006918 <UART_SetConfig+0x74>
 8006b06:	e774      	b.n	80069f2 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b08:	f7ff fa8a 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
        break;
 8006b0c:	e7d2      	b.n	8006ab4 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b12:	f47f af01 	bne.w	8006918 <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006b1a:	e7cf      	b.n	8006abc <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7ff fa80 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b20:	2800      	cmp	r0, #0
 8006b22:	f43f af37 	beq.w	8006994 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b26:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006b28:	e76a      	b.n	8006a00 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2a:	f7ff fa8b 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
        break;
 8006b2e:	e7f7      	b.n	8006b20 <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 8006b30:	480b      	ldr	r0, [pc, #44]	@ (8006b60 <UART_SetConfig+0x2bc>)
 8006b32:	e7c3      	b.n	8006abc <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b34:	f7ff f938 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
        break;
 8006b38:	e7f2      	b.n	8006b20 <UART_SetConfig+0x27c>
 8006b3a:	bf00      	nop
 8006b3c:	cfff69f3 	.word	0xcfff69f3
 8006b40:	40008000 	.word	0x40008000
 8006b44:	40013800 	.word	0x40013800
 8006b48:	40004400 	.word	0x40004400
 8006b4c:	40004800 	.word	0x40004800
 8006b50:	40004c00 	.word	0x40004c00
 8006b54:	40005000 	.word	0x40005000
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	0800ac78 	.word	0x0800ac78
 8006b60:	00f42400 	.word	0x00f42400
 8006b64:	000ffcff 	.word	0x000ffcff

08006b68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b68:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006b6a:	071a      	lsls	r2, r3, #28
{
 8006b6c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b6e:	d506      	bpl.n	8006b7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b70:	6801      	ldr	r1, [r0, #0]
 8006b72:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006b74:	684a      	ldr	r2, [r1, #4]
 8006b76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b7a:	4322      	orrs	r2, r4
 8006b7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7e:	07dc      	lsls	r4, r3, #31
 8006b80:	d506      	bpl.n	8006b90 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b82:	6801      	ldr	r1, [r0, #0]
 8006b84:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006b86:	684a      	ldr	r2, [r1, #4]
 8006b88:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006b8c:	4322      	orrs	r2, r4
 8006b8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b90:	0799      	lsls	r1, r3, #30
 8006b92:	d506      	bpl.n	8006ba2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b94:	6801      	ldr	r1, [r0, #0]
 8006b96:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006b98:	684a      	ldr	r2, [r1, #4]
 8006b9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006b9e:	4322      	orrs	r2, r4
 8006ba0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba2:	075a      	lsls	r2, r3, #29
 8006ba4:	d506      	bpl.n	8006bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ba6:	6801      	ldr	r1, [r0, #0]
 8006ba8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006baa:	684a      	ldr	r2, [r1, #4]
 8006bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006bb0:	4322      	orrs	r2, r4
 8006bb2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bb4:	06dc      	lsls	r4, r3, #27
 8006bb6:	d506      	bpl.n	8006bc6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb8:	6801      	ldr	r1, [r0, #0]
 8006bba:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006bbc:	688a      	ldr	r2, [r1, #8]
 8006bbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bc2:	4322      	orrs	r2, r4
 8006bc4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bc6:	0699      	lsls	r1, r3, #26
 8006bc8:	d506      	bpl.n	8006bd8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bca:	6801      	ldr	r1, [r0, #0]
 8006bcc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006bce:	688a      	ldr	r2, [r1, #8]
 8006bd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bd4:	4322      	orrs	r2, r4
 8006bd6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd8:	065a      	lsls	r2, r3, #25
 8006bda:	d509      	bpl.n	8006bf0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bdc:	6801      	ldr	r1, [r0, #0]
 8006bde:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006be0:	684a      	ldr	r2, [r1, #4]
 8006be2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006be6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006be8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bee:	d00b      	beq.n	8006c08 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	d506      	bpl.n	8006c02 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bf4:	6802      	ldr	r2, [r0, #0]
 8006bf6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006bf8:	6853      	ldr	r3, [r2, #4]
 8006bfa:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	6053      	str	r3, [r2, #4]
  }
}
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c06:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c08:	684a      	ldr	r2, [r1, #4]
 8006c0a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006c0c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006c10:	4322      	orrs	r2, r4
 8006c12:	604a      	str	r2, [r1, #4]
 8006c14:	e7ec      	b.n	8006bf0 <UART_AdvFeatureConfig+0x88>
 8006c16:	bf00      	nop

08006c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c18:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1a:	2300      	movs	r3, #0
{
 8006c1c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c22:	f7fb fca9 	bl	8002578 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8006c2c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c2e:	d40f      	bmi.n	8006c50 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	0759      	lsls	r1, r3, #29
 8006c34:	d431      	bmi.n	8006c9a <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c36:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006c3e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c44:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c46:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c50:	69d3      	ldr	r3, [r2, #28]
 8006c52:	0298      	lsls	r0, r3, #10
 8006c54:	d4ec      	bmi.n	8006c30 <UART_CheckIdleState+0x18>
 8006c56:	e00c      	b.n	8006c72 <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	0749      	lsls	r1, r1, #29
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	d505      	bpl.n	8006c6c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c60:	69d9      	ldr	r1, [r3, #28]
 8006c62:	0708      	lsls	r0, r1, #28
 8006c64:	d44a      	bmi.n	8006cfc <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	0509      	lsls	r1, r1, #20
 8006c6a:	d475      	bmi.n	8006d58 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	0298      	lsls	r0, r3, #10
 8006c70:	d4de      	bmi.n	8006c30 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c72:	f7fb fc81 	bl	8002578 <HAL_GetTick>
 8006c76:	1b43      	subs	r3, r0, r5
 8006c78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	d3eb      	bcc.n	8006c58 <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	e843 2100 	strex	r1, r2, [r3]
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d1f7      	bne.n	8006c80 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8006c90:	2320      	movs	r3, #32
 8006c92:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006c96:	2003      	movs	r0, #3
 8006c98:	e7d6      	b.n	8006c48 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	69d3      	ldr	r3, [r2, #28]
 8006c9c:	025b      	lsls	r3, r3, #9
 8006c9e:	d4ca      	bmi.n	8006c36 <UART_CheckIdleState+0x1e>
 8006ca0:	e00d      	b.n	8006cbe <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	0750      	lsls	r0, r2, #29
 8006ca6:	d507      	bpl.n	8006cb8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	0711      	lsls	r1, r2, #28
 8006cac:	f100 8082 	bmi.w	8006db4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	0512      	lsls	r2, r2, #20
 8006cb4:	f100 80ac 	bmi.w	8006e10 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	d4bb      	bmi.n	8006c36 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fb fc5b 	bl	8002578 <HAL_GetTick>
 8006cc2:	1b43      	subs	r3, r0, r5
 8006cc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	d3ea      	bcc.n	8006ca2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cd0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	e843 2100 	strex	r1, r2, [r3]
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	d1f7      	bne.n	8006ccc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	f103 0208 	add.w	r2, r3, #8
 8006ce0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	f103 0008 	add.w	r0, r3, #8
 8006cec:	e840 2100 	strex	r1, r2, [r0]
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d1f3      	bne.n	8006cdc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8006cfa:	e7cc      	b.n	8006c96 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d04:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	e843 2100 	strex	r1, r2, [r3]
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d1f7      	bne.n	8006d00 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d10:	4856      	ldr	r0, [pc, #344]	@ (8006e6c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	e852 2f00 	ldrex	r2, [r2]
 8006d1a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	f103 0508 	add.w	r5, r3, #8
 8006d20:	e845 2100 	strex	r1, r2, [r5]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d1f4      	bne.n	8006d12 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006d2a:	2a01      	cmp	r2, #1
 8006d2c:	d00b      	beq.n	8006d46 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d30:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d32:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d38:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006d3c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d40:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006d44:	e79c      	b.n	8006c80 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	e843 2100 	strex	r1, r2, [r3]
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d1f7      	bne.n	8006d46 <UART_CheckIdleState+0x12e>
 8006d56:	e7ea      	b.n	8006d2e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d5c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d62:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	e843 2100 	strex	r1, r2, [r3]
 8006d6a:	2900      	cmp	r1, #0
 8006d6c:	d1f7      	bne.n	8006d5e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d6e:	483f      	ldr	r0, [pc, #252]	@ (8006e6c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	f103 0208 	add.w	r2, r3, #8
 8006d74:	e852 2f00 	ldrex	r2, [r2]
 8006d78:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	f103 0508 	add.w	r5, r3, #8
 8006d7e:	e845 2100 	strex	r1, r2, [r5]
 8006d82:	2900      	cmp	r1, #0
 8006d84:	d1f4      	bne.n	8006d70 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d86:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006d88:	2a01      	cmp	r2, #1
 8006d8a:	d00a      	beq.n	8006da2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	2120      	movs	r1, #32
 8006d90:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006d94:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006d98:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006da0:	e76e      	b.n	8006c80 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	e843 2100 	strex	r1, r2, [r3]
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d1f7      	bne.n	8006da2 <UART_CheckIdleState+0x18a>
 8006db2:	e7eb      	b.n	8006d8c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db4:	2208      	movs	r2, #8
 8006db6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dbc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	e843 2100 	strex	r1, r2, [r3]
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d1f7      	bne.n	8006db8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc8:	4828      	ldr	r0, [pc, #160]	@ (8006e6c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	f103 0208 	add.w	r2, r3, #8
 8006dce:	e852 2f00 	ldrex	r2, [r2]
 8006dd2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	f103 0508 	add.w	r5, r3, #8
 8006dd8:	e845 2100 	strex	r1, r2, [r5]
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d1f4      	bne.n	8006dca <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006de2:	2a01      	cmp	r2, #1
 8006de4:	d00b      	beq.n	8006dfe <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006de8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dea:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006dec:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006df0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006df4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006df8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006dfc:	e766      	b.n	8006ccc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	e843 2100 	strex	r1, r2, [r3]
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d1f7      	bne.n	8006dfe <UART_CheckIdleState+0x1e6>
 8006e0e:	e7ea      	b.n	8006de6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e14:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e1a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	e843 2100 	strex	r1, r2, [r3]
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d1f7      	bne.n	8006e16 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e26:	4811      	ldr	r0, [pc, #68]	@ (8006e6c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	f103 0208 	add.w	r2, r3, #8
 8006e2c:	e852 2f00 	ldrex	r2, [r2]
 8006e30:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	f103 0508 	add.w	r5, r3, #8
 8006e36:	e845 2100 	strex	r1, r2, [r5]
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	d1f4      	bne.n	8006e28 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006e40:	2a01      	cmp	r2, #1
 8006e42:	d00a      	beq.n	8006e5a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e46:	2120      	movs	r1, #32
 8006e48:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006e4c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006e50:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e54:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006e58:	e738      	b.n	8006ccc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	e843 2100 	strex	r1, r2, [r3]
 8006e66:	2900      	cmp	r1, #0
 8006e68:	d1f7      	bne.n	8006e5a <UART_CheckIdleState+0x242>
 8006e6a:	e7eb      	b.n	8006e44 <UART_CheckIdleState+0x22c>
 8006e6c:	effffffe 	.word	0xeffffffe

08006e70 <HAL_UART_Init>:
  if (huart == NULL)
 8006e70:	b380      	cbz	r0, 8006ed4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e72:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006e76:	b510      	push	{r4, lr}
 8006e78:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7a:	b333      	cbz	r3, 8006eca <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8006e7c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	2324      	movs	r3, #36	@ 0x24
 8006e82:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e8e:	b9c1      	cbnz	r1, 8006ec2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e90:	4620      	mov	r0, r4
 8006e92:	f7ff fd07 	bl	80068a4 <UART_SetConfig>
 8006e96:	2801      	cmp	r0, #1
 8006e98:	d011      	beq.n	8006ebe <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eaa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006eb2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006eb4:	601a      	str	r2, [r3, #0]
}
 8006eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006eba:	f7ff bead 	b.w	8006c18 <UART_CheckIdleState>
}
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff fe50 	bl	8006b68 <UART_AdvFeatureConfig>
 8006ec8:	e7e2      	b.n	8006e90 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8006eca:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006ece:	f7fb f9af 	bl	8002230 <HAL_UART_MspInit>
 8006ed2:	e7d3      	b.n	8006e7c <HAL_UART_Init+0xc>
}
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d017      	beq.n	8006f10 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee2:	2324      	movs	r3, #36	@ 0x24
{
 8006ee4:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eea:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eec:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006eee:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8006ef0:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ef4:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8006ef8:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006efa:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006efc:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006efe:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8006f08:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006f0c:	4618      	mov	r0, r3
}
 8006f0e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006f10:	2002      	movs	r0, #2
}
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f14:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	d037      	beq.n	8006f8c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006f20:	2024      	movs	r0, #36	@ 0x24
{
 8006f22:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006f24:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f28:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f2a:	6810      	ldr	r0, [r2, #0]
 8006f2c:	f020 0001 	bic.w	r0, r0, #1
 8006f30:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f32:	6890      	ldr	r0, [r2, #8]
 8006f34:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8006f38:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f3a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f3c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f3e:	b310      	cbz	r0, 8006f86 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f40:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f42:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f44:	4d12      	ldr	r5, [pc, #72]	@ (8006f90 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f46:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f4a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f4e:	4911      	ldr	r1, [pc, #68]	@ (8006f94 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8006f50:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f54:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f58:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f5c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f60:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f62:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f64:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f68:	fbb1 f1f5 	udiv	r1, r1, r5
 8006f6c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006f70:	2100      	movs	r1, #0
 8006f72:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006f76:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f78:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006f7a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8006f7e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006f80:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8006f84:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006f86:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006f88:	4608      	mov	r0, r1
 8006f8a:	e7ef      	b.n	8006f6c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006f8c:	2002      	movs	r0, #2
}
 8006f8e:	4770      	bx	lr
 8006f90:	0800ac90 	.word	0x0800ac90
 8006f94:	0800ac98 	.word	0x0800ac98

08006f98 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006f98:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8006f9c:	2a01      	cmp	r2, #1
 8006f9e:	d037      	beq.n	8007010 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006fa4:	2024      	movs	r0, #36	@ 0x24
{
 8006fa6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006fa8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fac:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006fae:	6810      	ldr	r0, [r2, #0]
 8006fb0:	f020 0001 	bic.w	r0, r0, #1
 8006fb4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fb6:	6890      	ldr	r0, [r2, #8]
 8006fb8:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8006fbc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fbe:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fc0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fc2:	b310      	cbz	r0, 800700a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fc4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fc6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fc8:	4d12      	ldr	r5, [pc, #72]	@ (8007014 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fca:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fce:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fd2:	4911      	ldr	r1, [pc, #68]	@ (8007018 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006fd4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fd8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fdc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fe0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fe6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fec:	fbb1 f1f5 	udiv	r1, r1, r5
 8006ff0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ffc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006ffe:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007002:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007004:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007008:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800700a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800700c:	4608      	mov	r0, r1
 800700e:	e7ef      	b.n	8006ff0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007010:	2002      	movs	r0, #2
}
 8007012:	4770      	bx	lr
 8007014:	0800ac90 	.word	0x0800ac90
 8007018:	0800ac98 	.word	0x0800ac98

0800701c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800701c:	f8b0 1040 	ldrh.w	r1, [r0, #64]	@ 0x40
{
 8007020:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007022:	f244 027f 	movw	r2, #16511	@ 0x407f
 8007026:	400a      	ands	r2, r1

  return HAL_OK;
}
 8007028:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800702a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 800702e:	4770      	bx	lr

08007030 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007030:	4603      	mov	r3, r0
 8007032:	b082      	sub	sp, #8
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007034:	f04f 0c01 	mov.w	ip, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007038:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800703a:	f8a3 c040 	strh.w	ip, [r3, #64]	@ 0x40
{
 800703e:	f10d 0c08 	add.w	ip, sp, #8
  USBx->CNTR = 0U;
 8007042:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
{
 8007046:	e90c 0006 	stmdb	ip, {r1, r2}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800704a:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800704e:	f8a3 0050 	strh.w	r0, [r3, #80]	@ 0x50

  return HAL_OK;
}
 8007052:	b002      	add	sp, #8
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop

08007058 <_ZN11adc_manager8adc_initEPh>:
 * Also starts internal ADC calibration and begins temperature ADC readings.
 *
 * @param filters_length Pointer to an array specifying the filter window length per channel.
 * @return HAL_OK if successful.
 */
HAL_StatusTypeDef adc_manager::adc_init(uint8_t* filters_length) {
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	460f      	mov	r7, r1
	HAL_ADC_Start_DMA(adc_cap_, (uint32_t*)(&adc1_samples[0][0][0]), 64);
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	491d      	ldr	r1, [pc, #116]	@ (80070d8 <_ZN11adc_manager8adc_initEPh+0x80>)
 8007062:	6840      	ldr	r0, [r0, #4]
 8007064:	f7fc f8d6 	bl	8003214 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(adc_bat_, (uint32_t*)(&adc2_samples[0][0][0]), 96);
 8007068:	2260      	movs	r2, #96	@ 0x60
 800706a:	491c      	ldr	r1, [pc, #112]	@ (80070dc <_ZN11adc_manager8adc_initEPh+0x84>)
 800706c:	68a0      	ldr	r0, [r4, #8]
 800706e:	f7fc f8d1 	bl	8003214 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(adc_temp_, ADC_SINGLE_ENDED);
 8007072:	68e0      	ldr	r0, [r4, #12]
 8007074:	217f      	movs	r1, #127	@ 0x7f
 8007076:	f7fc f991 	bl	800339c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(adc_temp_);
 800707a:	68e0      	ldr	r0, [r4, #12]
 800707c:	4c18      	ldr	r4, [pc, #96]	@ (80070e0 <_ZN11adc_manager8adc_initEPh+0x88>)
 800707e:	f7fc f847 	bl	8003110 <HAL_ADC_Start>

	for (int i = 0; i < 5; ++i) {
 8007082:	1e7e      	subs	r6, r7, #1
		filters[i].sum = 0;
 8007084:	2500      	movs	r5, #0
 8007086:	3704      	adds	r7, #4
 8007088:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
		filters[i].index = 0;
 800708c:	f884 5081 	strb.w	r5, [r4, #129]	@ 0x81
		filters[i].full = 0;
 8007090:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
		filters[i].length = filters_length[i];
 8007094:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8007098:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80

		for (int j = 0; j < filters[i].length; j++) {
			filters[i].window_filter[j] = 0;  // Initialize filter window to zero
 800709c:	4620      	mov	r0, r4
 800709e:	005a      	lsls	r2, r3, #1
 80070a0:	2100      	movs	r1, #0
		for (int j = 0; j < filters[i].length; j++) {
 80070a2:	b10b      	cbz	r3, 80070a8 <_ZN11adc_manager8adc_initEPh+0x50>
			filters[i].window_filter[j] = 0;  // Initialize filter window to zero
 80070a4:	f001 fea5 	bl	8008df2 <memset>
	for (int i = 0; i < 5; ++i) {
 80070a8:	42be      	cmp	r6, r7
 80070aa:	f104 048c 	add.w	r4, r4, #140	@ 0x8c
 80070ae:	d1eb      	bne.n	8007088 <_ZN11adc_manager8adc_initEPh+0x30>
 *
 * These values are used to convert raw ADC readings into physical quantities (volts, amps).
 */
void adc_manager::set_gains_offsets() {
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
	adc_offsets[adc_names::V_cap] = VCAP_OFFSET;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <_ZN11adc_manager8adc_initEPh+0x8c>)
 80070b2:	480d      	ldr	r0, [pc, #52]	@ (80070e8 <_ZN11adc_manager8adc_initEPh+0x90>)
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
 80070b4:	4a0d      	ldr	r2, [pc, #52]	@ (80070ec <_ZN11adc_manager8adc_initEPh+0x94>)
	adc_offsets[adc_names::V_cap] = VCAP_OFFSET;
 80070b6:	6058      	str	r0, [r3, #4]

	adc_gains[adc_names::I_cap] = ICAP_GAIN;
	adc_offsets[adc_names::I_cap] = ICAP_OFFSET;
 80070b8:	480d      	ldr	r0, [pc, #52]	@ (80070f0 <_ZN11adc_manager8adc_initEPh+0x98>)
	adc_gains[adc_names::I_cap] = ICAP_GAIN;
 80070ba:	490e      	ldr	r1, [pc, #56]	@ (80070f4 <_ZN11adc_manager8adc_initEPh+0x9c>)
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
 80070bc:	4c0e      	ldr	r4, [pc, #56]	@ (80070f8 <_ZN11adc_manager8adc_initEPh+0xa0>)

	adc_gains[adc_names::V_bat] = VBAT_GAIN;
	adc_offsets[adc_names::V_bat] = VBAT_OFFSET;
 80070be:	4d0f      	ldr	r5, [pc, #60]	@ (80070fc <_ZN11adc_manager8adc_initEPh+0xa4>)
	adc_offsets[adc_names::I_cap] = ICAP_OFFSET;
 80070c0:	6018      	str	r0, [r3, #0]

	adc_gains[adc_names::I_chassis] = ISOURCE_GAIN;
	adc_offsets[adc_names::I_chassis] = ISOURCE_OFFSET;
 80070c2:	480f      	ldr	r0, [pc, #60]	@ (8007100 <_ZN11adc_manager8adc_initEPh+0xa8>)
 80070c4:	60d8      	str	r0, [r3, #12]

	adc_gains[adc_names::I_bat] = IBAT_GAIN;
	adc_offsets[adc_names::I_bat] = IBAT_OFFSET;
 80070c6:	6118      	str	r0, [r3, #16]
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
 80070c8:	6054      	str	r4, [r2, #4]
	adc_gains[adc_names::I_cap] = ICAP_GAIN;
 80070ca:	6011      	str	r1, [r2, #0]
	adc_offsets[adc_names::V_bat] = VBAT_OFFSET;
 80070cc:	609d      	str	r5, [r3, #8]
	adc_gains[adc_names::V_bat] = VBAT_GAIN;
 80070ce:	6094      	str	r4, [r2, #8]
	adc_gains[adc_names::I_chassis] = ISOURCE_GAIN;
 80070d0:	60d1      	str	r1, [r2, #12]
	adc_gains[adc_names::I_bat] = IBAT_GAIN;
 80070d2:	6111      	str	r1, [r2, #16]
}
 80070d4:	2000      	movs	r0, #0
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	2000109c 	.word	0x2000109c
 80070dc:	20000fdc 	.word	0x20000fdc
 80070e0:	20000d20 	.word	0x20000d20
 80070e4:	20000cec 	.word	0x20000cec
 80070e8:	3f08d2ef 	.word	0x3f08d2ef
 80070ec:	20000d00 	.word	0x20000d00
 80070f0:	40ff4be4 	.word	0x40ff4be4
 80070f4:	bb840840 	.word	0xbb840840
 80070f8:	3c113c47 	.word	0x3c113c47
 80070fc:	3f162fba 	.word	0x3f162fba
 8007100:	41004afc 	.word	0x41004afc

08007104 <_Z11initCANCommP19FDCAN_HandleTypeDef>:
 * This function sets up the CAN ID filters, enables relevant interrupts,
 * configures delay compensation, and starts the FDCAN interface.
 *
 * @param fdcan_ Pointer to the FDCAN handle to initialize.
 */
void initCANComm(FDCAN_HandleTypeDef* fdcan_) {
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4604      	mov	r4, r0
 8007108:	b088      	sub	sp, #32
	MX_FDCAN3_Init();
 800710a:	f7fa f977 	bl	80013fc <MX_FDCAN3_Init>

	FDCAN_FilterTypeDef can_filter;
	can_filter.IdType = FDCAN_STANDARD_ID;
 800710e:	2500      	movs	r5, #0
	can_filter.FilterIndex = 0;
	can_filter.FilterType = FDCAN_FILTER_DUAL;
 8007110:	2601      	movs	r6, #1
	can_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	can_filter.FilterID1 = CAN_NODE_ID;
 8007112:	2267      	movs	r2, #103	@ 0x67
 8007114:	f240 73ff 	movw	r3, #2047	@ 0x7ff
	can_filter.FilterID2 = 0x7FF;
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 8007118:	a902      	add	r1, sp, #8
 800711a:	4620      	mov	r0, r4
	can_filter.FilterID1 = CAN_NODE_ID;
 800711c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	can_filter.FilterIndex = 0;
 8007120:	e9cd 5502 	strd	r5, r5, [sp, #8]
	can_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007124:	e9cd 6604 	strd	r6, r6, [sp, #16]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 8007128:	f7fc fdb6 	bl	8003c98 <HAL_FDCAN_ConfigFilter>

	can_filter.FilterIndex = 1;
	can_filter.FilterID1 = 0x7FF;
	can_filter.FilterID2 = 0x7FF;
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800712c:	a902      	add	r1, sp, #8
	can_filter.FilterID1 = 0x7FF;
 800712e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007132:	f240 73ff 	movw	r3, #2047	@ 0x7ff
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 8007136:	4620      	mov	r0, r4
	can_filter.FilterID1 = 0x7FF;
 8007138:	e9cd 2306 	strd	r2, r3, [sp, #24]
	can_filter.FilterIndex = 1;
 800713c:	9603      	str	r6, [sp, #12]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800713e:	f7fc fdab 	bl	8003c98 <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_ConfigGlobalFilter(fdcan_, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8007142:	2202      	movs	r2, #2
 8007144:	462b      	mov	r3, r5
 8007146:	4611      	mov	r1, r2
 8007148:	9500      	str	r5, [sp, #0]
 800714a:	4620      	mov	r0, r4
 800714c:	f7fc fdd0 	bl	8003cf0 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8007150:	462a      	mov	r2, r5
 8007152:	4631      	mov	r1, r6
 8007154:	4620      	mov	r0, r4
 8007156:	f7fc ff2d 	bl	8003fb4 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_BUS_OFF, 0);
 800715a:	462a      	mov	r2, r5
 800715c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007160:	4620      	mov	r0, r4
 8007162:	f7fc ff27 	bl	8003fb4 <HAL_FDCAN_ActivateNotification>

	HAL_FDCAN_ConfigTxDelayCompensation(fdcan_, fdcan_->Init.DataPrescaler * fdcan_->Init.DataTimeSeg1, 0);
 8007166:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007168:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800716a:	462a      	mov	r2, r5
 800716c:	fb03 f101 	mul.w	r1, r3, r1
 8007170:	4620      	mov	r0, r4
 8007172:	f7fc fddf 	bl	8003d34 <HAL_FDCAN_ConfigTxDelayCompensation>
	HAL_FDCAN_EnableTxDelayCompensation(fdcan_);
 8007176:	4620      	mov	r0, r4
 8007178:	f7fc fdee 	bl	8003d58 <HAL_FDCAN_EnableTxDelayCompensation>
	HAL_FDCAN_Start(fdcan_);
 800717c:	4620      	mov	r0, r4
 800717e:	f7fc fdfd 	bl	8003d7c <HAL_FDCAN_Start>
}
 8007182:	b008      	add	sp, #32
 8007184:	bd70      	pop	{r4, r5, r6, pc}
 8007186:	bf00      	nop

08007188 <_ZN7CANComm14txHeaderConfigEv>:
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	TxHeader.MessageMarker = 0;
 8007188:	2300      	movs	r3, #0
void CANComm::txHeaderConfig() {
 800718a:	b410      	push	{r4}
	TxHeader.DataLength = FDCAN_DLC_BYTES_6;
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.Identifier = DEVC_NODE_ID;
 800718c:	2106      	movs	r1, #6
 800718e:	2477      	movs	r4, #119	@ 0x77
 8007190:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007194:	e9c0 430c 	strd	r4, r3, [r0, #48]	@ 0x30
 8007198:	e9c0 310e 	strd	r3, r1, [r0, #56]	@ 0x38
 800719c:	e9c0 3210 	strd	r3, r2, [r0, #64]	@ 0x40
 80071a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
}
 80071a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	TxHeader.MessageMarker = 0;
 80071a8:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80071aa:	4770      	bx	lr

080071ac <_ZN7CANComm11sendMessageEv>:
 *
 * Computes instantaneous chassis power, normalizes capacitor voltage into an 8-bit energy buffer estimate,
 * and transmits it using FDCAN.
 */
void CANComm::sendMessage() {
	txMsg.chassis_power = chassis_voltage * battery_current;
 80071ac:	4a21      	ldr	r2, [pc, #132]	@ (8007234 <_ZN7CANComm11sendMessageEv+0x88>)
 80071ae:	4b22      	ldr	r3, [pc, #136]	@ (8007238 <_ZN7CANComm11sendMessageEv+0x8c>)
 80071b0:	ed92 7a00 	vldr	s14, [r2]
 80071b4:	edd3 7a00 	vldr	s15, [r3]

	// Compute normalized energy percentage [0.0 - 1.0]
	float cap_buffer = 0.0f;
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 80071b8:	4b20      	ldr	r3, [pc, #128]	@ (800723c <_ZN7CANComm11sendMessageEv+0x90>)
	txMsg.chassis_power = chassis_voltage * battery_current;
 80071ba:	ee27 7a27 	vmul.f32	s14, s14, s15
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 80071be:	edd3 7a00 	vldr	s15, [r3]
	txMsg.chassis_power = chassis_voltage * battery_current;
 80071c2:	ed80 7a15 	vstr	s14, [r0, #84]	@ 0x54
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 80071c6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80071ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void CANComm::sendMessage() {
 80071d2:	b082      	sub	sp, #8
 80071d4:	4602      	mov	r2, r0
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 80071d6:	dd2b      	ble.n	8007230 <_ZN7CANComm11sendMessageEv+0x84>
		if (cap_voltage >= SUPERCAP_MAX_VOLTAGE)
 80071d8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007240 <_ZN7CANComm11sendMessageEv+0x94>
 80071dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	db0c      	blt.n	8007200 <_ZN7CANComm11sendMessageEv+0x54>
			cap_buffer = 1.0f;
		else
			cap_buffer = (cap_voltage - SUPERCAP_MIN_VOLTAGE) / (SUPERCAP_MAX_VOLTAGE - SUPERCAP_MIN_VOLTAGE);
	}

	txMsg.cap_energy = cap_buffer > 1.0f ? 255 : cap_buffer * 255;
 80071e6:	23ff      	movs	r3, #255	@ 0xff
	txMsg.error = 0;

	HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, (uint8_t *)&txMsg);
 80071e8:	4611      	mov	r1, r2
	txMsg.error = 0;
 80071ea:	2000      	movs	r0, #0
	txMsg.cap_energy = cap_buffer > 1.0f ? 255 : cap_buffer * 255;
 80071ec:	f882 3059 	strb.w	r3, [r2, #89]	@ 0x59
	txMsg.error = 0;
 80071f0:	f882 0058 	strb.w	r0, [r2, #88]	@ 0x58
	HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, (uint8_t *)&txMsg);
 80071f4:	f851 0b30 	ldr.w	r0, [r1], #48
 80071f8:	3254      	adds	r2, #84	@ 0x54
}
 80071fa:	b002      	add	sp, #8
	HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, (uint8_t *)&txMsg);
 80071fc:	f7fc bdd6 	b.w	8003dac <HAL_FDCAN_AddMessageToTxFifoQ>
			cap_buffer = (cap_voltage - SUPERCAP_MIN_VOLTAGE) / (SUPERCAP_MAX_VOLTAGE - SUPERCAP_MIN_VOLTAGE);
 8007200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007204:	ed9f 6a0f 	vldr	s12, [pc, #60]	@ 8007244 <_ZN7CANComm11sendMessageEv+0x98>
 8007208:	ee87 7a86 	vdiv.f32	s14, s15, s12
	txMsg.cap_energy = cap_buffer > 1.0f ? 255 : cap_buffer * 255;
 800720c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007210:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007218:	dce5      	bgt.n	80071e6 <_ZN7CANComm11sendMessageEv+0x3a>
 800721a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007248 <_ZN7CANComm11sendMessageEv+0x9c>
 800721e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007222:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007226:	edcd 7a01 	vstr	s15, [sp, #4]
 800722a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800722e:	e7db      	b.n	80071e8 <_ZN7CANComm11sendMessageEv+0x3c>
 8007230:	2300      	movs	r3, #0
 8007232:	e7d9      	b.n	80071e8 <_ZN7CANComm11sendMessageEv+0x3c>
 8007234:	2000125c 	.word	0x2000125c
 8007238:	20001254 	.word	0x20001254
 800723c:	20001260 	.word	0x20001260
 8007240:	41cc0000 	.word	0x41cc0000
 8007244:	41b40000 	.word	0x41b40000
 8007248:	437f0000 	.word	0x437f0000

0800724c <HAL_FDCAN_RxFifo0Callback>:
 *
 * @param hfdcan FDCAN peripheral instance
 * @param RxFifo0ITs Interrupt source bitmask
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
	if (hfdcan == &hfdcan3 && RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 800724c:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 800724e:	4283      	cmp	r3, r0
 8007250:	d000      	beq.n	8007254 <HAL_FDCAN_RxFifo0Callback+0x8>
 8007252:	4770      	bx	lr
 8007254:	2901      	cmp	r1, #1
 8007256:	d1fc      	bne.n	8007252 <HAL_FDCAN_RxFifo0Callback+0x6>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8007258:	b530      	push	{r4, r5, lr}
		FDCAN_RxHeaderTypeDef FDCAN_RxHeader;
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN_RxHeader, (uint8_t *)&rxMsg);
 800725a:	4c20      	ldr	r4, [pc, #128]	@ (80072dc <HAL_FDCAN_RxFifo0Callback+0x90>)
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800725c:	b08b      	sub	sp, #44	@ 0x2c
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN_RxHeader, (uint8_t *)&rxMsg);
 800725e:	4623      	mov	r3, r4
 8007260:	466a      	mov	r2, sp
 8007262:	2140      	movs	r1, #64	@ 0x40
 8007264:	f7fc fe04 	bl	8003e70 <HAL_FDCAN_GetRxMessage>

		if (FDCAN_RxHeader.Identifier == CAN_NODE_ID) {
 8007268:	9b00      	ldr	r3, [sp, #0]
 800726a:	2b67      	cmp	r3, #103	@ 0x67
 800726c:	d001      	beq.n	8007272 <HAL_FDCAN_RxFifo0Callback+0x26>
			max_chassis_power = rxMsg.pow_limit;
			supercap_controller.set_ref_chassis_power(max_chassis_power);
			energy_buff = rxMsg.energy_buffer;
		}
	}
}
 800726e:	b00b      	add	sp, #44	@ 0x2c
 8007270:	bd30      	pop	{r4, r5, pc}
			if (rxMsg.reset)
 8007272:	7863      	ldrb	r3, [r4, #1]
 8007274:	b9e3      	cbnz	r3, 80072b0 <HAL_FDCAN_RxFifo0Callback+0x64>
			if (!rxMsg.enable_module) {
 8007276:	7823      	ldrb	r3, [r4, #0]
 8007278:	b1eb      	cbz	r3, 80072b6 <HAL_FDCAN_RxFifo0Callback+0x6a>
			else if (!last_enable) {
 800727a:	4d19      	ldr	r5, [pc, #100]	@ (80072e0 <HAL_FDCAN_RxFifo0Callback+0x94>)
 800727c:	782a      	ldrb	r2, [r5, #0]
 800727e:	b312      	cbz	r2, 80072c6 <HAL_FDCAN_RxFifo0Callback+0x7a>
			max_chassis_power = rxMsg.pow_limit;
 8007280:	78a2      	ldrb	r2, [r4, #2]
 8007282:	4918      	ldr	r1, [pc, #96]	@ (80072e4 <HAL_FDCAN_RxFifo0Callback+0x98>)
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 8007284:	4818      	ldr	r0, [pc, #96]	@ (80072e8 <HAL_FDCAN_RxFifo0Callback+0x9c>)
			max_chassis_power = rxMsg.pow_limit;
 8007286:	700a      	strb	r2, [r1, #0]
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 8007288:	ee07 2a90 	vmov	s15, r2
			last_enable = rxMsg.enable_module;
 800728c:	3b00      	subs	r3, #0
 800728e:	bf18      	it	ne
 8007290:	2301      	movne	r3, #1
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 8007292:	eeb8 0a67 	vcvt.f32.u32	s0, s15
			last_enable = rxMsg.enable_module;
 8007296:	702b      	strb	r3, [r5, #0]
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 8007298:	f000 fa2c 	bl	80076f4 <_ZN24supercap_control_manager21set_ref_chassis_powerEf>
			energy_buff = rxMsg.energy_buffer;
 800729c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <HAL_FDCAN_RxFifo0Callback+0xa0>)
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	edc3 7a00 	vstr	s15, [r3]
}
 80072ae:	e7de      	b.n	800726e <HAL_FDCAN_RxFifo0Callback+0x22>
				softwareReset();
 80072b0:	f000 f9fc 	bl	80076ac <_Z13softwareResetv>
 80072b4:	e7df      	b.n	8007276 <HAL_FDCAN_RxFifo0Callback+0x2a>
				enable_supercap = false;
 80072b6:	4a0e      	ldr	r2, [pc, #56]	@ (80072f0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
				supercap_controller.stop_loop();
 80072b8:	480b      	ldr	r0, [pc, #44]	@ (80072e8 <HAL_FDCAN_RxFifo0Callback+0x9c>)
				enable_supercap = false;
 80072ba:	7013      	strb	r3, [r2, #0]
				supercap_controller.stop_loop();
 80072bc:	4d08      	ldr	r5, [pc, #32]	@ (80072e0 <HAL_FDCAN_RxFifo0Callback+0x94>)
 80072be:	f000 f9e3 	bl	8007688 <_ZN24supercap_control_manager9stop_loopEv>
			last_enable = rxMsg.enable_module;
 80072c2:	7823      	ldrb	r3, [r4, #0]
 80072c4:	e7dc      	b.n	8007280 <HAL_FDCAN_RxFifo0Callback+0x34>
				enable_supercap = true;
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
				supercap_controller.start_loop();
 80072c8:	4807      	ldr	r0, [pc, #28]	@ (80072e8 <HAL_FDCAN_RxFifo0Callback+0x9c>)
				enable_supercap = true;
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
				supercap_controller.start_loop();
 80072ce:	f000 f94f 	bl	8007570 <_ZN24supercap_control_manager10start_loopEv>
			last_enable = rxMsg.enable_module;
 80072d2:	7823      	ldrb	r3, [r4, #0]
 80072d4:	e7d4      	b.n	8007280 <HAL_FDCAN_RxFifo0Callback+0x34>
 80072d6:	bf00      	nop
 80072d8:	2000042c 	.word	0x2000042c
 80072dc:	20001124 	.word	0x20001124
 80072e0:	20000014 	.word	0x20000014
 80072e4:	20000016 	.word	0x20000016
 80072e8:	20000654 	.word	0x20000654
 80072ec:	20001120 	.word	0x20001120
 80072f0:	2000111c 	.word	0x2000111c

080072f4 <HAL_FDCAN_ErrorStatusCallback>:
 * Resets the CAN peripheral and reinitializes the communication settings.
 *
 * @param hfdcan Pointer to the affected CAN instance
 * @param ErrorStatusITs Interrupt flags (unused)
 */
void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4604      	mov	r4, r0
	MX_FDCAN3_Init();        // Reset CAN peripheral
 80072f8:	f7fa f880 	bl	80013fc <MX_FDCAN3_Init>
	initCANComm(hfdcan);     // Reapply all settings and filters
 80072fc:	4620      	mov	r0, r4
}
 80072fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	initCANComm(hfdcan);     // Reapply all settings and filters
 8007302:	f7ff beff 	b.w	8007104 <_Z11initCANCommP19FDCAN_HandleTypeDef>
 8007306:	bf00      	nop

08007308 <_ZN24supercap_control_manager21setup_pid_controllersEv>:
 * precomputed based on real-time readings to avoid unstable startup behavior.
 *
 * If `CALIBRATION_MODE` is disabled, this also starts the PWM gates using the computed
 * initial duty ratio and marks the system as initialized.
 */
void supercap_control_manager::setup_pid_controllers(){
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	ed2d 8b02 	vpush	{d8}
	// Battery power PID
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
	pid[0].IntegMax = max_chassis_power - 3;
 800730e:	4b7d      	ldr	r3, [pc, #500]	@ (8007504 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1fc>)
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 8007310:	4c7d      	ldr	r4, [pc, #500]	@ (8007508 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x200>)
	pid[0].IntegMax = max_chassis_power - 3;
 8007312:	781b      	ldrb	r3, [r3, #0]
	pid[0].OutputMax = max_chassis_power - 3;
	pid[0].IntegMin = P_BATTERY_MIN_OUTPUT;
 8007314:	487d      	ldr	r0, [pc, #500]	@ (800750c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x204>)
 8007316:	62a0      	str	r0, [r4, #40]	@ 0x28
	pid[0].IntegMax = max_chassis_power - 3;
 8007318:	3b03      	subs	r3, #3
 800731a:	ee07 3a90 	vmov	s15, r3
	pid[0].OutputMin = P_BATTERY_MIN_OUTPUT;

	// Supercap current PID
	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
	pid[2].ArmPID_Instance.Kd = I_SUPERCAP_KD;
 800731e:	2300      	movs	r3, #0
	pid[0].OutputMin = P_BATTERY_MIN_OUTPUT;
 8007320:	6320      	str	r0, [r4, #48]	@ 0x30
	pid[2].ArmPID_Instance.Kd = I_SUPERCAP_KD;
 8007322:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
 8007326:	487a      	ldr	r0, [pc, #488]	@ (8007510 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x208>)
	pid[3].OutputMin = V_SUPERCAPMAX_MIN_OUTPUT;

	// Supercap under-voltage limit PID
	pid[4].ArmPID_Instance.Kp = V_SUPERCAPMIN_KP;
	pid[4].ArmPID_Instance.Ki = V_SUPERCAPMIN_KI;
	pid[4].ArmPID_Instance.Kd = V_SUPERCAPMIN_KD;
 8007328:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
	pid[4].IntegMax = V_SUPERCAPMIN_INTEG_MAX;
 800732c:	4b79      	ldr	r3, [pc, #484]	@ (8007514 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
	pid[2].IntegMax = I_SUPERCAP_INTEG_MAX;
 800732e:	497a      	ldr	r1, [pc, #488]	@ (8007518 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x210>)
	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
 8007330:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
	pid[4].IntegMax = V_SUPERCAPMIN_INTEG_MAX;
 8007334:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
 8007338:	4878      	ldr	r0, [pc, #480]	@ (800751c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x214>)
	pid[4].IntegMin = V_SUPERCAPMIN_INTEG_MIN;
	pid[4].OutputMax = V_SUPERCAPMIN_MAX_OUTPUT;
 800733a:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
	pid[2].IntegMin = I_SUPERCAP_INTEG_MIN;
 800733e:	4b78      	ldr	r3, [pc, #480]	@ (8007520 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x218>)
	pid[2].IntegMax = I_SUPERCAP_INTEG_MAX;
 8007340:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
	pid[0].IntegMax = max_chassis_power - 3;
 8007344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
 8007348:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
	pid[2].OutputMax = I_SUPERCAP_MAX_OUTPUT;
 800734c:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
	pid[3].IntegMax = V_SUPERCAPMAX_INTEG_MAX;
 8007350:	4874      	ldr	r0, [pc, #464]	@ (8007524 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x21c>)
	pid[3].ArmPID_Instance.Ki = V_SUPERCAPMAX_KI;
 8007352:	4975      	ldr	r1, [pc, #468]	@ (8007528 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x220>)
	pid[2].IntegMin = I_SUPERCAP_INTEG_MIN;
 8007354:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
	pid[2].OutputMin = I_SUPERCAP_MIN_OUTPUT;
 8007358:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
	pid[4].IntegMin = V_SUPERCAPMIN_INTEG_MIN;
 800735c:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
	pid[4].OutputMin = V_SUPERCAPMIN_MIN_OUTPUT;
 8007360:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
	pid[3].IntegMin = V_SUPERCAPMAX_INTEG_MIN;
 8007364:	4b71      	ldr	r3, [pc, #452]	@ (800752c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x224>)
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
 8007366:	4a72      	ldr	r2, [pc, #456]	@ (8007530 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x228>)
	pid[3].ArmPID_Instance.Ki = V_SUPERCAPMAX_KI;
 8007368:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
void supercap_control_manager::setup_pid_controllers(){
 800736c:	b082      	sub	sp, #8
	pid[4].ArmPID_Instance.Ki = V_SUPERCAPMIN_KI;
 800736e:	f8c4 10ec 	str.w	r1, [r4, #236]	@ 0xec
	pid[3].IntegMax = V_SUPERCAPMAX_INTEG_MAX;
 8007372:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0

	// Initialize the PID controllers with CMSIS-DSP
	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 8007376:	2101      	movs	r1, #1
	pid[3].OutputMax = V_SUPERCAPMAX_MAX_OUTPUT;
 8007378:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
	pid[3].IntegMin = V_SUPERCAPMAX_INTEG_MIN;
 800737c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 8007380:	4620      	mov	r0, r4
	pid[3].OutputMin = V_SUPERCAPMAX_MIN_OUTPUT;
 8007382:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 8007386:	4d6b      	ldr	r5, [pc, #428]	@ (8007534 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x22c>)
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
 8007388:	4b6b      	ldr	r3, [pc, #428]	@ (8007538 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x230>)
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
 800738a:	6222      	str	r2, [r4, #32]
	pid[0].IntegMax = max_chassis_power - 3;
 800738c:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
	pid[0].OutputMax = max_chassis_power - 3;
 8007390:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
	pid[3].ArmPID_Instance.Kp = V_SUPERCAPMAX_KP;
 8007394:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
	pid[3].ArmPID_Instance.Kd = V_SUPERCAPMAX_KD;
 8007398:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
	pid[4].ArmPID_Instance.Kp = V_SUPERCAPMIN_KP;
 800739c:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
 80073a0:	61e3      	str	r3, [r4, #28]
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 80073a2:	61a5      	str	r5, [r4, #24]
	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 80073a4:	f000 ffaa 	bl	80082fc <arm_pid_init_f32>
	pid[0].ArmPID_Instance.state[2] = pid[0].IntegMax;
 80073a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073aa:	6163      	str	r3, [r4, #20]

	arm_pid_init_f32(&(pid[2].ArmPID_Instance), 1);
 80073ac:	2101      	movs	r1, #1
 80073ae:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073b2:	f000 ffa3 	bl	80082fc <arm_pid_init_f32>

	// Estimate initial duty cycle using live voltage readings to avoid unsafe startup
	HAL_Delay(100);
 80073b6:	2064      	movs	r0, #100	@ 0x64
 80073b8:	f7fb f8e4 	bl	8002584 <HAL_Delay>
	float initDutyRatio = 15.0;
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 80073bc:	495f      	ldr	r1, [pc, #380]	@ (800753c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x234>)
 80073be:	4a60      	ldr	r2, [pc, #384]	@ (8007540 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x238>)
 80073c0:	8848      	ldrh	r0, [r1, #2]
 80073c2:	4b60      	ldr	r3, [pc, #384]	@ (8007544 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x23c>)
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 80073c4:	8889      	ldrh	r1, [r1, #4]
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 80073c6:	ed92 5a01 	vldr	s10, [r2, #4]
 80073ca:	ed93 6a01 	vldr	s12, [r3, #4]
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 80073ce:	edd2 5a02 	vldr	s11, [r2, #8]
 80073d2:	edd3 6a02 	vldr	s13, [r3, #8]
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 80073d6:	ee07 0a10 	vmov	s14, r0
 80073da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 80073de:	ee07 1a90 	vmov	s15, r1
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 80073e2:	eea7 6a05 	vfma.f32	s12, s14, s10
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 80073ea:	eee7 6aa5 	vfma.f32	s13, s15, s11
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 80073ee:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 80073f2:	ed8d 6a00 	vstr	s12, [sp]
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 80073f6:	edcd 6a01 	vstr	s13, [sp, #4]
		initDutyRatio = cap_temp / bat_temp;
 80073fa:	ed9d 7a00 	vldr	s14, [sp]
 80073fe:	eddd 7a01 	vldr	s15, [sp, #4]
 8007402:	ee87 8a27 	vdiv.f32	s16, s14, s15
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 8007406:	eeb4 8ae5 	vcmpe.f32	s16, s11
 800740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740e:	daf0      	bge.n	80073f2 <_ZN24supercap_control_manager21setup_pid_controllersEv+0xea>
 8007410:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	d9eb      	bls.n	80073f2 <_ZN24supercap_control_manager21setup_pid_controllersEv+0xea>
	}
	pid[2].ArmPID_Instance.state[2] = initDutyRatio;

	// Voltage clamps
	arm_pid_init_f32(&(pid[3].ArmPID_Instance), 1);
 800741a:	484b      	ldr	r0, [pc, #300]	@ (8007548 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x240>)
	pid[2].ArmPID_Instance.state[2] = initDutyRatio;
 800741c:	ed84 8a1f 	vstr	s16, [r4, #124]	@ 0x7c
	arm_pid_init_f32(&(pid[3].ArmPID_Instance), 1);
 8007420:	2101      	movs	r1, #1
 8007422:	f000 ff6b 	bl	80082fc <arm_pid_init_f32>
	pid[3].ArmPID_Instance.state[2] = pid[3].IntegMax;
 8007426:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
	arm_pid_init_f32(&(pid[4].ArmPID_Instance), 1);
 800742a:	4848      	ldr	r0, [pc, #288]	@ (800754c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x244>)
	pid[3].ArmPID_Instance.state[2] = pid[3].IntegMax;
 800742c:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
	arm_pid_init_f32(&(pid[4].ArmPID_Instance), 1);
 8007430:	2101      	movs	r1, #1
 8007432:	f000 ff63 	bl	80082fc <arm_pid_init_f32>
 */
static inline void update_dutyCycle(float dutyRatio){
	float D_chassis, D_cap;

	// Determine each half-bridge's duty cycle
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 8007436:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	pid[4].ArmPID_Instance.state[2] = pid[4].IntegMin;
 800743a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 800743e:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 8007442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007446:	dd06      	ble.n	8007456 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x14e>
 8007448:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800744c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007454:	d93c      	bls.n	80074d0 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1c8>
		D_cap = 0.9f;
		D_chassis = dutyRatio * 0.9f;
	} else if(dutyRatio > 1.0f){
 8007456:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800745a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	dd2f      	ble.n	80074c4 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1bc>
		D_chassis = 0.9f;
		D_cap = 0.9f / dutyRatio;
 8007464:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8007550 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x248>
	}

	// Compute compare values for cap side (Timer A)
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 8007468:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007554 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x24c>
		D_cap = 0.9f / dutyRatio;
 800746c:	eec6 7a88 	vdiv.f32	s15, s13, s16
	uint16_t TA_CmpOffsetHalf = (uint16_t)(TA_CmpOffset / 2);

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007470:	f244 2168 	movw	r1, #17000	@ 0x4268
 8007474:	f647 652c 	movw	r5, #32300	@ 0x7e2c
 8007478:	f240 66a4 	movw	r6, #1700	@ 0x6a4
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 800747c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 3a90 	vmov	r3, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007488:	f3c3 044e 	ubfx	r4, r3, #1, #15
 800748c:	1b0a      	subs	r2, r1, r4
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	1ad2      	subs	r2, r2, r3
	                       HRTIM_HALF_PERIOD - TA_CmpOffsetHalf - (TA_CmpOffset % 2));
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 8007494:	440c      	add	r4, r1
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007496:	4830      	ldr	r0, [pc, #192]	@ (8007558 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x250>)
 8007498:	6803      	ldr	r3, [r0, #0]
 * @param init_duty_cycle The duty cycle to start with, based on Vcap / Vbat ratio.
 * @return HAL_OK if HRTIM started successfully.
 */
HAL_StatusTypeDef supercap_control_manager::start_gates_pwm(float init_duty_cycle){
	update_dutyCycle(init_duty_cycle);
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 800749a:	f240 3103 	movw	r1, #771	@ 0x303
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 800749e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 80074a2:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80074a6:	f8c3 629c 	str.w	r6, [r3, #668]	@ 0x29c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 80074aa:	f8c3 52a4 	str.w	r5, [r3, #676]	@ 0x2a4
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 80074ae:	f7fd fe4f 	bl	8005150 <HAL_HRTIM_WaveformOutputStart>
		is_init = true;
 80074b2:	492a      	ldr	r1, [pc, #168]	@ (800755c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x254>)
		in_loop = true;
 80074b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007560 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x258>)
		is_init = true;
 80074b6:	2301      	movs	r3, #1
 80074b8:	700b      	strb	r3, [r1, #0]
		in_loop = true;
 80074ba:	7013      	strb	r3, [r2, #0]
}
 80074bc:	b002      	add	sp, #8
 80074be:	ecbd 8b02 	vpop	{d8}
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 80074c4:	f244 2268 	movw	r2, #17000	@ 0x4268
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 80074c8:	4614      	mov	r4, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80074ca:	4616      	mov	r6, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 80074cc:	4615      	mov	r5, r2
 80074ce:	e7e2      	b.n	8007496 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x18e>
		D_chassis = dutyRatio * 0.9f;
 80074d0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8007550 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x248>
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 80074d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8007554 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x24c>
		D_chassis = dutyRatio * 0.9f;
 80074d8:	ee68 7a27 	vmul.f32	s15, s16, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80074dc:	f244 2268 	movw	r2, #17000	@ 0x4268
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 80074e0:	ee67 7a87 	vmul.f32	s15, s15, s14
		D_chassis = dutyRatio * 0.9f;
 80074e4:	f647 642c 	movw	r4, #32300	@ 0x7e2c
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 80074e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ec:	ee17 3a90 	vmov	r3, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80074f0:	f3c3 054e 	ubfx	r5, r3, #1, #15
 80074f4:	1b56      	subs	r6, r2, r5
 80074f6:	f003 0301 	and.w	r3, r3, #1
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 80074fa:	4415      	add	r5, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80074fc:	1af6      	subs	r6, r6, r3
		D_chassis = dutyRatio * 0.9f;
 80074fe:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8007502:	e7c8      	b.n	8007496 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x18e>
 8007504:	20000016 	.word	0x20000016
 8007508:	20001140 	.word	0x20001140
 800750c:	c3c80000 	.word	0xc3c80000
 8007510:	3ca9930c 	.word	0x3ca9930c
 8007514:	3e374bc7 	.word	0x3e374bc7
 8007518:	3fcf7cee 	.word	0x3fcf7cee
 800751c:	3966afcd 	.word	0x3966afcd
 8007520:	3e020c4a 	.word	0x3e020c4a
 8007524:	3fcccccd 	.word	0x3fcccccd
 8007528:	3b23d70a 	.word	0x3b23d70a
 800752c:	3f80a3d7 	.word	0x3f80a3d7
 8007530:	3a83126f 	.word	0x3a83126f
 8007534:	40766666 	.word	0x40766666
 8007538:	3d449ba6 	.word	0x3d449ba6
 800753c:	20000d14 	.word	0x20000d14
 8007540:	20000d00 	.word	0x20000d00
 8007544:	20000cec 	.word	0x20000cec
 8007548:	200011dc 	.word	0x200011dc
 800754c:	20001210 	.word	0x20001210
 8007550:	3f666666 	.word	0x3f666666
 8007554:	4704d000 	.word	0x4704d000
 8007558:	200004f8 	.word	0x200004f8
 800755c:	20001245 	.word	0x20001245
 8007560:	20001244 	.word	0x20001244

08007564 <_ZN24supercap_control_manager9init_loopEv>:
HAL_StatusTypeDef supercap_control_manager::init_loop(){
 8007564:	b508      	push	{r3, lr}
	setup_pid_controllers();
 8007566:	f7ff fecf 	bl	8007308 <_ZN24supercap_control_manager21setup_pid_controllersEv>
}
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}
 800756e:	bf00      	nop

08007570 <_ZN24supercap_control_manager10start_loopEv>:
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 8007570:	4b3e      	ldr	r3, [pc, #248]	@ (800766c <_ZN24supercap_control_manager10start_loopEv+0xfc>)
 8007572:	493f      	ldr	r1, [pc, #252]	@ (8007670 <_ZN24supercap_control_manager10start_loopEv+0x100>)
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 8007574:	889a      	ldrh	r2, [r3, #4]
 8007576:	edd1 7a02 	vldr	s15, [r1, #8]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	ed91 6a01 	vldr	s12, [r1, #4]
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 8007580:	ee07 2a10 	vmov	s14, r2
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 8007584:	4a3b      	ldr	r2, [pc, #236]	@ (8007674 <_ZN24supercap_control_manager10start_loopEv+0x104>)
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 8007586:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800758a:	edd2 6a01 	vldr	s13, [r2, #4]
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 800758e:	ee27 7a27 	vmul.f32	s14, s14, s15
HAL_StatusTypeDef supercap_control_manager::start_loop(){
 8007592:	b570      	push	{r4, r5, r6, lr}
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 8007594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007598:	ee07 3a10 	vmov	s14, r3
 800759c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075a0:	edd2 6a02 	vldr	s13, [r2, #8]
		in_loop = true;
 80075a4:	4b34      	ldr	r3, [pc, #208]	@ (8007678 <_ZN24supercap_control_manager10start_loopEv+0x108>)
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 80075a6:	eee7 7a06 	vfma.f32	s15, s14, s12
		in_loop = true;
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 80075b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	dd06      	ble.n	80075ca <_ZN24supercap_control_manager10start_loopEv+0x5a>
 80075bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	d935      	bls.n	8007636 <_ZN24supercap_control_manager10start_loopEv+0xc6>
	} else if(dutyRatio > 1.0f){
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d6:	dd28      	ble.n	800762a <_ZN24supercap_control_manager10start_loopEv+0xba>
		D_cap = 0.9f / dutyRatio;
 80075d8:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 800767c <_ZN24supercap_control_manager10start_loopEv+0x10c>
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 80075dc:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8007680 <_ZN24supercap_control_manager10start_loopEv+0x110>
		D_cap = 0.9f / dutyRatio;
 80075e0:	ee86 7a27 	vdiv.f32	s14, s12, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 80075e4:	f244 2168 	movw	r1, #17000	@ 0x4268
 80075e8:	f647 652c 	movw	r5, #32300	@ 0x7e2c
 80075ec:	f240 66a4 	movw	r6, #1700	@ 0x6a4
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 80075f0:	ee67 7a26 	vmul.f32	s15, s14, s13
 80075f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f8:	ee17 3a90 	vmov	r3, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 80075fc:	f3c3 044e 	ubfx	r4, r3, #1, #15
 8007600:	1b0a      	subs	r2, r1, r4
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	1ad2      	subs	r2, r2, r3
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 8007608:	440c      	add	r4, r1
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 800760a:	481e      	ldr	r0, [pc, #120]	@ (8007684 <_ZN24supercap_control_manager10start_loopEv+0x114>)
 800760c:	6803      	ldr	r3, [r0, #0]
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 800760e:	f240 3103 	movw	r1, #771	@ 0x303
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007612:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 8007616:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 800761a:	f8c3 629c 	str.w	r6, [r3, #668]	@ 0x29c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 800761e:	f8c3 52a4 	str.w	r5, [r3, #676]	@ 0x2a4
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 8007622:	f7fd fd95 	bl	8005150 <HAL_HRTIM_WaveformOutputStart>
}
 8007626:	2000      	movs	r0, #0
 8007628:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 800762a:	f244 2268 	movw	r2, #17000	@ 0x4268
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 800762e:	4614      	mov	r4, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 8007630:	4616      	mov	r6, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 8007632:	4615      	mov	r5, r2
 8007634:	e7e9      	b.n	800760a <_ZN24supercap_control_manager10start_loopEv+0x9a>
		D_chassis = dutyRatio * 0.9f;
 8007636:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800767c <_ZN24supercap_control_manager10start_loopEv+0x10c>
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 800763a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8007680 <_ZN24supercap_control_manager10start_loopEv+0x110>
		D_chassis = dutyRatio * 0.9f;
 800763e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 8007642:	f244 2268 	movw	r2, #17000	@ 0x4268
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 8007646:	ee67 7a87 	vmul.f32	s15, s15, s14
		D_chassis = dutyRatio * 0.9f;
 800764a:	f647 642c 	movw	r4, #32300	@ 0x7e2c
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 3a90 	vmov	r3, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 8007656:	f3c3 054e 	ubfx	r5, r3, #1, #15
 800765a:	1b56      	subs	r6, r2, r5
 800765c:	f003 0301 	and.w	r3, r3, #1
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 8007660:	4415      	add	r5, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 8007662:	1af6      	subs	r6, r6, r3
		D_chassis = dutyRatio * 0.9f;
 8007664:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8007668:	e7cf      	b.n	800760a <_ZN24supercap_control_manager10start_loopEv+0x9a>
 800766a:	bf00      	nop
 800766c:	20000d14 	.word	0x20000d14
 8007670:	20000d00 	.word	0x20000d00
 8007674:	20000cec 	.word	0x20000cec
 8007678:	20001244 	.word	0x20001244
 800767c:	3f666666 	.word	0x3f666666
 8007680:	4704d000 	.word	0x4704d000
 8007684:	200004f8 	.word	0x200004f8

08007688 <_ZN24supercap_control_manager9stop_loopEv>:
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 8007688:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <_ZN24supercap_control_manager9stop_loopEv+0x1c>)
	in_loop = false;
 800768a:	4907      	ldr	r1, [pc, #28]	@ (80076a8 <_ZN24supercap_control_manager9stop_loopEv+0x20>)
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	f8d2 3398 	ldr.w	r3, [r2, #920]	@ 0x398
 8007692:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
	in_loop = false;
 8007696:	2000      	movs	r0, #0
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 8007698:	f043 0303 	orr.w	r3, r3, #3
	in_loop = false;
 800769c:	7008      	strb	r0, [r1, #0]
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800769e:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
}
 80076a2:	4770      	bx	lr
 80076a4:	200004f8 	.word	0x200004f8
 80076a8:	20001244 	.word	0x20001244

080076ac <_Z13softwareResetv>:
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 80076ac:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <_Z13softwareResetv+0x38>)
	in_loop = false;
 80076ae:	490e      	ldr	r1, [pc, #56]	@ (80076e8 <_Z13softwareResetv+0x3c>)
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	f8d2 3398 	ldr.w	r3, [r2, #920]	@ 0x398
 80076b6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
	in_loop = false;
 80076ba:	2000      	movs	r0, #0
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 80076bc:	f043 0303 	orr.w	r3, r3, #3
	in_loop = false;
 80076c0:	7008      	strb	r0, [r1, #0]
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 80076c2:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
  __ASM volatile ("cpsid i" : : : "memory");
 80076c6:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 80076c8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80076cc:	4907      	ldr	r1, [pc, #28]	@ (80076ec <_Z13softwareResetv+0x40>)
 80076ce:	4b08      	ldr	r3, [pc, #32]	@ (80076f0 <_Z13softwareResetv+0x44>)
 80076d0:	68ca      	ldr	r2, [r1, #12]
 80076d2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80076d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80076d8:	60cb      	str	r3, [r1, #12]
 80076da:	f3bf 8f4f 	dsb	sy
    __NOP();
 80076de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80076e0:	e7fd      	b.n	80076de <_Z13softwareResetv+0x32>
 80076e2:	bf00      	nop
 80076e4:	200004f8 	.word	0x200004f8
 80076e8:	20001244 	.word	0x20001244
 80076ec:	e000ed00 	.word	0xe000ed00
 80076f0:	05fa0004 	.word	0x05fa0004

080076f4 <_ZN24supercap_control_manager21set_ref_chassis_powerEf>:
 * control system should regulate around.
 *
 * @param ref_power_ Desired chassis power reference in watts.
 */
void supercap_control_manager::set_ref_chassis_power(float ref_power_){
	ref_power = ref_power_;
 80076f4:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop

080076fc <HAL_HRTIM_RepetitionEventCallback>:
 */
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
	uint8_t ADC_OVR_Flag = 0;

	// Check and recover ADC1 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR) == 1UL) {
 80076fc:	49e6      	ldr	r1, [pc, #920]	@ (8007a98 <HAL_HRTIM_RepetitionEventCallback+0x39c>)
		AnalogSignal_ADCDMA_OVRRecovery(&hadc1);
		ADC_OVR_Flag = 1;
	}

	// Check and recover ADC2 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 80076fe:	48e7      	ldr	r0, [pc, #924]	@ (8007a9c <HAL_HRTIM_RepetitionEventCallback+0x3a0>)
	if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR) == 1UL) {
 8007700:	680a      	ldr	r2, [r1, #0]
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 8007702:	6803      	ldr	r3, [r0, #0]
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 8007704:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR) == 1UL) {
 8007706:	6814      	ldr	r4, [r2, #0]
 8007708:	06e6      	lsls	r6, r4, #27
 800770a:	f100 8488 	bmi.w	800801e <HAL_HRTIM_RepetitionEventCallback+0x922>
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	06d5      	lsls	r5, r2, #27
 8007712:	f100 84a0 	bmi.w	8008056 <HAL_HRTIM_RepetitionEventCallback+0x95a>
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 8007716:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8007718:	4be1      	ldr	r3, [pc, #900]	@ (8007aa0 <HAL_HRTIM_RepetitionEventCallback+0x3a4>)
 800771a:	6812      	ldr	r2, [r2, #0]
			sum += adc1_samples[Cap_HalfFull][j][i];
 800771c:	49e1      	ldr	r1, [pc, #900]	@ (8007aa4 <HAL_HRTIM_RepetitionEventCallback+0x3a8>)
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 800771e:	429a      	cmp	r2, r3
 8007720:	bf98      	it	ls
 8007722:	4be1      	ldrls	r3, [pc, #900]	@ (8007aa8 <HAL_HRTIM_RepetitionEventCallback+0x3ac>)
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 8007724:	6d42      	ldr	r2, [r0, #84]	@ 0x54
			sum += adc1_samples[Cap_HalfFull][j][i];
 8007726:	f8b1 4040 	ldrh.w	r4, [r1, #64]	@ 0x40
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 800772a:	6812      	ldr	r2, [r2, #0]
			sum += adc1_samples[Cap_HalfFull][j][i];
 800772c:	f8b1 0048 	ldrh.w	r0, [r1, #72]	@ 0x48
 8007730:	f8b1 5046 	ldrh.w	r5, [r1, #70]	@ 0x46
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 8007734:	bf88      	it	hi
 8007736:	f503 735b 	addhi.w	r3, r3, #876	@ 0x36c
 800773a:	681b      	ldr	r3, [r3, #0]
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 800773c:	4bd8      	ldr	r3, [pc, #864]	@ (8007aa0 <HAL_HRTIM_RepetitionEventCallback+0x3a4>)
 800773e:	429a      	cmp	r2, r3
			sum += adc1_samples[Cap_HalfFull][j][i];
 8007740:	f8b1 2044 	ldrh.w	r2, [r1, #68]	@ 0x44
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 8007744:	bf98      	it	ls
 8007746:	4bd8      	ldrls	r3, [pc, #864]	@ (8007aa8 <HAL_HRTIM_RepetitionEventCallback+0x3ac>)
			sum += adc1_samples[Cap_HalfFull][j][i];
 8007748:	4422      	add	r2, r4
 800774a:	f8b1 404c 	ldrh.w	r4, [r1, #76]	@ 0x4c
 800774e:	fa10 f282 	uxtah	r2, r0, r2
 8007752:	fa14 f282 	uxtah	r2, r4, r2
 8007756:	f8b1 4050 	ldrh.w	r4, [r1, #80]	@ 0x50
 800775a:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 800775e:	fa14 f282 	uxtah	r2, r4, r2
 8007762:	f8b1 4054 	ldrh.w	r4, [r1, #84]	@ 0x54
 8007766:	fa14 f282 	uxtah	r2, r4, r2
 800776a:	f8b1 4058 	ldrh.w	r4, [r1, #88]	@ 0x58
 800776e:	fa14 f282 	uxtah	r2, r4, r2
 8007772:	f8b1 405c 	ldrh.w	r4, [r1, #92]	@ 0x5c
 8007776:	fa14 f282 	uxtah	r2, r4, r2
 800777a:	f8b1 4060 	ldrh.w	r4, [r1, #96]	@ 0x60
 800777e:	fa14 f282 	uxtah	r2, r4, r2
 8007782:	f8b1 4064 	ldrh.w	r4, [r1, #100]	@ 0x64
 8007786:	fa14 f282 	uxtah	r2, r4, r2
 800778a:	f8b1 4068 	ldrh.w	r4, [r1, #104]	@ 0x68
 800778e:	fa14 f282 	uxtah	r2, r4, r2
 8007792:	f8b1 406c 	ldrh.w	r4, [r1, #108]	@ 0x6c
 8007796:	fa14 f282 	uxtah	r2, r4, r2
 800779a:	f8b1 4070 	ldrh.w	r4, [r1, #112]	@ 0x70
 800779e:	fa14 f282 	uxtah	r2, r4, r2
 80077a2:	f8b1 4074 	ldrh.w	r4, [r1, #116]	@ 0x74
 80077a6:	fa14 f282 	uxtah	r2, r4, r2
 80077aa:	f8b1 4078 	ldrh.w	r4, [r1, #120]	@ 0x78
 80077ae:	fa14 f282 	uxtah	r2, r4, r2
 80077b2:	f8b1 407c 	ldrh.w	r4, [r1, #124]	@ 0x7c
 80077b6:	fa14 f282 	uxtah	r2, r4, r2
 80077ba:	f8b1 404a 	ldrh.w	r4, [r1, #74]	@ 0x4a
 80077be:	4428      	add	r0, r5
 80077c0:	fa14 fe80 	uxtah	lr, r4, r0
 80077c4:	f8b1 004e 	ldrh.w	r0, [r1, #78]	@ 0x4e
		ADC_sampled_data[i] = (sum >> 4);
 80077c8:	4cb8      	ldr	r4, [pc, #736]	@ (8007aac <HAL_HRTIM_RepetitionEventCallback+0x3b0>)
			sum += adc1_samples[Cap_HalfFull][j][i];
 80077ca:	fa10 fe8e 	uxtah	lr, r0, lr
 80077ce:	f8b1 0052 	ldrh.w	r0, [r1, #82]	@ 0x52
 80077d2:	fa10 fe8e 	uxtah	lr, r0, lr
 80077d6:	f8b1 0056 	ldrh.w	r0, [r1, #86]	@ 0x56
 80077da:	fa10 fe8e 	uxtah	lr, r0, lr
 80077de:	f8b1 005a 	ldrh.w	r0, [r1, #90]	@ 0x5a
 80077e2:	fa10 fe8e 	uxtah	lr, r0, lr
 80077e6:	f8b1 005e 	ldrh.w	r0, [r1, #94]	@ 0x5e
 80077ea:	fa10 fe8e 	uxtah	lr, r0, lr
 80077ee:	f8b1 0062 	ldrh.w	r0, [r1, #98]	@ 0x62
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 80077f2:	bf88      	it	hi
 80077f4:	f503 735b 	addhi.w	r3, r3, #876	@ 0x36c
			sum += adc1_samples[Cap_HalfFull][j][i];
 80077f8:	fa10 fe8e 	uxtah	lr, r0, lr
 80077fc:	f8b1 0066 	ldrh.w	r0, [r1, #102]	@ 0x66
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 8007800:	681b      	ldr	r3, [r3, #0]
			sum += adc2_samples[Bat_HalfFull][j][i];
 8007802:	4bab      	ldr	r3, [pc, #684]	@ (8007ab0 <HAL_HRTIM_RepetitionEventCallback+0x3b4>)
			sum += adc1_samples[Cap_HalfFull][j][i];
 8007804:	fa10 fe8e 	uxtah	lr, r0, lr
 8007808:	f8b1 006a 	ldrh.w	r0, [r1, #106]	@ 0x6a
			sum += adc2_samples[Bat_HalfFull][j][i];
 800780c:	f8b3 c066 	ldrh.w	ip, [r3, #102]	@ 0x66
 8007810:	f8b3 6062 	ldrh.w	r6, [r3, #98]	@ 0x62
			sum += adc1_samples[Cap_HalfFull][j][i];
 8007814:	fa10 fe8e 	uxtah	lr, r0, lr
 8007818:	f8b1 006e 	ldrh.w	r0, [r1, #110]	@ 0x6e
 800781c:	fa10 fe8e 	uxtah	lr, r0, lr
 8007820:	f8b1 0072 	ldrh.w	r0, [r1, #114]	@ 0x72
 8007824:	fa10 fe8e 	uxtah	lr, r0, lr
 8007828:	f8b1 0076 	ldrh.w	r0, [r1, #118]	@ 0x76
 800782c:	fa10 fe8e 	uxtah	lr, r0, lr
 8007830:	f8b1 007a 	ldrh.w	r0, [r1, #122]	@ 0x7a
 8007834:	f8b1 107e 	ldrh.w	r1, [r1, #126]	@ 0x7e
 8007838:	fa10 fe8e 	uxtah	lr, r0, lr
 800783c:	fa11 fe8e 	uxtah	lr, r1, lr
			sum += adc2_samples[Bat_HalfFull][j][i];
 8007840:	f8b3 1060 	ldrh.w	r1, [r3, #96]	@ 0x60
 8007844:	f8b3 0068 	ldrh.w	r0, [r3, #104]	@ 0x68
 8007848:	448c      	add	ip, r1
 800784a:	f8b3 106c 	ldrh.w	r1, [r3, #108]	@ 0x6c
 800784e:	fa11 fc8c 	uxtah	ip, r1, ip
 8007852:	f8b3 1072 	ldrh.w	r1, [r3, #114]	@ 0x72
 8007856:	fa11 fc8c 	uxtah	ip, r1, ip
 800785a:	f8b3 1078 	ldrh.w	r1, [r3, #120]	@ 0x78
 800785e:	fa11 fc8c 	uxtah	ip, r1, ip
 8007862:	f8b3 107e 	ldrh.w	r1, [r3, #126]	@ 0x7e
 8007866:	fa11 fc8c 	uxtah	ip, r1, ip
 800786a:	f8b3 1084 	ldrh.w	r1, [r3, #132]	@ 0x84
 800786e:	4430      	add	r0, r6
 8007870:	fa11 fc8c 	uxtah	ip, r1, ip
 8007874:	f8b3 606e 	ldrh.w	r6, [r3, #110]	@ 0x6e
 8007878:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800787c:	fa16 f080 	uxtah	r0, r6, r0
 8007880:	fa11 fc8c 	uxtah	ip, r1, ip
 8007884:	f8b3 6074 	ldrh.w	r6, [r3, #116]	@ 0x74
 8007888:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 800788c:	fa16 f080 	uxtah	r0, r6, r0
 8007890:	fa11 fc8c 	uxtah	ip, r1, ip
 8007894:	f8b3 607a 	ldrh.w	r6, [r3, #122]	@ 0x7a
 8007898:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 800789c:	fa16 f080 	uxtah	r0, r6, r0
 80078a0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078a4:	f8b3 6080 	ldrh.w	r6, [r3, #128]	@ 0x80
 80078a8:	f8b3 109c 	ldrh.w	r1, [r3, #156]	@ 0x9c
 80078ac:	fa16 f080 	uxtah	r0, r6, r0
 80078b0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078b4:	f8b3 6086 	ldrh.w	r6, [r3, #134]	@ 0x86
 80078b8:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	@ 0xa2
 80078bc:	fa16 f080 	uxtah	r0, r6, r0
 80078c0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078c4:	f8b3 608c 	ldrh.w	r6, [r3, #140]	@ 0x8c
 80078c8:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 80078cc:	fa16 f080 	uxtah	r0, r6, r0
 80078d0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078d4:	f8b3 6092 	ldrh.w	r6, [r3, #146]	@ 0x92
 80078d8:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	@ 0xae
 80078dc:	fa16 f080 	uxtah	r0, r6, r0
 80078e0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078e4:	f8b3 6098 	ldrh.w	r6, [r3, #152]	@ 0x98
 80078e8:	f8b3 10b4 	ldrh.w	r1, [r3, #180]	@ 0xb4
 80078ec:	fa16 f080 	uxtah	r0, r6, r0
 80078f0:	fa11 fc8c 	uxtah	ip, r1, ip
 80078f4:	f8b3 10ba 	ldrh.w	r1, [r3, #186]	@ 0xba
 80078f8:	f8b3 609e 	ldrh.w	r6, [r3, #158]	@ 0x9e
 80078fc:	f8b3 70b2 	ldrh.w	r7, [r3, #178]	@ 0xb2
 8007900:	fa16 f080 	uxtah	r0, r6, r0
 8007904:	f8b3 60a4 	ldrh.w	r6, [r3, #164]	@ 0xa4
 8007908:	fa16 f080 	uxtah	r0, r6, r0
 800790c:	f8b3 60aa 	ldrh.w	r6, [r3, #170]	@ 0xaa
 8007910:	fa16 f080 	uxtah	r0, r6, r0
 8007914:	f8b3 60b0 	ldrh.w	r6, [r3, #176]	@ 0xb0
 8007918:	fa16 f080 	uxtah	r0, r6, r0
 800791c:	f8b3 60b6 	ldrh.w	r6, [r3, #182]	@ 0xb6
 8007920:	fa16 f080 	uxtah	r0, r6, r0
 8007924:	f8b3 60bc 	ldrh.w	r6, [r3, #188]	@ 0xbc
 8007928:	fa11 fc8c 	uxtah	ip, r1, ip
		ADC_sampled_data[i] = (sum >> 4);
 800792c:	2500      	movs	r5, #0
 800792e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8007932:	4629      	mov	r1, r5
			sum += adc2_samples[Bat_HalfFull][j][i];
 8007934:	fa16 f080 	uxtah	r0, r6, r0
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 8007938:	f3cc 1c0b 	ubfx	ip, ip, #4, #12
		ADC_sampled_data[i] = (sum >> 4);
 800793c:	f362 050f 	bfi	r5, r2, #0, #16
 8007940:	f3ce 1e0b 	ubfx	lr, lr, #4, #12
 8007944:	f36c 010f 	bfi	r1, ip, #0, #16
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 8007948:	f3c0 100b 	ubfx	r0, r0, #4, #12
		ADC_sampled_data[i] = (sum >> 4);
 800794c:	f36e 451f 	bfi	r5, lr, #16, #16
 8007950:	f360 411f 	bfi	r1, r0, #16, #16
 8007954:	6025      	str	r5, [r4, #0]
 8007956:	6061      	str	r1, [r4, #4]
			sum += adc2_samples[Bat_HalfFull][j][i];
 8007958:	f8b3 5064 	ldrh.w	r5, [r3, #100]	@ 0x64
 800795c:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 8007960:	f8b3 60a6 	ldrh.w	r6, [r3, #166]	@ 0xa6
 8007964:	4429      	add	r1, r5
 8007966:	f8b3 5070 	ldrh.w	r5, [r3, #112]	@ 0x70
 800796a:	fa15 f181 	uxtah	r1, r5, r1
 800796e:	f8b3 5076 	ldrh.w	r5, [r3, #118]	@ 0x76
 8007972:	fa15 f181 	uxtah	r1, r5, r1
 8007976:	f8b3 507c 	ldrh.w	r5, [r3, #124]	@ 0x7c
 800797a:	fa15 f181 	uxtah	r1, r5, r1
 800797e:	f8b3 5082 	ldrh.w	r5, [r3, #130]	@ 0x82
 8007982:	fa15 f181 	uxtah	r1, r5, r1
 8007986:	f8b3 5088 	ldrh.w	r5, [r3, #136]	@ 0x88
 800798a:	fa15 f181 	uxtah	r1, r5, r1
 800798e:	f8b3 508e 	ldrh.w	r5, [r3, #142]	@ 0x8e
 8007992:	fa15 f181 	uxtah	r1, r5, r1
 8007996:	f8b3 5094 	ldrh.w	r5, [r3, #148]	@ 0x94
 800799a:	fa15 f181 	uxtah	r1, r5, r1
 800799e:	f8b3 509a 	ldrh.w	r5, [r3, #154]	@ 0x9a
 80079a2:	fa15 f181 	uxtah	r1, r5, r1
 80079a6:	f8b3 50a0 	ldrh.w	r5, [r3, #160]	@ 0xa0
 80079aa:	fa15 f181 	uxtah	r1, r5, r1
 80079ae:	fa16 f181 	uxtah	r1, r6, r1
 80079b2:	f8b3 60ac 	ldrh.w	r6, [r3, #172]	@ 0xac
	filter.sum -= filter.window_filter[filter.index];
 80079b6:	4d3f      	ldr	r5, [pc, #252]	@ (8007ab4 <HAL_HRTIM_RepetitionEventCallback+0x3b8>)
			sum += adc2_samples[Bat_HalfFull][j][i];
 80079b8:	fa16 f181 	uxtah	r1, r6, r1
 80079bc:	fa17 f181 	uxtah	r1, r7, r1
 80079c0:	f8b3 70b8 	ldrh.w	r7, [r3, #184]	@ 0xb8
 80079c4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
	filter.sum -= filter.window_filter[filter.index];
 80079c8:	f895 6081 	ldrb.w	r6, [r5, #129]	@ 0x81
			sum += adc2_samples[Bat_HalfFull][j][i];
 80079cc:	fa17 f181 	uxtah	r1, r7, r1
 80079d0:	fa13 f381 	uxtah	r3, r3, r1
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 80079d4:	f3c3 130b 	ubfx	r3, r3, #4, #12
	filter.sum -= filter.window_filter[filter.index];
 80079d8:	f835 7016 	ldrh.w	r7, [r5, r6, lsl #1]
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 80079dc:	8123      	strh	r3, [r4, #8]
	filter.sum += new_sample;
 80079de:	f8d5 4084 	ldr.w	r4, [r5, #132]	@ 0x84
	filter.window_filter[filter.index] = new_sample;
 80079e2:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
	filter.sum += new_sample;
 80079e6:	1be4      	subs	r4, r4, r7
 80079e8:	4422      	add	r2, r4
	filter.index += 1;
 80079ea:	1c71      	adds	r1, r6, #1
	if(filter.index == filter.length){
 80079ec:	f895 4080 	ldrb.w	r4, [r5, #128]	@ 0x80
	filter.sum += new_sample;
 80079f0:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
	filter.index += 1;
 80079f4:	b2c9      	uxtb	r1, r1
	if(filter.index == filter.length){
 80079f6:	428c      	cmp	r4, r1
	filter.index += 1;
 80079f8:	f885 1081 	strb.w	r1, [r5, #129]	@ 0x81
	if(filter.index == filter.length){
 80079fc:	f000 834d 	beq.w	800809a <HAL_HRTIM_RepetitionEventCallback+0x99e>
	if(filter.full)
 8007a00:	f895 6088 	ldrb.w	r6, [r5, #136]	@ 0x88
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	f040 834e 	bne.w	80080a6 <HAL_HRTIM_RepetitionEventCallback+0x9aa>
		return (uint16_t)(filter.sum / filter.index);
 8007a0a:	fbb2 f2f1 	udiv	r2, r2, r1
 8007a0e:	b292      	uxth	r2, r2
	filter.sum -= filter.window_filter[filter.index];
 8007a10:	f895 410d 	ldrb.w	r4, [r5, #269]	@ 0x10d
	filter.sum += new_sample;
 8007a14:	f8d5 1110 	ldr.w	r1, [r5, #272]	@ 0x110
	filter.sum -= filter.window_filter[filter.index];
 8007a18:	f104 0646 	add.w	r6, r4, #70	@ 0x46
	filter.index += 1;
 8007a1c:	3401      	adds	r4, #1
	filter.sum -= filter.window_filter[filter.index];
 8007a1e:	f835 7016 	ldrh.w	r7, [r5, r6, lsl #1]
	filter.window_filter[filter.index] = new_sample;
 8007a22:	f825 e016 	strh.w	lr, [r5, r6, lsl #1]
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 8007a26:	4e24      	ldr	r6, [pc, #144]	@ (8007ab8 <HAL_HRTIM_RepetitionEventCallback+0x3bc>)
 8007a28:	8032      	strh	r2, [r6, #0]
	if(filter.index == filter.length){
 8007a2a:	f895 210c 	ldrb.w	r2, [r5, #268]	@ 0x10c
	filter.index += 1;
 8007a2e:	b2e4      	uxtb	r4, r4
	filter.sum += new_sample;
 8007a30:	1bc9      	subs	r1, r1, r7
 8007a32:	4471      	add	r1, lr
	if(filter.index == filter.length){
 8007a34:	42a2      	cmp	r2, r4
	filter.index += 1;
 8007a36:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
	filter.sum += new_sample;
 8007a3a:	f8c5 1110 	str.w	r1, [r5, #272]	@ 0x110
	if(filter.index == filter.length){
 8007a3e:	f000 834a 	beq.w	80080d6 <HAL_HRTIM_RepetitionEventCallback+0x9da>
	if(filter.full)
 8007a42:	f895 7114 	ldrb.w	r7, [r5, #276]	@ 0x114
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	f040 834b 	bne.w	80080e2 <HAL_HRTIM_RepetitionEventCallback+0x9e6>
		return (uint16_t)(filter.sum / filter.index);
 8007a4c:	fbb1 f1f4 	udiv	r1, r1, r4
 8007a50:	b289      	uxth	r1, r1
	filter.sum -= filter.window_filter[filter.index];
 8007a52:	f895 4199 	ldrb.w	r4, [r5, #409]	@ 0x199
	filter.sum += new_sample;
 8007a56:	f8d5 219c 	ldr.w	r2, [r5, #412]	@ 0x19c
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 8007a5a:	8071      	strh	r1, [r6, #2]
	filter.sum -= filter.window_filter[filter.index];
 8007a5c:	f104 0e8c 	add.w	lr, r4, #140	@ 0x8c
	filter.index += 1;
 8007a60:	3401      	adds	r4, #1
	filter.sum -= filter.window_filter[filter.index];
 8007a62:	f835 701e 	ldrh.w	r7, [r5, lr, lsl #1]
	filter.window_filter[filter.index] = new_sample;
 8007a66:	f825 c01e 	strh.w	ip, [r5, lr, lsl #1]
	filter.sum += new_sample;
 8007a6a:	1bd2      	subs	r2, r2, r7
	if(filter.index == filter.length){
 8007a6c:	f895 7198 	ldrb.w	r7, [r5, #408]	@ 0x198
	filter.index += 1;
 8007a70:	b2e4      	uxtb	r4, r4
	filter.sum += new_sample;
 8007a72:	4462      	add	r2, ip
	if(filter.index == filter.length){
 8007a74:	42a7      	cmp	r7, r4
	filter.index += 1;
 8007a76:	f885 4199 	strb.w	r4, [r5, #409]	@ 0x199
	filter.sum += new_sample;
 8007a7a:	f8c5 219c 	str.w	r2, [r5, #412]	@ 0x19c
	if(filter.index == filter.length){
 8007a7e:	f000 8334 	beq.w	80080ea <HAL_HRTIM_RepetitionEventCallback+0x9ee>
	if(filter.full)
 8007a82:	f895 c1a0 	ldrb.w	ip, [r5, #416]	@ 0x1a0
 8007a86:	f1bc 0f00 	cmp.w	ip, #0
 8007a8a:	f040 8334 	bne.w	80080f6 <HAL_HRTIM_RepetitionEventCallback+0x9fa>
		return (uint16_t)(filter.sum / filter.index);
 8007a8e:	fbb2 f2f4 	udiv	r2, r2, r4
 8007a92:	b294      	uxth	r4, r2
 8007a94:	e012      	b.n	8007abc <HAL_HRTIM_RepetitionEventCallback+0x3c0>
 8007a96:	bf00      	nop
 8007a98:	20000398 	.word	0x20000398
 8007a9c:	2000032c 	.word	0x2000032c
 8007aa0:	40020094 	.word	0x40020094
 8007aa4:	2000109c 	.word	0x2000109c
 8007aa8:	40020000 	.word	0x40020000
 8007aac:	20001248 	.word	0x20001248
 8007ab0:	20000fdc 	.word	0x20000fdc
 8007ab4:	20000d20 	.word	0x20000d20
 8007ab8:	20000d14 	.word	0x20000d14
	filter.sum -= filter.window_filter[filter.index];
 8007abc:	f895 c225 	ldrb.w	ip, [r5, #549]	@ 0x225
	filter.sum += new_sample;
 8007ac0:	f8d5 2228 	ldr.w	r2, [r5, #552]	@ 0x228
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 8007ac4:	80b4      	strh	r4, [r6, #4]
	filter.sum -= filter.window_filter[filter.index];
 8007ac6:	f10c 0ed2 	add.w	lr, ip, #210	@ 0xd2
	filter.index += 1;
 8007aca:	f10c 0c01 	add.w	ip, ip, #1
	filter.sum -= filter.window_filter[filter.index];
 8007ace:	f835 701e 	ldrh.w	r7, [r5, lr, lsl #1]
	filter.window_filter[filter.index] = new_sample;
 8007ad2:	f825 001e 	strh.w	r0, [r5, lr, lsl #1]
	filter.sum += new_sample;
 8007ad6:	1bd2      	subs	r2, r2, r7
 8007ad8:	4402      	add	r2, r0
	if(filter.index == filter.length){
 8007ada:	f895 0224 	ldrb.w	r0, [r5, #548]	@ 0x224
	filter.sum += new_sample;
 8007ade:	f8c5 2228 	str.w	r2, [r5, #552]	@ 0x228
	filter.index += 1;
 8007ae2:	fa5f fc8c 	uxtb.w	ip, ip
	if(filter.index == filter.length){
 8007ae6:	4560      	cmp	r0, ip
	filter.index += 1;
 8007ae8:	f885 c225 	strb.w	ip, [r5, #549]	@ 0x225
	if(filter.index == filter.length){
 8007aec:	f000 82e9 	beq.w	80080c2 <HAL_HRTIM_RepetitionEventCallback+0x9c6>
	if(filter.full)
 8007af0:	f895 722c 	ldrb.w	r7, [r5, #556]	@ 0x22c
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	f040 82ea 	bne.w	80080ce <HAL_HRTIM_RepetitionEventCallback+0x9d2>
		return (uint16_t)(filter.sum / filter.index);
 8007afa:	fbb2 f2fc 	udiv	r2, r2, ip
 8007afe:	b292      	uxth	r2, r2
	filter.sum -= filter.window_filter[filter.index];
 8007b00:	f895 02b1 	ldrb.w	r0, [r5, #689]	@ 0x2b1
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 8007b04:	80f2      	strh	r2, [r6, #6]
	filter.sum -= filter.window_filter[filter.index];
 8007b06:	f500 7c8c 	add.w	ip, r0, #280	@ 0x118
	filter.sum += new_sample;
 8007b0a:	f8d5 22b4 	ldr.w	r2, [r5, #692]	@ 0x2b4
	filter.sum -= filter.window_filter[filter.index];
 8007b0e:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
	filter.window_filter[filter.index] = new_sample;
 8007b12:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
	filter.sum += new_sample;
 8007b16:	1bd2      	subs	r2, r2, r7
 8007b18:	4413      	add	r3, r2
	filter.index += 1;
 8007b1a:	3001      	adds	r0, #1
	if(filter.index == filter.length){
 8007b1c:	f895 22b0 	ldrb.w	r2, [r5, #688]	@ 0x2b0
	filter.sum += new_sample;
 8007b20:	f8c5 32b4 	str.w	r3, [r5, #692]	@ 0x2b4
	filter.index += 1;
 8007b24:	b2c0      	uxtb	r0, r0
	if(filter.index == filter.length){
 8007b26:	4290      	cmp	r0, r2
	filter.index += 1;
 8007b28:	f885 02b1 	strb.w	r0, [r5, #689]	@ 0x2b1
	if(filter.index == filter.length){
 8007b2c:	f000 82bf 	beq.w	80080ae <HAL_HRTIM_RepetitionEventCallback+0x9b2>
	if(filter.full)
 8007b30:	f895 52b8 	ldrb.w	r5, [r5, #696]	@ 0x2b8
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	f040 82c0 	bne.w	80080ba <HAL_HRTIM_RepetitionEventCallback+0x9be>
		return (uint16_t)(filter.sum / filter.index);
 8007b3a:	fbb3 f3f0 	udiv	r3, r3, r0
 8007b3e:	b29b      	uxth	r3, r3
	}

	// Continue normal control loop only if no overflow occurred
	if (ADC_OVR_Flag == 0) {
		sample_adc();
		if (is_init) {
 8007b40:	4ad4      	ldr	r2, [pc, #848]	@ (8007e94 <HAL_HRTIM_RepetitionEventCallback+0x798>)
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 8007b42:	8133      	strh	r3, [r6, #8]
		if (is_init) {
 8007b44:	7813      	ldrb	r3, [r2, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8268 	beq.w	800801c <HAL_HRTIM_RepetitionEventCallback+0x920>
	float V_bat_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007b4c:	4ad2      	ldr	r2, [pc, #840]	@ (8007e98 <HAL_HRTIM_RepetitionEventCallback+0x79c>)
 8007b4e:	4bd3      	ldr	r3, [pc, #844]	@ (8007e9c <HAL_HRTIM_RepetitionEventCallback+0x7a0>)
 8007b50:	ed92 6a02 	vldr	s12, [r2, #8]
 8007b54:	edd3 6a02 	vldr	s13, [r3, #8]
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007b58:	edd2 5a01 	vldr	s11, [r2, #4]
	else if(Vbat_counter > 0)
 8007b5c:	48d0      	ldr	r0, [pc, #832]	@ (8007ea0 <HAL_HRTIM_RepetitionEventCallback+0x7a4>)
	float V_bat_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007b5e:	ee07 4a90 	vmov	s15, r4
 8007b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007b66:	ee07 1a90 	vmov	s15, r1
	float V_bat_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007b6a:	eee7 6a06 	vfma.f32	s13, s14, s12
	else if(Vbat_counter > 0)
 8007b6e:	8801      	ldrh	r1, [r0, #0]
	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 8007b70:	eeb3 6a0c 	vmov.f32	s12, #60	@ 0x41e00000  28.0
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b78:	ed93 7a01 	vldr	s14, [r3, #4]
	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 8007b7c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007b84:	eea7 7aa5 	vfma.f32	s14, s15, s11
	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 8007b88:	f340 82b9 	ble.w	80080fe <HAL_HRTIM_RepetitionEventCallback+0xa02>
		Vbat_counter += 1000;
 8007b8c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8007b90:	b289      	uxth	r1, r1
 8007b92:	8001      	strh	r1, [r0, #0]
	else if (Vbat_counter > 0 && Vbat_status != wtf)
 8007b94:	48c3      	ldr	r0, [pc, #780]	@ (8007ea4 <HAL_HRTIM_RepetitionEventCallback+0x7a8>)
 8007b96:	7804      	ldrb	r4, [r0, #0]
	if(Vbat_counter == 0 && Vbat_status != safe)
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	f000 82bc 	beq.w	8008116 <HAL_HRTIM_RepetitionEventCallback+0xa1a>
	else if (Vbat_counter > 0 && Vbat_status != wtf)
 8007b9e:	2c02      	cmp	r4, #2
 8007ba0:	d001      	beq.n	8007ba6 <HAL_HRTIM_RepetitionEventCallback+0x4aa>
		Vbat_status = wtf;
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	7001      	strb	r1, [r0, #0]
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 8007ba6:	2402      	movs	r4, #2
	if(V_cap_ > V_SUPERCAPMAX_REF || V_cap_ < SUPERCAP_MIN_VOLTAGE) {
 8007ba8:	eef3 7a0a 	vmov.f32	s15, #58	@ 0x41d00000  26.0
	} else if(Vcap_counter > 0)
 8007bac:	48be      	ldr	r0, [pc, #760]	@ (8007ea8 <HAL_HRTIM_RepetitionEventCallback+0x7ac>)
	if(V_cap_ > V_SUPERCAPMAX_REF || V_cap_ < SUPERCAP_MIN_VOLTAGE) {
 8007bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	} else if(Vcap_counter > 0)
 8007bb6:	8801      	ldrh	r1, [r0, #0]
	if(V_cap_ > V_SUPERCAPMAX_REF || V_cap_ < SUPERCAP_MIN_VOLTAGE) {
 8007bb8:	f300 82b3 	bgt.w	8008122 <HAL_HRTIM_RepetitionEventCallback+0xa26>
 8007bbc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	f100 82ab 	bmi.w	8008122 <HAL_HRTIM_RepetitionEventCallback+0xa26>
	} else if(Vcap_counter > 0)
 8007bcc:	b129      	cbz	r1, 8007bda <HAL_HRTIM_RepetitionEventCallback+0x4de>
		Vcap_counter--;
 8007bce:	3901      	subs	r1, #1
 8007bd0:	b289      	uxth	r1, r1
 8007bd2:	8001      	strh	r1, [r0, #0]
	if(Vcap_counter == 0 && Vcap_status != safe)
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	f040 82ab 	bne.w	8008130 <HAL_HRTIM_RepetitionEventCallback+0xa34>
 8007bda:	49b4      	ldr	r1, [pc, #720]	@ (8007eac <HAL_HRTIM_RepetitionEventCallback+0x7b0>)
 8007bdc:	7808      	ldrb	r0, [r1, #0]
 8007bde:	b108      	cbz	r0, 8007be4 <HAL_HRTIM_RepetitionEventCallback+0x4e8>
		Vcap_status = safe;
 8007be0:	2000      	movs	r0, #0
 8007be2:	7008      	strb	r0, [r1, #0]
	if(OutputLevel == safe && safetyItemLevel[voltageErr] != safe) {
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	f040 82ad 	bne.w	8008144 <HAL_HRTIM_RepetitionEventCallback+0xa48>
 8007bea:	48b1      	ldr	r0, [pc, #708]	@ (8007eb0 <HAL_HRTIM_RepetitionEventCallback+0x7b4>)
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 8007bec:	7801      	ldrb	r1, [r0, #0]
 8007bee:	2901      	cmp	r1, #1
		safetyItemLevel[Item] = Level;
 8007bf0:	bf04      	itt	eq
 8007bf2:	2100      	moveq	r1, #0
 8007bf4:	7001      	strbeq	r1, [r0, #0]
	if(OutputLevel == wtf && safetyItemLevel[voltageErr] != wtf) {
 8007bf6:	49af      	ldr	r1, [pc, #700]	@ (8007eb4 <HAL_HRTIM_RepetitionEventCallback+0x7b8>)
		float I_cap_  = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8007bf8:	8834      	ldrh	r4, [r6, #0]
	if (safetyItemLevel[currentErr] != itsJoever) {
 8007bfa:	7845      	ldrb	r5, [r0, #1]
		float I_cap_  = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8007bfc:	ed92 7a00 	vldr	s14, [r2]
 8007c00:	edd3 6a00 	vldr	s13, [r3]
 8007c04:	ee07 4a90 	vmov	s15, r4
 8007c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
	if (safetyItemLevel[currentErr] != itsJoever) {
 8007c0c:	2d04      	cmp	r5, #4
		float I_cap_  = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8007c0e:	eee7 6a87 	vfma.f32	s13, s15, s14
	if (safetyItemLevel[currentErr] != itsJoever) {
 8007c12:	d02d      	beq.n	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
		float I_gateA = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 8007c14:	88f4      	ldrh	r4, [r6, #6]
 8007c16:	ed92 5a03 	vldr	s10, [r2, #12]
 8007c1a:	edd3 7a03 	vldr	s15, [r3, #12]
		if (GetIsource >= SUPERCAP_CURRENT_SAFETY_MAX) I_chassis_status = wtf;
 8007c1e:	eddf 5aa6 	vldr	s11, [pc, #664]	@ 8007eb8 <HAL_HRTIM_RepetitionEventCallback+0x7bc>
		float I_gateA = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 8007c22:	ee07 4a10 	vmov	s14, r4
 8007c26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		float GetIcap    = fabsf(I_cap_);
 8007c2a:	eeb0 6ae6 	vabs.f32	s12, s13
		float I_gateA = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 8007c2e:	eee7 7a05 	vfma.f32	s15, s14, s10
		float GetIsource = fabsf(I_gateA);
 8007c32:	eef0 7ae7 	vabs.f32	s15, s15
		if (GetIsource >= SUPERCAP_CURRENT_SAFETY_MAX) I_chassis_status = wtf;
 8007c36:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3e:	f280 82cf 	bge.w	80081e0 <HAL_HRTIM_RepetitionEventCallback+0xae4>
		uint8_t OutputLevel = (I_chassis_status >= I_cap_status ? I_chassis_status : I_cap_status);
 8007c42:	4c9e      	ldr	r4, [pc, #632]	@ (8007ebc <HAL_HRTIM_RepetitionEventCallback+0x7c0>)
 8007c44:	7824      	ldrb	r4, [r4, #0]
		if (GetIcap    >= SUPERCAP_CURRENT_SAFETY_MAX) I_cap_status = wtf;
 8007c46:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 8007eb8 <HAL_HRTIM_RepetitionEventCallback+0x7bc>
 8007c4a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	f280 82bf 	bge.w	80081d4 <HAL_HRTIM_RepetitionEventCallback+0xad8>
		uint8_t OutputLevel = (I_chassis_status >= I_cap_status ? I_chassis_status : I_cap_status);
 8007c56:	4f9a      	ldr	r7, [pc, #616]	@ (8007ec0 <HAL_HRTIM_RepetitionEventCallback+0x7c4>)
 8007c58:	783f      	ldrb	r7, [r7, #0]
 8007c5a:	42bc      	cmp	r4, r7
 8007c5c:	bf38      	it	cc
 8007c5e:	463c      	movcc	r4, r7
		if (safetyItemLevel[currentErr] != OutputLevel) {
 8007c60:	42a5      	cmp	r5, r4
 8007c62:	d005      	beq.n	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
			switch (safetyItemLevel[currentErr]) {
 8007c64:	2d01      	cmp	r5, #1
 8007c66:	f240 82e4 	bls.w	8008232 <HAL_HRTIM_RepetitionEventCallback+0xb36>
	|| (safetyItemLevel[Item] == runAway && Level == itsJoever))
 8007c6a:	2d03      	cmp	r5, #3
 8007c6c:	f000 831d 	beq.w	80082aa <HAL_HRTIM_RepetitionEventCallback+0xbae>
	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007c70:	8870      	ldrh	r0, [r6, #2]
 8007c72:	ed92 5a01 	vldr	s10, [r2, #4]
 8007c76:	edd3 7a01 	vldr	s15, [r3, #4]
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007c7a:	edd3 5a02 	vldr	s11, [r3, #8]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007c7e:	ed93 6a04 	vldr	s12, [r3, #16]
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007c82:	88b3      	ldrh	r3, [r6, #4]
 8007c84:	ed92 4a02 	vldr	s8, [r2, #8]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007c88:	edd2 4a04 	vldr	s9, [r2, #16]
	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007c8c:	4d8d      	ldr	r5, [pc, #564]	@ (8007ec4 <HAL_HRTIM_RepetitionEventCallback+0x7c8>)
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007c8e:	4c8e      	ldr	r4, [pc, #568]	@ (8007ec8 <HAL_HRTIM_RepetitionEventCallback+0x7cc>)
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007c90:	4a8e      	ldr	r2, [pc, #568]	@ (8007ecc <HAL_HRTIM_RepetitionEventCallback+0x7d0>)
	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007c92:	ee07 0a10 	vmov	s14, r0
 8007c96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8007c9a:	488d      	ldr	r0, [pc, #564]	@ (8007ed0 <HAL_HRTIM_RepetitionEventCallback+0x7d4>)
	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007c9c:	eee7 7a05 	vfma.f32	s15, s14, s10
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007ca0:	ee05 3a10 	vmov	s10, r3
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007ca4:	8933      	ldrh	r3, [r6, #8]
	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 8007ca6:	edc5 7a00 	vstr	s15, [r5]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007caa:	ee07 3a10 	vmov	s14, r3
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007cae:	eeb8 5a45 	vcvt.f32.u32	s10, s10
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007cb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007cb6:	eee5 5a04 	vfma.f32	s11, s10, s8
	if (in_loop){
 8007cba:	780b      	ldrb	r3, [r1, #0]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007cbc:	eea7 6a24 	vfma.f32	s12, s14, s9
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 8007cc0:	edc4 5a00 	vstr	s11, [r4]
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8007cc4:	edc0 6a00 	vstr	s13, [r0]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 8007cc8:	ed82 6a00 	vstr	s12, [r2]
	if (in_loop){
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 81a5 	beq.w	800801c <HAL_HRTIM_RepetitionEventCallback+0x920>
	pid[0].IntegMax = max_chassis_power - 3;
 8007cd2:	4a80      	ldr	r2, [pc, #512]	@ (8007ed4 <HAL_HRTIM_RepetitionEventCallback+0x7d8>)
 8007cd4:	4b80      	ldr	r3, [pc, #512]	@ (8007ed8 <HAL_HRTIM_RepetitionEventCallback+0x7dc>)
 8007cd6:	7812      	ldrb	r2, [r2, #0]
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007cd8:	ed93 4a03 	vldr	s8, [r3, #12]
 8007cdc:	ed93 5a01 	vldr	s10, [r3, #4]
 8007ce0:	edd3 3a04 	vldr	s7, [r3, #16]
 8007ce4:	ed93 3a02 	vldr	s6, [r3, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8007ce8:	ed83 4a04 	vstr	s8, [r3, #16]
 8007cec:	3a03      	subs	r2, #3
 8007cee:	ee07 2a10 	vmov	s14, r2
 8007cf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float error = ref - feedback;
 8007cf6:	eef0 4a47 	vmov.f32	s9, s14
 8007cfa:	eee5 4ac6 	vfms.f32	s9, s11, s12
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007cfe:	ee24 6a05 	vmul.f32	s12, s8, s10
    out = (S->A0 * in) +
 8007d02:	edd3 5a00 	vldr	s11, [r3]
 8007d06:	ed93 5a05 	vldr	s10, [r3, #20]
	pid[0].IntegMax = max_chassis_power - 3;
 8007d0a:	ed83 7a09 	vstr	s14, [r3, #36]	@ 0x24
 8007d0e:	eea4 6aa5 	vfma.f32	s12, s9, s11
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007d12:	eddf 5a76 	vldr	s11, [pc, #472]	@ 8007eec <HAL_HRTIM_RepetitionEventCallback+0x7f0>
	pid[0].OutputMax = max_chassis_power - 3;
 8007d16:	ed83 7a0b 	vstr	s14, [r3, #44]	@ 0x2c
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007d1a:	eea3 6a23 	vfma.f32	s12, s6, s7
    S->state[0] = in;
 8007d1e:	edc3 4a03 	vstr	s9, [r3, #12]
    out = (S->A0 * in) +
 8007d22:	ee36 6a05 	vadd.f32	s12, s12, s10
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007d26:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007d2e:	ee76 5a25 	vadd.f32	s11, s12, s11
    S->state[2] = out;
 8007d32:	ed83 6a05 	vstr	s12, [r3, #20]
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007d36:	f140 823d 	bpl.w	80081b4 <HAL_HRTIM_RepetitionEventCallback+0xab8>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8007d3a:	ed83 7a05 	vstr	s14, [r3, #20]
	if(output > pid_struct->OutputMax)
 8007d3e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	d408      	bmi.n	8007d5a <HAL_HRTIM_RepetitionEventCallback+0x65e>
	else if(output < pid_struct->OutputMin)
 8007d48:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
		return output;
 8007d4c:	eef4 5ac7 	vcmpe.f32	s11, s14
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	bf58      	it	pl
 8007d56:	eeb0 7a65 	vmovpl.f32	s14, s11
		float temp = ref_Pchassis / cap_voltage;
 8007d5a:	ee87 6a27 	vdiv.f32	s12, s14, s15
		if(temp > MAX_CAP_CURRENT)
 8007d5e:	eef3 5a02 	vmov.f32	s11, #50	@ 0x41900000  18.0
 8007d62:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8007d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6a:	f300 8220 	bgt.w	80081ae <HAL_HRTIM_RepetitionEventCallback+0xab2>
		else if (temp < -MAX_CAP_CURRENT)
 8007d6e:	eefb 5a02 	vmov.f32	s11, #178	@ 0xc1900000 -18.0
			temp = -MAX_CAP_CURRENT;
 8007d72:	eeb4 6a65 	vcmp.f32	s12, s11
 8007d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7a:	bf48      	it	mi
 8007d7c:	eeb0 6a65 	vmovmi.f32	s12, s11
		float ref_icap = ref_Pchassis / (cap_voltage + ESR_VALUE * (temp - I_supercap_last));
 8007d80:	4a56      	ldr	r2, [pc, #344]	@ (8007edc <HAL_HRTIM_RepetitionEventCallback+0x7e0>)
 8007d82:	eddf 4a57 	vldr	s9, [pc, #348]	@ 8007ee0 <HAL_HRTIM_RepetitionEventCallback+0x7e4>
 8007d86:	ed92 5a00 	vldr	s10, [r2]
 8007d8a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007d8e:	eeb0 5a67 	vmov.f32	s10, s15
 8007d92:	eea6 5a24 	vfma.f32	s10, s12, s9
		if(ref_icap > MAX_CAP_CURRENT)
 8007d96:	eef3 5a02 	vmov.f32	s11, #50	@ 0x41900000  18.0
		float ref_icap = ref_Pchassis / (cap_voltage + ESR_VALUE * (temp - I_supercap_last));
 8007d9a:	ee87 6a05 	vdiv.f32	s12, s14, s10
		if(ref_icap > MAX_CAP_CURRENT)
 8007d9e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	f300 81ff 	bgt.w	80081a8 <HAL_HRTIM_RepetitionEventCallback+0xaac>
		else if(ref_icap < -MAX_CAP_CURRENT)
 8007daa:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
			ref_icap = -MAX_CAP_CURRENT;
 8007dae:	eeb4 6a47 	vcmp.f32	s12, s14
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	bf48      	it	mi
 8007db8:	eeb0 6a47 	vmovmi.f32	s12, s14
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007dbc:	ed93 5a1d 	vldr	s10, [r3, #116]	@ 0x74
 8007dc0:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
    out = (S->A0 * in) +
 8007dc4:	edd3 4a1a 	vldr	s9, [r3, #104]	@ 0x68
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007dc8:	edd3 5a1e 	vldr	s11, [r3, #120]	@ 0x78
    out = (S->A0 * in) +
 8007dcc:	ed93 4a1f 	vldr	s8, [r3, #124]	@ 0x7c
		icap_output = ref_icap;
 8007dd0:	4944      	ldr	r1, [pc, #272]	@ (8007ee4 <HAL_HRTIM_RepetitionEventCallback+0x7e8>)
		I_supercap_last = ref_icap;
 8007dd2:	ed82 6a00 	vstr	s12, [r2]
	float error = ref - feedback;
 8007dd6:	ee76 6a66 	vsub.f32	s13, s12, s13
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007dda:	ee25 7a07 	vmul.f32	s14, s10, s14
    S->state[0] = in;
 8007dde:	edc3 6a1d 	vstr	s13, [r3, #116]	@ 0x74
    out = (S->A0 * in) +
 8007de2:	eea6 7aa4 	vfma.f32	s14, s13, s9
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007de6:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
		icap_output = ref_icap;
 8007dea:	ed81 6a00 	vstr	s12, [r1]
 8007dee:	eea4 7aa5 	vfma.f32	s14, s9, s11
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007df2:	edd3 4a23 	vldr	s9, [r3, #140]	@ 0x8c
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007df6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007eec <HAL_HRTIM_RepetitionEventCallback+0x7f0>
    S->state[1] = S->state[0];
 8007dfa:	ed83 5a1e 	vstr	s10, [r3, #120]	@ 0x78
    out = (S->A0 * in) +
 8007dfe:	ee37 7a04 	vadd.f32	s14, s14, s8
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007e02:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8007e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007e0a:	ee77 6a25 	vadd.f32	s13, s14, s11
    S->state[2] = out;
 8007e0e:	ed83 7a1f 	vstr	s14, [r3, #124]	@ 0x7c
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007e12:	f340 81bf 	ble.w	8008194 <HAL_HRTIM_RepetitionEventCallback+0xa98>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8007e16:	edc3 4a1f 	vstr	s9, [r3, #124]	@ 0x7c
	if(output > pid_struct->OutputMax)
 8007e1a:	ed93 6a25 	vldr	s12, [r3, #148]	@ 0x94
 8007e1e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e26:	dc08      	bgt.n	8007e3a <HAL_HRTIM_RepetitionEventCallback+0x73e>
	else if(output < pid_struct->OutputMin)
 8007e28:	ed93 6a26 	vldr	s12, [r3, #152]	@ 0x98
		return output;
 8007e2c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e34:	bf58      	it	pl
 8007e36:	eeb0 6a66 	vmovpl.f32	s12, s13
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007e3a:	ed93 5a2a 	vldr	s10, [r3, #168]	@ 0xa8
	float error = ref - feedback;
 8007e3e:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 8007ee8 <HAL_HRTIM_RepetitionEventCallback+0x7ec>
 8007e42:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
    out = (S->A0 * in) +
 8007e46:	edd3 6a27 	vldr	s13, [r3, #156]	@ 0x9c
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007e4a:	edd3 4a2b 	vldr	s9, [r3, #172]	@ 0xac
 8007e4e:	edd3 3a29 	vldr	s7, [r3, #164]	@ 0xa4
    out = (S->A0 * in) +
 8007e52:	ed93 4a2c 	vldr	s8, [r3, #176]	@ 0xb0
    S->state[1] = S->state[0];
 8007e56:	ed83 5a2b 	vstr	s10, [r3, #172]	@ 0xac
 8007e5a:	ee75 5ae7 	vsub.f32	s11, s11, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007e5e:	ee25 7a07 	vmul.f32	s14, s10, s14
    S->state[0] = in;
 8007e62:	edc3 5a2a 	vstr	s11, [r3, #168]	@ 0xa8
    out = (S->A0 * in) +
 8007e66:	eea5 7aa6 	vfma.f32	s14, s11, s13
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007e6a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8007eec <HAL_HRTIM_RepetitionEventCallback+0x7f0>
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007e6e:	eea3 7aa4 	vfma.f32	s14, s7, s9
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007e72:	edd3 4a30 	vldr	s9, [r3, #192]	@ 0xc0
    out = (S->A0 * in) +
 8007e76:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007e7a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8007e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007e82:	ee77 6a26 	vadd.f32	s13, s14, s13
    S->state[2] = out;
 8007e86:	ed83 7a2c 	vstr	s14, [r3, #176]	@ 0xb0
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007e8a:	f340 8179 	ble.w	8008180 <HAL_HRTIM_RepetitionEventCallback+0xa84>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8007e8e:	edc3 4a2c 	vstr	s9, [r3, #176]	@ 0xb0
 8007e92:	e031      	b.n	8007ef8 <HAL_HRTIM_RepetitionEventCallback+0x7fc>
 8007e94:	20001245 	.word	0x20001245
 8007e98:	20000d00 	.word	0x20000d00
 8007e9c:	20000cec 	.word	0x20000cec
 8007ea0:	20001130 	.word	0x20001130
 8007ea4:	2000112c 	.word	0x2000112c
 8007ea8:	2000112e 	.word	0x2000112e
 8007eac:	2000112b 	.word	0x2000112b
 8007eb0:	20001134 	.word	0x20001134
 8007eb4:	20001244 	.word	0x20001244
 8007eb8:	41a40000 	.word	0x41a40000
 8007ebc:	2000112a 	.word	0x2000112a
 8007ec0:	20001129 	.word	0x20001129
 8007ec4:	20001260 	.word	0x20001260
 8007ec8:	2000125c 	.word	0x2000125c
 8007ecc:	20001254 	.word	0x20001254
 8007ed0:	20001258 	.word	0x20001258
 8007ed4:	20000016 	.word	0x20000016
 8007ed8:	20001140 	.word	0x20001140
 8007edc:	2000113c 	.word	0x2000113c
 8007ee0:	3e2e147b 	.word	0x3e2e147b
 8007ee4:	20001264 	.word	0x20001264
 8007ee8:	41cc0000 	.word	0x41cc0000
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	3f666666 	.word	0x3f666666
 8007ef4:	4704d000 	.word	0x4704d000
	if(output > pid_struct->OutputMax)
 8007ef8:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8007efc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f04:	dc08      	bgt.n	8007f18 <HAL_HRTIM_RepetitionEventCallback+0x81c>
	else if(output < pid_struct->OutputMin)
 8007f06:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
		return output;
 8007f0a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f12:	bf58      	it	pl
 8007f14:	eeb0 7a66 	vmovpl.f32	s14, s13
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007f18:	ed93 5a37 	vldr	s10, [r3, #220]	@ 0xdc
 8007f1c:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 8007f20:	edd3 4a38 	vldr	s9, [r3, #224]	@ 0xe0
 8007f24:	edd3 3a36 	vldr	s7, [r3, #216]	@ 0xd8
    out = (S->A0 * in) +
 8007f28:	ed93 4a39 	vldr	s8, [r3, #228]	@ 0xe4
    S->state[1] = S->state[0];
 8007f2c:	ed83 5a38 	vstr	s10, [r3, #224]	@ 0xe0
	float error = ref - feedback;
 8007f30:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 8007f34:	ee75 5ae7 	vsub.f32	s11, s11, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007f38:	ee65 7a26 	vmul.f32	s15, s10, s13
    out = (S->A0 * in) +
 8007f3c:	edd3 6a34 	vldr	s13, [r3, #208]	@ 0xd0
    S->state[0] = in;
 8007f40:	edc3 5a37 	vstr	s11, [r3, #220]	@ 0xdc
    out = (S->A0 * in) +
 8007f44:	eee5 7aa6 	vfma.f32	s15, s11, s13
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007f48:	ed5f 6a18 	vldr	s13, [pc, #-96]	@ 8007eec <HAL_HRTIM_RepetitionEventCallback+0x7f0>
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007f4c:	eee3 7aa4 	vfma.f32	s15, s7, s9
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007f50:	edd3 4a3d 	vldr	s9, [r3, #244]	@ 0xf4
    out = (S->A0 * in) +
 8007f54:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007f58:	eef4 7ae4 	vcmpe.f32	s15, s9
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 8007f60:	ee77 6aa6 	vadd.f32	s13, s15, s13
    S->state[2] = out;
 8007f64:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 8007f68:	f340 8100 	ble.w	800816c <HAL_HRTIM_RepetitionEventCallback+0xa70>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 8007f6c:	edc3 4a39 	vstr	s9, [r3, #228]	@ 0xe4
	if(output > pid_struct->OutputMax)
 8007f70:	edd3 7a3f 	vldr	s15, [r3, #252]	@ 0xfc
 8007f74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7c:	dc08      	bgt.n	8007f90 <HAL_HRTIM_RepetitionEventCallback+0x894>
	else if(output < pid_struct->OutputMin)
 8007f7e:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
		return output;
 8007f82:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	bf58      	it	pl
 8007f8c:	eef0 7a66 	vmovpl.f32	s15, s13
		if(ref_duty_ratio > Vcapmax_ratio)
 8007f90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	d408      	bmi.n	8007fac <HAL_HRTIM_RepetitionEventCallback+0x8b0>
			out_duty_ratio = ref_duty_ratio;
 8007f9a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	bfd4      	ite	le
 8007fa4:	eeb0 7a46 	vmovle.f32	s14, s12
 8007fa8:	eeb0 7a67 	vmovgt.f32	s14, s15
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 8007fac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	dd07      	ble.n	8007fc6 <HAL_HRTIM_RepetitionEventCallback+0x8ca>
 8007fb6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc2:	f240 811c 	bls.w	80081fe <HAL_HRTIM_RepetitionEventCallback+0xb02>
	} else if(dutyRatio > 1.0f){
 8007fc6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd2:	f340 80f9 	ble.w	80081c8 <HAL_HRTIM_RepetitionEventCallback+0xacc>
		D_cap = 0.9f / dutyRatio;
 8007fd6:	ed1f 6a3a 	vldr	s12, [pc, #-232]	@ 8007ef0 <HAL_HRTIM_RepetitionEventCallback+0x7f4>
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 8007fda:	ed5f 6a3a 	vldr	s13, [pc, #-232]	@ 8007ef4 <HAL_HRTIM_RepetitionEventCallback+0x7f8>
		D_cap = 0.9f / dutyRatio;
 8007fde:	eec6 7a07 	vdiv.f32	s15, s12, s14
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007fe2:	f244 2568 	movw	r5, #17000	@ 0x4268
 8007fe6:	f647 612c 	movw	r1, #32300	@ 0x7e2c
 8007fea:	f240 64a4 	movw	r4, #1700	@ 0x6a4
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 8007fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff6:	ee17 2a90 	vmov	r2, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8007ffa:	f3c2 004e 	ubfx	r0, r2, #1, #15
 8007ffe:	1a2b      	subs	r3, r5, r0
 8008000:	f002 0201 	and.w	r2, r2, #1
 8008004:	1a9b      	subs	r3, r3, r2
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 8008006:	4428      	add	r0, r5
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8008008:	4aaf      	ldr	r2, [pc, #700]	@ (80082c8 <HAL_HRTIM_RepetitionEventCallback+0xbcc>)
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 8008010:	f8c2 00a4 	str.w	r0, [r2, #164]	@ 0xa4
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 8008014:	f8c2 429c 	str.w	r4, [r2, #668]	@ 0x29c
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 8008018:	f8c2 12a4 	str.w	r1, [r2, #676]	@ 0x2a4
			loop_update();  // Core of supercap control logic
		}
	}
}
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800801e:	2410      	movs	r4, #16
 8008020:	6014      	str	r4, [r2, #0]
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 8008022:	68d4      	ldr	r4, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 8008024:	6d49      	ldr	r1, [r1, #84]	@ 0x54
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 8008026:	f044 0401 	orr.w	r4, r4, #1
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800802a:	6809      	ldr	r1, [r1, #0]
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 800802c:	60d4      	str	r4, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800802e:	4ca7      	ldr	r4, [pc, #668]	@ (80082cc <HAL_HRTIM_RepetitionEventCallback+0xbd0>)
 8008030:	42a1      	cmp	r1, r4
 8008032:	d82a      	bhi.n	800808a <HAL_HRTIM_RepetitionEventCallback+0x98e>
 8008034:	4ca6      	ldr	r4, [pc, #664]	@ (80082d0 <HAL_HRTIM_RepetitionEventCallback+0xbd4>)
 8008036:	2508      	movs	r5, #8
 8008038:	6065      	str	r5, [r4, #4]
	hadc->DMA_Handle->Instance->CCR |= 0x00000001; // Re-enable DMA
 800803a:	680c      	ldr	r4, [r1, #0]
 800803c:	f044 0401 	orr.w	r4, r4, #1
 8008040:	600c      	str	r4, [r1, #0]
	while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 8008042:	6811      	ldr	r1, [r2, #0]
 8008044:	07cc      	lsls	r4, r1, #31
 8008046:	d5fc      	bpl.n	8008042 <HAL_HRTIM_RepetitionEventCallback+0x946>
	hadc->Instance->CR |= 0x00000004; // Start ADC again
 8008048:	6891      	ldr	r1, [r2, #8]
 800804a:	f041 0104 	orr.w	r1, r1, #4
 800804e:	6091      	str	r1, [r2, #8]
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	06d1      	lsls	r1, r2, #27
 8008054:	d5e2      	bpl.n	800801c <HAL_HRTIM_RepetitionEventCallback+0x920>
	__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008056:	2210      	movs	r2, #16
 8008058:	601a      	str	r2, [r3, #0]
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800805a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 800805c:	68d9      	ldr	r1, [r3, #12]
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	489a      	ldr	r0, [pc, #616]	@ (80082cc <HAL_HRTIM_RepetitionEventCallback+0xbd0>)
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 8008062:	f041 0101 	orr.w	r1, r1, #1
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 8008066:	4282      	cmp	r2, r0
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 8008068:	60d9      	str	r1, [r3, #12]
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800806a:	d812      	bhi.n	8008092 <HAL_HRTIM_RepetitionEventCallback+0x996>
 800806c:	4998      	ldr	r1, [pc, #608]	@ (80082d0 <HAL_HRTIM_RepetitionEventCallback+0xbd4>)
 800806e:	2008      	movs	r0, #8
 8008070:	6048      	str	r0, [r1, #4]
	hadc->DMA_Handle->Instance->CCR |= 0x00000001; // Re-enable DMA
 8008072:	6811      	ldr	r1, [r2, #0]
 8008074:	f041 0101 	orr.w	r1, r1, #1
 8008078:	6011      	str	r1, [r2, #0]
	while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	07d2      	lsls	r2, r2, #31
 800807e:	d5fc      	bpl.n	800807a <HAL_HRTIM_RepetitionEventCallback+0x97e>
	hadc->Instance->CR |= 0x00000004; // Start ADC again
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	f042 0204 	orr.w	r2, r2, #4
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800808a:	2508      	movs	r5, #8
 800808c:	f8c4 5370 	str.w	r5, [r4, #880]	@ 0x370
 8008090:	e7d3      	b.n	800803a <HAL_HRTIM_RepetitionEventCallback+0x93e>
 8008092:	4990      	ldr	r1, [pc, #576]	@ (80082d4 <HAL_HRTIM_RepetitionEventCallback+0xbd8>)
 8008094:	2008      	movs	r0, #8
 8008096:	6048      	str	r0, [r1, #4]
 8008098:	e7eb      	b.n	8008072 <HAL_HRTIM_RepetitionEventCallback+0x976>
		filter.index = 0;
 800809a:	2100      	movs	r1, #0
 800809c:	f885 1081 	strb.w	r1, [r5, #129]	@ 0x81
		filter.full = true;
 80080a0:	2101      	movs	r1, #1
 80080a2:	f885 1088 	strb.w	r1, [r5, #136]	@ 0x88
		return (uint16_t)(filter.sum / filter.length);
 80080a6:	fbb2 f2f4 	udiv	r2, r2, r4
 80080aa:	b292      	uxth	r2, r2
 80080ac:	e4b0      	b.n	8007a10 <HAL_HRTIM_RepetitionEventCallback+0x314>
		filter.index = 0;
 80080ae:	2000      	movs	r0, #0
 80080b0:	f885 02b1 	strb.w	r0, [r5, #689]	@ 0x2b1
		filter.full = true;
 80080b4:	2001      	movs	r0, #1
 80080b6:	f885 02b8 	strb.w	r0, [r5, #696]	@ 0x2b8
		return (uint16_t)(filter.sum / filter.length);
 80080ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80080be:	b29b      	uxth	r3, r3
 80080c0:	e53e      	b.n	8007b40 <HAL_HRTIM_RepetitionEventCallback+0x444>
		filter.index = 0;
 80080c2:	2700      	movs	r7, #0
 80080c4:	f885 7225 	strb.w	r7, [r5, #549]	@ 0x225
		filter.full = true;
 80080c8:	2701      	movs	r7, #1
 80080ca:	f885 722c 	strb.w	r7, [r5, #556]	@ 0x22c
		return (uint16_t)(filter.sum / filter.length);
 80080ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80080d2:	b292      	uxth	r2, r2
 80080d4:	e514      	b.n	8007b00 <HAL_HRTIM_RepetitionEventCallback+0x404>
		filter.index = 0;
 80080d6:	2400      	movs	r4, #0
 80080d8:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
		filter.full = true;
 80080dc:	2401      	movs	r4, #1
 80080de:	f885 4114 	strb.w	r4, [r5, #276]	@ 0x114
		return (uint16_t)(filter.sum / filter.length);
 80080e2:	fbb1 f1f2 	udiv	r1, r1, r2
 80080e6:	b289      	uxth	r1, r1
 80080e8:	e4b3      	b.n	8007a52 <HAL_HRTIM_RepetitionEventCallback+0x356>
		filter.index = 0;
 80080ea:	2400      	movs	r4, #0
 80080ec:	f885 4199 	strb.w	r4, [r5, #409]	@ 0x199
		filter.full = true;
 80080f0:	2401      	movs	r4, #1
 80080f2:	f885 41a0 	strb.w	r4, [r5, #416]	@ 0x1a0
		return (uint16_t)(filter.sum / filter.length);
 80080f6:	fbb2 f2f7 	udiv	r2, r2, r7
 80080fa:	b294      	uxth	r4, r2
 80080fc:	e4de      	b.n	8007abc <HAL_HRTIM_RepetitionEventCallback+0x3c0>
	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 80080fe:	eef3 7a02 	vmov.f32	s15, #50	@ 0x41900000  18.0
 8008102:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810a:	f53f ad3f 	bmi.w	8007b8c <HAL_HRTIM_RepetitionEventCallback+0x490>
	else if(Vbat_counter > 0)
 800810e:	2900      	cmp	r1, #0
 8008110:	f040 80b9 	bne.w	8008286 <HAL_HRTIM_RepetitionEventCallback+0xb8a>
 8008114:	4870      	ldr	r0, [pc, #448]	@ (80082d8 <HAL_HRTIM_RepetitionEventCallback+0xbdc>)
	if(Vbat_counter == 0 && Vbat_status != safe)
 8008116:	7801      	ldrb	r1, [r0, #0]
 8008118:	b109      	cbz	r1, 800811e <HAL_HRTIM_RepetitionEventCallback+0xa22>
		Vbat_status = safe;
 800811a:	2100      	movs	r1, #0
 800811c:	7001      	strb	r1, [r0, #0]
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 800811e:	2400      	movs	r4, #0
 8008120:	e542      	b.n	8007ba8 <HAL_HRTIM_RepetitionEventCallback+0x4ac>
		if(Vcap_counter < 650)
 8008122:	f240 2589 	movw	r5, #649	@ 0x289
 8008126:	42a9      	cmp	r1, r5
 8008128:	d802      	bhi.n	8008130 <HAL_HRTIM_RepetitionEventCallback+0xa34>
			Vcap_counter++;
 800812a:	3101      	adds	r1, #1
 800812c:	b289      	uxth	r1, r1
 800812e:	8001      	strh	r1, [r0, #0]
	else if(Vcap_counter == 650 && Vcap_status != wtf)
 8008130:	4d6a      	ldr	r5, [pc, #424]	@ (80082dc <HAL_HRTIM_RepetitionEventCallback+0xbe0>)
 8008132:	f240 278a 	movw	r7, #650	@ 0x28a
 8008136:	42b9      	cmp	r1, r7
 8008138:	7828      	ldrb	r0, [r5, #0]
 800813a:	d155      	bne.n	80081e8 <HAL_HRTIM_RepetitionEventCallback+0xaec>
 800813c:	2802      	cmp	r0, #2
 800813e:	d001      	beq.n	8008144 <HAL_HRTIM_RepetitionEventCallback+0xa48>
		Vcap_status = wtf;
 8008140:	2102      	movs	r1, #2
 8008142:	7029      	strb	r1, [r5, #0]
	if(OutputLevel == wtf && safetyItemLevel[voltageErr] != wtf) {
 8008144:	4866      	ldr	r0, [pc, #408]	@ (80082e0 <HAL_HRTIM_RepetitionEventCallback+0xbe4>)
 8008146:	7801      	ldrb	r1, [r0, #0]
 8008148:	2902      	cmp	r1, #2
 800814a:	f43f ad54 	beq.w	8007bf6 <HAL_HRTIM_RepetitionEventCallback+0x4fa>
  __ASM volatile ("cpsid i" : : : "memory");
 800814e:	b672      	cpsid	i
	if(current_mode != idle){
 8008150:	4d64      	ldr	r5, [pc, #400]	@ (80082e4 <HAL_HRTIM_RepetitionEventCallback+0xbe8>)
 8008152:	7829      	ldrb	r1, [r5, #0]
 8008154:	2900      	cmp	r1, #0
 8008156:	f040 8099 	bne.w	800828c <HAL_HRTIM_RepetitionEventCallback+0xb90>
 800815a:	4963      	ldr	r1, [pc, #396]	@ (80082e8 <HAL_HRTIM_RepetitionEventCallback+0xbec>)
  __ASM volatile ("cpsie i" : : : "memory");
 800815c:	b662      	cpsie	i
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 800815e:	7804      	ldrb	r4, [r0, #0]
 8008160:	2c00      	cmp	r4, #0
 8008162:	f47f ad49 	bne.w	8007bf8 <HAL_HRTIM_RepetitionEventCallback+0x4fc>
		safetyItemLevel[Item] = Level;
 8008166:	2401      	movs	r4, #1
 8008168:	7004      	strb	r4, [r0, #0]
		safetyChangeTrigger = true;
 800816a:	e545      	b.n	8007bf8 <HAL_HRTIM_RepetitionEventCallback+0x4fc>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 800816c:	edd3 5a3e 	vldr	s11, [r3, #248]	@ 0xf8
 8008170:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 8008178:	bf48      	it	mi
 800817a:	edc3 5a39 	vstrmi	s11, [r3, #228]	@ 0xe4
 800817e:	e6f7      	b.n	8007f70 <HAL_HRTIM_RepetitionEventCallback+0x874>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 8008180:	edd3 5a31 	vldr	s11, [r3, #196]	@ 0xc4
 8008184:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 800818c:	bf48      	it	mi
 800818e:	edc3 5a2c 	vstrmi	s11, [r3, #176]	@ 0xb0
 8008192:	e6b1      	b.n	8007ef8 <HAL_HRTIM_RepetitionEventCallback+0x7fc>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 8008194:	ed93 6a24 	vldr	s12, [r3, #144]	@ 0x90
 8008198:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 80081a0:	bf48      	it	mi
 80081a2:	ed83 6a1f 	vstrmi	s12, [r3, #124]	@ 0x7c
 80081a6:	e638      	b.n	8007e1a <HAL_HRTIM_RepetitionEventCallback+0x71e>
			ref_icap = MAX_CAP_CURRENT;
 80081a8:	eeb0 6a65 	vmov.f32	s12, s11
 80081ac:	e606      	b.n	8007dbc <HAL_HRTIM_RepetitionEventCallback+0x6c0>
			temp = MAX_CAP_CURRENT;
 80081ae:	eeb0 6a65 	vmov.f32	s12, s11
 80081b2:	e5e5      	b.n	8007d80 <HAL_HRTIM_RepetitionEventCallback+0x684>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 80081b4:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 80081b8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80081bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 80081c0:	bf48      	it	mi
 80081c2:	ed83 5a05 	vstrmi	s10, [r3, #20]
 80081c6:	e5ba      	b.n	8007d3e <HAL_HRTIM_RepetitionEventCallback+0x642>
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 80081c8:	f244 2368 	movw	r3, #17000	@ 0x4268
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 80081cc:	4618      	mov	r0, r3
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 80081ce:	461c      	mov	r4, r3
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 80081d0:	4619      	mov	r1, r3
 80081d2:	e719      	b.n	8008008 <HAL_HRTIM_RepetitionEventCallback+0x90c>
		if (GetIcap    >= SUPERCAP_CURRENT_SAFETY_MAX) I_cap_status = wtf;
 80081d4:	f8df c120 	ldr.w	ip, [pc, #288]	@ 80082f8 <HAL_HRTIM_RepetitionEventCallback+0xbfc>
 80081d8:	2702      	movs	r7, #2
 80081da:	f88c 7000 	strb.w	r7, [ip]
 80081de:	e53c      	b.n	8007c5a <HAL_HRTIM_RepetitionEventCallback+0x55e>
		if (GetIsource >= SUPERCAP_CURRENT_SAFETY_MAX) I_chassis_status = wtf;
 80081e0:	4f42      	ldr	r7, [pc, #264]	@ (80082ec <HAL_HRTIM_RepetitionEventCallback+0xbf0>)
 80081e2:	2402      	movs	r4, #2
 80081e4:	703c      	strb	r4, [r7, #0]
 80081e6:	e52e      	b.n	8007c46 <HAL_HRTIM_RepetitionEventCallback+0x54a>
 80081e8:	42a0      	cmp	r0, r4
 80081ea:	bf38      	it	cc
 80081ec:	4620      	movcc	r0, r4
	if(OutputLevel == safe && safetyItemLevel[voltageErr] != safe) {
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f acfb 	beq.w	8007bea <HAL_HRTIM_RepetitionEventCallback+0x4ee>
	if(OutputLevel == wtf && safetyItemLevel[voltageErr] != wtf) {
 80081f4:	2802      	cmp	r0, #2
 80081f6:	d0a5      	beq.n	8008144 <HAL_HRTIM_RepetitionEventCallback+0xa48>
 80081f8:	4839      	ldr	r0, [pc, #228]	@ (80082e0 <HAL_HRTIM_RepetitionEventCallback+0xbe4>)
 80081fa:	493b      	ldr	r1, [pc, #236]	@ (80082e8 <HAL_HRTIM_RepetitionEventCallback+0xbec>)
 80081fc:	e4fc      	b.n	8007bf8 <HAL_HRTIM_RepetitionEventCallback+0x4fc>
		D_chassis = dutyRatio * 0.9f;
 80081fe:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80082f0 <HAL_HRTIM_RepetitionEventCallback+0xbf4>
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 8008202:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80082f4 <HAL_HRTIM_RepetitionEventCallback+0xbf8>
		D_chassis = dutyRatio * 0.9f;
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 800820a:	f244 2268 	movw	r2, #17000	@ 0x4268
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 800820e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		D_chassis = dutyRatio * 0.9f;
 8008212:	f647 602c 	movw	r0, #32300	@ 0x7e2c
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 8008216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821a:	ee17 3a90 	vmov	r3, s15
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 800821e:	f3c3 014e 	ubfx	r1, r3, #1, #15
 8008222:	1a54      	subs	r4, r2, r1
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	1ae4      	subs	r4, r4, r3
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 800822a:	4411      	add	r1, r2
		D_chassis = dutyRatio * 0.9f;
 800822c:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8008230:	e6ea      	b.n	8008008 <HAL_HRTIM_RepetitionEventCallback+0x90c>
					switch (OutputLevel) {
 8008232:	2c02      	cmp	r4, #2
 8008234:	d003      	beq.n	800823e <HAL_HRTIM_RepetitionEventCallback+0xb42>
 8008236:	2c04      	cmp	r4, #4
 8008238:	d001      	beq.n	800823e <HAL_HRTIM_RepetitionEventCallback+0xb42>
		safetyItemLevel[Item] = Level;
 800823a:	7044      	strb	r4, [r0, #1]
		safetyChangeTrigger = true;
 800823c:	e518      	b.n	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
  __ASM volatile ("cpsid i" : : : "memory");
 800823e:	b672      	cpsid	i
	if(current_mode != idle){
 8008240:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80082e4 <HAL_HRTIM_RepetitionEventCallback+0xbe8>
 8008244:	f89c 5000 	ldrb.w	r5, [ip]
 8008248:	b16d      	cbz	r5, 8008266 <HAL_HRTIM_RepetitionEventCallback+0xb6a>
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800824a:	4d1f      	ldr	r5, [pc, #124]	@ (80082c8 <HAL_HRTIM_RepetitionEventCallback+0xbcc>)
 800824c:	682f      	ldr	r7, [r5, #0]
	in_loop = false;
 800824e:	2500      	movs	r5, #0
		current_mode = idle;
 8008250:	f88c 5000 	strb.w	r5, [ip]
	in_loop = false;
 8008254:	700d      	strb	r5, [r1, #0]
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 8008256:	f8d7 5398 	ldr.w	r5, [r7, #920]	@ 0x398
 800825a:	f445 7540 	orr.w	r5, r5, #768	@ 0x300
 800825e:	f045 0503 	orr.w	r5, r5, #3
 8008262:	f8c7 5398 	str.w	r5, [r7, #920]	@ 0x398
  __ASM volatile ("cpsie i" : : : "memory");
 8008266:	b662      	cpsie	i
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 8008268:	7845      	ldrb	r5, [r0, #1]
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 800826a:	ed92 7a00 	vldr	s14, [r2]
 800826e:	edd3 6a00 	vldr	s13, [r3]
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 8008272:	2d01      	cmp	r5, #1
 8008274:	d91e      	bls.n	80082b4 <HAL_HRTIM_RepetitionEventCallback+0xbb8>
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 8008276:	8837      	ldrh	r7, [r6, #0]
 8008278:	ee07 7a90 	vmov	s15, r7
 800827c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008280:	eee7 6a87 	vfma.f32	s13, s15, s14
 8008284:	e4f1      	b.n	8007c6a <HAL_HRTIM_RepetitionEventCallback+0x56e>
		Vbat_counter--;
 8008286:	3901      	subs	r1, #1
 8008288:	b289      	uxth	r1, r1
 800828a:	e482      	b.n	8007b92 <HAL_HRTIM_RepetitionEventCallback+0x496>
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800828c:	490e      	ldr	r1, [pc, #56]	@ (80082c8 <HAL_HRTIM_RepetitionEventCallback+0xbcc>)
 800828e:	680f      	ldr	r7, [r1, #0]
	in_loop = false;
 8008290:	4915      	ldr	r1, [pc, #84]	@ (80082e8 <HAL_HRTIM_RepetitionEventCallback+0xbec>)
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 8008292:	f8d7 4398 	ldr.w	r4, [r7, #920]	@ 0x398
 8008296:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 800829a:	f044 0403 	orr.w	r4, r4, #3
 800829e:	f8c7 4398 	str.w	r4, [r7, #920]	@ 0x398
	in_loop = false;
 80082a2:	2400      	movs	r4, #0
		current_mode = idle;
 80082a4:	702c      	strb	r4, [r5, #0]
	in_loop = false;
 80082a6:	700c      	strb	r4, [r1, #0]
}
 80082a8:	e758      	b.n	800815c <HAL_HRTIM_RepetitionEventCallback+0xa60>
	|| (safetyItemLevel[Item] == runAway && Level == itsJoever))
 80082aa:	2c04      	cmp	r4, #4
 80082ac:	f47f ace0 	bne.w	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
		safetyItemLevel[Item] = Level;
 80082b0:	7044      	strb	r4, [r0, #1]
		safetyChangeTrigger = true;
 80082b2:	e4dd      	b.n	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 80082b4:	8835      	ldrh	r5, [r6, #0]
		safetyItemLevel[Item] = Level;
 80082b6:	7044      	strb	r4, [r0, #1]
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 80082b8:	ee07 5a90 	vmov	s15, r5
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eee7 6a87 	vfma.f32	s13, s15, s14
		safetyChangeTrigger = true;
 80082c4:	e4d4      	b.n	8007c70 <HAL_HRTIM_RepetitionEventCallback+0x574>
 80082c6:	bf00      	nop
 80082c8:	200004f8 	.word	0x200004f8
 80082cc:	40020094 	.word	0x40020094
 80082d0:	40020000 	.word	0x40020000
 80082d4:	40020400 	.word	0x40020400
 80082d8:	2000112c 	.word	0x2000112c
 80082dc:	2000112b 	.word	0x2000112b
 80082e0:	20001134 	.word	0x20001134
 80082e4:	20000015 	.word	0x20000015
 80082e8:	20001244 	.word	0x20001244
 80082ec:	2000112a 	.word	0x2000112a
 80082f0:	3f666666 	.word	0x3f666666
 80082f4:	4704d000 	.word	0x4704d000
 80082f8:	20001129 	.word	0x20001129

080082fc <arm_pid_init_f32>:
 80082fc:	edd0 6a08 	vldr	s13, [r0, #32]
 8008300:	edd0 7a06 	vldr	s15, [r0, #24]
 8008304:	ed90 7a07 	vldr	s14, [r0, #28]
 8008308:	edc0 6a02 	vstr	s13, [r0, #8]
 800830c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008310:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8008314:	eef1 7a67 	vneg.f32	s15, s15
 8008318:	ee37 7a26 	vadd.f32	s14, s14, s13
 800831c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008320:	ed80 7a00 	vstr	s14, [r0]
 8008324:	edc0 7a01 	vstr	s15, [r0, #4]
 8008328:	b901      	cbnz	r1, 800832c <arm_pid_init_f32+0x30>
 800832a:	4770      	bx	lr
 800832c:	2300      	movs	r3, #0
 800832e:	60c3      	str	r3, [r0, #12]
 8008330:	6103      	str	r3, [r0, #16]
 8008332:	6143      	str	r3, [r0, #20]
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop

08008338 <__cvt>:
 8008338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	ec57 6b10 	vmov	r6, r7, d0
 8008340:	2f00      	cmp	r7, #0
 8008342:	460c      	mov	r4, r1
 8008344:	4619      	mov	r1, r3
 8008346:	463b      	mov	r3, r7
 8008348:	bfbb      	ittet	lt
 800834a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800834e:	461f      	movlt	r7, r3
 8008350:	2300      	movge	r3, #0
 8008352:	232d      	movlt	r3, #45	@ 0x2d
 8008354:	700b      	strb	r3, [r1, #0]
 8008356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008358:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800835c:	4691      	mov	r9, r2
 800835e:	f023 0820 	bic.w	r8, r3, #32
 8008362:	bfbc      	itt	lt
 8008364:	4632      	movlt	r2, r6
 8008366:	4616      	movlt	r6, r2
 8008368:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800836c:	d005      	beq.n	800837a <__cvt+0x42>
 800836e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008372:	d100      	bne.n	8008376 <__cvt+0x3e>
 8008374:	3401      	adds	r4, #1
 8008376:	2102      	movs	r1, #2
 8008378:	e000      	b.n	800837c <__cvt+0x44>
 800837a:	2103      	movs	r1, #3
 800837c:	ab03      	add	r3, sp, #12
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	ab02      	add	r3, sp, #8
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	ec47 6b10 	vmov	d0, r6, r7
 8008388:	4653      	mov	r3, sl
 800838a:	4622      	mov	r2, r4
 800838c:	f000 fe3c 	bl	8009008 <_dtoa_r>
 8008390:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008394:	4605      	mov	r5, r0
 8008396:	d119      	bne.n	80083cc <__cvt+0x94>
 8008398:	f019 0f01 	tst.w	r9, #1
 800839c:	d00e      	beq.n	80083bc <__cvt+0x84>
 800839e:	eb00 0904 	add.w	r9, r0, r4
 80083a2:	2200      	movs	r2, #0
 80083a4:	2300      	movs	r3, #0
 80083a6:	4630      	mov	r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	f7f8 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80083ae:	b108      	cbz	r0, 80083b4 <__cvt+0x7c>
 80083b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b4:	2230      	movs	r2, #48	@ 0x30
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	454b      	cmp	r3, r9
 80083ba:	d31e      	bcc.n	80083fa <__cvt+0xc2>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083c0:	1b5b      	subs	r3, r3, r5
 80083c2:	4628      	mov	r0, r5
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	b004      	add	sp, #16
 80083c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083d0:	eb00 0904 	add.w	r9, r0, r4
 80083d4:	d1e5      	bne.n	80083a2 <__cvt+0x6a>
 80083d6:	7803      	ldrb	r3, [r0, #0]
 80083d8:	2b30      	cmp	r3, #48	@ 0x30
 80083da:	d10a      	bne.n	80083f2 <__cvt+0xba>
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f8 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 80083e8:	b918      	cbnz	r0, 80083f2 <__cvt+0xba>
 80083ea:	f1c4 0401 	rsb	r4, r4, #1
 80083ee:	f8ca 4000 	str.w	r4, [sl]
 80083f2:	f8da 3000 	ldr.w	r3, [sl]
 80083f6:	4499      	add	r9, r3
 80083f8:	e7d3      	b.n	80083a2 <__cvt+0x6a>
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e7d9      	b.n	80083b6 <__cvt+0x7e>

08008402 <__exponent>:
 8008402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008404:	2900      	cmp	r1, #0
 8008406:	bfba      	itte	lt
 8008408:	4249      	neglt	r1, r1
 800840a:	232d      	movlt	r3, #45	@ 0x2d
 800840c:	232b      	movge	r3, #43	@ 0x2b
 800840e:	2909      	cmp	r1, #9
 8008410:	7002      	strb	r2, [r0, #0]
 8008412:	7043      	strb	r3, [r0, #1]
 8008414:	dd29      	ble.n	800846a <__exponent+0x68>
 8008416:	f10d 0307 	add.w	r3, sp, #7
 800841a:	461d      	mov	r5, r3
 800841c:	270a      	movs	r7, #10
 800841e:	461a      	mov	r2, r3
 8008420:	fbb1 f6f7 	udiv	r6, r1, r7
 8008424:	fb07 1416 	mls	r4, r7, r6, r1
 8008428:	3430      	adds	r4, #48	@ 0x30
 800842a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800842e:	460c      	mov	r4, r1
 8008430:	2c63      	cmp	r4, #99	@ 0x63
 8008432:	f103 33ff 	add.w	r3, r3, #4294967295
 8008436:	4631      	mov	r1, r6
 8008438:	dcf1      	bgt.n	800841e <__exponent+0x1c>
 800843a:	3130      	adds	r1, #48	@ 0x30
 800843c:	1e94      	subs	r4, r2, #2
 800843e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008442:	1c41      	adds	r1, r0, #1
 8008444:	4623      	mov	r3, r4
 8008446:	42ab      	cmp	r3, r5
 8008448:	d30a      	bcc.n	8008460 <__exponent+0x5e>
 800844a:	f10d 0309 	add.w	r3, sp, #9
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	42ac      	cmp	r4, r5
 8008452:	bf88      	it	hi
 8008454:	2300      	movhi	r3, #0
 8008456:	3302      	adds	r3, #2
 8008458:	4403      	add	r3, r0
 800845a:	1a18      	subs	r0, r3, r0
 800845c:	b003      	add	sp, #12
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008460:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008464:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008468:	e7ed      	b.n	8008446 <__exponent+0x44>
 800846a:	2330      	movs	r3, #48	@ 0x30
 800846c:	3130      	adds	r1, #48	@ 0x30
 800846e:	7083      	strb	r3, [r0, #2]
 8008470:	70c1      	strb	r1, [r0, #3]
 8008472:	1d03      	adds	r3, r0, #4
 8008474:	e7f1      	b.n	800845a <__exponent+0x58>
	...

08008478 <_printf_float>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	b08d      	sub	sp, #52	@ 0x34
 800847e:	460c      	mov	r4, r1
 8008480:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008484:	4616      	mov	r6, r2
 8008486:	461f      	mov	r7, r3
 8008488:	4605      	mov	r5, r0
 800848a:	f000 fcbb 	bl	8008e04 <_localeconv_r>
 800848e:	6803      	ldr	r3, [r0, #0]
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	4618      	mov	r0, r3
 8008494:	f7f7 ff14 	bl	80002c0 <strlen>
 8008498:	2300      	movs	r3, #0
 800849a:	930a      	str	r3, [sp, #40]	@ 0x28
 800849c:	f8d8 3000 	ldr.w	r3, [r8]
 80084a0:	9005      	str	r0, [sp, #20]
 80084a2:	3307      	adds	r3, #7
 80084a4:	f023 0307 	bic.w	r3, r3, #7
 80084a8:	f103 0208 	add.w	r2, r3, #8
 80084ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084b0:	f8d4 b000 	ldr.w	fp, [r4]
 80084b4:	f8c8 2000 	str.w	r2, [r8]
 80084b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80084c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008740 <_printf_float+0x2c8>)
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295
 80084d4:	f7f8 fb52 	bl	8000b7c <__aeabi_dcmpun>
 80084d8:	bb70      	cbnz	r0, 8008538 <_printf_float+0xc0>
 80084da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084de:	4b98      	ldr	r3, [pc, #608]	@ (8008740 <_printf_float+0x2c8>)
 80084e0:	f04f 32ff 	mov.w	r2, #4294967295
 80084e4:	f7f8 fb2c 	bl	8000b40 <__aeabi_dcmple>
 80084e8:	bb30      	cbnz	r0, 8008538 <_printf_float+0xc0>
 80084ea:	2200      	movs	r2, #0
 80084ec:	2300      	movs	r3, #0
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	f7f8 fb1b 	bl	8000b2c <__aeabi_dcmplt>
 80084f6:	b110      	cbz	r0, 80084fe <_printf_float+0x86>
 80084f8:	232d      	movs	r3, #45	@ 0x2d
 80084fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084fe:	4a91      	ldr	r2, [pc, #580]	@ (8008744 <_printf_float+0x2cc>)
 8008500:	4b91      	ldr	r3, [pc, #580]	@ (8008748 <_printf_float+0x2d0>)
 8008502:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008506:	bf94      	ite	ls
 8008508:	4690      	movls	r8, r2
 800850a:	4698      	movhi	r8, r3
 800850c:	2303      	movs	r3, #3
 800850e:	6123      	str	r3, [r4, #16]
 8008510:	f02b 0304 	bic.w	r3, fp, #4
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	9700      	str	r7, [sp, #0]
 800851c:	4633      	mov	r3, r6
 800851e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 f9d2 	bl	80088cc <_printf_common>
 8008528:	3001      	adds	r0, #1
 800852a:	f040 808d 	bne.w	8008648 <_printf_float+0x1d0>
 800852e:	f04f 30ff 	mov.w	r0, #4294967295
 8008532:	b00d      	add	sp, #52	@ 0x34
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	4642      	mov	r2, r8
 800853a:	464b      	mov	r3, r9
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f8 fb1c 	bl	8000b7c <__aeabi_dcmpun>
 8008544:	b140      	cbz	r0, 8008558 <_printf_float+0xe0>
 8008546:	464b      	mov	r3, r9
 8008548:	2b00      	cmp	r3, #0
 800854a:	bfbc      	itt	lt
 800854c:	232d      	movlt	r3, #45	@ 0x2d
 800854e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008552:	4a7e      	ldr	r2, [pc, #504]	@ (800874c <_printf_float+0x2d4>)
 8008554:	4b7e      	ldr	r3, [pc, #504]	@ (8008750 <_printf_float+0x2d8>)
 8008556:	e7d4      	b.n	8008502 <_printf_float+0x8a>
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800855e:	9206      	str	r2, [sp, #24]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	d13b      	bne.n	80085dc <_printf_float+0x164>
 8008564:	2306      	movs	r3, #6
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800856c:	2300      	movs	r3, #0
 800856e:	6022      	str	r2, [r4, #0]
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	ab0a      	add	r3, sp, #40	@ 0x28
 8008574:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008578:	ab09      	add	r3, sp, #36	@ 0x24
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	ec49 8b10 	vmov	d0, r8, r9
 8008582:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008586:	4628      	mov	r0, r5
 8008588:	f7ff fed6 	bl	8008338 <__cvt>
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008590:	2b47      	cmp	r3, #71	@ 0x47
 8008592:	4680      	mov	r8, r0
 8008594:	d129      	bne.n	80085ea <_printf_float+0x172>
 8008596:	1cc8      	adds	r0, r1, #3
 8008598:	db02      	blt.n	80085a0 <_printf_float+0x128>
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	4299      	cmp	r1, r3
 800859e:	dd41      	ble.n	8008624 <_printf_float+0x1ac>
 80085a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80085a4:	fa5f fa8a 	uxtb.w	sl, sl
 80085a8:	3901      	subs	r1, #1
 80085aa:	4652      	mov	r2, sl
 80085ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80085b2:	f7ff ff26 	bl	8008402 <__exponent>
 80085b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085b8:	1813      	adds	r3, r2, r0
 80085ba:	2a01      	cmp	r2, #1
 80085bc:	4681      	mov	r9, r0
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	dc02      	bgt.n	80085c8 <_printf_float+0x150>
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	07d2      	lsls	r2, r2, #31
 80085c6:	d501      	bpl.n	80085cc <_printf_float+0x154>
 80085c8:	3301      	adds	r3, #1
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0a2      	beq.n	800851a <_printf_float+0xa2>
 80085d4:	232d      	movs	r3, #45	@ 0x2d
 80085d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085da:	e79e      	b.n	800851a <_printf_float+0xa2>
 80085dc:	9a06      	ldr	r2, [sp, #24]
 80085de:	2a47      	cmp	r2, #71	@ 0x47
 80085e0:	d1c2      	bne.n	8008568 <_printf_float+0xf0>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1c0      	bne.n	8008568 <_printf_float+0xf0>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e7bd      	b.n	8008566 <_printf_float+0xee>
 80085ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085ee:	d9db      	bls.n	80085a8 <_printf_float+0x130>
 80085f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085f4:	d118      	bne.n	8008628 <_printf_float+0x1b0>
 80085f6:	2900      	cmp	r1, #0
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	dd0b      	ble.n	8008614 <_printf_float+0x19c>
 80085fc:	6121      	str	r1, [r4, #16]
 80085fe:	b913      	cbnz	r3, 8008606 <_printf_float+0x18e>
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	07d0      	lsls	r0, r2, #31
 8008604:	d502      	bpl.n	800860c <_printf_float+0x194>
 8008606:	3301      	adds	r3, #1
 8008608:	440b      	add	r3, r1
 800860a:	6123      	str	r3, [r4, #16]
 800860c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	e7db      	b.n	80085cc <_printf_float+0x154>
 8008614:	b913      	cbnz	r3, 800861c <_printf_float+0x1a4>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	07d2      	lsls	r2, r2, #31
 800861a:	d501      	bpl.n	8008620 <_printf_float+0x1a8>
 800861c:	3302      	adds	r3, #2
 800861e:	e7f4      	b.n	800860a <_printf_float+0x192>
 8008620:	2301      	movs	r3, #1
 8008622:	e7f2      	b.n	800860a <_printf_float+0x192>
 8008624:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862a:	4299      	cmp	r1, r3
 800862c:	db05      	blt.n	800863a <_printf_float+0x1c2>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6121      	str	r1, [r4, #16]
 8008632:	07d8      	lsls	r0, r3, #31
 8008634:	d5ea      	bpl.n	800860c <_printf_float+0x194>
 8008636:	1c4b      	adds	r3, r1, #1
 8008638:	e7e7      	b.n	800860a <_printf_float+0x192>
 800863a:	2900      	cmp	r1, #0
 800863c:	bfd4      	ite	le
 800863e:	f1c1 0202 	rsble	r2, r1, #2
 8008642:	2201      	movgt	r2, #1
 8008644:	4413      	add	r3, r2
 8008646:	e7e0      	b.n	800860a <_printf_float+0x192>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	055a      	lsls	r2, r3, #21
 800864c:	d407      	bmi.n	800865e <_printf_float+0x1e6>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	4642      	mov	r2, r8
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	d12b      	bne.n	80086b4 <_printf_float+0x23c>
 800865c:	e767      	b.n	800852e <_printf_float+0xb6>
 800865e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008662:	f240 80dd 	bls.w	8008820 <_printf_float+0x3a8>
 8008666:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	f7f8 fa53 	bl	8000b18 <__aeabi_dcmpeq>
 8008672:	2800      	cmp	r0, #0
 8008674:	d033      	beq.n	80086de <_printf_float+0x266>
 8008676:	4a37      	ldr	r2, [pc, #220]	@ (8008754 <_printf_float+0x2dc>)
 8008678:	2301      	movs	r3, #1
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f af54 	beq.w	800852e <_printf_float+0xb6>
 8008686:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800868a:	4543      	cmp	r3, r8
 800868c:	db02      	blt.n	8008694 <_printf_float+0x21c>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	07d8      	lsls	r0, r3, #31
 8008692:	d50f      	bpl.n	80086b4 <_printf_float+0x23c>
 8008694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	47b8      	blx	r7
 800869e:	3001      	adds	r0, #1
 80086a0:	f43f af45 	beq.w	800852e <_printf_float+0xb6>
 80086a4:	f04f 0900 	mov.w	r9, #0
 80086a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80086ac:	f104 0a1a 	add.w	sl, r4, #26
 80086b0:	45c8      	cmp	r8, r9
 80086b2:	dc09      	bgt.n	80086c8 <_printf_float+0x250>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	079b      	lsls	r3, r3, #30
 80086b8:	f100 8103 	bmi.w	80088c2 <_printf_float+0x44a>
 80086bc:	68e0      	ldr	r0, [r4, #12]
 80086be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086c0:	4298      	cmp	r0, r3
 80086c2:	bfb8      	it	lt
 80086c4:	4618      	movlt	r0, r3
 80086c6:	e734      	b.n	8008532 <_printf_float+0xba>
 80086c8:	2301      	movs	r3, #1
 80086ca:	4652      	mov	r2, sl
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	f43f af2b 	beq.w	800852e <_printf_float+0xb6>
 80086d8:	f109 0901 	add.w	r9, r9, #1
 80086dc:	e7e8      	b.n	80086b0 <_printf_float+0x238>
 80086de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dc39      	bgt.n	8008758 <_printf_float+0x2e0>
 80086e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008754 <_printf_float+0x2dc>)
 80086e6:	2301      	movs	r3, #1
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	f43f af1d 	beq.w	800852e <_printf_float+0xb6>
 80086f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086f8:	ea59 0303 	orrs.w	r3, r9, r3
 80086fc:	d102      	bne.n	8008704 <_printf_float+0x28c>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	07d9      	lsls	r1, r3, #31
 8008702:	d5d7      	bpl.n	80086b4 <_printf_float+0x23c>
 8008704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008708:	4631      	mov	r1, r6
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	f43f af0d 	beq.w	800852e <_printf_float+0xb6>
 8008714:	f04f 0a00 	mov.w	sl, #0
 8008718:	f104 0b1a 	add.w	fp, r4, #26
 800871c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800871e:	425b      	negs	r3, r3
 8008720:	4553      	cmp	r3, sl
 8008722:	dc01      	bgt.n	8008728 <_printf_float+0x2b0>
 8008724:	464b      	mov	r3, r9
 8008726:	e793      	b.n	8008650 <_printf_float+0x1d8>
 8008728:	2301      	movs	r3, #1
 800872a:	465a      	mov	r2, fp
 800872c:	4631      	mov	r1, r6
 800872e:	4628      	mov	r0, r5
 8008730:	47b8      	blx	r7
 8008732:	3001      	adds	r0, #1
 8008734:	f43f aefb 	beq.w	800852e <_printf_float+0xb6>
 8008738:	f10a 0a01 	add.w	sl, sl, #1
 800873c:	e7ee      	b.n	800871c <_printf_float+0x2a4>
 800873e:	bf00      	nop
 8008740:	7fefffff 	.word	0x7fefffff
 8008744:	0800aca0 	.word	0x0800aca0
 8008748:	0800aca4 	.word	0x0800aca4
 800874c:	0800aca8 	.word	0x0800aca8
 8008750:	0800acac 	.word	0x0800acac
 8008754:	0800acb0 	.word	0x0800acb0
 8008758:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800875a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800875e:	4553      	cmp	r3, sl
 8008760:	bfa8      	it	ge
 8008762:	4653      	movge	r3, sl
 8008764:	2b00      	cmp	r3, #0
 8008766:	4699      	mov	r9, r3
 8008768:	dc36      	bgt.n	80087d8 <_printf_float+0x360>
 800876a:	f04f 0b00 	mov.w	fp, #0
 800876e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008772:	f104 021a 	add.w	r2, r4, #26
 8008776:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008778:	9306      	str	r3, [sp, #24]
 800877a:	eba3 0309 	sub.w	r3, r3, r9
 800877e:	455b      	cmp	r3, fp
 8008780:	dc31      	bgt.n	80087e6 <_printf_float+0x36e>
 8008782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008784:	459a      	cmp	sl, r3
 8008786:	dc3a      	bgt.n	80087fe <_printf_float+0x386>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	07da      	lsls	r2, r3, #31
 800878c:	d437      	bmi.n	80087fe <_printf_float+0x386>
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	ebaa 0903 	sub.w	r9, sl, r3
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	ebaa 0303 	sub.w	r3, sl, r3
 800879a:	4599      	cmp	r9, r3
 800879c:	bfa8      	it	ge
 800879e:	4699      	movge	r9, r3
 80087a0:	f1b9 0f00 	cmp.w	r9, #0
 80087a4:	dc33      	bgt.n	800880e <_printf_float+0x396>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ae:	f104 0b1a 	add.w	fp, r4, #26
 80087b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b4:	ebaa 0303 	sub.w	r3, sl, r3
 80087b8:	eba3 0309 	sub.w	r3, r3, r9
 80087bc:	4543      	cmp	r3, r8
 80087be:	f77f af79 	ble.w	80086b4 <_printf_float+0x23c>
 80087c2:	2301      	movs	r3, #1
 80087c4:	465a      	mov	r2, fp
 80087c6:	4631      	mov	r1, r6
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b8      	blx	r7
 80087cc:	3001      	adds	r0, #1
 80087ce:	f43f aeae 	beq.w	800852e <_printf_float+0xb6>
 80087d2:	f108 0801 	add.w	r8, r8, #1
 80087d6:	e7ec      	b.n	80087b2 <_printf_float+0x33a>
 80087d8:	4642      	mov	r2, r8
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	d1c2      	bne.n	800876a <_printf_float+0x2f2>
 80087e4:	e6a3      	b.n	800852e <_printf_float+0xb6>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	9206      	str	r2, [sp, #24]
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f ae9c 	beq.w	800852e <_printf_float+0xb6>
 80087f6:	9a06      	ldr	r2, [sp, #24]
 80087f8:	f10b 0b01 	add.w	fp, fp, #1
 80087fc:	e7bb      	b.n	8008776 <_printf_float+0x2fe>
 80087fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008802:	4631      	mov	r1, r6
 8008804:	4628      	mov	r0, r5
 8008806:	47b8      	blx	r7
 8008808:	3001      	adds	r0, #1
 800880a:	d1c0      	bne.n	800878e <_printf_float+0x316>
 800880c:	e68f      	b.n	800852e <_printf_float+0xb6>
 800880e:	9a06      	ldr	r2, [sp, #24]
 8008810:	464b      	mov	r3, r9
 8008812:	4442      	add	r2, r8
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	d1c3      	bne.n	80087a6 <_printf_float+0x32e>
 800881e:	e686      	b.n	800852e <_printf_float+0xb6>
 8008820:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008824:	f1ba 0f01 	cmp.w	sl, #1
 8008828:	dc01      	bgt.n	800882e <_printf_float+0x3b6>
 800882a:	07db      	lsls	r3, r3, #31
 800882c:	d536      	bpl.n	800889c <_printf_float+0x424>
 800882e:	2301      	movs	r3, #1
 8008830:	4642      	mov	r2, r8
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	f43f ae78 	beq.w	800852e <_printf_float+0xb6>
 800883e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008842:	4631      	mov	r1, r6
 8008844:	4628      	mov	r0, r5
 8008846:	47b8      	blx	r7
 8008848:	3001      	adds	r0, #1
 800884a:	f43f ae70 	beq.w	800852e <_printf_float+0xb6>
 800884e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008852:	2200      	movs	r2, #0
 8008854:	2300      	movs	r3, #0
 8008856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885a:	f7f8 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800885e:	b9c0      	cbnz	r0, 8008892 <_printf_float+0x41a>
 8008860:	4653      	mov	r3, sl
 8008862:	f108 0201 	add.w	r2, r8, #1
 8008866:	4631      	mov	r1, r6
 8008868:	4628      	mov	r0, r5
 800886a:	47b8      	blx	r7
 800886c:	3001      	adds	r0, #1
 800886e:	d10c      	bne.n	800888a <_printf_float+0x412>
 8008870:	e65d      	b.n	800852e <_printf_float+0xb6>
 8008872:	2301      	movs	r3, #1
 8008874:	465a      	mov	r2, fp
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	f43f ae56 	beq.w	800852e <_printf_float+0xb6>
 8008882:	f108 0801 	add.w	r8, r8, #1
 8008886:	45d0      	cmp	r8, sl
 8008888:	dbf3      	blt.n	8008872 <_printf_float+0x3fa>
 800888a:	464b      	mov	r3, r9
 800888c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008890:	e6df      	b.n	8008652 <_printf_float+0x1da>
 8008892:	f04f 0800 	mov.w	r8, #0
 8008896:	f104 0b1a 	add.w	fp, r4, #26
 800889a:	e7f4      	b.n	8008886 <_printf_float+0x40e>
 800889c:	2301      	movs	r3, #1
 800889e:	4642      	mov	r2, r8
 80088a0:	e7e1      	b.n	8008866 <_printf_float+0x3ee>
 80088a2:	2301      	movs	r3, #1
 80088a4:	464a      	mov	r2, r9
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f ae3e 	beq.w	800852e <_printf_float+0xb6>
 80088b2:	f108 0801 	add.w	r8, r8, #1
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088ba:	1a5b      	subs	r3, r3, r1
 80088bc:	4543      	cmp	r3, r8
 80088be:	dcf0      	bgt.n	80088a2 <_printf_float+0x42a>
 80088c0:	e6fc      	b.n	80086bc <_printf_float+0x244>
 80088c2:	f04f 0800 	mov.w	r8, #0
 80088c6:	f104 0919 	add.w	r9, r4, #25
 80088ca:	e7f4      	b.n	80088b6 <_printf_float+0x43e>

080088cc <_printf_common>:
 80088cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	4616      	mov	r6, r2
 80088d2:	4698      	mov	r8, r3
 80088d4:	688a      	ldr	r2, [r1, #8]
 80088d6:	690b      	ldr	r3, [r1, #16]
 80088d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088dc:	4293      	cmp	r3, r2
 80088de:	bfb8      	it	lt
 80088e0:	4613      	movlt	r3, r2
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088e8:	4607      	mov	r7, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	b10a      	cbz	r2, 80088f2 <_printf_common+0x26>
 80088ee:	3301      	adds	r3, #1
 80088f0:	6033      	str	r3, [r6, #0]
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	0699      	lsls	r1, r3, #26
 80088f6:	bf42      	ittt	mi
 80088f8:	6833      	ldrmi	r3, [r6, #0]
 80088fa:	3302      	addmi	r3, #2
 80088fc:	6033      	strmi	r3, [r6, #0]
 80088fe:	6825      	ldr	r5, [r4, #0]
 8008900:	f015 0506 	ands.w	r5, r5, #6
 8008904:	d106      	bne.n	8008914 <_printf_common+0x48>
 8008906:	f104 0a19 	add.w	sl, r4, #25
 800890a:	68e3      	ldr	r3, [r4, #12]
 800890c:	6832      	ldr	r2, [r6, #0]
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	42ab      	cmp	r3, r5
 8008912:	dc26      	bgt.n	8008962 <_printf_common+0x96>
 8008914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008918:	6822      	ldr	r2, [r4, #0]
 800891a:	3b00      	subs	r3, #0
 800891c:	bf18      	it	ne
 800891e:	2301      	movne	r3, #1
 8008920:	0692      	lsls	r2, r2, #26
 8008922:	d42b      	bmi.n	800897c <_printf_common+0xb0>
 8008924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008928:	4641      	mov	r1, r8
 800892a:	4638      	mov	r0, r7
 800892c:	47c8      	blx	r9
 800892e:	3001      	adds	r0, #1
 8008930:	d01e      	beq.n	8008970 <_printf_common+0xa4>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	f003 0306 	and.w	r3, r3, #6
 800893a:	2b04      	cmp	r3, #4
 800893c:	bf02      	ittt	eq
 800893e:	68e5      	ldreq	r5, [r4, #12]
 8008940:	6833      	ldreq	r3, [r6, #0]
 8008942:	1aed      	subeq	r5, r5, r3
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	bf0c      	ite	eq
 8008948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800894c:	2500      	movne	r5, #0
 800894e:	4293      	cmp	r3, r2
 8008950:	bfc4      	itt	gt
 8008952:	1a9b      	subgt	r3, r3, r2
 8008954:	18ed      	addgt	r5, r5, r3
 8008956:	2600      	movs	r6, #0
 8008958:	341a      	adds	r4, #26
 800895a:	42b5      	cmp	r5, r6
 800895c:	d11a      	bne.n	8008994 <_printf_common+0xc8>
 800895e:	2000      	movs	r0, #0
 8008960:	e008      	b.n	8008974 <_printf_common+0xa8>
 8008962:	2301      	movs	r3, #1
 8008964:	4652      	mov	r2, sl
 8008966:	4641      	mov	r1, r8
 8008968:	4638      	mov	r0, r7
 800896a:	47c8      	blx	r9
 800896c:	3001      	adds	r0, #1
 800896e:	d103      	bne.n	8008978 <_printf_common+0xac>
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008978:	3501      	adds	r5, #1
 800897a:	e7c6      	b.n	800890a <_printf_common+0x3e>
 800897c:	18e1      	adds	r1, r4, r3
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	2030      	movs	r0, #48	@ 0x30
 8008982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008986:	4422      	add	r2, r4
 8008988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800898c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008990:	3302      	adds	r3, #2
 8008992:	e7c7      	b.n	8008924 <_printf_common+0x58>
 8008994:	2301      	movs	r3, #1
 8008996:	4622      	mov	r2, r4
 8008998:	4641      	mov	r1, r8
 800899a:	4638      	mov	r0, r7
 800899c:	47c8      	blx	r9
 800899e:	3001      	adds	r0, #1
 80089a0:	d0e6      	beq.n	8008970 <_printf_common+0xa4>
 80089a2:	3601      	adds	r6, #1
 80089a4:	e7d9      	b.n	800895a <_printf_common+0x8e>
	...

080089a8 <_printf_i>:
 80089a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	7e0f      	ldrb	r7, [r1, #24]
 80089ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089b0:	2f78      	cmp	r7, #120	@ 0x78
 80089b2:	4691      	mov	r9, r2
 80089b4:	4680      	mov	r8, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	469a      	mov	sl, r3
 80089ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089be:	d807      	bhi.n	80089d0 <_printf_i+0x28>
 80089c0:	2f62      	cmp	r7, #98	@ 0x62
 80089c2:	d80a      	bhi.n	80089da <_printf_i+0x32>
 80089c4:	2f00      	cmp	r7, #0
 80089c6:	f000 80d2 	beq.w	8008b6e <_printf_i+0x1c6>
 80089ca:	2f58      	cmp	r7, #88	@ 0x58
 80089cc:	f000 80b9 	beq.w	8008b42 <_printf_i+0x19a>
 80089d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089d8:	e03a      	b.n	8008a50 <_printf_i+0xa8>
 80089da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089de:	2b15      	cmp	r3, #21
 80089e0:	d8f6      	bhi.n	80089d0 <_printf_i+0x28>
 80089e2:	a101      	add	r1, pc, #4	@ (adr r1, 80089e8 <_printf_i+0x40>)
 80089e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089e8:	08008a41 	.word	0x08008a41
 80089ec:	08008a55 	.word	0x08008a55
 80089f0:	080089d1 	.word	0x080089d1
 80089f4:	080089d1 	.word	0x080089d1
 80089f8:	080089d1 	.word	0x080089d1
 80089fc:	080089d1 	.word	0x080089d1
 8008a00:	08008a55 	.word	0x08008a55
 8008a04:	080089d1 	.word	0x080089d1
 8008a08:	080089d1 	.word	0x080089d1
 8008a0c:	080089d1 	.word	0x080089d1
 8008a10:	080089d1 	.word	0x080089d1
 8008a14:	08008b55 	.word	0x08008b55
 8008a18:	08008a7f 	.word	0x08008a7f
 8008a1c:	08008b0f 	.word	0x08008b0f
 8008a20:	080089d1 	.word	0x080089d1
 8008a24:	080089d1 	.word	0x080089d1
 8008a28:	08008b77 	.word	0x08008b77
 8008a2c:	080089d1 	.word	0x080089d1
 8008a30:	08008a7f 	.word	0x08008a7f
 8008a34:	080089d1 	.word	0x080089d1
 8008a38:	080089d1 	.word	0x080089d1
 8008a3c:	08008b17 	.word	0x08008b17
 8008a40:	6833      	ldr	r3, [r6, #0]
 8008a42:	1d1a      	adds	r2, r3, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6032      	str	r2, [r6, #0]
 8008a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a50:	2301      	movs	r3, #1
 8008a52:	e09d      	b.n	8008b90 <_printf_i+0x1e8>
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	6820      	ldr	r0, [r4, #0]
 8008a58:	1d19      	adds	r1, r3, #4
 8008a5a:	6031      	str	r1, [r6, #0]
 8008a5c:	0606      	lsls	r6, r0, #24
 8008a5e:	d501      	bpl.n	8008a64 <_printf_i+0xbc>
 8008a60:	681d      	ldr	r5, [r3, #0]
 8008a62:	e003      	b.n	8008a6c <_printf_i+0xc4>
 8008a64:	0645      	lsls	r5, r0, #25
 8008a66:	d5fb      	bpl.n	8008a60 <_printf_i+0xb8>
 8008a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	da03      	bge.n	8008a78 <_printf_i+0xd0>
 8008a70:	232d      	movs	r3, #45	@ 0x2d
 8008a72:	426d      	negs	r5, r5
 8008a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a78:	4859      	ldr	r0, [pc, #356]	@ (8008be0 <_printf_i+0x238>)
 8008a7a:	230a      	movs	r3, #10
 8008a7c:	e011      	b.n	8008aa2 <_printf_i+0xfa>
 8008a7e:	6821      	ldr	r1, [r4, #0]
 8008a80:	6833      	ldr	r3, [r6, #0]
 8008a82:	0608      	lsls	r0, r1, #24
 8008a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a88:	d402      	bmi.n	8008a90 <_printf_i+0xe8>
 8008a8a:	0649      	lsls	r1, r1, #25
 8008a8c:	bf48      	it	mi
 8008a8e:	b2ad      	uxthmi	r5, r5
 8008a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a92:	4853      	ldr	r0, [pc, #332]	@ (8008be0 <_printf_i+0x238>)
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	bf14      	ite	ne
 8008a98:	230a      	movne	r3, #10
 8008a9a:	2308      	moveq	r3, #8
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aa2:	6866      	ldr	r6, [r4, #4]
 8008aa4:	60a6      	str	r6, [r4, #8]
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	bfa2      	ittt	ge
 8008aaa:	6821      	ldrge	r1, [r4, #0]
 8008aac:	f021 0104 	bicge.w	r1, r1, #4
 8008ab0:	6021      	strge	r1, [r4, #0]
 8008ab2:	b90d      	cbnz	r5, 8008ab8 <_printf_i+0x110>
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	d04b      	beq.n	8008b50 <_printf_i+0x1a8>
 8008ab8:	4616      	mov	r6, r2
 8008aba:	fbb5 f1f3 	udiv	r1, r5, r3
 8008abe:	fb03 5711 	mls	r7, r3, r1, r5
 8008ac2:	5dc7      	ldrb	r7, [r0, r7]
 8008ac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ac8:	462f      	mov	r7, r5
 8008aca:	42bb      	cmp	r3, r7
 8008acc:	460d      	mov	r5, r1
 8008ace:	d9f4      	bls.n	8008aba <_printf_i+0x112>
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d10b      	bne.n	8008aec <_printf_i+0x144>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	07df      	lsls	r7, r3, #31
 8008ad8:	d508      	bpl.n	8008aec <_printf_i+0x144>
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	6861      	ldr	r1, [r4, #4]
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	bfde      	ittt	le
 8008ae2:	2330      	movle	r3, #48	@ 0x30
 8008ae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008aec:	1b92      	subs	r2, r2, r6
 8008aee:	6122      	str	r2, [r4, #16]
 8008af0:	f8cd a000 	str.w	sl, [sp]
 8008af4:	464b      	mov	r3, r9
 8008af6:	aa03      	add	r2, sp, #12
 8008af8:	4621      	mov	r1, r4
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff fee6 	bl	80088cc <_printf_common>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d14a      	bne.n	8008b9a <_printf_i+0x1f2>
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	b004      	add	sp, #16
 8008b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	f043 0320 	orr.w	r3, r3, #32
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	4833      	ldr	r0, [pc, #204]	@ (8008be4 <_printf_i+0x23c>)
 8008b18:	2778      	movs	r7, #120	@ 0x78
 8008b1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	6831      	ldr	r1, [r6, #0]
 8008b22:	061f      	lsls	r7, r3, #24
 8008b24:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b28:	d402      	bmi.n	8008b30 <_printf_i+0x188>
 8008b2a:	065f      	lsls	r7, r3, #25
 8008b2c:	bf48      	it	mi
 8008b2e:	b2ad      	uxthmi	r5, r5
 8008b30:	6031      	str	r1, [r6, #0]
 8008b32:	07d9      	lsls	r1, r3, #31
 8008b34:	bf44      	itt	mi
 8008b36:	f043 0320 	orrmi.w	r3, r3, #32
 8008b3a:	6023      	strmi	r3, [r4, #0]
 8008b3c:	b11d      	cbz	r5, 8008b46 <_printf_i+0x19e>
 8008b3e:	2310      	movs	r3, #16
 8008b40:	e7ac      	b.n	8008a9c <_printf_i+0xf4>
 8008b42:	4827      	ldr	r0, [pc, #156]	@ (8008be0 <_printf_i+0x238>)
 8008b44:	e7e9      	b.n	8008b1a <_printf_i+0x172>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	f023 0320 	bic.w	r3, r3, #32
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	e7f6      	b.n	8008b3e <_printf_i+0x196>
 8008b50:	4616      	mov	r6, r2
 8008b52:	e7bd      	b.n	8008ad0 <_printf_i+0x128>
 8008b54:	6833      	ldr	r3, [r6, #0]
 8008b56:	6825      	ldr	r5, [r4, #0]
 8008b58:	6961      	ldr	r1, [r4, #20]
 8008b5a:	1d18      	adds	r0, r3, #4
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	062e      	lsls	r6, r5, #24
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	d501      	bpl.n	8008b68 <_printf_i+0x1c0>
 8008b64:	6019      	str	r1, [r3, #0]
 8008b66:	e002      	b.n	8008b6e <_printf_i+0x1c6>
 8008b68:	0668      	lsls	r0, r5, #25
 8008b6a:	d5fb      	bpl.n	8008b64 <_printf_i+0x1bc>
 8008b6c:	8019      	strh	r1, [r3, #0]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	4616      	mov	r6, r2
 8008b74:	e7bc      	b.n	8008af0 <_printf_i+0x148>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	1d1a      	adds	r2, r3, #4
 8008b7a:	6032      	str	r2, [r6, #0]
 8008b7c:	681e      	ldr	r6, [r3, #0]
 8008b7e:	6862      	ldr	r2, [r4, #4]
 8008b80:	2100      	movs	r1, #0
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7f7 fb4c 	bl	8000220 <memchr>
 8008b88:	b108      	cbz	r0, 8008b8e <_printf_i+0x1e6>
 8008b8a:	1b80      	subs	r0, r0, r6
 8008b8c:	6060      	str	r0, [r4, #4]
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	6123      	str	r3, [r4, #16]
 8008b92:	2300      	movs	r3, #0
 8008b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b98:	e7aa      	b.n	8008af0 <_printf_i+0x148>
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	47d0      	blx	sl
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d0ad      	beq.n	8008b04 <_printf_i+0x15c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	079b      	lsls	r3, r3, #30
 8008bac:	d413      	bmi.n	8008bd6 <_printf_i+0x22e>
 8008bae:	68e0      	ldr	r0, [r4, #12]
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	4298      	cmp	r0, r3
 8008bb4:	bfb8      	it	lt
 8008bb6:	4618      	movlt	r0, r3
 8008bb8:	e7a6      	b.n	8008b08 <_printf_i+0x160>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	47d0      	blx	sl
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d09d      	beq.n	8008b04 <_printf_i+0x15c>
 8008bc8:	3501      	adds	r5, #1
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	9903      	ldr	r1, [sp, #12]
 8008bce:	1a5b      	subs	r3, r3, r1
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dcf2      	bgt.n	8008bba <_printf_i+0x212>
 8008bd4:	e7eb      	b.n	8008bae <_printf_i+0x206>
 8008bd6:	2500      	movs	r5, #0
 8008bd8:	f104 0619 	add.w	r6, r4, #25
 8008bdc:	e7f5      	b.n	8008bca <_printf_i+0x222>
 8008bde:	bf00      	nop
 8008be0:	0800acb2 	.word	0x0800acb2
 8008be4:	0800acc3 	.word	0x0800acc3

08008be8 <std>:
 8008be8:	2300      	movs	r3, #0
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bf6:	6083      	str	r3, [r0, #8]
 8008bf8:	8181      	strh	r1, [r0, #12]
 8008bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bfc:	81c2      	strh	r2, [r0, #14]
 8008bfe:	6183      	str	r3, [r0, #24]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2208      	movs	r2, #8
 8008c04:	305c      	adds	r0, #92	@ 0x5c
 8008c06:	f000 f8f4 	bl	8008df2 <memset>
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c40 <std+0x58>)
 8008c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <std+0x5c>)
 8008c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <std+0x60>)
 8008c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c16:	4b0d      	ldr	r3, [pc, #52]	@ (8008c4c <std+0x64>)
 8008c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <std+0x68>)
 8008c1c:	6224      	str	r4, [r4, #32]
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d006      	beq.n	8008c30 <std+0x48>
 8008c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c26:	4294      	cmp	r4, r2
 8008c28:	d002      	beq.n	8008c30 <std+0x48>
 8008c2a:	33d0      	adds	r3, #208	@ 0xd0
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	d105      	bne.n	8008c3c <std+0x54>
 8008c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c38:	f000 b958 	b.w	8008eec <__retarget_lock_init_recursive>
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008d6d 	.word	0x08008d6d
 8008c44:	08008d8f 	.word	0x08008d8f
 8008c48:	08008dc7 	.word	0x08008dc7
 8008c4c:	08008deb 	.word	0x08008deb
 8008c50:	20001268 	.word	0x20001268

08008c54 <stdio_exit_handler>:
 8008c54:	4a02      	ldr	r2, [pc, #8]	@ (8008c60 <stdio_exit_handler+0xc>)
 8008c56:	4903      	ldr	r1, [pc, #12]	@ (8008c64 <stdio_exit_handler+0x10>)
 8008c58:	4803      	ldr	r0, [pc, #12]	@ (8008c68 <stdio_exit_handler+0x14>)
 8008c5a:	f000 b869 	b.w	8008d30 <_fwalk_sglue>
 8008c5e:	bf00      	nop
 8008c60:	20000018 	.word	0x20000018
 8008c64:	0800a59d 	.word	0x0800a59d
 8008c68:	20000028 	.word	0x20000028

08008c6c <cleanup_stdio>:
 8008c6c:	6841      	ldr	r1, [r0, #4]
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <cleanup_stdio+0x34>)
 8008c70:	4299      	cmp	r1, r3
 8008c72:	b510      	push	{r4, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	d001      	beq.n	8008c7c <cleanup_stdio+0x10>
 8008c78:	f001 fc90 	bl	800a59c <_fflush_r>
 8008c7c:	68a1      	ldr	r1, [r4, #8]
 8008c7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ca4 <cleanup_stdio+0x38>)
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d002      	beq.n	8008c8a <cleanup_stdio+0x1e>
 8008c84:	4620      	mov	r0, r4
 8008c86:	f001 fc89 	bl	800a59c <_fflush_r>
 8008c8a:	68e1      	ldr	r1, [r4, #12]
 8008c8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <cleanup_stdio+0x3c>)
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	d004      	beq.n	8008c9c <cleanup_stdio+0x30>
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f001 bc80 	b.w	800a59c <_fflush_r>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20001268 	.word	0x20001268
 8008ca4:	200012d0 	.word	0x200012d0
 8008ca8:	20001338 	.word	0x20001338

08008cac <global_stdio_init.part.0>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <global_stdio_init.part.0+0x30>)
 8008cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ce0 <global_stdio_init.part.0+0x34>)
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <global_stdio_init.part.0+0x38>)
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2104      	movs	r1, #4
 8008cbc:	f7ff ff94 	bl	8008be8 <std>
 8008cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2109      	movs	r1, #9
 8008cc8:	f7ff ff8e 	bl	8008be8 <std>
 8008ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd6:	2112      	movs	r1, #18
 8008cd8:	f7ff bf86 	b.w	8008be8 <std>
 8008cdc:	200013a0 	.word	0x200013a0
 8008ce0:	20001268 	.word	0x20001268
 8008ce4:	08008c55 	.word	0x08008c55

08008ce8 <__sfp_lock_acquire>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	@ (8008cf0 <__sfp_lock_acquire+0x8>)
 8008cea:	f000 b900 	b.w	8008eee <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	200013a9 	.word	0x200013a9

08008cf4 <__sfp_lock_release>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	@ (8008cfc <__sfp_lock_release+0x8>)
 8008cf6:	f000 b8fb 	b.w	8008ef0 <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	200013a9 	.word	0x200013a9

08008d00 <__sinit>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	f7ff fff0 	bl	8008ce8 <__sfp_lock_acquire>
 8008d08:	6a23      	ldr	r3, [r4, #32]
 8008d0a:	b11b      	cbz	r3, 8008d14 <__sinit+0x14>
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f7ff bff0 	b.w	8008cf4 <__sfp_lock_release>
 8008d14:	4b04      	ldr	r3, [pc, #16]	@ (8008d28 <__sinit+0x28>)
 8008d16:	6223      	str	r3, [r4, #32]
 8008d18:	4b04      	ldr	r3, [pc, #16]	@ (8008d2c <__sinit+0x2c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1f5      	bne.n	8008d0c <__sinit+0xc>
 8008d20:	f7ff ffc4 	bl	8008cac <global_stdio_init.part.0>
 8008d24:	e7f2      	b.n	8008d0c <__sinit+0xc>
 8008d26:	bf00      	nop
 8008d28:	08008c6d 	.word	0x08008c6d
 8008d2c:	200013a0 	.word	0x200013a0

08008d30 <_fwalk_sglue>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4607      	mov	r7, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d40:	f1b9 0901 	subs.w	r9, r9, #1
 8008d44:	d505      	bpl.n	8008d52 <_fwalk_sglue+0x22>
 8008d46:	6824      	ldr	r4, [r4, #0]
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d1f7      	bne.n	8008d3c <_fwalk_sglue+0xc>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d907      	bls.n	8008d68 <_fwalk_sglue+0x38>
 8008d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	d003      	beq.n	8008d68 <_fwalk_sglue+0x38>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c0      	blx	r8
 8008d66:	4306      	orrs	r6, r0
 8008d68:	3568      	adds	r5, #104	@ 0x68
 8008d6a:	e7e9      	b.n	8008d40 <_fwalk_sglue+0x10>

08008d6c <__sread>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	460c      	mov	r4, r1
 8008d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d74:	f000 f86c 	bl	8008e50 <_read_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	bfab      	itete	ge
 8008d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d80:	181b      	addge	r3, r3, r0
 8008d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d86:	bfac      	ite	ge
 8008d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d8a:	81a3      	strhlt	r3, [r4, #12]
 8008d8c:	bd10      	pop	{r4, pc}

08008d8e <__swrite>:
 8008d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	461f      	mov	r7, r3
 8008d94:	898b      	ldrh	r3, [r1, #12]
 8008d96:	05db      	lsls	r3, r3, #23
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	d505      	bpl.n	8008dac <__swrite+0x1e>
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	2302      	movs	r3, #2
 8008da6:	2200      	movs	r2, #0
 8008da8:	f000 f840 	bl	8008e2c <_lseek_r>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	4632      	mov	r2, r6
 8008dba:	463b      	mov	r3, r7
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	f000 b857 	b.w	8008e74 <_write_r>

08008dc6 <__sseek>:
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dce:	f000 f82d 	bl	8008e2c <_lseek_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	bf15      	itete	ne
 8008dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008de2:	81a3      	strheq	r3, [r4, #12]
 8008de4:	bf18      	it	ne
 8008de6:	81a3      	strhne	r3, [r4, #12]
 8008de8:	bd10      	pop	{r4, pc}

08008dea <__sclose>:
 8008dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dee:	f000 b80d 	b.w	8008e0c <_close_r>

08008df2 <memset>:
 8008df2:	4402      	add	r2, r0
 8008df4:	4603      	mov	r3, r0
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d100      	bne.n	8008dfc <memset+0xa>
 8008dfa:	4770      	bx	lr
 8008dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8008e00:	e7f9      	b.n	8008df6 <memset+0x4>
	...

08008e04 <_localeconv_r>:
 8008e04:	4800      	ldr	r0, [pc, #0]	@ (8008e08 <_localeconv_r+0x4>)
 8008e06:	4770      	bx	lr
 8008e08:	20000164 	.word	0x20000164

08008e0c <_close_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d06      	ldr	r5, [pc, #24]	@ (8008e28 <_close_r+0x1c>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	602b      	str	r3, [r5, #0]
 8008e18:	f7f9 f80c 	bl	8001e34 <_close>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_close_r+0x1a>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_close_r+0x1a>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	200013a4 	.word	0x200013a4

08008e2c <_lseek_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	@ (8008e4c <_lseek_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f9 f806 	bl	8001e4c <_lseek>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_lseek_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_lseek_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	200013a4 	.word	0x200013a4

08008e50 <_read_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d07      	ldr	r5, [pc, #28]	@ (8008e70 <_read_r+0x20>)
 8008e54:	4604      	mov	r4, r0
 8008e56:	4608      	mov	r0, r1
 8008e58:	4611      	mov	r1, r2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	602a      	str	r2, [r5, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f7f8 ffcc 	bl	8001dfc <_read>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_read_r+0x1e>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_read_r+0x1e>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	200013a4 	.word	0x200013a4

08008e74 <_write_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d07      	ldr	r5, [pc, #28]	@ (8008e94 <_write_r+0x20>)
 8008e78:	4604      	mov	r4, r0
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	2200      	movs	r2, #0
 8008e80:	602a      	str	r2, [r5, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f7f8 ffc8 	bl	8001e18 <_write>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_write_r+0x1e>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_write_r+0x1e>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	200013a4 	.word	0x200013a4

08008e98 <__errno>:
 8008e98:	4b01      	ldr	r3, [pc, #4]	@ (8008ea0 <__errno+0x8>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20000024 	.word	0x20000024

08008ea4 <__libc_init_array>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8008edc <__libc_init_array+0x38>)
 8008ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ee0 <__libc_init_array+0x3c>)
 8008eaa:	1b64      	subs	r4, r4, r5
 8008eac:	10a4      	asrs	r4, r4, #2
 8008eae:	2600      	movs	r6, #0
 8008eb0:	42a6      	cmp	r6, r4
 8008eb2:	d109      	bne.n	8008ec8 <__libc_init_array+0x24>
 8008eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ee4 <__libc_init_array+0x40>)
 8008eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ee8 <__libc_init_array+0x44>)
 8008eb8:	f001 febe 	bl	800ac38 <_init>
 8008ebc:	1b64      	subs	r4, r4, r5
 8008ebe:	10a4      	asrs	r4, r4, #2
 8008ec0:	2600      	movs	r6, #0
 8008ec2:	42a6      	cmp	r6, r4
 8008ec4:	d105      	bne.n	8008ed2 <__libc_init_array+0x2e>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ecc:	4798      	blx	r3
 8008ece:	3601      	adds	r6, #1
 8008ed0:	e7ee      	b.n	8008eb0 <__libc_init_array+0xc>
 8008ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed6:	4798      	blx	r3
 8008ed8:	3601      	adds	r6, #1
 8008eda:	e7f2      	b.n	8008ec2 <__libc_init_array+0x1e>
 8008edc:	0800b018 	.word	0x0800b018
 8008ee0:	0800b018 	.word	0x0800b018
 8008ee4:	0800b018 	.word	0x0800b018
 8008ee8:	0800b020 	.word	0x0800b020

08008eec <__retarget_lock_init_recursive>:
 8008eec:	4770      	bx	lr

08008eee <__retarget_lock_acquire_recursive>:
 8008eee:	4770      	bx	lr

08008ef0 <__retarget_lock_release_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <quorem>:
 8008ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef6:	6903      	ldr	r3, [r0, #16]
 8008ef8:	690c      	ldr	r4, [r1, #16]
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	4607      	mov	r7, r0
 8008efe:	db7e      	blt.n	8008ffe <quorem+0x10c>
 8008f00:	3c01      	subs	r4, #1
 8008f02:	f101 0814 	add.w	r8, r1, #20
 8008f06:	00a3      	lsls	r3, r4, #2
 8008f08:	f100 0514 	add.w	r5, r0, #20
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f28:	d32e      	bcc.n	8008f88 <quorem+0x96>
 8008f2a:	f04f 0a00 	mov.w	sl, #0
 8008f2e:	46c4      	mov	ip, r8
 8008f30:	46ae      	mov	lr, r5
 8008f32:	46d3      	mov	fp, sl
 8008f34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f38:	b298      	uxth	r0, r3
 8008f3a:	fb06 a000 	mla	r0, r6, r0, sl
 8008f3e:	0c02      	lsrs	r2, r0, #16
 8008f40:	0c1b      	lsrs	r3, r3, #16
 8008f42:	fb06 2303 	mla	r3, r6, r3, r2
 8008f46:	f8de 2000 	ldr.w	r2, [lr]
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	1a12      	subs	r2, r2, r0
 8008f50:	445a      	add	r2, fp
 8008f52:	f8de 0000 	ldr.w	r0, [lr]
 8008f56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f64:	b292      	uxth	r2, r2
 8008f66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f6a:	45e1      	cmp	r9, ip
 8008f6c:	f84e 2b04 	str.w	r2, [lr], #4
 8008f70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f74:	d2de      	bcs.n	8008f34 <quorem+0x42>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	58eb      	ldr	r3, [r5, r3]
 8008f7a:	b92b      	cbnz	r3, 8008f88 <quorem+0x96>
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	3b04      	subs	r3, #4
 8008f80:	429d      	cmp	r5, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	d32f      	bcc.n	8008fe6 <quorem+0xf4>
 8008f86:	613c      	str	r4, [r7, #16]
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f001 f97b 	bl	800a284 <__mcmp>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	db25      	blt.n	8008fde <quorem+0xec>
 8008f92:	4629      	mov	r1, r5
 8008f94:	2000      	movs	r0, #0
 8008f96:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f9a:	f8d1 c000 	ldr.w	ip, [r1]
 8008f9e:	fa1f fe82 	uxth.w	lr, r2
 8008fa2:	fa1f f38c 	uxth.w	r3, ip
 8008fa6:	eba3 030e 	sub.w	r3, r3, lr
 8008faa:	4403      	add	r3, r0
 8008fac:	0c12      	lsrs	r2, r2, #16
 8008fae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008fb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fbc:	45c1      	cmp	r9, r8
 8008fbe:	f841 3b04 	str.w	r3, [r1], #4
 8008fc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fc6:	d2e6      	bcs.n	8008f96 <quorem+0xa4>
 8008fc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fd0:	b922      	cbnz	r2, 8008fdc <quorem+0xea>
 8008fd2:	3b04      	subs	r3, #4
 8008fd4:	429d      	cmp	r5, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	d30b      	bcc.n	8008ff2 <quorem+0x100>
 8008fda:	613c      	str	r4, [r7, #16]
 8008fdc:	3601      	adds	r6, #1
 8008fde:	4630      	mov	r0, r6
 8008fe0:	b003      	add	sp, #12
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	3b04      	subs	r3, #4
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	d1cb      	bne.n	8008f86 <quorem+0x94>
 8008fee:	3c01      	subs	r4, #1
 8008ff0:	e7c6      	b.n	8008f80 <quorem+0x8e>
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	3b04      	subs	r3, #4
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	d1ef      	bne.n	8008fda <quorem+0xe8>
 8008ffa:	3c01      	subs	r4, #1
 8008ffc:	e7ea      	b.n	8008fd4 <quorem+0xe2>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e7ee      	b.n	8008fe0 <quorem+0xee>
 8009002:	0000      	movs	r0, r0
 8009004:	0000      	movs	r0, r0
	...

08009008 <_dtoa_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	69c7      	ldr	r7, [r0, #28]
 800900e:	b099      	sub	sp, #100	@ 0x64
 8009010:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009014:	ec55 4b10 	vmov	r4, r5, d0
 8009018:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800901a:	9109      	str	r1, [sp, #36]	@ 0x24
 800901c:	4683      	mov	fp, r0
 800901e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009020:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009022:	b97f      	cbnz	r7, 8009044 <_dtoa_r+0x3c>
 8009024:	2010      	movs	r0, #16
 8009026:	f000 fdfd 	bl	8009c24 <malloc>
 800902a:	4602      	mov	r2, r0
 800902c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009030:	b920      	cbnz	r0, 800903c <_dtoa_r+0x34>
 8009032:	4ba7      	ldr	r3, [pc, #668]	@ (80092d0 <_dtoa_r+0x2c8>)
 8009034:	21ef      	movs	r1, #239	@ 0xef
 8009036:	48a7      	ldr	r0, [pc, #668]	@ (80092d4 <_dtoa_r+0x2cc>)
 8009038:	f001 faf6 	bl	800a628 <__assert_func>
 800903c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009040:	6007      	str	r7, [r0, #0]
 8009042:	60c7      	str	r7, [r0, #12]
 8009044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	b159      	cbz	r1, 8009064 <_dtoa_r+0x5c>
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	604a      	str	r2, [r1, #4]
 8009050:	2301      	movs	r3, #1
 8009052:	4093      	lsls	r3, r2
 8009054:	608b      	str	r3, [r1, #8]
 8009056:	4658      	mov	r0, fp
 8009058:	f000 feda 	bl	8009e10 <_Bfree>
 800905c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	1e2b      	subs	r3, r5, #0
 8009066:	bfb9      	ittee	lt
 8009068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800906c:	9303      	strlt	r3, [sp, #12]
 800906e:	2300      	movge	r3, #0
 8009070:	6033      	strge	r3, [r6, #0]
 8009072:	9f03      	ldr	r7, [sp, #12]
 8009074:	4b98      	ldr	r3, [pc, #608]	@ (80092d8 <_dtoa_r+0x2d0>)
 8009076:	bfbc      	itt	lt
 8009078:	2201      	movlt	r2, #1
 800907a:	6032      	strlt	r2, [r6, #0]
 800907c:	43bb      	bics	r3, r7
 800907e:	d112      	bne.n	80090a6 <_dtoa_r+0x9e>
 8009080:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009082:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800908c:	4323      	orrs	r3, r4
 800908e:	f000 854d 	beq.w	8009b2c <_dtoa_r+0xb24>
 8009092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009094:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80092ec <_dtoa_r+0x2e4>
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 854f 	beq.w	8009b3c <_dtoa_r+0xb34>
 800909e:	f10a 0303 	add.w	r3, sl, #3
 80090a2:	f000 bd49 	b.w	8009b38 <_dtoa_r+0xb30>
 80090a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	ec51 0b17 	vmov	r0, r1, d7
 80090b0:	2300      	movs	r3, #0
 80090b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80090b6:	f7f7 fd2f 	bl	8000b18 <__aeabi_dcmpeq>
 80090ba:	4680      	mov	r8, r0
 80090bc:	b158      	cbz	r0, 80090d6 <_dtoa_r+0xce>
 80090be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090c0:	2301      	movs	r3, #1
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090c6:	b113      	cbz	r3, 80090ce <_dtoa_r+0xc6>
 80090c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090ca:	4b84      	ldr	r3, [pc, #528]	@ (80092dc <_dtoa_r+0x2d4>)
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80092f0 <_dtoa_r+0x2e8>
 80090d2:	f000 bd33 	b.w	8009b3c <_dtoa_r+0xb34>
 80090d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090da:	aa16      	add	r2, sp, #88	@ 0x58
 80090dc:	a917      	add	r1, sp, #92	@ 0x5c
 80090de:	4658      	mov	r0, fp
 80090e0:	f001 f980 	bl	800a3e4 <__d2b>
 80090e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80090e8:	4681      	mov	r9, r0
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d077      	beq.n	80091de <_dtoa_r+0x1d6>
 80090ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80090f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009100:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009104:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009108:	4619      	mov	r1, r3
 800910a:	2200      	movs	r2, #0
 800910c:	4b74      	ldr	r3, [pc, #464]	@ (80092e0 <_dtoa_r+0x2d8>)
 800910e:	f7f7 f8e3 	bl	80002d8 <__aeabi_dsub>
 8009112:	a369      	add	r3, pc, #420	@ (adr r3, 80092b8 <_dtoa_r+0x2b0>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 fa96 	bl	8000648 <__aeabi_dmul>
 800911c:	a368      	add	r3, pc, #416	@ (adr r3, 80092c0 <_dtoa_r+0x2b8>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f7f7 f8db 	bl	80002dc <__adddf3>
 8009126:	4604      	mov	r4, r0
 8009128:	4630      	mov	r0, r6
 800912a:	460d      	mov	r5, r1
 800912c:	f7f7 fa22 	bl	8000574 <__aeabi_i2d>
 8009130:	a365      	add	r3, pc, #404	@ (adr r3, 80092c8 <_dtoa_r+0x2c0>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 fa87 	bl	8000648 <__aeabi_dmul>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 f8cb 	bl	80002dc <__adddf3>
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	f7f7 fd2d 	bl	8000ba8 <__aeabi_d2iz>
 800914e:	2200      	movs	r2, #0
 8009150:	4607      	mov	r7, r0
 8009152:	2300      	movs	r3, #0
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 fce8 	bl	8000b2c <__aeabi_dcmplt>
 800915c:	b140      	cbz	r0, 8009170 <_dtoa_r+0x168>
 800915e:	4638      	mov	r0, r7
 8009160:	f7f7 fa08 	bl	8000574 <__aeabi_i2d>
 8009164:	4622      	mov	r2, r4
 8009166:	462b      	mov	r3, r5
 8009168:	f7f7 fcd6 	bl	8000b18 <__aeabi_dcmpeq>
 800916c:	b900      	cbnz	r0, 8009170 <_dtoa_r+0x168>
 800916e:	3f01      	subs	r7, #1
 8009170:	2f16      	cmp	r7, #22
 8009172:	d851      	bhi.n	8009218 <_dtoa_r+0x210>
 8009174:	4b5b      	ldr	r3, [pc, #364]	@ (80092e4 <_dtoa_r+0x2dc>)
 8009176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009182:	f7f7 fcd3 	bl	8000b2c <__aeabi_dcmplt>
 8009186:	2800      	cmp	r0, #0
 8009188:	d048      	beq.n	800921c <_dtoa_r+0x214>
 800918a:	3f01      	subs	r7, #1
 800918c:	2300      	movs	r3, #0
 800918e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009192:	1b9b      	subs	r3, r3, r6
 8009194:	1e5a      	subs	r2, r3, #1
 8009196:	bf44      	itt	mi
 8009198:	f1c3 0801 	rsbmi	r8, r3, #1
 800919c:	2300      	movmi	r3, #0
 800919e:	9208      	str	r2, [sp, #32]
 80091a0:	bf54      	ite	pl
 80091a2:	f04f 0800 	movpl.w	r8, #0
 80091a6:	9308      	strmi	r3, [sp, #32]
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	db39      	blt.n	8009220 <_dtoa_r+0x218>
 80091ac:	9b08      	ldr	r3, [sp, #32]
 80091ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80091b0:	443b      	add	r3, r7
 80091b2:	9308      	str	r3, [sp, #32]
 80091b4:	2300      	movs	r3, #0
 80091b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ba:	2b09      	cmp	r3, #9
 80091bc:	d864      	bhi.n	8009288 <_dtoa_r+0x280>
 80091be:	2b05      	cmp	r3, #5
 80091c0:	bfc4      	itt	gt
 80091c2:	3b04      	subgt	r3, #4
 80091c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80091c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c8:	f1a3 0302 	sub.w	r3, r3, #2
 80091cc:	bfcc      	ite	gt
 80091ce:	2400      	movgt	r4, #0
 80091d0:	2401      	movle	r4, #1
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d863      	bhi.n	800929e <_dtoa_r+0x296>
 80091d6:	e8df f003 	tbb	[pc, r3]
 80091da:	372a      	.short	0x372a
 80091dc:	5535      	.short	0x5535
 80091de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80091e2:	441e      	add	r6, r3
 80091e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	bfc1      	itttt	gt
 80091ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091f0:	409f      	lslgt	r7, r3
 80091f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80091f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091fa:	bfd6      	itet	le
 80091fc:	f1c3 0320 	rsble	r3, r3, #32
 8009200:	ea47 0003 	orrgt.w	r0, r7, r3
 8009204:	fa04 f003 	lslle.w	r0, r4, r3
 8009208:	f7f7 f9a4 	bl	8000554 <__aeabi_ui2d>
 800920c:	2201      	movs	r2, #1
 800920e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009212:	3e01      	subs	r6, #1
 8009214:	9214      	str	r2, [sp, #80]	@ 0x50
 8009216:	e777      	b.n	8009108 <_dtoa_r+0x100>
 8009218:	2301      	movs	r3, #1
 800921a:	e7b8      	b.n	800918e <_dtoa_r+0x186>
 800921c:	9012      	str	r0, [sp, #72]	@ 0x48
 800921e:	e7b7      	b.n	8009190 <_dtoa_r+0x188>
 8009220:	427b      	negs	r3, r7
 8009222:	930a      	str	r3, [sp, #40]	@ 0x28
 8009224:	2300      	movs	r3, #0
 8009226:	eba8 0807 	sub.w	r8, r8, r7
 800922a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800922c:	e7c4      	b.n	80091b8 <_dtoa_r+0x1b0>
 800922e:	2300      	movs	r3, #0
 8009230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc35      	bgt.n	80092a4 <_dtoa_r+0x29c>
 8009238:	2301      	movs	r3, #1
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	461a      	mov	r2, r3
 8009240:	920e      	str	r2, [sp, #56]	@ 0x38
 8009242:	e00b      	b.n	800925c <_dtoa_r+0x254>
 8009244:	2301      	movs	r3, #1
 8009246:	e7f3      	b.n	8009230 <_dtoa_r+0x228>
 8009248:	2300      	movs	r3, #0
 800924a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800924c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800924e:	18fb      	adds	r3, r7, r3
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	9307      	str	r3, [sp, #28]
 8009258:	bfb8      	it	lt
 800925a:	2301      	movlt	r3, #1
 800925c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009260:	2100      	movs	r1, #0
 8009262:	2204      	movs	r2, #4
 8009264:	f102 0514 	add.w	r5, r2, #20
 8009268:	429d      	cmp	r5, r3
 800926a:	d91f      	bls.n	80092ac <_dtoa_r+0x2a4>
 800926c:	6041      	str	r1, [r0, #4]
 800926e:	4658      	mov	r0, fp
 8009270:	f000 fd8e 	bl	8009d90 <_Balloc>
 8009274:	4682      	mov	sl, r0
 8009276:	2800      	cmp	r0, #0
 8009278:	d13c      	bne.n	80092f4 <_dtoa_r+0x2ec>
 800927a:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <_dtoa_r+0x2e0>)
 800927c:	4602      	mov	r2, r0
 800927e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009282:	e6d8      	b.n	8009036 <_dtoa_r+0x2e>
 8009284:	2301      	movs	r3, #1
 8009286:	e7e0      	b.n	800924a <_dtoa_r+0x242>
 8009288:	2401      	movs	r4, #1
 800928a:	2300      	movs	r3, #0
 800928c:	9309      	str	r3, [sp, #36]	@ 0x24
 800928e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009290:	f04f 33ff 	mov.w	r3, #4294967295
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	9307      	str	r3, [sp, #28]
 8009298:	2200      	movs	r2, #0
 800929a:	2312      	movs	r3, #18
 800929c:	e7d0      	b.n	8009240 <_dtoa_r+0x238>
 800929e:	2301      	movs	r3, #1
 80092a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092a2:	e7f5      	b.n	8009290 <_dtoa_r+0x288>
 80092a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	9307      	str	r3, [sp, #28]
 80092aa:	e7d7      	b.n	800925c <_dtoa_r+0x254>
 80092ac:	3101      	adds	r1, #1
 80092ae:	0052      	lsls	r2, r2, #1
 80092b0:	e7d8      	b.n	8009264 <_dtoa_r+0x25c>
 80092b2:	bf00      	nop
 80092b4:	f3af 8000 	nop.w
 80092b8:	636f4361 	.word	0x636f4361
 80092bc:	3fd287a7 	.word	0x3fd287a7
 80092c0:	8b60c8b3 	.word	0x8b60c8b3
 80092c4:	3fc68a28 	.word	0x3fc68a28
 80092c8:	509f79fb 	.word	0x509f79fb
 80092cc:	3fd34413 	.word	0x3fd34413
 80092d0:	0800ace1 	.word	0x0800ace1
 80092d4:	0800acf8 	.word	0x0800acf8
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	0800acb1 	.word	0x0800acb1
 80092e0:	3ff80000 	.word	0x3ff80000
 80092e4:	0800adf0 	.word	0x0800adf0
 80092e8:	0800ad50 	.word	0x0800ad50
 80092ec:	0800acdd 	.word	0x0800acdd
 80092f0:	0800acb0 	.word	0x0800acb0
 80092f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092f8:	6018      	str	r0, [r3, #0]
 80092fa:	9b07      	ldr	r3, [sp, #28]
 80092fc:	2b0e      	cmp	r3, #14
 80092fe:	f200 80a4 	bhi.w	800944a <_dtoa_r+0x442>
 8009302:	2c00      	cmp	r4, #0
 8009304:	f000 80a1 	beq.w	800944a <_dtoa_r+0x442>
 8009308:	2f00      	cmp	r7, #0
 800930a:	dd33      	ble.n	8009374 <_dtoa_r+0x36c>
 800930c:	4bad      	ldr	r3, [pc, #692]	@ (80095c4 <_dtoa_r+0x5bc>)
 800930e:	f007 020f 	and.w	r2, r7, #15
 8009312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009316:	ed93 7b00 	vldr	d7, [r3]
 800931a:	05f8      	lsls	r0, r7, #23
 800931c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009320:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009324:	d516      	bpl.n	8009354 <_dtoa_r+0x34c>
 8009326:	4ba8      	ldr	r3, [pc, #672]	@ (80095c8 <_dtoa_r+0x5c0>)
 8009328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800932c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009330:	f7f7 fab4 	bl	800089c <__aeabi_ddiv>
 8009334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009338:	f004 040f 	and.w	r4, r4, #15
 800933c:	2603      	movs	r6, #3
 800933e:	4da2      	ldr	r5, [pc, #648]	@ (80095c8 <_dtoa_r+0x5c0>)
 8009340:	b954      	cbnz	r4, 8009358 <_dtoa_r+0x350>
 8009342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800934a:	f7f7 faa7 	bl	800089c <__aeabi_ddiv>
 800934e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009352:	e028      	b.n	80093a6 <_dtoa_r+0x39e>
 8009354:	2602      	movs	r6, #2
 8009356:	e7f2      	b.n	800933e <_dtoa_r+0x336>
 8009358:	07e1      	lsls	r1, r4, #31
 800935a:	d508      	bpl.n	800936e <_dtoa_r+0x366>
 800935c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009364:	f7f7 f970 	bl	8000648 <__aeabi_dmul>
 8009368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800936c:	3601      	adds	r6, #1
 800936e:	1064      	asrs	r4, r4, #1
 8009370:	3508      	adds	r5, #8
 8009372:	e7e5      	b.n	8009340 <_dtoa_r+0x338>
 8009374:	f000 80d2 	beq.w	800951c <_dtoa_r+0x514>
 8009378:	427c      	negs	r4, r7
 800937a:	4b92      	ldr	r3, [pc, #584]	@ (80095c4 <_dtoa_r+0x5bc>)
 800937c:	4d92      	ldr	r5, [pc, #584]	@ (80095c8 <_dtoa_r+0x5c0>)
 800937e:	f004 020f 	and.w	r2, r4, #15
 8009382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800938e:	f7f7 f95b 	bl	8000648 <__aeabi_dmul>
 8009392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009396:	1124      	asrs	r4, r4, #4
 8009398:	2300      	movs	r3, #0
 800939a:	2602      	movs	r6, #2
 800939c:	2c00      	cmp	r4, #0
 800939e:	f040 80b2 	bne.w	8009506 <_dtoa_r+0x4fe>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1d3      	bne.n	800934e <_dtoa_r+0x346>
 80093a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 80b7 	beq.w	8009520 <_dtoa_r+0x518>
 80093b2:	4b86      	ldr	r3, [pc, #536]	@ (80095cc <_dtoa_r+0x5c4>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f7 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f000 80ae 	beq.w	8009520 <_dtoa_r+0x518>
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 80aa 	beq.w	8009520 <_dtoa_r+0x518>
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dd37      	ble.n	8009442 <_dtoa_r+0x43a>
 80093d2:	1e7b      	subs	r3, r7, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	4620      	mov	r0, r4
 80093d8:	4b7d      	ldr	r3, [pc, #500]	@ (80095d0 <_dtoa_r+0x5c8>)
 80093da:	2200      	movs	r2, #0
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f7 f933 	bl	8000648 <__aeabi_dmul>
 80093e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e6:	9c00      	ldr	r4, [sp, #0]
 80093e8:	3601      	adds	r6, #1
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7f7 f8c2 	bl	8000574 <__aeabi_i2d>
 80093f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f4:	f7f7 f928 	bl	8000648 <__aeabi_dmul>
 80093f8:	4b76      	ldr	r3, [pc, #472]	@ (80095d4 <_dtoa_r+0x5cc>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f6 ff6e 	bl	80002dc <__adddf3>
 8009400:	4605      	mov	r5, r0
 8009402:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009406:	2c00      	cmp	r4, #0
 8009408:	f040 808d 	bne.w	8009526 <_dtoa_r+0x51e>
 800940c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009410:	4b71      	ldr	r3, [pc, #452]	@ (80095d8 <_dtoa_r+0x5d0>)
 8009412:	2200      	movs	r2, #0
 8009414:	f7f6 ff60 	bl	80002d8 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009420:	462a      	mov	r2, r5
 8009422:	4633      	mov	r3, r6
 8009424:	f7f7 fba0 	bl	8000b68 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f040 828b 	bne.w	8009944 <_dtoa_r+0x93c>
 800942e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009432:	462a      	mov	r2, r5
 8009434:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009438:	f7f7 fb78 	bl	8000b2c <__aeabi_dcmplt>
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 8128 	bne.w	8009692 <_dtoa_r+0x68a>
 8009442:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800944a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f2c0 815a 	blt.w	8009706 <_dtoa_r+0x6fe>
 8009452:	2f0e      	cmp	r7, #14
 8009454:	f300 8157 	bgt.w	8009706 <_dtoa_r+0x6fe>
 8009458:	4b5a      	ldr	r3, [pc, #360]	@ (80095c4 <_dtoa_r+0x5bc>)
 800945a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800945e:	ed93 7b00 	vldr	d7, [r3]
 8009462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	ed8d 7b00 	vstr	d7, [sp]
 800946a:	da03      	bge.n	8009474 <_dtoa_r+0x46c>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f340 8101 	ble.w	8009676 <_dtoa_r+0x66e>
 8009474:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009478:	4656      	mov	r6, sl
 800947a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f7 fa0b 	bl	800089c <__aeabi_ddiv>
 8009486:	f7f7 fb8f 	bl	8000ba8 <__aeabi_d2iz>
 800948a:	4680      	mov	r8, r0
 800948c:	f7f7 f872 	bl	8000574 <__aeabi_i2d>
 8009490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009494:	f7f7 f8d8 	bl	8000648 <__aeabi_dmul>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094a4:	f7f6 ff18 	bl	80002d8 <__aeabi_dsub>
 80094a8:	f806 4b01 	strb.w	r4, [r6], #1
 80094ac:	9d07      	ldr	r5, [sp, #28]
 80094ae:	eba6 040a 	sub.w	r4, r6, sl
 80094b2:	42a5      	cmp	r5, r4
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	f040 8117 	bne.w	80096ea <_dtoa_r+0x6e2>
 80094bc:	f7f6 ff0e 	bl	80002dc <__adddf3>
 80094c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	f7f7 fb4e 	bl	8000b68 <__aeabi_dcmpgt>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	f040 80f9 	bne.w	80096c4 <_dtoa_r+0x6bc>
 80094d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 80094de:	b118      	cbz	r0, 80094e8 <_dtoa_r+0x4e0>
 80094e0:	f018 0f01 	tst.w	r8, #1
 80094e4:	f040 80ee 	bne.w	80096c4 <_dtoa_r+0x6bc>
 80094e8:	4649      	mov	r1, r9
 80094ea:	4658      	mov	r0, fp
 80094ec:	f000 fc90 	bl	8009e10 <_Bfree>
 80094f0:	2300      	movs	r3, #0
 80094f2:	7033      	strb	r3, [r6, #0]
 80094f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094f6:	3701      	adds	r7, #1
 80094f8:	601f      	str	r7, [r3, #0]
 80094fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 831d 	beq.w	8009b3c <_dtoa_r+0xb34>
 8009502:	601e      	str	r6, [r3, #0]
 8009504:	e31a      	b.n	8009b3c <_dtoa_r+0xb34>
 8009506:	07e2      	lsls	r2, r4, #31
 8009508:	d505      	bpl.n	8009516 <_dtoa_r+0x50e>
 800950a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800950e:	f7f7 f89b 	bl	8000648 <__aeabi_dmul>
 8009512:	3601      	adds	r6, #1
 8009514:	2301      	movs	r3, #1
 8009516:	1064      	asrs	r4, r4, #1
 8009518:	3508      	adds	r5, #8
 800951a:	e73f      	b.n	800939c <_dtoa_r+0x394>
 800951c:	2602      	movs	r6, #2
 800951e:	e742      	b.n	80093a6 <_dtoa_r+0x39e>
 8009520:	9c07      	ldr	r4, [sp, #28]
 8009522:	9704      	str	r7, [sp, #16]
 8009524:	e761      	b.n	80093ea <_dtoa_r+0x3e2>
 8009526:	4b27      	ldr	r3, [pc, #156]	@ (80095c4 <_dtoa_r+0x5bc>)
 8009528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800952a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800952e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009532:	4454      	add	r4, sl
 8009534:	2900      	cmp	r1, #0
 8009536:	d053      	beq.n	80095e0 <_dtoa_r+0x5d8>
 8009538:	4928      	ldr	r1, [pc, #160]	@ (80095dc <_dtoa_r+0x5d4>)
 800953a:	2000      	movs	r0, #0
 800953c:	f7f7 f9ae 	bl	800089c <__aeabi_ddiv>
 8009540:	4633      	mov	r3, r6
 8009542:	462a      	mov	r2, r5
 8009544:	f7f6 fec8 	bl	80002d8 <__aeabi_dsub>
 8009548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800954c:	4656      	mov	r6, sl
 800954e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009552:	f7f7 fb29 	bl	8000ba8 <__aeabi_d2iz>
 8009556:	4605      	mov	r5, r0
 8009558:	f7f7 f80c 	bl	8000574 <__aeabi_i2d>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009564:	f7f6 feb8 	bl	80002d8 <__aeabi_dsub>
 8009568:	3530      	adds	r5, #48	@ 0x30
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009572:	f806 5b01 	strb.w	r5, [r6], #1
 8009576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800957a:	f7f7 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	d171      	bne.n	8009666 <_dtoa_r+0x65e>
 8009582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009586:	4911      	ldr	r1, [pc, #68]	@ (80095cc <_dtoa_r+0x5c4>)
 8009588:	2000      	movs	r0, #0
 800958a:	f7f6 fea5 	bl	80002d8 <__aeabi_dsub>
 800958e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009592:	f7f7 facb 	bl	8000b2c <__aeabi_dcmplt>
 8009596:	2800      	cmp	r0, #0
 8009598:	f040 8095 	bne.w	80096c6 <_dtoa_r+0x6be>
 800959c:	42a6      	cmp	r6, r4
 800959e:	f43f af50 	beq.w	8009442 <_dtoa_r+0x43a>
 80095a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095a6:	4b0a      	ldr	r3, [pc, #40]	@ (80095d0 <_dtoa_r+0x5c8>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	f7f7 f84d 	bl	8000648 <__aeabi_dmul>
 80095ae:	4b08      	ldr	r3, [pc, #32]	@ (80095d0 <_dtoa_r+0x5c8>)
 80095b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095b4:	2200      	movs	r2, #0
 80095b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ba:	f7f7 f845 	bl	8000648 <__aeabi_dmul>
 80095be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c2:	e7c4      	b.n	800954e <_dtoa_r+0x546>
 80095c4:	0800adf0 	.word	0x0800adf0
 80095c8:	0800adc8 	.word	0x0800adc8
 80095cc:	3ff00000 	.word	0x3ff00000
 80095d0:	40240000 	.word	0x40240000
 80095d4:	401c0000 	.word	0x401c0000
 80095d8:	40140000 	.word	0x40140000
 80095dc:	3fe00000 	.word	0x3fe00000
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7f7 f830 	bl	8000648 <__aeabi_dmul>
 80095e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80095ee:	4656      	mov	r6, sl
 80095f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f4:	f7f7 fad8 	bl	8000ba8 <__aeabi_d2iz>
 80095f8:	4605      	mov	r5, r0
 80095fa:	f7f6 ffbb 	bl	8000574 <__aeabi_i2d>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009606:	f7f6 fe67 	bl	80002d8 <__aeabi_dsub>
 800960a:	3530      	adds	r5, #48	@ 0x30
 800960c:	f806 5b01 	strb.w	r5, [r6], #1
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	42a6      	cmp	r6, r4
 8009616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	d124      	bne.n	800966a <_dtoa_r+0x662>
 8009620:	4bac      	ldr	r3, [pc, #688]	@ (80098d4 <_dtoa_r+0x8cc>)
 8009622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009626:	f7f6 fe59 	bl	80002dc <__adddf3>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009632:	f7f7 fa99 	bl	8000b68 <__aeabi_dcmpgt>
 8009636:	2800      	cmp	r0, #0
 8009638:	d145      	bne.n	80096c6 <_dtoa_r+0x6be>
 800963a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800963e:	49a5      	ldr	r1, [pc, #660]	@ (80098d4 <_dtoa_r+0x8cc>)
 8009640:	2000      	movs	r0, #0
 8009642:	f7f6 fe49 	bl	80002d8 <__aeabi_dsub>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964e:	f7f7 fa6d 	bl	8000b2c <__aeabi_dcmplt>
 8009652:	2800      	cmp	r0, #0
 8009654:	f43f aef5 	beq.w	8009442 <_dtoa_r+0x43a>
 8009658:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800965a:	1e73      	subs	r3, r6, #1
 800965c:	9315      	str	r3, [sp, #84]	@ 0x54
 800965e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009662:	2b30      	cmp	r3, #48	@ 0x30
 8009664:	d0f8      	beq.n	8009658 <_dtoa_r+0x650>
 8009666:	9f04      	ldr	r7, [sp, #16]
 8009668:	e73e      	b.n	80094e8 <_dtoa_r+0x4e0>
 800966a:	4b9b      	ldr	r3, [pc, #620]	@ (80098d8 <_dtoa_r+0x8d0>)
 800966c:	f7f6 ffec 	bl	8000648 <__aeabi_dmul>
 8009670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009674:	e7bc      	b.n	80095f0 <_dtoa_r+0x5e8>
 8009676:	d10c      	bne.n	8009692 <_dtoa_r+0x68a>
 8009678:	4b98      	ldr	r3, [pc, #608]	@ (80098dc <_dtoa_r+0x8d4>)
 800967a:	2200      	movs	r2, #0
 800967c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009680:	f7f6 ffe2 	bl	8000648 <__aeabi_dmul>
 8009684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009688:	f7f7 fa64 	bl	8000b54 <__aeabi_dcmpge>
 800968c:	2800      	cmp	r0, #0
 800968e:	f000 8157 	beq.w	8009940 <_dtoa_r+0x938>
 8009692:	2400      	movs	r4, #0
 8009694:	4625      	mov	r5, r4
 8009696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009698:	43db      	mvns	r3, r3
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	4656      	mov	r6, sl
 800969e:	2700      	movs	r7, #0
 80096a0:	4621      	mov	r1, r4
 80096a2:	4658      	mov	r0, fp
 80096a4:	f000 fbb4 	bl	8009e10 <_Bfree>
 80096a8:	2d00      	cmp	r5, #0
 80096aa:	d0dc      	beq.n	8009666 <_dtoa_r+0x65e>
 80096ac:	b12f      	cbz	r7, 80096ba <_dtoa_r+0x6b2>
 80096ae:	42af      	cmp	r7, r5
 80096b0:	d003      	beq.n	80096ba <_dtoa_r+0x6b2>
 80096b2:	4639      	mov	r1, r7
 80096b4:	4658      	mov	r0, fp
 80096b6:	f000 fbab 	bl	8009e10 <_Bfree>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fba7 	bl	8009e10 <_Bfree>
 80096c2:	e7d0      	b.n	8009666 <_dtoa_r+0x65e>
 80096c4:	9704      	str	r7, [sp, #16]
 80096c6:	4633      	mov	r3, r6
 80096c8:	461e      	mov	r6, r3
 80096ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ce:	2a39      	cmp	r2, #57	@ 0x39
 80096d0:	d107      	bne.n	80096e2 <_dtoa_r+0x6da>
 80096d2:	459a      	cmp	sl, r3
 80096d4:	d1f8      	bne.n	80096c8 <_dtoa_r+0x6c0>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	3201      	adds	r2, #1
 80096da:	9204      	str	r2, [sp, #16]
 80096dc:	2230      	movs	r2, #48	@ 0x30
 80096de:	f88a 2000 	strb.w	r2, [sl]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e7bd      	b.n	8009666 <_dtoa_r+0x65e>
 80096ea:	4b7b      	ldr	r3, [pc, #492]	@ (80098d8 <_dtoa_r+0x8d0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	f7f6 ffab 	bl	8000648 <__aeabi_dmul>
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	f7f7 fa0d 	bl	8000b18 <__aeabi_dcmpeq>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f aebb 	beq.w	800947a <_dtoa_r+0x472>
 8009704:	e6f0      	b.n	80094e8 <_dtoa_r+0x4e0>
 8009706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009708:	2a00      	cmp	r2, #0
 800970a:	f000 80db 	beq.w	80098c4 <_dtoa_r+0x8bc>
 800970e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009710:	2a01      	cmp	r2, #1
 8009712:	f300 80bf 	bgt.w	8009894 <_dtoa_r+0x88c>
 8009716:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009718:	2a00      	cmp	r2, #0
 800971a:	f000 80b7 	beq.w	800988c <_dtoa_r+0x884>
 800971e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009722:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009724:	4646      	mov	r6, r8
 8009726:	9a08      	ldr	r2, [sp, #32]
 8009728:	2101      	movs	r1, #1
 800972a:	441a      	add	r2, r3
 800972c:	4658      	mov	r0, fp
 800972e:	4498      	add	r8, r3
 8009730:	9208      	str	r2, [sp, #32]
 8009732:	f000 fc21 	bl	8009f78 <__i2b>
 8009736:	4605      	mov	r5, r0
 8009738:	b15e      	cbz	r6, 8009752 <_dtoa_r+0x74a>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd08      	ble.n	8009752 <_dtoa_r+0x74a>
 8009740:	42b3      	cmp	r3, r6
 8009742:	9a08      	ldr	r2, [sp, #32]
 8009744:	bfa8      	it	ge
 8009746:	4633      	movge	r3, r6
 8009748:	eba8 0803 	sub.w	r8, r8, r3
 800974c:	1af6      	subs	r6, r6, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009754:	b1f3      	cbz	r3, 8009794 <_dtoa_r+0x78c>
 8009756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 80b7 	beq.w	80098cc <_dtoa_r+0x8c4>
 800975e:	b18c      	cbz	r4, 8009784 <_dtoa_r+0x77c>
 8009760:	4629      	mov	r1, r5
 8009762:	4622      	mov	r2, r4
 8009764:	4658      	mov	r0, fp
 8009766:	f000 fcc7 	bl	800a0f8 <__pow5mult>
 800976a:	464a      	mov	r2, r9
 800976c:	4601      	mov	r1, r0
 800976e:	4605      	mov	r5, r0
 8009770:	4658      	mov	r0, fp
 8009772:	f000 fc17 	bl	8009fa4 <__multiply>
 8009776:	4649      	mov	r1, r9
 8009778:	9004      	str	r0, [sp, #16]
 800977a:	4658      	mov	r0, fp
 800977c:	f000 fb48 	bl	8009e10 <_Bfree>
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	4699      	mov	r9, r3
 8009784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009786:	1b1a      	subs	r2, r3, r4
 8009788:	d004      	beq.n	8009794 <_dtoa_r+0x78c>
 800978a:	4649      	mov	r1, r9
 800978c:	4658      	mov	r0, fp
 800978e:	f000 fcb3 	bl	800a0f8 <__pow5mult>
 8009792:	4681      	mov	r9, r0
 8009794:	2101      	movs	r1, #1
 8009796:	4658      	mov	r0, fp
 8009798:	f000 fbee 	bl	8009f78 <__i2b>
 800979c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979e:	4604      	mov	r4, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 81cf 	beq.w	8009b44 <_dtoa_r+0xb3c>
 80097a6:	461a      	mov	r2, r3
 80097a8:	4601      	mov	r1, r0
 80097aa:	4658      	mov	r0, fp
 80097ac:	f000 fca4 	bl	800a0f8 <__pow5mult>
 80097b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	4604      	mov	r4, r0
 80097b6:	f300 8095 	bgt.w	80098e4 <_dtoa_r+0x8dc>
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8087 	bne.w	80098d0 <_dtoa_r+0x8c8>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f040 8089 	bne.w	80098e0 <_dtoa_r+0x8d8>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097d4:	0d1b      	lsrs	r3, r3, #20
 80097d6:	051b      	lsls	r3, r3, #20
 80097d8:	b12b      	cbz	r3, 80097e6 <_dtoa_r+0x7de>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	3301      	adds	r3, #1
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	f108 0801 	add.w	r8, r8, #1
 80097e4:	2301      	movs	r3, #1
 80097e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 81b0 	beq.w	8009b50 <_dtoa_r+0xb48>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097f6:	6918      	ldr	r0, [r3, #16]
 80097f8:	f000 fb72 	bl	8009ee0 <__hi0bits>
 80097fc:	f1c0 0020 	rsb	r0, r0, #32
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	4418      	add	r0, r3
 8009804:	f010 001f 	ands.w	r0, r0, #31
 8009808:	d077      	beq.n	80098fa <_dtoa_r+0x8f2>
 800980a:	f1c0 0320 	rsb	r3, r0, #32
 800980e:	2b04      	cmp	r3, #4
 8009810:	dd6b      	ble.n	80098ea <_dtoa_r+0x8e2>
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	f1c0 001c 	rsb	r0, r0, #28
 8009818:	4403      	add	r3, r0
 800981a:	4480      	add	r8, r0
 800981c:	4406      	add	r6, r0
 800981e:	9308      	str	r3, [sp, #32]
 8009820:	f1b8 0f00 	cmp.w	r8, #0
 8009824:	dd05      	ble.n	8009832 <_dtoa_r+0x82a>
 8009826:	4649      	mov	r1, r9
 8009828:	4642      	mov	r2, r8
 800982a:	4658      	mov	r0, fp
 800982c:	f000 fcbe 	bl	800a1ac <__lshift>
 8009830:	4681      	mov	r9, r0
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd05      	ble.n	8009844 <_dtoa_r+0x83c>
 8009838:	4621      	mov	r1, r4
 800983a:	461a      	mov	r2, r3
 800983c:	4658      	mov	r0, fp
 800983e:	f000 fcb5 	bl	800a1ac <__lshift>
 8009842:	4604      	mov	r4, r0
 8009844:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009846:	2b00      	cmp	r3, #0
 8009848:	d059      	beq.n	80098fe <_dtoa_r+0x8f6>
 800984a:	4621      	mov	r1, r4
 800984c:	4648      	mov	r0, r9
 800984e:	f000 fd19 	bl	800a284 <__mcmp>
 8009852:	2800      	cmp	r0, #0
 8009854:	da53      	bge.n	80098fe <_dtoa_r+0x8f6>
 8009856:	1e7b      	subs	r3, r7, #1
 8009858:	9304      	str	r3, [sp, #16]
 800985a:	4649      	mov	r1, r9
 800985c:	2300      	movs	r3, #0
 800985e:	220a      	movs	r2, #10
 8009860:	4658      	mov	r0, fp
 8009862:	f000 faf7 	bl	8009e54 <__multadd>
 8009866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009868:	4681      	mov	r9, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 8172 	beq.w	8009b54 <_dtoa_r+0xb4c>
 8009870:	2300      	movs	r3, #0
 8009872:	4629      	mov	r1, r5
 8009874:	220a      	movs	r2, #10
 8009876:	4658      	mov	r0, fp
 8009878:	f000 faec 	bl	8009e54 <__multadd>
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	4605      	mov	r5, r0
 8009882:	dc67      	bgt.n	8009954 <_dtoa_r+0x94c>
 8009884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009886:	2b02      	cmp	r3, #2
 8009888:	dc41      	bgt.n	800990e <_dtoa_r+0x906>
 800988a:	e063      	b.n	8009954 <_dtoa_r+0x94c>
 800988c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800988e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009892:	e746      	b.n	8009722 <_dtoa_r+0x71a>
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	1e5c      	subs	r4, r3, #1
 8009898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800989a:	42a3      	cmp	r3, r4
 800989c:	bfbf      	itttt	lt
 800989e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80098a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80098a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80098a4:	1ae3      	sublt	r3, r4, r3
 80098a6:	bfb4      	ite	lt
 80098a8:	18d2      	addlt	r2, r2, r3
 80098aa:	1b1c      	subge	r4, r3, r4
 80098ac:	9b07      	ldr	r3, [sp, #28]
 80098ae:	bfbc      	itt	lt
 80098b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80098b2:	2400      	movlt	r4, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfb5      	itete	lt
 80098b8:	eba8 0603 	sublt.w	r6, r8, r3
 80098bc:	9b07      	ldrge	r3, [sp, #28]
 80098be:	2300      	movlt	r3, #0
 80098c0:	4646      	movge	r6, r8
 80098c2:	e730      	b.n	8009726 <_dtoa_r+0x71e>
 80098c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80098c8:	4646      	mov	r6, r8
 80098ca:	e735      	b.n	8009738 <_dtoa_r+0x730>
 80098cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098ce:	e75c      	b.n	800978a <_dtoa_r+0x782>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e788      	b.n	80097e6 <_dtoa_r+0x7de>
 80098d4:	3fe00000 	.word	0x3fe00000
 80098d8:	40240000 	.word	0x40240000
 80098dc:	40140000 	.word	0x40140000
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	e780      	b.n	80097e6 <_dtoa_r+0x7de>
 80098e4:	2300      	movs	r3, #0
 80098e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098e8:	e782      	b.n	80097f0 <_dtoa_r+0x7e8>
 80098ea:	d099      	beq.n	8009820 <_dtoa_r+0x818>
 80098ec:	9a08      	ldr	r2, [sp, #32]
 80098ee:	331c      	adds	r3, #28
 80098f0:	441a      	add	r2, r3
 80098f2:	4498      	add	r8, r3
 80098f4:	441e      	add	r6, r3
 80098f6:	9208      	str	r2, [sp, #32]
 80098f8:	e792      	b.n	8009820 <_dtoa_r+0x818>
 80098fa:	4603      	mov	r3, r0
 80098fc:	e7f6      	b.n	80098ec <_dtoa_r+0x8e4>
 80098fe:	9b07      	ldr	r3, [sp, #28]
 8009900:	9704      	str	r7, [sp, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dc20      	bgt.n	8009948 <_dtoa_r+0x940>
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800990a:	2b02      	cmp	r3, #2
 800990c:	dd1e      	ble.n	800994c <_dtoa_r+0x944>
 800990e:	9b00      	ldr	r3, [sp, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f47f aec0 	bne.w	8009696 <_dtoa_r+0x68e>
 8009916:	4621      	mov	r1, r4
 8009918:	2205      	movs	r2, #5
 800991a:	4658      	mov	r0, fp
 800991c:	f000 fa9a 	bl	8009e54 <__multadd>
 8009920:	4601      	mov	r1, r0
 8009922:	4604      	mov	r4, r0
 8009924:	4648      	mov	r0, r9
 8009926:	f000 fcad 	bl	800a284 <__mcmp>
 800992a:	2800      	cmp	r0, #0
 800992c:	f77f aeb3 	ble.w	8009696 <_dtoa_r+0x68e>
 8009930:	4656      	mov	r6, sl
 8009932:	2331      	movs	r3, #49	@ 0x31
 8009934:	f806 3b01 	strb.w	r3, [r6], #1
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	3301      	adds	r3, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	e6ae      	b.n	800969e <_dtoa_r+0x696>
 8009940:	9c07      	ldr	r4, [sp, #28]
 8009942:	9704      	str	r7, [sp, #16]
 8009944:	4625      	mov	r5, r4
 8009946:	e7f3      	b.n	8009930 <_dtoa_r+0x928>
 8009948:	9b07      	ldr	r3, [sp, #28]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8104 	beq.w	8009b5c <_dtoa_r+0xb54>
 8009954:	2e00      	cmp	r6, #0
 8009956:	dd05      	ble.n	8009964 <_dtoa_r+0x95c>
 8009958:	4629      	mov	r1, r5
 800995a:	4632      	mov	r2, r6
 800995c:	4658      	mov	r0, fp
 800995e:	f000 fc25 	bl	800a1ac <__lshift>
 8009962:	4605      	mov	r5, r0
 8009964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	d05a      	beq.n	8009a20 <_dtoa_r+0xa18>
 800996a:	6869      	ldr	r1, [r5, #4]
 800996c:	4658      	mov	r0, fp
 800996e:	f000 fa0f 	bl	8009d90 <_Balloc>
 8009972:	4606      	mov	r6, r0
 8009974:	b928      	cbnz	r0, 8009982 <_dtoa_r+0x97a>
 8009976:	4b84      	ldr	r3, [pc, #528]	@ (8009b88 <_dtoa_r+0xb80>)
 8009978:	4602      	mov	r2, r0
 800997a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800997e:	f7ff bb5a 	b.w	8009036 <_dtoa_r+0x2e>
 8009982:	692a      	ldr	r2, [r5, #16]
 8009984:	3202      	adds	r2, #2
 8009986:	0092      	lsls	r2, r2, #2
 8009988:	f105 010c 	add.w	r1, r5, #12
 800998c:	300c      	adds	r0, #12
 800998e:	f000 fe3d 	bl	800a60c <memcpy>
 8009992:	2201      	movs	r2, #1
 8009994:	4631      	mov	r1, r6
 8009996:	4658      	mov	r0, fp
 8009998:	f000 fc08 	bl	800a1ac <__lshift>
 800999c:	f10a 0301 	add.w	r3, sl, #1
 80099a0:	9307      	str	r3, [sp, #28]
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	4453      	add	r3, sl
 80099a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	462f      	mov	r7, r5
 80099b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099b2:	4605      	mov	r5, r0
 80099b4:	9b07      	ldr	r3, [sp, #28]
 80099b6:	4621      	mov	r1, r4
 80099b8:	3b01      	subs	r3, #1
 80099ba:	4648      	mov	r0, r9
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	f7ff fa98 	bl	8008ef2 <quorem>
 80099c2:	4639      	mov	r1, r7
 80099c4:	9002      	str	r0, [sp, #8]
 80099c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099ca:	4648      	mov	r0, r9
 80099cc:	f000 fc5a 	bl	800a284 <__mcmp>
 80099d0:	462a      	mov	r2, r5
 80099d2:	9008      	str	r0, [sp, #32]
 80099d4:	4621      	mov	r1, r4
 80099d6:	4658      	mov	r0, fp
 80099d8:	f000 fc70 	bl	800a2bc <__mdiff>
 80099dc:	68c2      	ldr	r2, [r0, #12]
 80099de:	4606      	mov	r6, r0
 80099e0:	bb02      	cbnz	r2, 8009a24 <_dtoa_r+0xa1c>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4648      	mov	r0, r9
 80099e6:	f000 fc4d 	bl	800a284 <__mcmp>
 80099ea:	4602      	mov	r2, r0
 80099ec:	4631      	mov	r1, r6
 80099ee:	4658      	mov	r0, fp
 80099f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80099f2:	f000 fa0d 	bl	8009e10 <_Bfree>
 80099f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099fa:	9e07      	ldr	r6, [sp, #28]
 80099fc:	ea43 0102 	orr.w	r1, r3, r2
 8009a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a02:	4319      	orrs	r1, r3
 8009a04:	d110      	bne.n	8009a28 <_dtoa_r+0xa20>
 8009a06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a0a:	d029      	beq.n	8009a60 <_dtoa_r+0xa58>
 8009a0c:	9b08      	ldr	r3, [sp, #32]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	dd02      	ble.n	8009a18 <_dtoa_r+0xa10>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a18:	9b00      	ldr	r3, [sp, #0]
 8009a1a:	f883 8000 	strb.w	r8, [r3]
 8009a1e:	e63f      	b.n	80096a0 <_dtoa_r+0x698>
 8009a20:	4628      	mov	r0, r5
 8009a22:	e7bb      	b.n	800999c <_dtoa_r+0x994>
 8009a24:	2201      	movs	r2, #1
 8009a26:	e7e1      	b.n	80099ec <_dtoa_r+0x9e4>
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	db04      	blt.n	8009a38 <_dtoa_r+0xa30>
 8009a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a30:	430b      	orrs	r3, r1
 8009a32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a34:	430b      	orrs	r3, r1
 8009a36:	d120      	bne.n	8009a7a <_dtoa_r+0xa72>
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	dded      	ble.n	8009a18 <_dtoa_r+0xa10>
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	2201      	movs	r2, #1
 8009a40:	4658      	mov	r0, fp
 8009a42:	f000 fbb3 	bl	800a1ac <__lshift>
 8009a46:	4621      	mov	r1, r4
 8009a48:	4681      	mov	r9, r0
 8009a4a:	f000 fc1b 	bl	800a284 <__mcmp>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	dc03      	bgt.n	8009a5a <_dtoa_r+0xa52>
 8009a52:	d1e1      	bne.n	8009a18 <_dtoa_r+0xa10>
 8009a54:	f018 0f01 	tst.w	r8, #1
 8009a58:	d0de      	beq.n	8009a18 <_dtoa_r+0xa10>
 8009a5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a5e:	d1d8      	bne.n	8009a12 <_dtoa_r+0xa0a>
 8009a60:	9a00      	ldr	r2, [sp, #0]
 8009a62:	2339      	movs	r3, #57	@ 0x39
 8009a64:	7013      	strb	r3, [r2, #0]
 8009a66:	4633      	mov	r3, r6
 8009a68:	461e      	mov	r6, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a70:	2a39      	cmp	r2, #57	@ 0x39
 8009a72:	d052      	beq.n	8009b1a <_dtoa_r+0xb12>
 8009a74:	3201      	adds	r2, #1
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	e612      	b.n	80096a0 <_dtoa_r+0x698>
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	dd07      	ble.n	8009a8e <_dtoa_r+0xa86>
 8009a7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a82:	d0ed      	beq.n	8009a60 <_dtoa_r+0xa58>
 8009a84:	9a00      	ldr	r2, [sp, #0]
 8009a86:	f108 0301 	add.w	r3, r8, #1
 8009a8a:	7013      	strb	r3, [r2, #0]
 8009a8c:	e608      	b.n	80096a0 <_dtoa_r+0x698>
 8009a8e:	9b07      	ldr	r3, [sp, #28]
 8009a90:	9a07      	ldr	r2, [sp, #28]
 8009a92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d028      	beq.n	8009aee <_dtoa_r+0xae6>
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	f000 f9d6 	bl	8009e54 <__multadd>
 8009aa8:	42af      	cmp	r7, r5
 8009aaa:	4681      	mov	r9, r0
 8009aac:	f04f 0300 	mov.w	r3, #0
 8009ab0:	f04f 020a 	mov.w	r2, #10
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	d107      	bne.n	8009aca <_dtoa_r+0xac2>
 8009aba:	f000 f9cb 	bl	8009e54 <__multadd>
 8009abe:	4607      	mov	r7, r0
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	9b07      	ldr	r3, [sp, #28]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	e774      	b.n	80099b4 <_dtoa_r+0x9ac>
 8009aca:	f000 f9c3 	bl	8009e54 <__multadd>
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	220a      	movs	r2, #10
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f000 f9bc 	bl	8009e54 <__multadd>
 8009adc:	4605      	mov	r5, r0
 8009ade:	e7f0      	b.n	8009ac2 <_dtoa_r+0xaba>
 8009ae0:	9b00      	ldr	r3, [sp, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfcc      	ite	gt
 8009ae6:	461e      	movgt	r6, r3
 8009ae8:	2601      	movle	r6, #1
 8009aea:	4456      	add	r6, sl
 8009aec:	2700      	movs	r7, #0
 8009aee:	4649      	mov	r1, r9
 8009af0:	2201      	movs	r2, #1
 8009af2:	4658      	mov	r0, fp
 8009af4:	f000 fb5a 	bl	800a1ac <__lshift>
 8009af8:	4621      	mov	r1, r4
 8009afa:	4681      	mov	r9, r0
 8009afc:	f000 fbc2 	bl	800a284 <__mcmp>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	dcb0      	bgt.n	8009a66 <_dtoa_r+0xa5e>
 8009b04:	d102      	bne.n	8009b0c <_dtoa_r+0xb04>
 8009b06:	f018 0f01 	tst.w	r8, #1
 8009b0a:	d1ac      	bne.n	8009a66 <_dtoa_r+0xa5e>
 8009b0c:	4633      	mov	r3, r6
 8009b0e:	461e      	mov	r6, r3
 8009b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b14:	2a30      	cmp	r2, #48	@ 0x30
 8009b16:	d0fa      	beq.n	8009b0e <_dtoa_r+0xb06>
 8009b18:	e5c2      	b.n	80096a0 <_dtoa_r+0x698>
 8009b1a:	459a      	cmp	sl, r3
 8009b1c:	d1a4      	bne.n	8009a68 <_dtoa_r+0xa60>
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	3301      	adds	r3, #1
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	2331      	movs	r3, #49	@ 0x31
 8009b26:	f88a 3000 	strb.w	r3, [sl]
 8009b2a:	e5b9      	b.n	80096a0 <_dtoa_r+0x698>
 8009b2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b8c <_dtoa_r+0xb84>
 8009b32:	b11b      	cbz	r3, 8009b3c <_dtoa_r+0xb34>
 8009b34:	f10a 0308 	add.w	r3, sl, #8
 8009b38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	b019      	add	sp, #100	@ 0x64
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	f77f ae37 	ble.w	80097ba <_dtoa_r+0x7b2>
 8009b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b50:	2001      	movs	r0, #1
 8009b52:	e655      	b.n	8009800 <_dtoa_r+0x7f8>
 8009b54:	9b00      	ldr	r3, [sp, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f77f aed6 	ble.w	8009908 <_dtoa_r+0x900>
 8009b5c:	4656      	mov	r6, sl
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4648      	mov	r0, r9
 8009b62:	f7ff f9c6 	bl	8008ef2 <quorem>
 8009b66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b6a:	f806 8b01 	strb.w	r8, [r6], #1
 8009b6e:	9b00      	ldr	r3, [sp, #0]
 8009b70:	eba6 020a 	sub.w	r2, r6, sl
 8009b74:	4293      	cmp	r3, r2
 8009b76:	ddb3      	ble.n	8009ae0 <_dtoa_r+0xad8>
 8009b78:	4649      	mov	r1, r9
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	220a      	movs	r2, #10
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 f968 	bl	8009e54 <__multadd>
 8009b84:	4681      	mov	r9, r0
 8009b86:	e7ea      	b.n	8009b5e <_dtoa_r+0xb56>
 8009b88:	0800ad50 	.word	0x0800ad50
 8009b8c:	0800acd4 	.word	0x0800acd4

08009b90 <_free_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4605      	mov	r5, r0
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d041      	beq.n	8009c1c <_free_r+0x8c>
 8009b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9c:	1f0c      	subs	r4, r1, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfb8      	it	lt
 8009ba2:	18e4      	addlt	r4, r4, r3
 8009ba4:	f000 f8e8 	bl	8009d78 <__malloc_lock>
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <_free_r+0x90>)
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	b933      	cbnz	r3, 8009bbc <_free_r+0x2c>
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	6014      	str	r4, [r2, #0]
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb8:	f000 b8e4 	b.w	8009d84 <__malloc_unlock>
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	d908      	bls.n	8009bd2 <_free_r+0x42>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	1821      	adds	r1, r4, r0
 8009bc4:	428b      	cmp	r3, r1
 8009bc6:	bf01      	itttt	eq
 8009bc8:	6819      	ldreq	r1, [r3, #0]
 8009bca:	685b      	ldreq	r3, [r3, #4]
 8009bcc:	1809      	addeq	r1, r1, r0
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	e7ed      	b.n	8009bae <_free_r+0x1e>
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	b10b      	cbz	r3, 8009bdc <_free_r+0x4c>
 8009bd8:	42a3      	cmp	r3, r4
 8009bda:	d9fa      	bls.n	8009bd2 <_free_r+0x42>
 8009bdc:	6811      	ldr	r1, [r2, #0]
 8009bde:	1850      	adds	r0, r2, r1
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d10b      	bne.n	8009bfc <_free_r+0x6c>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	4401      	add	r1, r0
 8009be8:	1850      	adds	r0, r2, r1
 8009bea:	4283      	cmp	r3, r0
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	d1e0      	bne.n	8009bb2 <_free_r+0x22>
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	6053      	str	r3, [r2, #4]
 8009bf6:	4408      	add	r0, r1
 8009bf8:	6010      	str	r0, [r2, #0]
 8009bfa:	e7da      	b.n	8009bb2 <_free_r+0x22>
 8009bfc:	d902      	bls.n	8009c04 <_free_r+0x74>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	e7d6      	b.n	8009bb2 <_free_r+0x22>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	1821      	adds	r1, r4, r0
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf04      	itt	eq
 8009c0c:	6819      	ldreq	r1, [r3, #0]
 8009c0e:	685b      	ldreq	r3, [r3, #4]
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	bf04      	itt	eq
 8009c14:	1809      	addeq	r1, r1, r0
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	6054      	str	r4, [r2, #4]
 8009c1a:	e7ca      	b.n	8009bb2 <_free_r+0x22>
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	bf00      	nop
 8009c20:	200013b0 	.word	0x200013b0

08009c24 <malloc>:
 8009c24:	4b02      	ldr	r3, [pc, #8]	@ (8009c30 <malloc+0xc>)
 8009c26:	4601      	mov	r1, r0
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	f000 b825 	b.w	8009c78 <_malloc_r>
 8009c2e:	bf00      	nop
 8009c30:	20000024 	.word	0x20000024

08009c34 <sbrk_aligned>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4e0f      	ldr	r6, [pc, #60]	@ (8009c74 <sbrk_aligned+0x40>)
 8009c38:	460c      	mov	r4, r1
 8009c3a:	6831      	ldr	r1, [r6, #0]
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	b911      	cbnz	r1, 8009c46 <sbrk_aligned+0x12>
 8009c40:	f000 fcd4 	bl	800a5ec <_sbrk_r>
 8009c44:	6030      	str	r0, [r6, #0]
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 fccf 	bl	800a5ec <_sbrk_r>
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	d103      	bne.n	8009c5a <sbrk_aligned+0x26>
 8009c52:	f04f 34ff 	mov.w	r4, #4294967295
 8009c56:	4620      	mov	r0, r4
 8009c58:	bd70      	pop	{r4, r5, r6, pc}
 8009c5a:	1cc4      	adds	r4, r0, #3
 8009c5c:	f024 0403 	bic.w	r4, r4, #3
 8009c60:	42a0      	cmp	r0, r4
 8009c62:	d0f8      	beq.n	8009c56 <sbrk_aligned+0x22>
 8009c64:	1a21      	subs	r1, r4, r0
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 fcc0 	bl	800a5ec <_sbrk_r>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d1f2      	bne.n	8009c56 <sbrk_aligned+0x22>
 8009c70:	e7ef      	b.n	8009c52 <sbrk_aligned+0x1e>
 8009c72:	bf00      	nop
 8009c74:	200013ac 	.word	0x200013ac

08009c78 <_malloc_r>:
 8009c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	1ccd      	adds	r5, r1, #3
 8009c7e:	f025 0503 	bic.w	r5, r5, #3
 8009c82:	3508      	adds	r5, #8
 8009c84:	2d0c      	cmp	r5, #12
 8009c86:	bf38      	it	cc
 8009c88:	250c      	movcc	r5, #12
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	db01      	blt.n	8009c94 <_malloc_r+0x1c>
 8009c90:	42a9      	cmp	r1, r5
 8009c92:	d904      	bls.n	8009c9e <_malloc_r+0x26>
 8009c94:	230c      	movs	r3, #12
 8009c96:	6033      	str	r3, [r6, #0]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d74 <_malloc_r+0xfc>
 8009ca2:	f000 f869 	bl	8009d78 <__malloc_lock>
 8009ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8009caa:	461c      	mov	r4, r3
 8009cac:	bb44      	cbnz	r4, 8009d00 <_malloc_r+0x88>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7ff ffbf 	bl	8009c34 <sbrk_aligned>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	4604      	mov	r4, r0
 8009cba:	d158      	bne.n	8009d6e <_malloc_r+0xf6>
 8009cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8009cc0:	4627      	mov	r7, r4
 8009cc2:	2f00      	cmp	r7, #0
 8009cc4:	d143      	bne.n	8009d4e <_malloc_r+0xd6>
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d04b      	beq.n	8009d62 <_malloc_r+0xea>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4630      	mov	r0, r6
 8009cd0:	eb04 0903 	add.w	r9, r4, r3
 8009cd4:	f000 fc8a 	bl	800a5ec <_sbrk_r>
 8009cd8:	4581      	cmp	r9, r0
 8009cda:	d142      	bne.n	8009d62 <_malloc_r+0xea>
 8009cdc:	6821      	ldr	r1, [r4, #0]
 8009cde:	1a6d      	subs	r5, r5, r1
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ffa6 	bl	8009c34 <sbrk_aligned>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d03a      	beq.n	8009d62 <_malloc_r+0xea>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	442b      	add	r3, r5
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	bb62      	cbnz	r2, 8009d54 <_malloc_r+0xdc>
 8009cfa:	f8c8 7000 	str.w	r7, [r8]
 8009cfe:	e00f      	b.n	8009d20 <_malloc_r+0xa8>
 8009d00:	6822      	ldr	r2, [r4, #0]
 8009d02:	1b52      	subs	r2, r2, r5
 8009d04:	d420      	bmi.n	8009d48 <_malloc_r+0xd0>
 8009d06:	2a0b      	cmp	r2, #11
 8009d08:	d917      	bls.n	8009d3a <_malloc_r+0xc2>
 8009d0a:	1961      	adds	r1, r4, r5
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	6025      	str	r5, [r4, #0]
 8009d10:	bf18      	it	ne
 8009d12:	6059      	strne	r1, [r3, #4]
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	bf08      	it	eq
 8009d18:	f8c8 1000 	streq.w	r1, [r8]
 8009d1c:	5162      	str	r2, [r4, r5]
 8009d1e:	604b      	str	r3, [r1, #4]
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f82f 	bl	8009d84 <__malloc_unlock>
 8009d26:	f104 000b 	add.w	r0, r4, #11
 8009d2a:	1d23      	adds	r3, r4, #4
 8009d2c:	f020 0007 	bic.w	r0, r0, #7
 8009d30:	1ac2      	subs	r2, r0, r3
 8009d32:	bf1c      	itt	ne
 8009d34:	1a1b      	subne	r3, r3, r0
 8009d36:	50a3      	strne	r3, [r4, r2]
 8009d38:	e7af      	b.n	8009c9a <_malloc_r+0x22>
 8009d3a:	6862      	ldr	r2, [r4, #4]
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	bf0c      	ite	eq
 8009d40:	f8c8 2000 	streq.w	r2, [r8]
 8009d44:	605a      	strne	r2, [r3, #4]
 8009d46:	e7eb      	b.n	8009d20 <_malloc_r+0xa8>
 8009d48:	4623      	mov	r3, r4
 8009d4a:	6864      	ldr	r4, [r4, #4]
 8009d4c:	e7ae      	b.n	8009cac <_malloc_r+0x34>
 8009d4e:	463c      	mov	r4, r7
 8009d50:	687f      	ldr	r7, [r7, #4]
 8009d52:	e7b6      	b.n	8009cc2 <_malloc_r+0x4a>
 8009d54:	461a      	mov	r2, r3
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d1fb      	bne.n	8009d54 <_malloc_r+0xdc>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6053      	str	r3, [r2, #4]
 8009d60:	e7de      	b.n	8009d20 <_malloc_r+0xa8>
 8009d62:	230c      	movs	r3, #12
 8009d64:	6033      	str	r3, [r6, #0]
 8009d66:	4630      	mov	r0, r6
 8009d68:	f000 f80c 	bl	8009d84 <__malloc_unlock>
 8009d6c:	e794      	b.n	8009c98 <_malloc_r+0x20>
 8009d6e:	6005      	str	r5, [r0, #0]
 8009d70:	e7d6      	b.n	8009d20 <_malloc_r+0xa8>
 8009d72:	bf00      	nop
 8009d74:	200013b0 	.word	0x200013b0

08009d78 <__malloc_lock>:
 8009d78:	4801      	ldr	r0, [pc, #4]	@ (8009d80 <__malloc_lock+0x8>)
 8009d7a:	f7ff b8b8 	b.w	8008eee <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	200013a8 	.word	0x200013a8

08009d84 <__malloc_unlock>:
 8009d84:	4801      	ldr	r0, [pc, #4]	@ (8009d8c <__malloc_unlock+0x8>)
 8009d86:	f7ff b8b3 	b.w	8008ef0 <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	200013a8 	.word	0x200013a8

08009d90 <_Balloc>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	69c6      	ldr	r6, [r0, #28]
 8009d94:	4604      	mov	r4, r0
 8009d96:	460d      	mov	r5, r1
 8009d98:	b976      	cbnz	r6, 8009db8 <_Balloc+0x28>
 8009d9a:	2010      	movs	r0, #16
 8009d9c:	f7ff ff42 	bl	8009c24 <malloc>
 8009da0:	4602      	mov	r2, r0
 8009da2:	61e0      	str	r0, [r4, #28]
 8009da4:	b920      	cbnz	r0, 8009db0 <_Balloc+0x20>
 8009da6:	4b18      	ldr	r3, [pc, #96]	@ (8009e08 <_Balloc+0x78>)
 8009da8:	4818      	ldr	r0, [pc, #96]	@ (8009e0c <_Balloc+0x7c>)
 8009daa:	216b      	movs	r1, #107	@ 0x6b
 8009dac:	f000 fc3c 	bl	800a628 <__assert_func>
 8009db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009db4:	6006      	str	r6, [r0, #0]
 8009db6:	60c6      	str	r6, [r0, #12]
 8009db8:	69e6      	ldr	r6, [r4, #28]
 8009dba:	68f3      	ldr	r3, [r6, #12]
 8009dbc:	b183      	cbz	r3, 8009de0 <_Balloc+0x50>
 8009dbe:	69e3      	ldr	r3, [r4, #28]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dc6:	b9b8      	cbnz	r0, 8009df8 <_Balloc+0x68>
 8009dc8:	2101      	movs	r1, #1
 8009dca:	fa01 f605 	lsl.w	r6, r1, r5
 8009dce:	1d72      	adds	r2, r6, #5
 8009dd0:	0092      	lsls	r2, r2, #2
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 fc46 	bl	800a664 <_calloc_r>
 8009dd8:	b160      	cbz	r0, 8009df4 <_Balloc+0x64>
 8009dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dde:	e00e      	b.n	8009dfe <_Balloc+0x6e>
 8009de0:	2221      	movs	r2, #33	@ 0x21
 8009de2:	2104      	movs	r1, #4
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 fc3d 	bl	800a664 <_calloc_r>
 8009dea:	69e3      	ldr	r3, [r4, #28]
 8009dec:	60f0      	str	r0, [r6, #12]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e4      	bne.n	8009dbe <_Balloc+0x2e>
 8009df4:	2000      	movs	r0, #0
 8009df6:	bd70      	pop	{r4, r5, r6, pc}
 8009df8:	6802      	ldr	r2, [r0, #0]
 8009dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e04:	e7f7      	b.n	8009df6 <_Balloc+0x66>
 8009e06:	bf00      	nop
 8009e08:	0800ace1 	.word	0x0800ace1
 8009e0c:	0800ad61 	.word	0x0800ad61

08009e10 <_Bfree>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	69c6      	ldr	r6, [r0, #28]
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b976      	cbnz	r6, 8009e38 <_Bfree+0x28>
 8009e1a:	2010      	movs	r0, #16
 8009e1c:	f7ff ff02 	bl	8009c24 <malloc>
 8009e20:	4602      	mov	r2, r0
 8009e22:	61e8      	str	r0, [r5, #28]
 8009e24:	b920      	cbnz	r0, 8009e30 <_Bfree+0x20>
 8009e26:	4b09      	ldr	r3, [pc, #36]	@ (8009e4c <_Bfree+0x3c>)
 8009e28:	4809      	ldr	r0, [pc, #36]	@ (8009e50 <_Bfree+0x40>)
 8009e2a:	218f      	movs	r1, #143	@ 0x8f
 8009e2c:	f000 fbfc 	bl	800a628 <__assert_func>
 8009e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e34:	6006      	str	r6, [r0, #0]
 8009e36:	60c6      	str	r6, [r0, #12]
 8009e38:	b13c      	cbz	r4, 8009e4a <_Bfree+0x3a>
 8009e3a:	69eb      	ldr	r3, [r5, #28]
 8009e3c:	6862      	ldr	r2, [r4, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e44:	6021      	str	r1, [r4, #0]
 8009e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	0800ace1 	.word	0x0800ace1
 8009e50:	0800ad61 	.word	0x0800ad61

08009e54 <__multadd>:
 8009e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	690d      	ldr	r5, [r1, #16]
 8009e5a:	4607      	mov	r7, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	461e      	mov	r6, r3
 8009e60:	f101 0c14 	add.w	ip, r1, #20
 8009e64:	2000      	movs	r0, #0
 8009e66:	f8dc 3000 	ldr.w	r3, [ip]
 8009e6a:	b299      	uxth	r1, r3
 8009e6c:	fb02 6101 	mla	r1, r2, r1, r6
 8009e70:	0c1e      	lsrs	r6, r3, #16
 8009e72:	0c0b      	lsrs	r3, r1, #16
 8009e74:	fb02 3306 	mla	r3, r2, r6, r3
 8009e78:	b289      	uxth	r1, r1
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e80:	4285      	cmp	r5, r0
 8009e82:	f84c 1b04 	str.w	r1, [ip], #4
 8009e86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e8a:	dcec      	bgt.n	8009e66 <__multadd+0x12>
 8009e8c:	b30e      	cbz	r6, 8009ed2 <__multadd+0x7e>
 8009e8e:	68a3      	ldr	r3, [r4, #8]
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	dc19      	bgt.n	8009ec8 <__multadd+0x74>
 8009e94:	6861      	ldr	r1, [r4, #4]
 8009e96:	4638      	mov	r0, r7
 8009e98:	3101      	adds	r1, #1
 8009e9a:	f7ff ff79 	bl	8009d90 <_Balloc>
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	b928      	cbnz	r0, 8009eae <__multadd+0x5a>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed8 <__multadd+0x84>)
 8009ea6:	480d      	ldr	r0, [pc, #52]	@ (8009edc <__multadd+0x88>)
 8009ea8:	21ba      	movs	r1, #186	@ 0xba
 8009eaa:	f000 fbbd 	bl	800a628 <__assert_func>
 8009eae:	6922      	ldr	r2, [r4, #16]
 8009eb0:	3202      	adds	r2, #2
 8009eb2:	f104 010c 	add.w	r1, r4, #12
 8009eb6:	0092      	lsls	r2, r2, #2
 8009eb8:	300c      	adds	r0, #12
 8009eba:	f000 fba7 	bl	800a60c <memcpy>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f7ff ffa5 	bl	8009e10 <_Bfree>
 8009ec6:	4644      	mov	r4, r8
 8009ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ecc:	3501      	adds	r5, #1
 8009ece:	615e      	str	r6, [r3, #20]
 8009ed0:	6125      	str	r5, [r4, #16]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	0800ad50 	.word	0x0800ad50
 8009edc:	0800ad61 	.word	0x0800ad61

08009ee0 <__hi0bits>:
 8009ee0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	bf36      	itet	cc
 8009ee8:	0403      	lslcc	r3, r0, #16
 8009eea:	2000      	movcs	r0, #0
 8009eec:	2010      	movcc	r0, #16
 8009eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ef2:	bf3c      	itt	cc
 8009ef4:	021b      	lslcc	r3, r3, #8
 8009ef6:	3008      	addcc	r0, #8
 8009ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009efc:	bf3c      	itt	cc
 8009efe:	011b      	lslcc	r3, r3, #4
 8009f00:	3004      	addcc	r0, #4
 8009f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f06:	bf3c      	itt	cc
 8009f08:	009b      	lslcc	r3, r3, #2
 8009f0a:	3002      	addcc	r0, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	db05      	blt.n	8009f1c <__hi0bits+0x3c>
 8009f10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f14:	f100 0001 	add.w	r0, r0, #1
 8009f18:	bf08      	it	eq
 8009f1a:	2020      	moveq	r0, #32
 8009f1c:	4770      	bx	lr

08009f1e <__lo0bits>:
 8009f1e:	6803      	ldr	r3, [r0, #0]
 8009f20:	4602      	mov	r2, r0
 8009f22:	f013 0007 	ands.w	r0, r3, #7
 8009f26:	d00b      	beq.n	8009f40 <__lo0bits+0x22>
 8009f28:	07d9      	lsls	r1, r3, #31
 8009f2a:	d421      	bmi.n	8009f70 <__lo0bits+0x52>
 8009f2c:	0798      	lsls	r0, r3, #30
 8009f2e:	bf49      	itett	mi
 8009f30:	085b      	lsrmi	r3, r3, #1
 8009f32:	089b      	lsrpl	r3, r3, #2
 8009f34:	2001      	movmi	r0, #1
 8009f36:	6013      	strmi	r3, [r2, #0]
 8009f38:	bf5c      	itt	pl
 8009f3a:	6013      	strpl	r3, [r2, #0]
 8009f3c:	2002      	movpl	r0, #2
 8009f3e:	4770      	bx	lr
 8009f40:	b299      	uxth	r1, r3
 8009f42:	b909      	cbnz	r1, 8009f48 <__lo0bits+0x2a>
 8009f44:	0c1b      	lsrs	r3, r3, #16
 8009f46:	2010      	movs	r0, #16
 8009f48:	b2d9      	uxtb	r1, r3
 8009f4a:	b909      	cbnz	r1, 8009f50 <__lo0bits+0x32>
 8009f4c:	3008      	adds	r0, #8
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	0719      	lsls	r1, r3, #28
 8009f52:	bf04      	itt	eq
 8009f54:	091b      	lsreq	r3, r3, #4
 8009f56:	3004      	addeq	r0, #4
 8009f58:	0799      	lsls	r1, r3, #30
 8009f5a:	bf04      	itt	eq
 8009f5c:	089b      	lsreq	r3, r3, #2
 8009f5e:	3002      	addeq	r0, #2
 8009f60:	07d9      	lsls	r1, r3, #31
 8009f62:	d403      	bmi.n	8009f6c <__lo0bits+0x4e>
 8009f64:	085b      	lsrs	r3, r3, #1
 8009f66:	f100 0001 	add.w	r0, r0, #1
 8009f6a:	d003      	beq.n	8009f74 <__lo0bits+0x56>
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4770      	bx	lr
 8009f70:	2000      	movs	r0, #0
 8009f72:	4770      	bx	lr
 8009f74:	2020      	movs	r0, #32
 8009f76:	4770      	bx	lr

08009f78 <__i2b>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	f7ff ff07 	bl	8009d90 <_Balloc>
 8009f82:	4602      	mov	r2, r0
 8009f84:	b928      	cbnz	r0, 8009f92 <__i2b+0x1a>
 8009f86:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <__i2b+0x24>)
 8009f88:	4805      	ldr	r0, [pc, #20]	@ (8009fa0 <__i2b+0x28>)
 8009f8a:	f240 1145 	movw	r1, #325	@ 0x145
 8009f8e:	f000 fb4b 	bl	800a628 <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	6144      	str	r4, [r0, #20]
 8009f96:	6103      	str	r3, [r0, #16]
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800ad50 	.word	0x0800ad50
 8009fa0:	0800ad61 	.word	0x0800ad61

08009fa4 <__multiply>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4614      	mov	r4, r2
 8009faa:	690a      	ldr	r2, [r1, #16]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	bfa8      	it	ge
 8009fb2:	4623      	movge	r3, r4
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	bfa4      	itt	ge
 8009fb8:	460c      	movge	r4, r1
 8009fba:	461f      	movge	r7, r3
 8009fbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009fc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009fc4:	68a3      	ldr	r3, [r4, #8]
 8009fc6:	6861      	ldr	r1, [r4, #4]
 8009fc8:	eb0a 0609 	add.w	r6, sl, r9
 8009fcc:	42b3      	cmp	r3, r6
 8009fce:	b085      	sub	sp, #20
 8009fd0:	bfb8      	it	lt
 8009fd2:	3101      	addlt	r1, #1
 8009fd4:	f7ff fedc 	bl	8009d90 <_Balloc>
 8009fd8:	b930      	cbnz	r0, 8009fe8 <__multiply+0x44>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	4b44      	ldr	r3, [pc, #272]	@ (800a0f0 <__multiply+0x14c>)
 8009fde:	4845      	ldr	r0, [pc, #276]	@ (800a0f4 <__multiply+0x150>)
 8009fe0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009fe4:	f000 fb20 	bl	800a628 <__assert_func>
 8009fe8:	f100 0514 	add.w	r5, r0, #20
 8009fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	d321      	bcc.n	800a03c <__multiply+0x98>
 8009ff8:	f107 0114 	add.w	r1, r7, #20
 8009ffc:	f104 0214 	add.w	r2, r4, #20
 800a000:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a004:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	1b13      	subs	r3, r2, r4
 800a00c:	3b15      	subs	r3, #21
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	3304      	adds	r3, #4
 800a014:	f104 0715 	add.w	r7, r4, #21
 800a018:	42ba      	cmp	r2, r7
 800a01a:	bf38      	it	cc
 800a01c:	2304      	movcc	r3, #4
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	9b02      	ldr	r3, [sp, #8]
 800a022:	9103      	str	r1, [sp, #12]
 800a024:	428b      	cmp	r3, r1
 800a026:	d80c      	bhi.n	800a042 <__multiply+0x9e>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	dd03      	ble.n	800a034 <__multiply+0x90>
 800a02c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a030:	2b00      	cmp	r3, #0
 800a032:	d05b      	beq.n	800a0ec <__multiply+0x148>
 800a034:	6106      	str	r6, [r0, #16]
 800a036:	b005      	add	sp, #20
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	f843 2b04 	str.w	r2, [r3], #4
 800a040:	e7d8      	b.n	8009ff4 <__multiply+0x50>
 800a042:	f8b1 a000 	ldrh.w	sl, [r1]
 800a046:	f1ba 0f00 	cmp.w	sl, #0
 800a04a:	d024      	beq.n	800a096 <__multiply+0xf2>
 800a04c:	f104 0e14 	add.w	lr, r4, #20
 800a050:	46a9      	mov	r9, r5
 800a052:	f04f 0c00 	mov.w	ip, #0
 800a056:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a05a:	f8d9 3000 	ldr.w	r3, [r9]
 800a05e:	fa1f fb87 	uxth.w	fp, r7
 800a062:	b29b      	uxth	r3, r3
 800a064:	fb0a 330b 	mla	r3, sl, fp, r3
 800a068:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a06c:	f8d9 7000 	ldr.w	r7, [r9]
 800a070:	4463      	add	r3, ip
 800a072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a076:	fb0a c70b 	mla	r7, sl, fp, ip
 800a07a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a084:	4572      	cmp	r2, lr
 800a086:	f849 3b04 	str.w	r3, [r9], #4
 800a08a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a08e:	d8e2      	bhi.n	800a056 <__multiply+0xb2>
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	f845 c003 	str.w	ip, [r5, r3]
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a09c:	3104      	adds	r1, #4
 800a09e:	f1b9 0f00 	cmp.w	r9, #0
 800a0a2:	d021      	beq.n	800a0e8 <__multiply+0x144>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	f104 0c14 	add.w	ip, r4, #20
 800a0aa:	46ae      	mov	lr, r5
 800a0ac:	f04f 0a00 	mov.w	sl, #0
 800a0b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a0b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0b8:	fb09 770b 	mla	r7, r9, fp, r7
 800a0bc:	4457      	add	r7, sl
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0c4:	f84e 3b04 	str.w	r3, [lr], #4
 800a0c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0d0:	f8be 3000 	ldrh.w	r3, [lr]
 800a0d4:	fb09 330a 	mla	r3, r9, sl, r3
 800a0d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a0dc:	4562      	cmp	r2, ip
 800a0de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0e2:	d8e5      	bhi.n	800a0b0 <__multiply+0x10c>
 800a0e4:	9f01      	ldr	r7, [sp, #4]
 800a0e6:	51eb      	str	r3, [r5, r7]
 800a0e8:	3504      	adds	r5, #4
 800a0ea:	e799      	b.n	800a020 <__multiply+0x7c>
 800a0ec:	3e01      	subs	r6, #1
 800a0ee:	e79b      	b.n	800a028 <__multiply+0x84>
 800a0f0:	0800ad50 	.word	0x0800ad50
 800a0f4:	0800ad61 	.word	0x0800ad61

0800a0f8 <__pow5mult>:
 800a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	4615      	mov	r5, r2
 800a0fe:	f012 0203 	ands.w	r2, r2, #3
 800a102:	4607      	mov	r7, r0
 800a104:	460e      	mov	r6, r1
 800a106:	d007      	beq.n	800a118 <__pow5mult+0x20>
 800a108:	4c25      	ldr	r4, [pc, #148]	@ (800a1a0 <__pow5mult+0xa8>)
 800a10a:	3a01      	subs	r2, #1
 800a10c:	2300      	movs	r3, #0
 800a10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a112:	f7ff fe9f 	bl	8009e54 <__multadd>
 800a116:	4606      	mov	r6, r0
 800a118:	10ad      	asrs	r5, r5, #2
 800a11a:	d03d      	beq.n	800a198 <__pow5mult+0xa0>
 800a11c:	69fc      	ldr	r4, [r7, #28]
 800a11e:	b97c      	cbnz	r4, 800a140 <__pow5mult+0x48>
 800a120:	2010      	movs	r0, #16
 800a122:	f7ff fd7f 	bl	8009c24 <malloc>
 800a126:	4602      	mov	r2, r0
 800a128:	61f8      	str	r0, [r7, #28]
 800a12a:	b928      	cbnz	r0, 800a138 <__pow5mult+0x40>
 800a12c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <__pow5mult+0xac>)
 800a12e:	481e      	ldr	r0, [pc, #120]	@ (800a1a8 <__pow5mult+0xb0>)
 800a130:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a134:	f000 fa78 	bl	800a628 <__assert_func>
 800a138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a13c:	6004      	str	r4, [r0, #0]
 800a13e:	60c4      	str	r4, [r0, #12]
 800a140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a148:	b94c      	cbnz	r4, 800a15e <__pow5mult+0x66>
 800a14a:	f240 2171 	movw	r1, #625	@ 0x271
 800a14e:	4638      	mov	r0, r7
 800a150:	f7ff ff12 	bl	8009f78 <__i2b>
 800a154:	2300      	movs	r3, #0
 800a156:	f8c8 0008 	str.w	r0, [r8, #8]
 800a15a:	4604      	mov	r4, r0
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	f04f 0900 	mov.w	r9, #0
 800a162:	07eb      	lsls	r3, r5, #31
 800a164:	d50a      	bpl.n	800a17c <__pow5mult+0x84>
 800a166:	4631      	mov	r1, r6
 800a168:	4622      	mov	r2, r4
 800a16a:	4638      	mov	r0, r7
 800a16c:	f7ff ff1a 	bl	8009fa4 <__multiply>
 800a170:	4631      	mov	r1, r6
 800a172:	4680      	mov	r8, r0
 800a174:	4638      	mov	r0, r7
 800a176:	f7ff fe4b 	bl	8009e10 <_Bfree>
 800a17a:	4646      	mov	r6, r8
 800a17c:	106d      	asrs	r5, r5, #1
 800a17e:	d00b      	beq.n	800a198 <__pow5mult+0xa0>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	b938      	cbnz	r0, 800a194 <__pow5mult+0x9c>
 800a184:	4622      	mov	r2, r4
 800a186:	4621      	mov	r1, r4
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff ff0b 	bl	8009fa4 <__multiply>
 800a18e:	6020      	str	r0, [r4, #0]
 800a190:	f8c0 9000 	str.w	r9, [r0]
 800a194:	4604      	mov	r4, r0
 800a196:	e7e4      	b.n	800a162 <__pow5mult+0x6a>
 800a198:	4630      	mov	r0, r6
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800adbc 	.word	0x0800adbc
 800a1a4:	0800ace1 	.word	0x0800ace1
 800a1a8:	0800ad61 	.word	0x0800ad61

0800a1ac <__lshift>:
 800a1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6849      	ldr	r1, [r1, #4]
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	4607      	mov	r7, r0
 800a1be:	4691      	mov	r9, r2
 800a1c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1c4:	f108 0601 	add.w	r6, r8, #1
 800a1c8:	42b3      	cmp	r3, r6
 800a1ca:	db0b      	blt.n	800a1e4 <__lshift+0x38>
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7ff fddf 	bl	8009d90 <_Balloc>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	b948      	cbnz	r0, 800a1ea <__lshift+0x3e>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b28      	ldr	r3, [pc, #160]	@ (800a27c <__lshift+0xd0>)
 800a1da:	4829      	ldr	r0, [pc, #164]	@ (800a280 <__lshift+0xd4>)
 800a1dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1e0:	f000 fa22 	bl	800a628 <__assert_func>
 800a1e4:	3101      	adds	r1, #1
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	e7ee      	b.n	800a1c8 <__lshift+0x1c>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f100 0114 	add.w	r1, r0, #20
 800a1f0:	f100 0210 	add.w	r2, r0, #16
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	4553      	cmp	r3, sl
 800a1f8:	db33      	blt.n	800a262 <__lshift+0xb6>
 800a1fa:	6920      	ldr	r0, [r4, #16]
 800a1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a200:	f104 0314 	add.w	r3, r4, #20
 800a204:	f019 091f 	ands.w	r9, r9, #31
 800a208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a20c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a210:	d02b      	beq.n	800a26a <__lshift+0xbe>
 800a212:	f1c9 0e20 	rsb	lr, r9, #32
 800a216:	468a      	mov	sl, r1
 800a218:	2200      	movs	r2, #0
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	fa00 f009 	lsl.w	r0, r0, r9
 800a220:	4310      	orrs	r0, r2
 800a222:	f84a 0b04 	str.w	r0, [sl], #4
 800a226:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22a:	459c      	cmp	ip, r3
 800a22c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a230:	d8f3      	bhi.n	800a21a <__lshift+0x6e>
 800a232:	ebac 0304 	sub.w	r3, ip, r4
 800a236:	3b15      	subs	r3, #21
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	3304      	adds	r3, #4
 800a23e:	f104 0015 	add.w	r0, r4, #21
 800a242:	4584      	cmp	ip, r0
 800a244:	bf38      	it	cc
 800a246:	2304      	movcc	r3, #4
 800a248:	50ca      	str	r2, [r1, r3]
 800a24a:	b10a      	cbz	r2, 800a250 <__lshift+0xa4>
 800a24c:	f108 0602 	add.w	r6, r8, #2
 800a250:	3e01      	subs	r6, #1
 800a252:	4638      	mov	r0, r7
 800a254:	612e      	str	r6, [r5, #16]
 800a256:	4621      	mov	r1, r4
 800a258:	f7ff fdda 	bl	8009e10 <_Bfree>
 800a25c:	4628      	mov	r0, r5
 800a25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a262:	f842 0f04 	str.w	r0, [r2, #4]!
 800a266:	3301      	adds	r3, #1
 800a268:	e7c5      	b.n	800a1f6 <__lshift+0x4a>
 800a26a:	3904      	subs	r1, #4
 800a26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a270:	f841 2f04 	str.w	r2, [r1, #4]!
 800a274:	459c      	cmp	ip, r3
 800a276:	d8f9      	bhi.n	800a26c <__lshift+0xc0>
 800a278:	e7ea      	b.n	800a250 <__lshift+0xa4>
 800a27a:	bf00      	nop
 800a27c:	0800ad50 	.word	0x0800ad50
 800a280:	0800ad61 	.word	0x0800ad61

0800a284 <__mcmp>:
 800a284:	690a      	ldr	r2, [r1, #16]
 800a286:	4603      	mov	r3, r0
 800a288:	6900      	ldr	r0, [r0, #16]
 800a28a:	1a80      	subs	r0, r0, r2
 800a28c:	b530      	push	{r4, r5, lr}
 800a28e:	d10e      	bne.n	800a2ae <__mcmp+0x2a>
 800a290:	3314      	adds	r3, #20
 800a292:	3114      	adds	r1, #20
 800a294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a29c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2a4:	4295      	cmp	r5, r2
 800a2a6:	d003      	beq.n	800a2b0 <__mcmp+0x2c>
 800a2a8:	d205      	bcs.n	800a2b6 <__mcmp+0x32>
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	bd30      	pop	{r4, r5, pc}
 800a2b0:	42a3      	cmp	r3, r4
 800a2b2:	d3f3      	bcc.n	800a29c <__mcmp+0x18>
 800a2b4:	e7fb      	b.n	800a2ae <__mcmp+0x2a>
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	e7f9      	b.n	800a2ae <__mcmp+0x2a>
	...

0800a2bc <__mdiff>:
 800a2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4648      	mov	r0, r9
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	f7ff ffdb 	bl	800a284 <__mcmp>
 800a2ce:	1e05      	subs	r5, r0, #0
 800a2d0:	d112      	bne.n	800a2f8 <__mdiff+0x3c>
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7ff fd5b 	bl	8009d90 <_Balloc>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__mdiff+0x2e>
 800a2de:	4b3f      	ldr	r3, [pc, #252]	@ (800a3dc <__mdiff+0x120>)
 800a2e0:	f240 2137 	movw	r1, #567	@ 0x237
 800a2e4:	483e      	ldr	r0, [pc, #248]	@ (800a3e0 <__mdiff+0x124>)
 800a2e6:	f000 f99f 	bl	800a628 <__assert_func>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	b003      	add	sp, #12
 800a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f8:	bfbc      	itt	lt
 800a2fa:	464b      	movlt	r3, r9
 800a2fc:	46a1      	movlt	r9, r4
 800a2fe:	4630      	mov	r0, r6
 800a300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a304:	bfba      	itte	lt
 800a306:	461c      	movlt	r4, r3
 800a308:	2501      	movlt	r5, #1
 800a30a:	2500      	movge	r5, #0
 800a30c:	f7ff fd40 	bl	8009d90 <_Balloc>
 800a310:	4602      	mov	r2, r0
 800a312:	b918      	cbnz	r0, 800a31c <__mdiff+0x60>
 800a314:	4b31      	ldr	r3, [pc, #196]	@ (800a3dc <__mdiff+0x120>)
 800a316:	f240 2145 	movw	r1, #581	@ 0x245
 800a31a:	e7e3      	b.n	800a2e4 <__mdiff+0x28>
 800a31c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a320:	6926      	ldr	r6, [r4, #16]
 800a322:	60c5      	str	r5, [r0, #12]
 800a324:	f109 0310 	add.w	r3, r9, #16
 800a328:	f109 0514 	add.w	r5, r9, #20
 800a32c:	f104 0e14 	add.w	lr, r4, #20
 800a330:	f100 0b14 	add.w	fp, r0, #20
 800a334:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a338:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	46d9      	mov	r9, fp
 800a340:	f04f 0c00 	mov.w	ip, #0
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a34a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	fa1f f38a 	uxth.w	r3, sl
 800a354:	4619      	mov	r1, r3
 800a356:	b283      	uxth	r3, r0
 800a358:	1acb      	subs	r3, r1, r3
 800a35a:	0c00      	lsrs	r0, r0, #16
 800a35c:	4463      	add	r3, ip
 800a35e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a362:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a36c:	4576      	cmp	r6, lr
 800a36e:	f849 3b04 	str.w	r3, [r9], #4
 800a372:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a376:	d8e5      	bhi.n	800a344 <__mdiff+0x88>
 800a378:	1b33      	subs	r3, r6, r4
 800a37a:	3b15      	subs	r3, #21
 800a37c:	f023 0303 	bic.w	r3, r3, #3
 800a380:	3415      	adds	r4, #21
 800a382:	3304      	adds	r3, #4
 800a384:	42a6      	cmp	r6, r4
 800a386:	bf38      	it	cc
 800a388:	2304      	movcc	r3, #4
 800a38a:	441d      	add	r5, r3
 800a38c:	445b      	add	r3, fp
 800a38e:	461e      	mov	r6, r3
 800a390:	462c      	mov	r4, r5
 800a392:	4544      	cmp	r4, r8
 800a394:	d30e      	bcc.n	800a3b4 <__mdiff+0xf8>
 800a396:	f108 0103 	add.w	r1, r8, #3
 800a39a:	1b49      	subs	r1, r1, r5
 800a39c:	f021 0103 	bic.w	r1, r1, #3
 800a3a0:	3d03      	subs	r5, #3
 800a3a2:	45a8      	cmp	r8, r5
 800a3a4:	bf38      	it	cc
 800a3a6:	2100      	movcc	r1, #0
 800a3a8:	440b      	add	r3, r1
 800a3aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3ae:	b191      	cbz	r1, 800a3d6 <__mdiff+0x11a>
 800a3b0:	6117      	str	r7, [r2, #16]
 800a3b2:	e79d      	b.n	800a2f0 <__mdiff+0x34>
 800a3b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3b8:	46e6      	mov	lr, ip
 800a3ba:	0c08      	lsrs	r0, r1, #16
 800a3bc:	fa1c fc81 	uxtah	ip, ip, r1
 800a3c0:	4471      	add	r1, lr
 800a3c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3c6:	b289      	uxth	r1, r1
 800a3c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3cc:	f846 1b04 	str.w	r1, [r6], #4
 800a3d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3d4:	e7dd      	b.n	800a392 <__mdiff+0xd6>
 800a3d6:	3f01      	subs	r7, #1
 800a3d8:	e7e7      	b.n	800a3aa <__mdiff+0xee>
 800a3da:	bf00      	nop
 800a3dc:	0800ad50 	.word	0x0800ad50
 800a3e0:	0800ad61 	.word	0x0800ad61

0800a3e4 <__d2b>:
 800a3e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	ec59 8b10 	vmov	r8, r9, d0
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	f7ff fccd 	bl	8009d90 <_Balloc>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	b930      	cbnz	r0, 800a408 <__d2b+0x24>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4b23      	ldr	r3, [pc, #140]	@ (800a48c <__d2b+0xa8>)
 800a3fe:	4824      	ldr	r0, [pc, #144]	@ (800a490 <__d2b+0xac>)
 800a400:	f240 310f 	movw	r1, #783	@ 0x30f
 800a404:	f000 f910 	bl	800a628 <__assert_func>
 800a408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a40c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a410:	b10d      	cbz	r5, 800a416 <__d2b+0x32>
 800a412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	f1b8 0300 	subs.w	r3, r8, #0
 800a41c:	d023      	beq.n	800a466 <__d2b+0x82>
 800a41e:	4668      	mov	r0, sp
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	f7ff fd7c 	bl	8009f1e <__lo0bits>
 800a426:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a42a:	b1d0      	cbz	r0, 800a462 <__d2b+0x7e>
 800a42c:	f1c0 0320 	rsb	r3, r0, #32
 800a430:	fa02 f303 	lsl.w	r3, r2, r3
 800a434:	430b      	orrs	r3, r1
 800a436:	40c2      	lsrs	r2, r0
 800a438:	6163      	str	r3, [r4, #20]
 800a43a:	9201      	str	r2, [sp, #4]
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	61a3      	str	r3, [r4, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bf0c      	ite	eq
 800a444:	2201      	moveq	r2, #1
 800a446:	2202      	movne	r2, #2
 800a448:	6122      	str	r2, [r4, #16]
 800a44a:	b1a5      	cbz	r5, 800a476 <__d2b+0x92>
 800a44c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a450:	4405      	add	r5, r0
 800a452:	603d      	str	r5, [r7, #0]
 800a454:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a458:	6030      	str	r0, [r6, #0]
 800a45a:	4620      	mov	r0, r4
 800a45c:	b003      	add	sp, #12
 800a45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a462:	6161      	str	r1, [r4, #20]
 800a464:	e7ea      	b.n	800a43c <__d2b+0x58>
 800a466:	a801      	add	r0, sp, #4
 800a468:	f7ff fd59 	bl	8009f1e <__lo0bits>
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	6163      	str	r3, [r4, #20]
 800a470:	3020      	adds	r0, #32
 800a472:	2201      	movs	r2, #1
 800a474:	e7e8      	b.n	800a448 <__d2b+0x64>
 800a476:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a47a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a47e:	6038      	str	r0, [r7, #0]
 800a480:	6918      	ldr	r0, [r3, #16]
 800a482:	f7ff fd2d 	bl	8009ee0 <__hi0bits>
 800a486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a48a:	e7e5      	b.n	800a458 <__d2b+0x74>
 800a48c:	0800ad50 	.word	0x0800ad50
 800a490:	0800ad61 	.word	0x0800ad61

0800a494 <__sflush_r>:
 800a494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49c:	0716      	lsls	r6, r2, #28
 800a49e:	4605      	mov	r5, r0
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	d454      	bmi.n	800a54e <__sflush_r+0xba>
 800a4a4:	684b      	ldr	r3, [r1, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	dc02      	bgt.n	800a4b0 <__sflush_r+0x1c>
 800a4aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dd48      	ble.n	800a542 <__sflush_r+0xae>
 800a4b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	d045      	beq.n	800a542 <__sflush_r+0xae>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4bc:	682f      	ldr	r7, [r5, #0]
 800a4be:	6a21      	ldr	r1, [r4, #32]
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	d030      	beq.n	800a526 <__sflush_r+0x92>
 800a4c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	0759      	lsls	r1, r3, #29
 800a4ca:	d505      	bpl.n	800a4d8 <__sflush_r+0x44>
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4d2:	b10b      	cbz	r3, 800a4d8 <__sflush_r+0x44>
 800a4d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	2300      	movs	r3, #0
 800a4da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b0      	blx	r6
 800a4e2:	1c43      	adds	r3, r0, #1
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	d106      	bne.n	800a4f6 <__sflush_r+0x62>
 800a4e8:	6829      	ldr	r1, [r5, #0]
 800a4ea:	291d      	cmp	r1, #29
 800a4ec:	d82b      	bhi.n	800a546 <__sflush_r+0xb2>
 800a4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a598 <__sflush_r+0x104>)
 800a4f0:	410a      	asrs	r2, r1
 800a4f2:	07d6      	lsls	r6, r2, #31
 800a4f4:	d427      	bmi.n	800a546 <__sflush_r+0xb2>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	6062      	str	r2, [r4, #4]
 800a4fa:	04d9      	lsls	r1, r3, #19
 800a4fc:	6922      	ldr	r2, [r4, #16]
 800a4fe:	6022      	str	r2, [r4, #0]
 800a500:	d504      	bpl.n	800a50c <__sflush_r+0x78>
 800a502:	1c42      	adds	r2, r0, #1
 800a504:	d101      	bne.n	800a50a <__sflush_r+0x76>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	b903      	cbnz	r3, 800a50c <__sflush_r+0x78>
 800a50a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a50c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a50e:	602f      	str	r7, [r5, #0]
 800a510:	b1b9      	cbz	r1, 800a542 <__sflush_r+0xae>
 800a512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a516:	4299      	cmp	r1, r3
 800a518:	d002      	beq.n	800a520 <__sflush_r+0x8c>
 800a51a:	4628      	mov	r0, r5
 800a51c:	f7ff fb38 	bl	8009b90 <_free_r>
 800a520:	2300      	movs	r3, #0
 800a522:	6363      	str	r3, [r4, #52]	@ 0x34
 800a524:	e00d      	b.n	800a542 <__sflush_r+0xae>
 800a526:	2301      	movs	r3, #1
 800a528:	4628      	mov	r0, r5
 800a52a:	47b0      	blx	r6
 800a52c:	4602      	mov	r2, r0
 800a52e:	1c50      	adds	r0, r2, #1
 800a530:	d1c9      	bne.n	800a4c6 <__sflush_r+0x32>
 800a532:	682b      	ldr	r3, [r5, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0c6      	beq.n	800a4c6 <__sflush_r+0x32>
 800a538:	2b1d      	cmp	r3, #29
 800a53a:	d001      	beq.n	800a540 <__sflush_r+0xac>
 800a53c:	2b16      	cmp	r3, #22
 800a53e:	d11e      	bne.n	800a57e <__sflush_r+0xea>
 800a540:	602f      	str	r7, [r5, #0]
 800a542:	2000      	movs	r0, #0
 800a544:	e022      	b.n	800a58c <__sflush_r+0xf8>
 800a546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a54a:	b21b      	sxth	r3, r3
 800a54c:	e01b      	b.n	800a586 <__sflush_r+0xf2>
 800a54e:	690f      	ldr	r7, [r1, #16]
 800a550:	2f00      	cmp	r7, #0
 800a552:	d0f6      	beq.n	800a542 <__sflush_r+0xae>
 800a554:	0793      	lsls	r3, r2, #30
 800a556:	680e      	ldr	r6, [r1, #0]
 800a558:	bf08      	it	eq
 800a55a:	694b      	ldreq	r3, [r1, #20]
 800a55c:	600f      	str	r7, [r1, #0]
 800a55e:	bf18      	it	ne
 800a560:	2300      	movne	r3, #0
 800a562:	eba6 0807 	sub.w	r8, r6, r7
 800a566:	608b      	str	r3, [r1, #8]
 800a568:	f1b8 0f00 	cmp.w	r8, #0
 800a56c:	dde9      	ble.n	800a542 <__sflush_r+0xae>
 800a56e:	6a21      	ldr	r1, [r4, #32]
 800a570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a572:	4643      	mov	r3, r8
 800a574:	463a      	mov	r2, r7
 800a576:	4628      	mov	r0, r5
 800a578:	47b0      	blx	r6
 800a57a:	2800      	cmp	r0, #0
 800a57c:	dc08      	bgt.n	800a590 <__sflush_r+0xfc>
 800a57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	f04f 30ff 	mov.w	r0, #4294967295
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	4407      	add	r7, r0
 800a592:	eba8 0800 	sub.w	r8, r8, r0
 800a596:	e7e7      	b.n	800a568 <__sflush_r+0xd4>
 800a598:	dfbffffe 	.word	0xdfbffffe

0800a59c <_fflush_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	690b      	ldr	r3, [r1, #16]
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	b913      	cbnz	r3, 800a5ac <_fflush_r+0x10>
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	b118      	cbz	r0, 800a5b6 <_fflush_r+0x1a>
 800a5ae:	6a03      	ldr	r3, [r0, #32]
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <_fflush_r+0x1a>
 800a5b2:	f7fe fba5 	bl	8008d00 <__sinit>
 800a5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0f3      	beq.n	800a5a6 <_fflush_r+0xa>
 800a5be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5c0:	07d0      	lsls	r0, r2, #31
 800a5c2:	d404      	bmi.n	800a5ce <_fflush_r+0x32>
 800a5c4:	0599      	lsls	r1, r3, #22
 800a5c6:	d402      	bmi.n	800a5ce <_fflush_r+0x32>
 800a5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ca:	f7fe fc90 	bl	8008eee <__retarget_lock_acquire_recursive>
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	f7ff ff5f 	bl	800a494 <__sflush_r>
 800a5d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5d8:	07da      	lsls	r2, r3, #31
 800a5da:	4605      	mov	r5, r0
 800a5dc:	d4e4      	bmi.n	800a5a8 <_fflush_r+0xc>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	059b      	lsls	r3, r3, #22
 800a5e2:	d4e1      	bmi.n	800a5a8 <_fflush_r+0xc>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e6:	f7fe fc83 	bl	8008ef0 <__retarget_lock_release_recursive>
 800a5ea:	e7dd      	b.n	800a5a8 <_fflush_r+0xc>

0800a5ec <_sbrk_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d06      	ldr	r5, [pc, #24]	@ (800a608 <_sbrk_r+0x1c>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	f7f7 fc2a 	bl	8001e50 <_sbrk>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_sbrk_r+0x1a>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_sbrk_r+0x1a>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	200013a4 	.word	0x200013a4

0800a60c <memcpy>:
 800a60c:	440a      	add	r2, r1
 800a60e:	4291      	cmp	r1, r2
 800a610:	f100 33ff 	add.w	r3, r0, #4294967295
 800a614:	d100      	bne.n	800a618 <memcpy+0xc>
 800a616:	4770      	bx	lr
 800a618:	b510      	push	{r4, lr}
 800a61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a622:	4291      	cmp	r1, r2
 800a624:	d1f9      	bne.n	800a61a <memcpy+0xe>
 800a626:	bd10      	pop	{r4, pc}

0800a628 <__assert_func>:
 800a628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a62a:	4614      	mov	r4, r2
 800a62c:	461a      	mov	r2, r3
 800a62e:	4b09      	ldr	r3, [pc, #36]	@ (800a654 <__assert_func+0x2c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4605      	mov	r5, r0
 800a634:	68d8      	ldr	r0, [r3, #12]
 800a636:	b954      	cbnz	r4, 800a64e <__assert_func+0x26>
 800a638:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <__assert_func+0x30>)
 800a63a:	461c      	mov	r4, r3
 800a63c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a640:	9100      	str	r1, [sp, #0]
 800a642:	462b      	mov	r3, r5
 800a644:	4905      	ldr	r1, [pc, #20]	@ (800a65c <__assert_func+0x34>)
 800a646:	f000 f841 	bl	800a6cc <fiprintf>
 800a64a:	f000 f851 	bl	800a6f0 <abort>
 800a64e:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <__assert_func+0x38>)
 800a650:	e7f4      	b.n	800a63c <__assert_func+0x14>
 800a652:	bf00      	nop
 800a654:	20000024 	.word	0x20000024
 800a658:	0800aefd 	.word	0x0800aefd
 800a65c:	0800aecf 	.word	0x0800aecf
 800a660:	0800aec2 	.word	0x0800aec2

0800a664 <_calloc_r>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	fba1 5402 	umull	r5, r4, r1, r2
 800a66a:	b93c      	cbnz	r4, 800a67c <_calloc_r+0x18>
 800a66c:	4629      	mov	r1, r5
 800a66e:	f7ff fb03 	bl	8009c78 <_malloc_r>
 800a672:	4606      	mov	r6, r0
 800a674:	b928      	cbnz	r0, 800a682 <_calloc_r+0x1e>
 800a676:	2600      	movs	r6, #0
 800a678:	4630      	mov	r0, r6
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	220c      	movs	r2, #12
 800a67e:	6002      	str	r2, [r0, #0]
 800a680:	e7f9      	b.n	800a676 <_calloc_r+0x12>
 800a682:	462a      	mov	r2, r5
 800a684:	4621      	mov	r1, r4
 800a686:	f7fe fbb4 	bl	8008df2 <memset>
 800a68a:	e7f5      	b.n	800a678 <_calloc_r+0x14>

0800a68c <__ascii_mbtowc>:
 800a68c:	b082      	sub	sp, #8
 800a68e:	b901      	cbnz	r1, 800a692 <__ascii_mbtowc+0x6>
 800a690:	a901      	add	r1, sp, #4
 800a692:	b142      	cbz	r2, 800a6a6 <__ascii_mbtowc+0x1a>
 800a694:	b14b      	cbz	r3, 800a6aa <__ascii_mbtowc+0x1e>
 800a696:	7813      	ldrb	r3, [r2, #0]
 800a698:	600b      	str	r3, [r1, #0]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	1e10      	subs	r0, r2, #0
 800a69e:	bf18      	it	ne
 800a6a0:	2001      	movne	r0, #1
 800a6a2:	b002      	add	sp, #8
 800a6a4:	4770      	bx	lr
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	e7fb      	b.n	800a6a2 <__ascii_mbtowc+0x16>
 800a6aa:	f06f 0001 	mvn.w	r0, #1
 800a6ae:	e7f8      	b.n	800a6a2 <__ascii_mbtowc+0x16>

0800a6b0 <__ascii_wctomb>:
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	b141      	cbz	r1, 800a6c8 <__ascii_wctomb+0x18>
 800a6b6:	2aff      	cmp	r2, #255	@ 0xff
 800a6b8:	d904      	bls.n	800a6c4 <__ascii_wctomb+0x14>
 800a6ba:	228a      	movs	r2, #138	@ 0x8a
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c2:	4770      	bx	lr
 800a6c4:	700a      	strb	r2, [r1, #0]
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	4770      	bx	lr
	...

0800a6cc <fiprintf>:
 800a6cc:	b40e      	push	{r1, r2, r3}
 800a6ce:	b503      	push	{r0, r1, lr}
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	ab03      	add	r3, sp, #12
 800a6d4:	4805      	ldr	r0, [pc, #20]	@ (800a6ec <fiprintf+0x20>)
 800a6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6da:	6800      	ldr	r0, [r0, #0]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f000 f837 	bl	800a750 <_vfiprintf_r>
 800a6e2:	b002      	add	sp, #8
 800a6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e8:	b003      	add	sp, #12
 800a6ea:	4770      	bx	lr
 800a6ec:	20000024 	.word	0x20000024

0800a6f0 <abort>:
 800a6f0:	b508      	push	{r3, lr}
 800a6f2:	2006      	movs	r0, #6
 800a6f4:	f000 fa00 	bl	800aaf8 <raise>
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	f7f7 fb79 	bl	8001df0 <_exit>

0800a6fe <__sfputc_r>:
 800a6fe:	6893      	ldr	r3, [r2, #8]
 800a700:	3b01      	subs	r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	b410      	push	{r4}
 800a706:	6093      	str	r3, [r2, #8]
 800a708:	da08      	bge.n	800a71c <__sfputc_r+0x1e>
 800a70a:	6994      	ldr	r4, [r2, #24]
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	db01      	blt.n	800a714 <__sfputc_r+0x16>
 800a710:	290a      	cmp	r1, #10
 800a712:	d103      	bne.n	800a71c <__sfputc_r+0x1e>
 800a714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a718:	f000 b932 	b.w	800a980 <__swbuf_r>
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	1c58      	adds	r0, r3, #1
 800a720:	6010      	str	r0, [r2, #0]
 800a722:	7019      	strb	r1, [r3, #0]
 800a724:	4608      	mov	r0, r1
 800a726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <__sfputs_r>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	4606      	mov	r6, r0
 800a730:	460f      	mov	r7, r1
 800a732:	4614      	mov	r4, r2
 800a734:	18d5      	adds	r5, r2, r3
 800a736:	42ac      	cmp	r4, r5
 800a738:	d101      	bne.n	800a73e <__sfputs_r+0x12>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e007      	b.n	800a74e <__sfputs_r+0x22>
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	463a      	mov	r2, r7
 800a744:	4630      	mov	r0, r6
 800a746:	f7ff ffda 	bl	800a6fe <__sfputc_r>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d1f3      	bne.n	800a736 <__sfputs_r+0xa>
 800a74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a750 <_vfiprintf_r>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	460d      	mov	r5, r1
 800a756:	b09d      	sub	sp, #116	@ 0x74
 800a758:	4614      	mov	r4, r2
 800a75a:	4698      	mov	r8, r3
 800a75c:	4606      	mov	r6, r0
 800a75e:	b118      	cbz	r0, 800a768 <_vfiprintf_r+0x18>
 800a760:	6a03      	ldr	r3, [r0, #32]
 800a762:	b90b      	cbnz	r3, 800a768 <_vfiprintf_r+0x18>
 800a764:	f7fe facc 	bl	8008d00 <__sinit>
 800a768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a76a:	07d9      	lsls	r1, r3, #31
 800a76c:	d405      	bmi.n	800a77a <_vfiprintf_r+0x2a>
 800a76e:	89ab      	ldrh	r3, [r5, #12]
 800a770:	059a      	lsls	r2, r3, #22
 800a772:	d402      	bmi.n	800a77a <_vfiprintf_r+0x2a>
 800a774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a776:	f7fe fbba 	bl	8008eee <__retarget_lock_acquire_recursive>
 800a77a:	89ab      	ldrh	r3, [r5, #12]
 800a77c:	071b      	lsls	r3, r3, #28
 800a77e:	d501      	bpl.n	800a784 <_vfiprintf_r+0x34>
 800a780:	692b      	ldr	r3, [r5, #16]
 800a782:	b99b      	cbnz	r3, 800a7ac <_vfiprintf_r+0x5c>
 800a784:	4629      	mov	r1, r5
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f938 	bl	800a9fc <__swsetup_r>
 800a78c:	b170      	cbz	r0, 800a7ac <_vfiprintf_r+0x5c>
 800a78e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a790:	07dc      	lsls	r4, r3, #31
 800a792:	d504      	bpl.n	800a79e <_vfiprintf_r+0x4e>
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	b01d      	add	sp, #116	@ 0x74
 800a79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	0598      	lsls	r0, r3, #22
 800a7a2:	d4f7      	bmi.n	800a794 <_vfiprintf_r+0x44>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7a6:	f7fe fba3 	bl	8008ef0 <__retarget_lock_release_recursive>
 800a7aa:	e7f3      	b.n	800a794 <_vfiprintf_r+0x44>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ba:	2330      	movs	r3, #48	@ 0x30
 800a7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a96c <_vfiprintf_r+0x21c>
 800a7c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7c4:	f04f 0901 	mov.w	r9, #1
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	469a      	mov	sl, r3
 800a7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d0:	b10a      	cbz	r2, 800a7d6 <_vfiprintf_r+0x86>
 800a7d2:	2a25      	cmp	r2, #37	@ 0x25
 800a7d4:	d1f9      	bne.n	800a7ca <_vfiprintf_r+0x7a>
 800a7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7da:	d00b      	beq.n	800a7f4 <_vfiprintf_r+0xa4>
 800a7dc:	465b      	mov	r3, fp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ffa2 	bl	800a72c <__sfputs_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f000 80a7 	beq.w	800a93c <_vfiprintf_r+0x1ec>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f0:	445a      	add	r2, fp
 800a7f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 809f 	beq.w	800a93c <_vfiprintf_r+0x1ec>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a808:	f10a 0a01 	add.w	sl, sl, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	9307      	str	r3, [sp, #28]
 800a810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a814:	931a      	str	r3, [sp, #104]	@ 0x68
 800a816:	4654      	mov	r4, sl
 800a818:	2205      	movs	r2, #5
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4853      	ldr	r0, [pc, #332]	@ (800a96c <_vfiprintf_r+0x21c>)
 800a820:	f7f5 fcfe 	bl	8000220 <memchr>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	b9d8      	cbnz	r0, 800a860 <_vfiprintf_r+0x110>
 800a828:	06d1      	lsls	r1, r2, #27
 800a82a:	bf44      	itt	mi
 800a82c:	2320      	movmi	r3, #32
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a832:	0713      	lsls	r3, r2, #28
 800a834:	bf44      	itt	mi
 800a836:	232b      	movmi	r3, #43	@ 0x2b
 800a838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a83c:	f89a 3000 	ldrb.w	r3, [sl]
 800a840:	2b2a      	cmp	r3, #42	@ 0x2a
 800a842:	d015      	beq.n	800a870 <_vfiprintf_r+0x120>
 800a844:	9a07      	ldr	r2, [sp, #28]
 800a846:	4654      	mov	r4, sl
 800a848:	2000      	movs	r0, #0
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	4621      	mov	r1, r4
 800a850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a854:	3b30      	subs	r3, #48	@ 0x30
 800a856:	2b09      	cmp	r3, #9
 800a858:	d94b      	bls.n	800a8f2 <_vfiprintf_r+0x1a2>
 800a85a:	b1b0      	cbz	r0, 800a88a <_vfiprintf_r+0x13a>
 800a85c:	9207      	str	r2, [sp, #28]
 800a85e:	e014      	b.n	800a88a <_vfiprintf_r+0x13a>
 800a860:	eba0 0308 	sub.w	r3, r0, r8
 800a864:	fa09 f303 	lsl.w	r3, r9, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	46a2      	mov	sl, r4
 800a86e:	e7d2      	b.n	800a816 <_vfiprintf_r+0xc6>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	1d19      	adds	r1, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfbb      	ittet	lt
 800a87c:	425b      	neglt	r3, r3
 800a87e:	f042 0202 	orrlt.w	r2, r2, #2
 800a882:	9307      	strge	r3, [sp, #28]
 800a884:	9307      	strlt	r3, [sp, #28]
 800a886:	bfb8      	it	lt
 800a888:	9204      	strlt	r2, [sp, #16]
 800a88a:	7823      	ldrb	r3, [r4, #0]
 800a88c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a88e:	d10a      	bne.n	800a8a6 <_vfiprintf_r+0x156>
 800a890:	7863      	ldrb	r3, [r4, #1]
 800a892:	2b2a      	cmp	r3, #42	@ 0x2a
 800a894:	d132      	bne.n	800a8fc <_vfiprintf_r+0x1ac>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	9203      	str	r2, [sp, #12]
 800a89e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8a2:	3402      	adds	r4, #2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a97c <_vfiprintf_r+0x22c>
 800a8aa:	7821      	ldrb	r1, [r4, #0]
 800a8ac:	2203      	movs	r2, #3
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f7f5 fcb6 	bl	8000220 <memchr>
 800a8b4:	b138      	cbz	r0, 800a8c6 <_vfiprintf_r+0x176>
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	eba0 000a 	sub.w	r0, r0, sl
 800a8bc:	2240      	movs	r2, #64	@ 0x40
 800a8be:	4082      	lsls	r2, r0
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	3401      	adds	r4, #1
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ca:	4829      	ldr	r0, [pc, #164]	@ (800a970 <_vfiprintf_r+0x220>)
 800a8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8d0:	2206      	movs	r2, #6
 800a8d2:	f7f5 fca5 	bl	8000220 <memchr>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d03f      	beq.n	800a95a <_vfiprintf_r+0x20a>
 800a8da:	4b26      	ldr	r3, [pc, #152]	@ (800a974 <_vfiprintf_r+0x224>)
 800a8dc:	bb1b      	cbnz	r3, 800a926 <_vfiprintf_r+0x1d6>
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	3307      	adds	r3, #7
 800a8e2:	f023 0307 	bic.w	r3, r3, #7
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ec:	443b      	add	r3, r7
 800a8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f0:	e76a      	b.n	800a7c8 <_vfiprintf_r+0x78>
 800a8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	e7a8      	b.n	800a84e <_vfiprintf_r+0xfe>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	3401      	adds	r4, #1
 800a900:	9305      	str	r3, [sp, #20]
 800a902:	4619      	mov	r1, r3
 800a904:	f04f 0c0a 	mov.w	ip, #10
 800a908:	4620      	mov	r0, r4
 800a90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90e:	3a30      	subs	r2, #48	@ 0x30
 800a910:	2a09      	cmp	r2, #9
 800a912:	d903      	bls.n	800a91c <_vfiprintf_r+0x1cc>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0c6      	beq.n	800a8a6 <_vfiprintf_r+0x156>
 800a918:	9105      	str	r1, [sp, #20]
 800a91a:	e7c4      	b.n	800a8a6 <_vfiprintf_r+0x156>
 800a91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a920:	4604      	mov	r4, r0
 800a922:	2301      	movs	r3, #1
 800a924:	e7f0      	b.n	800a908 <_vfiprintf_r+0x1b8>
 800a926:	ab03      	add	r3, sp, #12
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	462a      	mov	r2, r5
 800a92c:	4b12      	ldr	r3, [pc, #72]	@ (800a978 <_vfiprintf_r+0x228>)
 800a92e:	a904      	add	r1, sp, #16
 800a930:	4630      	mov	r0, r6
 800a932:	f7fd fda1 	bl	8008478 <_printf_float>
 800a936:	4607      	mov	r7, r0
 800a938:	1c78      	adds	r0, r7, #1
 800a93a:	d1d6      	bne.n	800a8ea <_vfiprintf_r+0x19a>
 800a93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a93e:	07d9      	lsls	r1, r3, #31
 800a940:	d405      	bmi.n	800a94e <_vfiprintf_r+0x1fe>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	059a      	lsls	r2, r3, #22
 800a946:	d402      	bmi.n	800a94e <_vfiprintf_r+0x1fe>
 800a948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a94a:	f7fe fad1 	bl	8008ef0 <__retarget_lock_release_recursive>
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	065b      	lsls	r3, r3, #25
 800a952:	f53f af1f 	bmi.w	800a794 <_vfiprintf_r+0x44>
 800a956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a958:	e71e      	b.n	800a798 <_vfiprintf_r+0x48>
 800a95a:	ab03      	add	r3, sp, #12
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	462a      	mov	r2, r5
 800a960:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <_vfiprintf_r+0x228>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	4630      	mov	r0, r6
 800a966:	f7fe f81f 	bl	80089a8 <_printf_i>
 800a96a:	e7e4      	b.n	800a936 <_vfiprintf_r+0x1e6>
 800a96c:	0800afff 	.word	0x0800afff
 800a970:	0800b009 	.word	0x0800b009
 800a974:	08008479 	.word	0x08008479
 800a978:	0800a72d 	.word	0x0800a72d
 800a97c:	0800b005 	.word	0x0800b005

0800a980 <__swbuf_r>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	460e      	mov	r6, r1
 800a984:	4614      	mov	r4, r2
 800a986:	4605      	mov	r5, r0
 800a988:	b118      	cbz	r0, 800a992 <__swbuf_r+0x12>
 800a98a:	6a03      	ldr	r3, [r0, #32]
 800a98c:	b90b      	cbnz	r3, 800a992 <__swbuf_r+0x12>
 800a98e:	f7fe f9b7 	bl	8008d00 <__sinit>
 800a992:	69a3      	ldr	r3, [r4, #24]
 800a994:	60a3      	str	r3, [r4, #8]
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	071a      	lsls	r2, r3, #28
 800a99a:	d501      	bpl.n	800a9a0 <__swbuf_r+0x20>
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	b943      	cbnz	r3, 800a9b2 <__swbuf_r+0x32>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f82a 	bl	800a9fc <__swsetup_r>
 800a9a8:	b118      	cbz	r0, 800a9b2 <__swbuf_r+0x32>
 800a9aa:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	6922      	ldr	r2, [r4, #16]
 800a9b6:	1a98      	subs	r0, r3, r2
 800a9b8:	6963      	ldr	r3, [r4, #20]
 800a9ba:	b2f6      	uxtb	r6, r6
 800a9bc:	4283      	cmp	r3, r0
 800a9be:	4637      	mov	r7, r6
 800a9c0:	dc05      	bgt.n	800a9ce <__swbuf_r+0x4e>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f7ff fde9 	bl	800a59c <_fflush_r>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d1ed      	bne.n	800a9aa <__swbuf_r+0x2a>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	60a3      	str	r3, [r4, #8]
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	701e      	strb	r6, [r3, #0]
 800a9dc:	6962      	ldr	r2, [r4, #20]
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d004      	beq.n	800a9ee <__swbuf_r+0x6e>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	07db      	lsls	r3, r3, #31
 800a9e8:	d5e1      	bpl.n	800a9ae <__swbuf_r+0x2e>
 800a9ea:	2e0a      	cmp	r6, #10
 800a9ec:	d1df      	bne.n	800a9ae <__swbuf_r+0x2e>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7ff fdd3 	bl	800a59c <_fflush_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d0d9      	beq.n	800a9ae <__swbuf_r+0x2e>
 800a9fa:	e7d6      	b.n	800a9aa <__swbuf_r+0x2a>

0800a9fc <__swsetup_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4b29      	ldr	r3, [pc, #164]	@ (800aaa4 <__swsetup_r+0xa8>)
 800aa00:	4605      	mov	r5, r0
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	460c      	mov	r4, r1
 800aa06:	b118      	cbz	r0, 800aa10 <__swsetup_r+0x14>
 800aa08:	6a03      	ldr	r3, [r0, #32]
 800aa0a:	b90b      	cbnz	r3, 800aa10 <__swsetup_r+0x14>
 800aa0c:	f7fe f978 	bl	8008d00 <__sinit>
 800aa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa14:	0719      	lsls	r1, r3, #28
 800aa16:	d422      	bmi.n	800aa5e <__swsetup_r+0x62>
 800aa18:	06da      	lsls	r2, r3, #27
 800aa1a:	d407      	bmi.n	800aa2c <__swsetup_r+0x30>
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	602a      	str	r2, [r5, #0]
 800aa20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2a:	e033      	b.n	800aa94 <__swsetup_r+0x98>
 800aa2c:	0758      	lsls	r0, r3, #29
 800aa2e:	d512      	bpl.n	800aa56 <__swsetup_r+0x5a>
 800aa30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa32:	b141      	cbz	r1, 800aa46 <__swsetup_r+0x4a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__swsetup_r+0x46>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f7ff f8a7 	bl	8009b90 <_free_r>
 800aa42:	2300      	movs	r3, #0
 800aa44:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f043 0308 	orr.w	r3, r3, #8
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	b94b      	cbnz	r3, 800aa76 <__swsetup_r+0x7a>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa6c:	d003      	beq.n	800aa76 <__swsetup_r+0x7a>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 f883 	bl	800ab7c <__smakebuf_r>
 800aa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7a:	f013 0201 	ands.w	r2, r3, #1
 800aa7e:	d00a      	beq.n	800aa96 <__swsetup_r+0x9a>
 800aa80:	2200      	movs	r2, #0
 800aa82:	60a2      	str	r2, [r4, #8]
 800aa84:	6962      	ldr	r2, [r4, #20]
 800aa86:	4252      	negs	r2, r2
 800aa88:	61a2      	str	r2, [r4, #24]
 800aa8a:	6922      	ldr	r2, [r4, #16]
 800aa8c:	b942      	cbnz	r2, 800aaa0 <__swsetup_r+0xa4>
 800aa8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa92:	d1c5      	bne.n	800aa20 <__swsetup_r+0x24>
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	0799      	lsls	r1, r3, #30
 800aa98:	bf58      	it	pl
 800aa9a:	6962      	ldrpl	r2, [r4, #20]
 800aa9c:	60a2      	str	r2, [r4, #8]
 800aa9e:	e7f4      	b.n	800aa8a <__swsetup_r+0x8e>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e7f7      	b.n	800aa94 <__swsetup_r+0x98>
 800aaa4:	20000024 	.word	0x20000024

0800aaa8 <_raise_r>:
 800aaa8:	291f      	cmp	r1, #31
 800aaaa:	b538      	push	{r3, r4, r5, lr}
 800aaac:	4605      	mov	r5, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	d904      	bls.n	800aabc <_raise_r+0x14>
 800aab2:	2316      	movs	r3, #22
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aabe:	b112      	cbz	r2, 800aac6 <_raise_r+0x1e>
 800aac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aac4:	b94b      	cbnz	r3, 800aada <_raise_r+0x32>
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f830 	bl	800ab2c <_getpid_r>
 800aacc:	4622      	mov	r2, r4
 800aace:	4601      	mov	r1, r0
 800aad0:	4628      	mov	r0, r5
 800aad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad6:	f000 b817 	b.w	800ab08 <_kill_r>
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d00a      	beq.n	800aaf4 <_raise_r+0x4c>
 800aade:	1c59      	adds	r1, r3, #1
 800aae0:	d103      	bne.n	800aaea <_raise_r+0x42>
 800aae2:	2316      	movs	r3, #22
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	2001      	movs	r0, #1
 800aae8:	e7e7      	b.n	800aaba <_raise_r+0x12>
 800aaea:	2100      	movs	r1, #0
 800aaec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	4798      	blx	r3
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7e0      	b.n	800aaba <_raise_r+0x12>

0800aaf8 <raise>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	@ (800ab04 <raise+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f7ff bfd3 	b.w	800aaa8 <_raise_r>
 800ab02:	bf00      	nop
 800ab04:	20000024 	.word	0x20000024

0800ab08 <_kill_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	@ (800ab28 <_kill_r+0x20>)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	f7f7 f963 	bl	8001de0 <_kill>
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	d102      	bne.n	800ab24 <_kill_r+0x1c>
 800ab1e:	682b      	ldr	r3, [r5, #0]
 800ab20:	b103      	cbz	r3, 800ab24 <_kill_r+0x1c>
 800ab22:	6023      	str	r3, [r4, #0]
 800ab24:	bd38      	pop	{r3, r4, r5, pc}
 800ab26:	bf00      	nop
 800ab28:	200013a4 	.word	0x200013a4

0800ab2c <_getpid_r>:
 800ab2c:	f7f7 b956 	b.w	8001ddc <_getpid>

0800ab30 <__swhatbuf_r>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	460c      	mov	r4, r1
 800ab34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab38:	2900      	cmp	r1, #0
 800ab3a:	b096      	sub	sp, #88	@ 0x58
 800ab3c:	4615      	mov	r5, r2
 800ab3e:	461e      	mov	r6, r3
 800ab40:	da0d      	bge.n	800ab5e <__swhatbuf_r+0x2e>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab48:	f04f 0100 	mov.w	r1, #0
 800ab4c:	bf14      	ite	ne
 800ab4e:	2340      	movne	r3, #64	@ 0x40
 800ab50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab54:	2000      	movs	r0, #0
 800ab56:	6031      	str	r1, [r6, #0]
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	b016      	add	sp, #88	@ 0x58
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	466a      	mov	r2, sp
 800ab60:	f000 f848 	bl	800abf4 <_fstat_r>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	dbec      	blt.n	800ab42 <__swhatbuf_r+0x12>
 800ab68:	9901      	ldr	r1, [sp, #4]
 800ab6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab72:	4259      	negs	r1, r3
 800ab74:	4159      	adcs	r1, r3
 800ab76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab7a:	e7eb      	b.n	800ab54 <__swhatbuf_r+0x24>

0800ab7c <__smakebuf_r>:
 800ab7c:	898b      	ldrh	r3, [r1, #12]
 800ab7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab80:	079d      	lsls	r5, r3, #30
 800ab82:	4606      	mov	r6, r0
 800ab84:	460c      	mov	r4, r1
 800ab86:	d507      	bpl.n	800ab98 <__smakebuf_r+0x1c>
 800ab88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	6123      	str	r3, [r4, #16]
 800ab90:	2301      	movs	r3, #1
 800ab92:	6163      	str	r3, [r4, #20]
 800ab94:	b003      	add	sp, #12
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab98:	ab01      	add	r3, sp, #4
 800ab9a:	466a      	mov	r2, sp
 800ab9c:	f7ff ffc8 	bl	800ab30 <__swhatbuf_r>
 800aba0:	9f00      	ldr	r7, [sp, #0]
 800aba2:	4605      	mov	r5, r0
 800aba4:	4639      	mov	r1, r7
 800aba6:	4630      	mov	r0, r6
 800aba8:	f7ff f866 	bl	8009c78 <_malloc_r>
 800abac:	b948      	cbnz	r0, 800abc2 <__smakebuf_r+0x46>
 800abae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb2:	059a      	lsls	r2, r3, #22
 800abb4:	d4ee      	bmi.n	800ab94 <__smakebuf_r+0x18>
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	f043 0302 	orr.w	r3, r3, #2
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	e7e2      	b.n	800ab88 <__smakebuf_r+0xc>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	6020      	str	r0, [r4, #0]
 800abc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abd2:	b15b      	cbz	r3, 800abec <__smakebuf_r+0x70>
 800abd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd8:	4630      	mov	r0, r6
 800abda:	f000 f81d 	bl	800ac18 <_isatty_r>
 800abde:	b128      	cbz	r0, 800abec <__smakebuf_r+0x70>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	f023 0303 	bic.w	r3, r3, #3
 800abe6:	f043 0301 	orr.w	r3, r3, #1
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	431d      	orrs	r5, r3
 800abf0:	81a5      	strh	r5, [r4, #12]
 800abf2:	e7cf      	b.n	800ab94 <__smakebuf_r+0x18>

0800abf4 <_fstat_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	@ (800ac14 <_fstat_r+0x20>)
 800abf8:	2300      	movs	r3, #0
 800abfa:	4604      	mov	r4, r0
 800abfc:	4608      	mov	r0, r1
 800abfe:	4611      	mov	r1, r2
 800ac00:	602b      	str	r3, [r5, #0]
 800ac02:	f7f7 f91b 	bl	8001e3c <_fstat>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	d102      	bne.n	800ac10 <_fstat_r+0x1c>
 800ac0a:	682b      	ldr	r3, [r5, #0]
 800ac0c:	b103      	cbz	r3, 800ac10 <_fstat_r+0x1c>
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	bf00      	nop
 800ac14:	200013a4 	.word	0x200013a4

0800ac18 <_isatty_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d06      	ldr	r5, [pc, #24]	@ (800ac34 <_isatty_r+0x1c>)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	602b      	str	r3, [r5, #0]
 800ac24:	f7f7 f910 	bl	8001e48 <_isatty>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_isatty_r+0x1a>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_isatty_r+0x1a>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	200013a4 	.word	0x200013a4

0800ac38 <_init>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr

0800ac44 <_fini>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	bf00      	nop
 800ac48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4a:	bc08      	pop	{r3}
 800ac4c:	469e      	mov	lr, r3
 800ac4e:	4770      	bx	lr
