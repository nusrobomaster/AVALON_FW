
Avalon_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecd0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800eeb0  0800eeb0  0000feb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f270  0800f270  000111fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f270  0800f270  00010270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f278  0800f278  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f278  0800f278  00010278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f280  0800f280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800f288  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  200001fc  0800f484  000111fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  0800f484  000113b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034cd8  00000000  00000000  0001122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000600e  00000000  00000000  00045f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  0004bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc1  00000000  00000000  0004e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034488  00000000  00000000  0004fed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000322dc  00000000  00000000  00084359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149ad5  00000000  00000000  000b6635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0020010a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9c4  00000000  00000000  002001c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0020ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0020abe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ee98 	.word	0x0800ee98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800ee98 	.word	0x0800ee98

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00c f8a6 	bl	800d052 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f22:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f28:	4b31      	ldr	r3, [pc, #196]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f50:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f56:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f76:	f002 f9bb 	bl	80032f0 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f80:	f001 f8ac 	bl	80020dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000f90:	f003 fe5a 	bl	8004c48 <HAL_ADCEx_MultiModeConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f9a:	f001 f89f 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_ADC1_Init+0x10c>)
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000fbc:	f002 ff94 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fc6:	f001 f889 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_ADC1_Init+0x110>)
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <MX_ADC1_Init+0x108>)
 8000fd8:	f002 ff86 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fe2:	f001 f87b 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	@ 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000218 	.word	0x20000218
 8000ff4:	04300002 	.word	0x04300002
 8000ff8:	08600004 	.word	0x08600004

08000ffc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00c f822 	bl	800d052 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001010:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <MX_ADC2_Init+0x100>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001016:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001036:	2208      	movs	r2, #8
 8001038:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001048:	2203      	movs	r2, #3
 800104a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG3;
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001056:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800105e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001062:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800107a:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 800107c:	f002 f938 	bl	80032f0 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001086:	f001 f829 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_ADC2_Init+0x104>)
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001096:	237f      	movs	r3, #127	@ 0x7f
 8001098:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109a:	2304      	movs	r3, #4
 800109c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010a8:	f002 ff1e 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010b2:	f001 f813 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_ADC2_Init+0x108>)
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ba:	230c      	movs	r3, #12
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010c4:	f002 ff10 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80010ce:	f001 f805 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <MX_ADC2_Init+0x10c>)
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d6:	2312      	movs	r3, #18
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_ADC2_Init+0xfc>)
 80010e0:	f002 ff02 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80010ea:	f000 fff7 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000284 	.word	0x20000284
 80010fc:	50000100 	.word	0x50000100
 8001100:	1d500080 	.word	0x1d500080
 8001104:	21800100 	.word	0x21800100
 8001108:	25b00200 	.word	0x25b00200

0800110c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	@ 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00b ff94 	bl	800d052 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800112a:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800112c:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <MX_ADC3_Init+0xe8>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001132:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001136:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001152:	2204      	movs	r2, #4
 8001154:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800115e:	2201      	movs	r2, #1
 8001160:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001164:	2201      	movs	r2, #1
 8001166:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001192:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 8001194:	f002 f8ac 	bl	80032f0 <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800119e:	f000 ff9d 	bl	80020dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 80011ae:	f003 fd4b 	bl	8004c48 <HAL_ADCEx_MultiModeConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011b8:	f000 ff90 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_ADC3_Init+0xec>)
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c0:	2306      	movs	r3, #6
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c8:	237f      	movs	r3, #127	@ 0x7f
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011cc:	2304      	movs	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_ADC3_Init+0xe4>)
 80011da:	f002 fe85 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011e4:	f000 ff7a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	@ 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002f0 	.word	0x200002f0
 80011f4:	50000400 	.word	0x50000400
 80011f8:	04300002 	.word	0x04300002

080011fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0a2      	sub	sp, #136	@ 0x88
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	2254      	movs	r2, #84	@ 0x54
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00b ff18 	bl	800d052 <memset>
  if(adcHandle->Instance==ADC1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800122a:	d172      	bne.n	8001312 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800122c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001230:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001232:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001236:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f008 fa31 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001248:	f000 ff48 	bl	80020dc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800124c:	4b8b      	ldr	r3, [pc, #556]	@ (800147c <HAL_ADC_MspInit+0x280>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a8a      	ldr	r2, [pc, #552]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001254:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001256:	4b89      	ldr	r3, [pc, #548]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10b      	bne.n	8001276 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800125e:	4b88      	ldr	r3, [pc, #544]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a87      	ldr	r2, [pc, #540]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001264:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b85      	ldr	r3, [pc, #532]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a81      	ldr	r2, [pc, #516]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = I_CAP_Pin|V_CAP_Pin;
 800128e:	2303      	movs	r3, #3
 8001290:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f005 f93a 	bl	800651c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012a8:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012aa:	4a77      	ldr	r2, [pc, #476]	@ (8001488 <HAL_ADC_MspInit+0x28c>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ae:	4b75      	ldr	r3, [pc, #468]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012b0:	2205      	movs	r2, #5
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b4:	4b73      	ldr	r3, [pc, #460]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ba:	4b72      	ldr	r3, [pc, #456]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012c0:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012d8:	2220      	movs	r2, #32
 80012da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012dc:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012de:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80012e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e4:	4867      	ldr	r0, [pc, #412]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012e6:	f003 ffb9 	bl	800525c <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80012f0:	f000 fef4 	bl	80020dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a63      	ldr	r2, [pc, #396]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80012fa:	4a62      	ldr	r2, [pc, #392]	@ (8001484 <HAL_ADC_MspInit+0x288>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2105      	movs	r1, #5
 8001304:	2012      	movs	r0, #18
 8001306:	f003 fe82 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800130a:	2012      	movs	r0, #18
 800130c:	f003 fe99 	bl	8005042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001310:	e0af      	b.n	8001472 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5d      	ldr	r2, [pc, #372]	@ (800148c <HAL_ADC_MspInit+0x290>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d171      	bne.n	8001400 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800131c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001320:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001322:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001326:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f008 f9b9 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001338:	f000 fed0 	bl	80020dc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800133c:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <HAL_ADC_MspInit+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001344:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_ADC_MspInit+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800134e:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001354:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b49      	ldr	r3, [pc, #292]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a45      	ldr	r2, [pc, #276]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = V_CHASSIS_Pin|I_SOURCE_Pin|I_CHASSIS_Pin;
 800137e:	230e      	movs	r3, #14
 8001380:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800138e:	4619      	mov	r1, r3
 8001390:	483f      	ldr	r0, [pc, #252]	@ (8001490 <HAL_ADC_MspInit+0x294>)
 8001392:	f005 f8c3 	bl	800651c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001396:	4b3f      	ldr	r3, [pc, #252]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 8001398:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_ADC_MspInit+0x29c>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800139c:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b4:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013bc:	4b35      	ldr	r3, [pc, #212]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013c6:	2220      	movs	r2, #32
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013d2:	4830      	ldr	r0, [pc, #192]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013d4:	f003 ff42 	bl	800525c <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 80013de:	f000 fe7d 	bl	80020dc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80013e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001494 <HAL_ADC_MspInit+0x298>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2012      	movs	r0, #18
 80013f4:	f003 fe0b 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013f8:	2012      	movs	r0, #18
 80013fa:	f003 fe22 	bl	8005042 <HAL_NVIC_EnableIRQ>
}
 80013fe:	e038      	b.n	8001472 <HAL_ADC_MspInit+0x276>
  else if(adcHandle->Instance==ADC3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a25      	ldr	r2, [pc, #148]	@ (800149c <HAL_ADC_MspInit+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d133      	bne.n	8001472 <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800140a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800140e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001414:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4618      	mov	r0, r3
 800141c:	f008 f942 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001426:	f000 fe59 	bl	80020dc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_ADC_MspInit+0x284>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V_TEMP_Pin;
 800145a:	2302      	movs	r3, #2
 800145c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(V_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <HAL_ADC_MspInit+0x2a4>)
 800146e:	f005 f855 	bl	800651c <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3788      	adds	r7, #136	@ 0x88
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000041c 	.word	0x2000041c
 8001480:	40021000 	.word	0x40021000
 8001484:	2000035c 	.word	0x2000035c
 8001488:	40020008 	.word	0x40020008
 800148c:	50000100 	.word	0x50000100
 8001490:	48000800 	.word	0x48000800
 8001494:	200003bc 	.word	0x200003bc
 8001498:	40020408 	.word	0x40020408
 800149c:	50000400 	.word	0x50000400
 80014a0:	48000400 	.word	0x48000400

080014a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <MX_CRC_Init+0x40>)
 80014ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_CRC_Init+0x3c>)
 80014ce:	f003 fdd3 	bl	8005078 <HAL_CRC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014d8:	f000 fe00 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000420 	.word	0x20000420
 80014e4:	40023000 	.word	0x40023000

080014e8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_CRC_MspInit+0x38>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10b      	bne.n	8001512 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 80014fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	6493      	str	r3, [r2, #72]	@ 0x48
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_CRC_MspInit+0x3c>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023000 	.word	0x40023000
 8001524:	40021000 	.word	0x40021000

08001528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001532:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6493      	str	r3, [r2, #72]	@ 0x48
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_DMA_Init+0x78>)
 800153c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <MX_DMA_Init+0x78>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6493      	str	r3, [r2, #72]	@ 0x48
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <MX_DMA_Init+0x78>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6493      	str	r3, [r2, #72]	@ 0x48
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <MX_DMA_Init+0x78>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	200b      	movs	r0, #11
 800157c:	f003 fd47 	bl	800500e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001580:	200b      	movs	r0, #11
 8001582:	f003 fd5e 	bl	8005042 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2038      	movs	r0, #56	@ 0x38
 800158c:	f003 fd3f 	bl	800500e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001590:	2038      	movs	r0, #56	@ 0x38
 8001592:	f003 fd56 	bl	8005042 <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_FDCAN2_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015aa:	4a20      	ldr	r2, [pc, #128]	@ (800162c <MX_FDCAN2_Init+0x88>)
 80015ac:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015d4:	2210      	movs	r2, #16
 80015d6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015da:	2201      	movs	r2, #1
 80015dc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 80015fe:	2201      	movs	r2, #1
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_FDCAN2_Init+0x84>)
 8001616:	f004 f893 	bl	8005740 <HAL_FDCAN_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001620:	f000 fd5c 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000444 	.word	0x20000444
 800162c:	40006800 	.word	0x40006800

08001630 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001636:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <MX_FDCAN3_Init+0x88>)
 8001638:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800164e:	2200      	movs	r2, #0
 8001650:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001654:	2201      	movs	r2, #1
 8001656:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800165a:	2200      	movs	r2, #0
 800165c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001660:	2201      	movs	r2, #1
 8001662:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001666:	2202      	movs	r2, #2
 8001668:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800166c:	22a7      	movs	r2, #167	@ 0xa7
 800166e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001672:	2202      	movs	r2, #2
 8001674:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 5;
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001678:	2205      	movs	r2, #5
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 8;
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800167e:	2208      	movs	r2, #8
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 8;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001684:	2208      	movs	r2, #8
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 8;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800168a:	2208      	movs	r2, #8
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 28;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001690:	221c      	movs	r2, #28
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 8;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 8001696:	2208      	movs	r2, #8
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_FDCAN3_Init+0x84>)
 80016a2:	f004 f84d 	bl	8005740 <HAL_FDCAN_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 80016ac:	f000 fd16 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200004a8 	.word	0x200004a8
 80016b8:	40006c00 	.word	0x40006c00

080016bc <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0a0      	sub	sp, #128	@ 0x80
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2254      	movs	r2, #84	@ 0x54
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00b fcb8 	bl	800d052 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001814 <HAL_FDCAN_MspInit+0x158>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d141      	bne.n	8001770 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4618      	mov	r0, r3
 80016fe:	f007 ffd1 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001708:	f000 fce8 	bl	80020dc <Error_Handler>
    }

    /* FDCAN2 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800170c:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a41      	ldr	r2, [pc, #260]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 8001714:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10b      	bne.n	8001736 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a3e      	ldr	r2, [pc, #248]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a38      	ldr	r2, [pc, #224]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b36      	ldr	r3, [pc, #216]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800174e:	2360      	movs	r3, #96	@ 0x60
 8001750:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800175e:	2309      	movs	r3, #9
 8001760:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001766:	4619      	mov	r1, r3
 8001768:	482d      	ldr	r0, [pc, #180]	@ (8001820 <HAL_FDCAN_MspInit+0x164>)
 800176a:	f004 fed7 	bl	800651c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 800176e:	e04d      	b.n	800180c <HAL_FDCAN_MspInit+0x150>
  else if(fdcanHandle->Instance==FDCAN3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2b      	ldr	r2, [pc, #172]	@ (8001824 <HAL_FDCAN_MspInit+0x168>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d148      	bne.n	800180c <HAL_FDCAN_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001784:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4618      	mov	r0, r3
 800178c:	f007 ff8a 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_FDCAN_MspInit+0xde>
      Error_Handler();
 8001796:	f000 fca1 	bl	80020dc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 80017a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_FDCAN_MspInit+0x15c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10b      	bne.n	80017c4 <HAL_FDCAN_MspInit+0x108>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	4a1a      	ldr	r2, [pc, #104]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_FDCAN_MspInit+0x160>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017dc:	2318      	movs	r3, #24
 80017de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80017ec:	230b      	movs	r3, #11
 80017ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017f4:	4619      	mov	r1, r3
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <HAL_FDCAN_MspInit+0x164>)
 80017f8:	f004 fe90 	bl	800651c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 6, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2106      	movs	r1, #6
 8001800:	2058      	movs	r0, #88	@ 0x58
 8001802:	f003 fc04 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001806:	2058      	movs	r0, #88	@ 0x58
 8001808:	f003 fc1b 	bl	8005042 <HAL_NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3780      	adds	r7, #128	@ 0x80
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40006800 	.word	0x40006800
 8001818:	2000050c 	.word	0x2000050c
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400
 8001824:	40006c00 	.word	0x40006c00

08001828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <MX_GPIO_Init+0xe8>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_GPIO_Init+0xe8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2140      	movs	r1, #64	@ 0x40
 80018ba:	4816      	ldr	r0, [pc, #88]	@ (8001914 <MX_GPIO_Init+0xec>)
 80018bc:	f004 ffb0 	bl	8006820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c6:	4814      	ldr	r0, [pc, #80]	@ (8001918 <MX_GPIO_Init+0xf0>)
 80018c8:	f004 ffaa 	bl	8006820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80018cc:	2340      	movs	r3, #64	@ 0x40
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_GPIO_Init+0xec>)
 80018e4:	f004 fe1a 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_GPIO_Init+0xf0>)
 8001902:	f004 fe0b 	bl	800651c <HAL_GPIO_Init>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	48000800 	.word	0x48000800
 8001918:	48000400 	.word	0x48000400

0800191c <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0ba      	sub	sp, #232	@ 0xe8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001922:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800192c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800193a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800193e:	2260      	movs	r2, #96	@ 0x60
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f00b fb85 	bl	800d052 <memset>
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001948:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800195c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	2224      	movs	r2, #36	@ 0x24
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f00b fb6e 	bl	800d052 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2220      	movs	r2, #32
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00b fb68 	bl	800d052 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001982:	4bcc      	ldr	r3, [pc, #816]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001984:	4acc      	ldr	r2, [pc, #816]	@ (8001cb8 <MX_HRTIM1_Init+0x39c>)
 8001986:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001988:	4bca      	ldr	r3, [pc, #808]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800198e:	4bc9      	ldr	r3, [pc, #804]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001994:	48c7      	ldr	r0, [pc, #796]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001996:	f004 ff75 	bl	8006884 <HAL_HRTIM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80019a0:	f000 fb9c 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80019a4:	210c      	movs	r1, #12
 80019a6:	48c3      	ldr	r0, [pc, #780]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019a8:	f005 f83c 	bl	8006a24 <HAL_HRTIM_DLLCalibrationStart>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 80019b2:	f000 fb93 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80019b6:	210a      	movs	r1, #10
 80019b8:	48be      	ldr	r0, [pc, #760]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019ba:	f005 f88b 	bl	8006ad4 <HAL_HRTIM_PollForDLLCalibration>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 80019c4:	f000 fb8a 	bl	80020dc <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 80019c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERA_CMP3;
 80019d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80019d8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80019dc:	461a      	mov	r2, r3
 80019de:	2101      	movs	r1, #1
 80019e0:	48b4      	ldr	r0, [pc, #720]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019e2:	f005 f8d3 	bl	8006b8c <HAL_HRTIM_ADCTriggerConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 80019ec:	f000 fb76 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	48af      	ldr	r0, [pc, #700]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 80019f6:	f005 fab5 	bl	8006f64 <HAL_HRTIM_ADCPostScalerConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001a00:	f000 fb6c 	bl	80020dc <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_E;
 8001a04:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERE_CMP3;
 8001a0c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 8001a14:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	48a5      	ldr	r0, [pc, #660]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a1e:	f005 f8b5 	bl	8006b8c <HAL_HRTIM_ADCTriggerConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_HRTIM1_Init+0x110>
  {
    Error_Handler();
 8001a28:	f000 fb58 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	48a0      	ldr	r0, [pc, #640]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a32:	f005 fa97 	bl	8006f64 <HAL_HRTIM_ADCPostScalerConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_HRTIM1_Init+0x124>
  {
    Error_Handler();
 8001a3c:	f000 fb4e 	bl	80020dc <Error_Handler>
  }
  pTimeBaseCfg.Period = 34000;
 8001a40:	f248 43d0 	movw	r3, #34000	@ 0x84d0
 8001a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 16;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001a54:	2308      	movs	r3, #8
 8001a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8001a5a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2106      	movs	r1, #6
 8001a62:	4894      	ldr	r0, [pc, #592]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001a64:	f005 f86a 	bl	8006b3c <HAL_HRTIM_TimeBaseConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_HRTIM1_Init+0x156>
  {
    Error_Handler();
 8001a6e:	f000 fb35 	bl	80020dc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 8001a72:	2310      	movs	r3, #16
 8001a74:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DMASrcAddress = 0x0000;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.DMADstAddress = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.DMASize = 0x1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001ac4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2106      	movs	r1, #6
 8001acc:	4879      	ldr	r0, [pc, #484]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ace:	f005 fb93 	bl	80071f8 <HAL_HRTIM_WaveformTimerConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001ad8:	f000 fb00 	bl	80020dc <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001ae8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	4870      	ldr	r0, [pc, #448]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001af2:	f005 f823 	bl	8006b3c <HAL_HRTIM_TimeBaseConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_HRTIM1_Init+0x1e4>
  {
    Error_Handler();
 8001afc:	f000 faee 	bl	80020dc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001b00:	2300      	movs	r3, #0
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001b10:	2300      	movs	r3, #0
 8001b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4865      	ldr	r0, [pc, #404]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001b1e:	f005 fbf8 	bl	8007312 <HAL_HRTIM_WaveformTimerControl>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 8001b28:	f000 fad8 	bl	80020dc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001b34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 8001b5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8001b6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001b72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b76:	461a      	mov	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	484e      	ldr	r0, [pc, #312]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001b7c:	f005 fb3c 	bl	80071f8 <HAL_HRTIM_WaveformTimerConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_HRTIM1_Init+0x26e>
  {
    Error_Handler();
 8001b86:	f000 faa9 	bl	80020dc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_E;
 8001b90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001b98:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4844      	ldr	r0, [pc, #272]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ba2:	f005 fb29 	bl	80071f8 <HAL_HRTIM_WaveformTimerConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8001bac:	f000 fa96 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8001bb0:	f646 2340 	movw	r3, #27200	@ 0x6a40
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001bb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	483d      	ldr	r0, [pc, #244]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001bc0:	f005 fc5a 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_HRTIM1_Init+0x2b2>
  {
    Error_Handler();
 8001bca:	f000 fa87 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001bce:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001bdc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001be0:	2202      	movs	r2, #2
 8001be2:	2100      	movs	r1, #0
 8001be4:	4833      	ldr	r0, [pc, #204]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001be6:	f005 fc47 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_HRTIM1_Init+0x2d8>
  {
    Error_Handler();
 8001bf0:	f000 fa74 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001bf4:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001bfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bfe:	2204      	movs	r2, #4
 8001c00:	2100      	movs	r1, #0
 8001c02:	482c      	ldr	r0, [pc, #176]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c04:	f005 fc38 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_HRTIM1_Init+0x2f6>
  {
    Error_Handler();
 8001c0e:	f000 fa65 	bl	80020dc <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 220;
 8001c16:	23dc      	movs	r3, #220	@ 0xdc
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 220;
 8001c26:	23dc      	movs	r3, #220	@ 0xdc
 8001c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c40:	f005 fb9a 	bl	8007378 <HAL_HRTIM_DeadTimeConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_HRTIM1_Init+0x332>
  {
    Error_Handler();
 8001c4a:	f000 fa47 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	461a      	mov	r2, r3
 8001c54:	2104      	movs	r1, #4
 8001c56:	4817      	ldr	r0, [pc, #92]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c58:	f005 fb8e 	bl	8007378 <HAL_HRTIM_DeadTimeConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_HRTIM1_Init+0x34a>
  {
    Error_Handler();
 8001c62:	f000 fa3b 	bl	80020dc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001c8e:	f005 fd61 	bl	8007754 <HAL_HRTIM_WaveformOutputConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_HRTIM1_Init+0x380>
  {
    Error_Handler();
 8001c98:	f000 fa20 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <MX_HRTIM1_Init+0x398>)
 8001ca6:	f005 fd55 	bl	8007754 <HAL_HRTIM_WaveformOutputConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <MX_HRTIM1_Init+0x3a4>
 8001cb0:	e004      	b.n	8001cbc <MX_HRTIM1_Init+0x3a0>
 8001cb2:	bf00      	nop
 8001cb4:	20000510 	.word	0x20000510
 8001cb8:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8001cbc:	f000 fa0e 	bl	80020dc <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4831      	ldr	r0, [pc, #196]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001cd0:	f005 fd40 	bl	8007754 <HAL_HRTIM_WaveformOutputConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_HRTIM1_Init+0x3c2>
  {
    Error_Handler();
 8001cda:	f000 f9ff 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	482b      	ldr	r0, [pc, #172]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001ce8:	f005 fd34 	bl	8007754 <HAL_HRTIM_WaveformOutputConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_HRTIM1_Init+0x3da>
  {
    Error_Handler();
 8001cf2:	f000 f9f3 	bl	80020dc <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001cfc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001d00:	461a      	mov	r2, r3
 8001d02:	2104      	movs	r1, #4
 8001d04:	4823      	ldr	r0, [pc, #140]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d06:	f004 ff19 	bl	8006b3c <HAL_HRTIM_TimeBaseConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_HRTIM1_Init+0x3f8>
  {
    Error_Handler();
 8001d10:	f000 f9e4 	bl	80020dc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8001d14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d1e:	f005 faf8 	bl	8007312 <HAL_HRTIM_WaveformTimerControl>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_HRTIM1_Init+0x410>
  {
    Error_Handler();
 8001d28:	f000 f9d8 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 3400;
 8001d2c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001d30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001d32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d36:	2201      	movs	r2, #1
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d3c:	f005 fb9c 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_HRTIM1_Init+0x42e>
  {
    Error_Handler();
 8001d46:	f000 f9c9 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 30000;
 8001d4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001d50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d54:	2202      	movs	r2, #2
 8001d56:	2104      	movs	r1, #4
 8001d58:	480e      	ldr	r0, [pc, #56]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d5a:	f005 fb8d 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_HRTIM1_Init+0x44c>
  {
    Error_Handler();
 8001d64:	f000 f9ba 	bl	80020dc <Error_Handler>
  }
  pCompareCfg.CompareValue = 15640;
 8001d68:	f643 5318 	movw	r3, #15640	@ 0x3d18
 8001d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001d6e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d72:	2204      	movs	r2, #4
 8001d74:	2104      	movs	r1, #4
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d78:	f005 fb7e 	bl	8007478 <HAL_HRTIM_WaveformCompareConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_HRTIM1_Init+0x46a>
  {
    Error_Handler();
 8001d82:	f000 f9ab 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <MX_HRTIM1_Init+0x478>)
 8001d88:	f000 f82c 	bl	8001de4 <HAL_HRTIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	37e8      	adds	r7, #232	@ 0xe8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000510 	.word	0x20000510

08001d98 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <HAL_HRTIM_MspInit+0x44>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d113      	bne.n	8001dd2 <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_HRTIM_MspInit+0x48>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2043      	movs	r0, #67	@ 0x43
 8001dc8:	f003 f921 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001dcc:	2043      	movs	r0, #67	@ 0x43
 8001dce:	f003 f938 	bl	8005042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40016800 	.word	0x40016800
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_HRTIM_MspPostInit+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d13a      	bne.n	8001e7c <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e12:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> HRTIM1_CHE1
    PC9     ------> HRTIM1_CHE2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = BAT_MOS_LOW_Pin|BAT_MOS_HIGH_Pin;
 8001e36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	480e      	ldr	r0, [pc, #56]	@ (8001e8c <HAL_HRTIM_MspPostInit+0xa8>)
 8001e54:	f004 fb62 	bl	800651c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAP_MOS_LOW_Pin|CAP_MOS_HIGH_Pin;
 8001e58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001e6a:	230d      	movs	r3, #13
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e78:	f004 fb50 	bl	800651c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40016800 	.word	0x40016800
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000800 	.word	0x48000800

08001e90 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>:
	 * @brief Constructor
	 * @param adc_cap Pointer to ADC for capacitor-side sampling
	 * @param adc_bat Pointer to ADC for battery-side sampling
	 * @param adc_temp Pointer to ADC for temperature sensing
	 */
	adc_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp)
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
		: adc_cap_(adc_cap), adc_bat_(adc_bat), adc_temp_(adc_temp) {}
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>:
	 * @brief Constructor for the supercap controller.
	 * @param adc_cap Pointer to ADC for supercap measurements
	 * @param adc_bat Pointer to ADC for battery-side measurements
	 * @param adc_temp Pointer to ADC used for temperature sensing
	 */
	supercap_control_manager(ADC_HandleTypeDef* adc_cap, ADC_HandleTypeDef* adc_bat, ADC_HandleTypeDef* adc_temp) :
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
		adc_manager(adc_cap, adc_bat, adc_temp) {};
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	f7ff ffd9 	bl	8001e90 <_ZN11adc_managerC1EP17ADC_HandleTypeDefS1_S1_>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_+0x2c>)
 8001ee2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	42700000 	.word	0x42700000

08001ef4 <_ZN24supercap_control_managerD1Ev>:

	/// Destructor (default)
	~supercap_control_manager() {};
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZN7CANCommC1EP19FDCAN_HandleTypeDef>:
public:
    /**
     * @brief Constructor: sets up header configuration for outgoing messages.
     * @param fdcan_ Pointer to FDCAN handle.
     */
    CANComm(FDCAN_HandleTypeDef* fdcan_) : fdcan(fdcan_) { txHeaderConfig(); }
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f009 fa2f 	bl	800b37e <_ZN7CANComm14txHeaderConfigEv>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_ZN7CANCommD1Ev>:

    /**
     * @brief Destructor (does nothing but defined for completeness).
     */
    ~CANComm() {}
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f46:	f000 feda 	bl	8002cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4a:	f000 f85f 	bl	800200c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4e:	f7ff fc6b 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f52:	f7ff fae9 	bl	8001528 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f56:	f7fe ffc7 	bl	8000ee8 <MX_ADC1_Init>
//  MX_FDCAN1_Init();
  MX_FDCAN2_Init();
 8001f5a:	f7ff fb23 	bl	80015a4 <MX_FDCAN2_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 8001f5e:	f000 fc63 	bl	8002828 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001f62:	f000 fe47 	bl	8002bf4 <MX_USB_PCD_Init>
  MX_FDCAN3_Init();
 8001f66:	f7ff fb63 	bl	8001630 <MX_FDCAN3_Init>
  MX_TIM8_Init();
 8001f6a:	f000 fb39 	bl	80025e0 <MX_TIM8_Init>
  MX_ADC2_Init();
 8001f6e:	f7ff f845 	bl	8000ffc <MX_ADC2_Init>
  MX_SPI2_Init();
 8001f72:	f000 f8ff 	bl	8002174 <MX_SPI2_Init>
  MX_UART4_Init();
 8001f76:	f000 fbbf 	bl	80026f8 <MX_UART4_Init>
  MX_UART5_Init();
 8001f7a:	f000 fc09 	bl	8002790 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001f7e:	f000 fc9f 	bl	80028c0 <MX_USART3_UART_Init>
  MX_HRTIM1_Init();
 8001f82:	f7ff fccb 	bl	800191c <MX_HRTIM1_Init>
  MX_ADC3_Init();
 8001f86:	f7ff f8c1 	bl	800110c <MX_ADC3_Init>
  MX_CRC_Init();
 8001f8a:	f7ff fa8b 	bl	80014a4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001f8e:	f000 fad9 	bl	8002544 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 10; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	e009      	b.n	8001fac <main+0x6c>
    HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 8001f98:	2140      	movs	r1, #64	@ 0x40
 8001f9a:	4816      	ldr	r0, [pc, #88]	@ (8001ff4 <main+0xb4>)
 8001f9c:	f004 fc58 	bl	8006850 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001fa0:	2064      	movs	r0, #100	@ 0x64
 8001fa2:	f000 ff1d 	bl	8002de0 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	ddf2      	ble.n	8001f98 <main+0x58>
  }//debug blinker
  HAL_TIM_Base_Start_IT(&htim2);
 8001fb2:	4811      	ldr	r0, [pc, #68]	@ (8001ff8 <main+0xb8>)
 8001fb4:	f007 fec6 	bl	8009d44 <HAL_TIM_Base_Start_IT>
  initCANComm(&hfdcan3);
 8001fb8:	4810      	ldr	r0, [pc, #64]	@ (8001ffc <main+0xbc>)
 8001fba:	f009 f991 	bl	800b2e0 <_Z11initCANCommP19FDCAN_HandleTypeDef>

  supercap_controller.adc_init(filter_lengths);
 8001fbe:	4910      	ldr	r1, [pc, #64]	@ (8002000 <main+0xc0>)
 8001fc0:	4810      	ldr	r0, [pc, #64]	@ (8002004 <main+0xc4>)
 8001fc2:	f009 f8db 	bl	800b17c <_ZN11adc_manager8adc_initEPh>
  HAL_Delay(1000);
 8001fc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fca:	f000 ff09 	bl	8002de0 <HAL_Delay>
//  HAL_Delay(100);
  HAL_HRTIM_WaveformCountStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER|HRTIM_TIMERID_TIMER_A|HRTIM_TIMERID_TIMER_E);
 8001fce:	f44f 110c 	mov.w	r1, #2293760	@ 0x230000
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <main+0xc8>)
 8001fd4:	f005 fc1c 	bl	8007810 <HAL_HRTIM_WaveformCountStart_IT>
////  HAL_Delay(100);
  supercap_controller.init_loop();
 8001fd8:	480a      	ldr	r0, [pc, #40]	@ (8002004 <main+0xc4>)
 8001fda:	f009 fafb 	bl	800b5d4 <_ZN24supercap_control_manager9init_loopEv>
//	  hihihaha++;
//	  HAL_Delay(5);
//	  HAL_IWDG_Refresh(&hiwdg);
//	  temperature = supercap_controller.get_temperature();
    /* USER CODE END WHILE */
      HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <main+0xb4>)
 8001fe2:	f004 fc35 	bl	8006850 <HAL_GPIO_TogglePin>
      HAL_Delay(500); // 500 ms = 1Hz blink
 8001fe6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fea:	f000 fef9 	bl	8002de0 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 8001fee:	bf00      	nop
 8001ff0:	e7f5      	b.n	8001fde <main+0x9e>
 8001ff2:	bf00      	nop
 8001ff4:	48000800 	.word	0x48000800
 8001ff8:	20000728 	.word	0x20000728
 8001ffc:	200004a8 	.word	0x200004a8
 8002000:	20000000 	.word	0x20000000
 8002004:	2000060c 	.word	0x2000060c
 8002008:	20000510 	.word	0x20000510

0800200c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	@ 0x50
 8002010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002012:	f107 0318 	add.w	r3, r7, #24
 8002016:	2238      	movs	r2, #56	@ 0x38
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00b f819 	bl	800d052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800202e:	2000      	movs	r0, #0
 8002030:	f006 fd56 	bl	8008ae0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002034:	2329      	movs	r3, #41	@ 0x29
 8002036:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800203c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800203e:	2301      	movs	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002042:	2301      	movs	r3, #1
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002046:	2302      	movs	r3, #2
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204a:	2303      	movs	r3, #3
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 800204e:	230c      	movs	r3, #12
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002052:	2355      	movs	r3, #85	@ 0x55
 8002054:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002056:	2302      	movs	r3, #2
 8002058:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800205a:	2302      	movs	r3, #2
 800205c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800205e:	2302      	movs	r3, #2
 8002060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	4618      	mov	r0, r3
 8002068:	f006 fdee 	bl	8008c48 <HAL_RCC_OscConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800207c:	f000 f82e 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002080:	230f      	movs	r3, #15
 8002082:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002084:	2303      	movs	r3, #3
 8002086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2104      	movs	r1, #4
 8002098:	4618      	mov	r0, r3
 800209a:	f007 f8e7 	bl	800926c <HAL_RCC_ClockConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80020ae:	f000 f815 	bl	80020dc <Error_Handler>
  }
}
 80020b2:	bf00      	nop
 80020b4:	3750      	adds	r7, #80	@ 0x50
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <TIM2_IRQHandler>:
/* USER CODE BEGIN 4 */
//stm32g4xx_it.c COMMENT IT OUT or shift this inside there
extern "C"
{
void TIM2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <TIM2_IRQHandler+0x18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0201 	mvn.w	r2, #1
 80020c8:	611a      	str	r2, [r3, #16]
//    updateStatus();
//    ErrorChecker::handleErrorState();
    canComDriver.sendMessage();
 80020ca:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <TIM2_IRQHandler+0x1c>)
 80020cc:	f009 f97e 	bl	800b3cc <_ZN7CANComm11sendMessageEv>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000728 	.word	0x20000728
 80020d8:	20000660 	.word	0x20000660

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <Error_Handler+0x8>

080020e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10e      	bne.n	8002116 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020fe:	4293      	cmp	r3, r2
 8002100:	d109      	bne.n	8002116 <_Z41__static_initialization_and_destruction_0ii+0x2e>
supercap_control_manager supercap_controller(&hadc1, &hadc2, &hadc3);
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002104:	4a0e      	ldr	r2, [pc, #56]	@ (8002140 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002106:	490f      	ldr	r1, [pc, #60]	@ (8002144 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002108:	480f      	ldr	r0, [pc, #60]	@ (8002148 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800210a:	f7ff fedb 	bl	8001ec4 <_ZN24supercap_control_managerC1EP17ADC_HandleTypeDefS1_S1_>
CANComm canComDriver(&hfdcan3);
 800210e:	490f      	ldr	r1, [pc, #60]	@ (800214c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002110:	480f      	ldr	r0, [pc, #60]	@ (8002150 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002112:	f7ff fefa 	bl	8001f0a <_ZN7CANCommC1EP19FDCAN_HandleTypeDef>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002122:	4293      	cmp	r3, r2
 8002124:	d105      	bne.n	8002132 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8002126:	480a      	ldr	r0, [pc, #40]	@ (8002150 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002128:	f7ff feff 	bl	8001f2a <_ZN7CANCommD1Ev>
supercap_control_manager supercap_controller(&hadc1, &hadc2, &hadc3);
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800212e:	f7ff fee1 	bl	8001ef4 <_ZN24supercap_control_managerD1Ev>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002f0 	.word	0x200002f0
 8002140:	20000284 	.word	0x20000284
 8002144:	20000218 	.word	0x20000218
 8002148:	2000060c 	.word	0x2000060c
 800214c:	200004a8 	.word	0x200004a8
 8002150:	20000660 	.word	0x20000660

08002154 <_GLOBAL__sub_I_supercap_controller>:
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
 8002158:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff ffc3 	bl	80020e8 <_Z41__static_initialization_and_destruction_0ii>
 8002162:	bd80      	pop	{r7, pc}

08002164 <_GLOBAL__sub_D_supercap_controller>:
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
 8002168:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff ffbb 	bl	80020e8 <_Z41__static_initialization_and_destruction_0ii>
 8002172:	bd80      	pop	{r7, pc}

08002174 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <MX_SPI2_Init+0x74>)
 800217a:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <MX_SPI2_Init+0x78>)
 800217c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_SPI2_Init+0x74>)
 8002180:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002184:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <MX_SPI2_Init+0x74>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800218c:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <MX_SPI2_Init+0x74>)
 800218e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002192:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_SPI2_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <MX_SPI2_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021aa:	2208      	movs	r2, #8
 80021ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021c2:	2207      	movs	r2, #7
 80021c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021ce:	2208      	movs	r2, #8
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <MX_SPI2_Init+0x74>)
 80021d4:	f007 fcb4 	bl	8009b40 <HAL_SPI_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021de:	f7ff ff7d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200006c0 	.word	0x200006c0
 80021ec:	40003800 	.word	0x40003800

080021f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a17      	ldr	r2, [pc, #92]	@ (800226c <HAL_SPI_MspInit+0x7c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d128      	bne.n	8002264 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	4a16      	ldr	r2, [pc, #88]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221c:	6593      	str	r3, [r2, #88]	@ 0x58
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a10      	ldr	r2, [pc, #64]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_SPI_MspInit+0x80>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002242:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002254:	2305      	movs	r3, #5
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4805      	ldr	r0, [pc, #20]	@ (8002274 <HAL_SPI_MspInit+0x84>)
 8002260:	f004 f95c 	bl	800651c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	@ 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40003800 	.word	0x40003800
 8002270:	40021000 	.word	0x40021000
 8002274:	48000400 	.word	0x48000400

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <HAL_MspInit+0x44>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <HAL_MspInit+0x44>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6613      	str	r3, [r2, #96]	@ 0x60
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <HAL_MspInit+0x44>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_MspInit+0x44>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_MspInit+0x44>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_MspInit+0x44>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022ae:	f006 fcbb 	bl	8008c28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <NMI_Handler+0x4>

080022c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <MemManage_Handler+0x4>

080022d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <BusFault_Handler+0x4>

080022e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <UsageFault_Handler+0x4>

080022e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002316:	f000 fd45 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <DMA1_Channel1_IRQHandler+0x10>)
 8002326:	f003 f8bc 	bl	80054a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000035c 	.word	0x2000035c

08002334 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <ADC1_2_IRQHandler+0x14>)
 800233a:	f001 fb4d 	bl	80039d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800233e:	4803      	ldr	r0, [pc, #12]	@ (800234c <ADC1_2_IRQHandler+0x18>)
 8002340:	f001 fb4a 	bl	80039d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000218 	.word	0x20000218
 800234c:	20000284 	.word	0x20000284

08002350 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA2_Channel1_IRQHandler+0x10>)
 8002356:	f003 f8a4 	bl	80054a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200003bc 	.word	0x200003bc

08002364 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002368:	2106      	movs	r1, #6
 800236a:	4802      	ldr	r0, [pc, #8]	@ (8002374 <HRTIM1_Master_IRQHandler+0x10>)
 800236c:	f005 fac0 	bl	80078f0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000510 	.word	0x20000510

08002378 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <FDCAN3_IT0_IRQHandler+0x10>)
 800237e:	f003 fe61 	bl	8006044 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200004a8 	.word	0x200004a8

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a6:	f00a fea7 	bl	800d0f8 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <_exit+0x12>

080023d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e00a      	b.n	80023fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e4:	f3af 8000 	nop.w
 80023e8:	4601      	mov	r1, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf0      	blt.n	80023e4 <_read+0x12>
  }

  return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e009      	b.n	8002432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	60ba      	str	r2, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbf1      	blt.n	800241e <_write+0x12>
  }
  return len;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_close>:

int _close(int file)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800246c:	605a      	str	r2, [r3, #4]
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_isatty>:

int _isatty(int file)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f00a fe0c 	bl	800d0f8 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20020000 	.word	0x20020000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000724 	.word	0x20000724
 8002514:	200013b8 	.word	0x200013b8

08002518 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <SystemInit+0x28>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <SystemInit+0x28>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  /* Force vector table base to flash start */
  SCB->VTOR = 0x08000000U;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <SystemInit+0x28>)
 800252e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <MX_TIM2_Init+0x98>)
 8002564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002568:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 800256a:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <MX_TIM2_Init+0x98>)
 800256c:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002570:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <MX_TIM2_Init+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002578:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <MX_TIM2_Init+0x98>)
 800257a:	2263      	movs	r2, #99	@ 0x63
 800257c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <MX_TIM2_Init+0x98>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002584:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <MX_TIM2_Init+0x98>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258a:	4814      	ldr	r0, [pc, #80]	@ (80025dc <MX_TIM2_Init+0x98>)
 800258c:	f007 fb83 	bl	8009c96 <HAL_TIM_Base_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002596:	f7ff fda1 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800259e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4619      	mov	r1, r3
 80025a6:	480d      	ldr	r0, [pc, #52]	@ (80025dc <MX_TIM2_Init+0x98>)
 80025a8:	f007 fc44 	bl	8009e34 <HAL_TIM_ConfigClockSource>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025b2:	f7ff fd93 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4806      	ldr	r0, [pc, #24]	@ (80025dc <MX_TIM2_Init+0x98>)
 80025c4:	f007 fe9c 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025ce:	f7ff fd85 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000728 	.word	0x20000728

080025e0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002600:	4a20      	ldr	r2, [pc, #128]	@ (8002684 <MX_TIM8_Init+0xa4>)
 8002602:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <MX_TIM8_Init+0xa0>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002616:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <MX_TIM8_Init+0xa0>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800262a:	4815      	ldr	r0, [pc, #84]	@ (8002680 <MX_TIM8_Init+0xa0>)
 800262c:	f007 fb33 	bl	8009c96 <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002636:	f7ff fd51 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	480e      	ldr	r0, [pc, #56]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002648:	f007 fbf4 	bl	8009e34 <HAL_TIM_ConfigClockSource>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002652:	f7ff fd43 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002656:	2320      	movs	r3, #32
 8002658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4806      	ldr	r0, [pc, #24]	@ (8002680 <MX_TIM8_Init+0xa0>)
 8002668:	f007 fe4a 	bl	800a300 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002672:	f7ff fd33 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000774 	.word	0x20000774
 8002684:	40013400 	.word	0x40013400

08002688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002698:	d114      	bne.n	80026c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2106      	movs	r1, #6
 80026b6:	201c      	movs	r0, #28
 80026b8:	f002 fca9 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026bc:	201c      	movs	r0, #28
 80026be:	f002 fcc0 	bl	8005042 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80026c2:	e010      	b.n	80026e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_TIM_Base_MspInit+0x6c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10b      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40013400 	.word	0x40013400

080026f8 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026fc:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <MX_UART4_Init+0x90>)
 80026fe:	4a23      	ldr	r2, [pc, #140]	@ (800278c <MX_UART4_Init+0x94>)
 8002700:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002702:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <MX_UART4_Init+0x90>)
 8002704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002708:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <MX_UART4_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <MX_UART4_Init+0x90>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002716:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <MX_UART4_Init+0x90>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <MX_UART4_Init+0x90>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <MX_UART4_Init+0x90>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <MX_UART4_Init+0x90>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <MX_UART4_Init+0x90>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002734:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <MX_UART4_Init+0x90>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273a:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <MX_UART4_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002740:	4811      	ldr	r0, [pc, #68]	@ (8002788 <MX_UART4_Init+0x90>)
 8002742:	f007 fe73 	bl	800a42c <HAL_UART_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800274c:	f7ff fcc6 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002750:	2100      	movs	r1, #0
 8002752:	480d      	ldr	r0, [pc, #52]	@ (8002788 <MX_UART4_Init+0x90>)
 8002754:	f008 fc0e 	bl	800af74 <HAL_UARTEx_SetTxFifoThreshold>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800275e:	f7ff fcbd 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	4808      	ldr	r0, [pc, #32]	@ (8002788 <MX_UART4_Init+0x90>)
 8002766:	f008 fc43 	bl	800aff0 <HAL_UARTEx_SetRxFifoThreshold>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002770:	f7ff fcb4 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	@ (8002788 <MX_UART4_Init+0x90>)
 8002776:	f008 fbc4 	bl	800af02 <HAL_UARTEx_DisableFifoMode>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002780:	f7ff fcac 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200007c0 	.word	0x200007c0
 800278c:	40004c00 	.word	0x40004c00

08002790 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <MX_UART5_Init+0x90>)
 8002796:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <MX_UART5_Init+0x94>)
 8002798:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <MX_UART5_Init+0x90>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <MX_UART5_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <MX_UART5_Init+0x90>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <MX_UART5_Init+0x90>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <MX_UART5_Init+0x90>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <MX_UART5_Init+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_UART5_Init+0x90>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <MX_UART5_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_UART5_Init+0x90>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <MX_UART5_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027d8:	4811      	ldr	r0, [pc, #68]	@ (8002820 <MX_UART5_Init+0x90>)
 80027da:	f007 fe27 	bl	800a42c <HAL_UART_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80027e4:	f7ff fc7a 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e8:	2100      	movs	r1, #0
 80027ea:	480d      	ldr	r0, [pc, #52]	@ (8002820 <MX_UART5_Init+0x90>)
 80027ec:	f008 fbc2 	bl	800af74 <HAL_UARTEx_SetTxFifoThreshold>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80027f6:	f7ff fc71 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fa:	2100      	movs	r1, #0
 80027fc:	4808      	ldr	r0, [pc, #32]	@ (8002820 <MX_UART5_Init+0x90>)
 80027fe:	f008 fbf7 	bl	800aff0 <HAL_UARTEx_SetRxFifoThreshold>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002808:	f7ff fc68 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	@ (8002820 <MX_UART5_Init+0x90>)
 800280e:	f008 fb78 	bl	800af02 <HAL_UARTEx_DisableFifoMode>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002818:	f7ff fc60 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000854 	.word	0x20000854
 8002824:	40005000 	.word	0x40005000

08002828 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800282c:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 800282e:	4a23      	ldr	r2, [pc, #140]	@ (80028bc <MX_USART1_UART_Init+0x94>)
 8002830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002832:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002870:	4811      	ldr	r0, [pc, #68]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002872:	f007 fddb 	bl	800a42c <HAL_UART_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800287c:	f7ff fc2e 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002880:	2100      	movs	r1, #0
 8002882:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002884:	f008 fb76 	bl	800af74 <HAL_UARTEx_SetTxFifoThreshold>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800288e:	f7ff fc25 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002892:	2100      	movs	r1, #0
 8002894:	4808      	ldr	r0, [pc, #32]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 8002896:	f008 fbab 	bl	800aff0 <HAL_UARTEx_SetRxFifoThreshold>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028a0:	f7ff fc1c 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	@ (80028b8 <MX_USART1_UART_Init+0x90>)
 80028a6:	f008 fb2c 	bl	800af02 <HAL_UARTEx_DisableFifoMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028b0:	f7ff fc14 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200008e8 	.word	0x200008e8
 80028bc:	40013800 	.word	0x40013800

080028c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028c6:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <MX_USART3_UART_Init+0x94>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002908:	4811      	ldr	r0, [pc, #68]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 800290a:	f007 fd8f 	bl	800a42c <HAL_UART_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002914:	f7ff fbe2 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002918:	2100      	movs	r1, #0
 800291a:	480d      	ldr	r0, [pc, #52]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 800291c:	f008 fb2a 	bl	800af74 <HAL_UARTEx_SetTxFifoThreshold>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002926:	f7ff fbd9 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800292a:	2100      	movs	r1, #0
 800292c:	4808      	ldr	r0, [pc, #32]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 800292e:	f008 fb5f 	bl	800aff0 <HAL_UARTEx_SetRxFifoThreshold>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002938:	f7ff fbd0 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	@ (8002950 <MX_USART3_UART_Init+0x90>)
 800293e:	f008 fae0 	bl	800af02 <HAL_UARTEx_DisableFifoMode>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002948:	f7ff fbc8 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000097c 	.word	0x2000097c
 8002954:	40004800 	.word	0x40004800

08002958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0a6      	sub	sp, #152	@ 0x98
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002974:	2254      	movs	r2, #84	@ 0x54
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f00a fb6a 	bl	800d052 <memset>
  if(uartHandle->Instance==UART4)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a94      	ldr	r2, [pc, #592]	@ (8002bd4 <HAL_UART_MspInit+0x27c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d13c      	bne.n	8002a02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002988:	2308      	movs	r3, #8
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002994:	4618      	mov	r0, r3
 8002996:	f006 fe85 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029a0:	f7ff fb9c 	bl	80020dc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029a4:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	4a8b      	ldr	r2, [pc, #556]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b0:	4b89      	ldr	r3, [pc, #548]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029bc:	4b86      	ldr	r3, [pc, #536]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a85      	ldr	r2, [pc, #532]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c8:	4b83      	ldr	r3, [pc, #524]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80029ee:	2305      	movs	r3, #5
 80029f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80029f8:	4619      	mov	r1, r3
 80029fa:	4878      	ldr	r0, [pc, #480]	@ (8002bdc <HAL_UART_MspInit+0x284>)
 80029fc:	f003 fd8e 	bl	800651c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a00:	e0e4      	b.n	8002bcc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==UART5)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a76      	ldr	r2, [pc, #472]	@ (8002be0 <HAL_UART_MspInit+0x288>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d15d      	bne.n	8002ac8 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f006 fe43 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002a24:	f7ff fb5a 	bl	80020dc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a28:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a34:	4b68      	ldr	r3, [pc, #416]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a40:	4b65      	ldr	r3, [pc, #404]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	4a64      	ldr	r2, [pc, #400]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4c:	4b62      	ldr	r3, [pc, #392]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a58:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a64:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a94:	4619      	mov	r1, r3
 8002a96:	4851      	ldr	r0, [pc, #324]	@ (8002bdc <HAL_UART_MspInit+0x284>)
 8002a98:	f003 fd40 	bl	800651c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4848      	ldr	r0, [pc, #288]	@ (8002be4 <HAL_UART_MspInit+0x28c>)
 8002ac2:	f003 fd2b 	bl	800651c <HAL_GPIO_Init>
}
 8002ac6:	e081      	b.n	8002bcc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a46      	ldr	r2, [pc, #280]	@ (8002be8 <HAL_UART_MspInit+0x290>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d13b      	bne.n	8002b4a <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ada:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 fde0 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002aea:	f7ff faf7 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aee:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af2:	4a39      	ldr	r2, [pc, #228]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002afa:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b06:	4b34      	ldr	r3, [pc, #208]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0a:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b1e:	2330      	movs	r3, #48	@ 0x30
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b36:	2307      	movs	r3, #7
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002b40:	4619      	mov	r1, r3
 8002b42:	4826      	ldr	r0, [pc, #152]	@ (8002bdc <HAL_UART_MspInit+0x284>)
 8002b44:	f003 fcea 	bl	800651c <HAL_GPIO_Init>
}
 8002b48:	e040      	b.n	8002bcc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a27      	ldr	r2, [pc, #156]	@ (8002bec <HAL_UART_MspInit+0x294>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d13b      	bne.n	8002bcc <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b54:	2304      	movs	r3, #4
 8002b56:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 fd9f 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002b6c:	f7ff fab6 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4a18      	ldr	r2, [pc, #96]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7c:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8c:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_UART_MspInit+0x280>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480a      	ldr	r0, [pc, #40]	@ (8002bf0 <HAL_UART_MspInit+0x298>)
 8002bc8:	f003 fca8 	bl	800651c <HAL_GPIO_Init>
}
 8002bcc:	bf00      	nop
 8002bce:	3798      	adds	r7, #152	@ 0x98
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40004c00 	.word	0x40004c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	40005000 	.word	0x40005000
 8002be4:	48000c00 	.word	0x48000c00
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40004800 	.word	0x40004800
 8002bf0:	48000400 	.word	0x48000400

08002bf4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002bfa:	4a11      	ldr	r2, [pc, #68]	@ (8002c40 <MX_USB_PCD_Init+0x4c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c00:	2208      	movs	r2, #8
 8002c02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c06:	2202      	movs	r2, #2
 8002c08:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002c28:	4804      	ldr	r0, [pc, #16]	@ (8002c3c <MX_USB_PCD_Init+0x48>)
 8002c2a:	f005 fe61 	bl	80088f0 <HAL_PCD_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002c34:	f7ff fa52 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000a10 	.word	0x20000a10
 8002c40:	40005c00 	.word	0x40005c00

08002c44 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b098      	sub	sp, #96	@ 0x60
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2254      	movs	r2, #84	@ 0x54
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00a f9fc 	bl	800d052 <memset>
  if(pcdHandle->Instance==USB)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_PCD_MspInit+0x60>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d11a      	bne.n	8002c9a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c68:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4618      	mov	r0, r3
 8002c74:	f006 fd16 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002c7e:	f7ff fa2d 	bl	80020dc <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_PCD_MspInit+0x64>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <HAL_PCD_MspInit+0x64>)
 8002c88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_PCD_MspInit+0x64>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3760      	adds	r7, #96	@ 0x60
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40005c00 	.word	0x40005c00
 8002ca8:	40021000 	.word	0x40021000

08002cac <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002cac:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb0:	f7ff fc32 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb4:	480c      	ldr	r0, [pc, #48]	@ (8002ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cb6:	490d      	ldr	r1, [pc, #52]	@ (8002cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <LoopForever+0xe>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf8 <LoopForever+0x16>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cda:	f00a fa13 	bl	800d104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cde:	f7ff f92f 	bl	8001f40 <main>

08002ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce2:	e7fe      	b.n	8002ce2 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002cf0:	0800f288 	.word	0x0800f288
  ldr r2, =_sbss
 8002cf4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002cf8:	200013b8 	.word	0x200013b8

08002cfc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC3_IRQHandler>

08002cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f002 f975 	bl	8004ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0e:	200f      	movs	r0, #15
 8002d10:	f000 f80e 	bl	8002d30 <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	e001      	b.n	8002d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d20:	f7ff faaa 	bl	8002278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d24:	79fb      	ldrb	r3, [r7, #7]

}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d3c:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <HAL_InitTick+0x68>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d022      	beq.n	8002d8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d44:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_InitTick+0x6c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <HAL_InitTick+0x68>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 f980 	bl	800505e <HAL_SYSTICK_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	d809      	bhi.n	8002d7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d72:	f002 f94c 	bl	800500e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_InitTick+0x70>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e007      	b.n	8002d8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e004      	b.n	8002d8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e001      	b.n	8002d8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	20000008 	.word	0x20000008
 8002da0:	2000000c 	.word	0x2000000c

08002da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_IncTick+0x1c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_IncTick+0x20>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	4a03      	ldr	r2, [pc, #12]	@ (8002dc0 <HAL_IncTick+0x1c>)
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	20000cec 	.word	0x20000cec
 8002dc4:	20000010 	.word	0x20000010

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000cec 	.word	0x20000cec

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d004      	beq.n	8002e04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_Delay+0x40>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e04:	bf00      	nop
 8002e06:	f7ff ffdf 	bl	8002dc8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d8f7      	bhi.n	8002e06 <HAL_Delay+0x26>
  {
  }
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000010 	.word	0x20000010

08002e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3360      	adds	r3, #96	@ 0x60
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <LL_ADC_SetOffset+0x44>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	03fff000 	.word	0x03fff000

08002ed4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3360      	adds	r3, #96	@ 0x60
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3360      	adds	r3, #96	@ 0x60
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3360      	adds	r3, #96	@ 0x60
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3360      	adds	r3, #96	@ 0x60
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	615a      	str	r2, [r3, #20]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3330      	adds	r3, #48	@ 0x30
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	211f      	movs	r1, #31
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 011f 	and.w	r1, r3, #31
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3314      	adds	r3, #20
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	0e5b      	lsrs	r3, r3, #25
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	0d1b      	lsrs	r3, r3, #20
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2107      	movs	r1, #7
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	401a      	ands	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0d1b      	lsrs	r3, r3, #20
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	431a      	orrs	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0318 	and.w	r3, r3, #24
 80030e6:	4908      	ldr	r1, [pc, #32]	@ (8003108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030e8:	40d9      	lsrs	r1, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	400b      	ands	r3, r1
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	0007ffff 	.word	0x0007ffff

0800310c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 031f 	and.w	r3, r3, #31
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003154:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6093      	str	r3, [r2, #8]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800317c:	d101      	bne.n	8003182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031cc:	d101      	bne.n	80031d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003218:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800321c:	f043 0202 	orr.w	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <LL_ADC_IsEnabled+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_ADC_IsEnabled+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d101      	bne.n	800326e <LL_ADC_IsDisableOngoing+0x18>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_IsDisableOngoing+0x1a>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800328c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d101      	bne.n	80032bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1a9      	b.n	800365e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd ff6f 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff19 	bl	8003168 <LL_ADC_IsDeepPowerDownEnabled>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff feff 	bl	8003144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff34 	bl	80031b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d115      	bne.n	8003382 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff18 	bl	8003190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003360:	4b9c      	ldr	r3, [pc, #624]	@ (80035d4 <HAL_ADC_Init+0x2e4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	4a9c      	ldr	r2, [pc, #624]	@ (80035d8 <HAL_ADC_Init+0x2e8>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003374:	e002      	b.n	800337c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f9      	bne.n	8003376 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff16 	bl	80031b8 <LL_ADC_IsInternalRegulatorEnabled>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff76 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 80033b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 8142 	bne.w	800364c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 813e 	bne.w	800364c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff23 	bl	8003230 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d141      	bne.n	8003474 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f8:	d004      	beq.n	8003404 <HAL_ADC_Init+0x114>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a77      	ldr	r2, [pc, #476]	@ (80035dc <HAL_ADC_Init+0x2ec>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <HAL_ADC_Init+0x134>
 8003404:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003408:	f7ff ff12 	bl	8003230 <LL_ADC_IsEnabled>
 800340c:	4604      	mov	r4, r0
 800340e:	4873      	ldr	r0, [pc, #460]	@ (80035dc <HAL_ADC_Init+0x2ec>)
 8003410:	f7ff ff0e 	bl	8003230 <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	4323      	orrs	r3, r4
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_ADC_Init+0x15a>
 8003424:	486e      	ldr	r0, [pc, #440]	@ (80035e0 <HAL_ADC_Init+0x2f0>)
 8003426:	f7ff ff03 	bl	8003230 <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	486d      	ldr	r0, [pc, #436]	@ (80035e4 <HAL_ADC_Init+0x2f4>)
 800342e:	f7ff feff 	bl	8003230 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	431c      	orrs	r4, r3
 8003436:	486c      	ldr	r0, [pc, #432]	@ (80035e8 <HAL_ADC_Init+0x2f8>)
 8003438:	f7ff fefa 	bl	8003230 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003456:	d004      	beq.n	8003462 <HAL_ADC_Init+0x172>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5f      	ldr	r2, [pc, #380]	@ (80035dc <HAL_ADC_Init+0x2ec>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x176>
 8003462:	4a62      	ldr	r2, [pc, #392]	@ (80035ec <HAL_ADC_Init+0x2fc>)
 8003464:	e000      	b.n	8003468 <HAL_ADC_Init+0x178>
 8003466:	4a62      	ldr	r2, [pc, #392]	@ (80035f0 <HAL_ADC_Init+0x300>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7ff fcd8 	bl	8002e24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7f5b      	ldrb	r3, [r3, #29]
 8003478:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800347e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003484:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800348a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003492:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	045b      	lsls	r3, r3, #17
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b48      	ldr	r3, [pc, #288]	@ (80035f4 <HAL_ADC_Init+0x304>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fee5 	bl	80032ca <LL_ADC_INJ_IsConversionOngoing>
 8003500:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d17f      	bne.n	8003608 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d17c      	bne.n	8003608 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003512:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800351a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352a:	f023 0302 	bic.w	r3, r3, #2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	430b      	orrs	r3, r1
 8003536:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800354e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003558:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800355c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6911      	ldr	r1, [r2, #16]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800356e:	e013      	b.n	8003598 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800357e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003594:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d12a      	bne.n	80035f8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035c4:	430a      	orrs	r2, r1
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	e019      	b.n	8003608 <HAL_ADC_Init+0x318>
 80035d4:	20000008 	.word	0x20000008
 80035d8:	053e2d63 	.word	0x053e2d63
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000400 	.word	0x50000400
 80035e4:	50000500 	.word	0x50000500
 80035e8:	50000600 	.word	0x50000600
 80035ec:	50000300 	.word	0x50000300
 80035f0:	50000700 	.word	0x50000700
 80035f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10c      	bne.n	800362a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f023 010f 	bic.w	r1, r3, #15
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
 8003628:	e007      	b.n	800363a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 020f 	bic.w	r2, r2, #15
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	65da      	str	r2, [r3, #92]	@ 0x5c
 800364a:	e007      	b.n	800365c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800365c:	7ffb      	ldrb	r3, [r7, #31]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3724      	adds	r7, #36	@ 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop

08003668 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADC_Start+0x1c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a67      	ldr	r2, [pc, #412]	@ (800381c <HAL_ADC_Start+0x1b4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_ADC_Start+0x20>
 8003684:	4b66      	ldr	r3, [pc, #408]	@ (8003820 <HAL_ADC_Start+0x1b8>)
 8003686:	e000      	b.n	800368a <HAL_ADC_Start+0x22>
 8003688:	4b66      	ldr	r3, [pc, #408]	@ (8003824 <HAL_ADC_Start+0x1bc>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fd3e 	bl	800310c <LL_ADC_GetMultimode>
 8003690:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fe04 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 80b4 	bne.w	800380c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_Start+0x4a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0af      	b.n	8003812 <HAL_ADC_Start+0x1aa>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 f854 	bl	8004768 <ADC_Enable>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 809b 	bne.w	8003802 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a4d      	ldr	r2, [pc, #308]	@ (800381c <HAL_ADC_Start+0x1b4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_ADC_Start+0x96>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003828 <HAL_ADC_Start+0x1c0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d002      	beq.n	80036fa <HAL_ADC_Start+0x92>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e003      	b.n	8003702 <HAL_ADC_Start+0x9a>
 80036fa:	4b4c      	ldr	r3, [pc, #304]	@ (800382c <HAL_ADC_Start+0x1c4>)
 80036fc:	e001      	b.n	8003702 <HAL_ADC_Start+0x9a>
 80036fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	4293      	cmp	r3, r2
 8003708:	d002      	beq.n	8003710 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003728:	d106      	bne.n	8003738 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	f023 0206 	bic.w	r2, r3, #6
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
 8003736:	e002      	b.n	800373e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	221c      	movs	r2, #28
 8003744:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a32      	ldr	r2, [pc, #200]	@ (800381c <HAL_ADC_Start+0x1b4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_ADC_Start+0x104>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a32      	ldr	r2, [pc, #200]	@ (8003828 <HAL_ADC_Start+0x1c0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d002      	beq.n	8003768 <HAL_ADC_Start+0x100>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e003      	b.n	8003770 <HAL_ADC_Start+0x108>
 8003768:	4b30      	ldr	r3, [pc, #192]	@ (800382c <HAL_ADC_Start+0x1c4>)
 800376a:	e001      	b.n	8003770 <HAL_ADC_Start+0x108>
 800376c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	4293      	cmp	r3, r2
 8003776:	d008      	beq.n	800378a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b05      	cmp	r3, #5
 8003782:	d002      	beq.n	800378a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b09      	cmp	r3, #9
 8003788:	d114      	bne.n	80037b4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fd65 	bl	800327c <LL_ADC_REG_StartConversion>
 80037b2:	e02d      	b.n	8003810 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_ADC_Start+0x1b4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_ADC_Start+0x176>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <HAL_ADC_Start+0x1c0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d002      	beq.n	80037da <HAL_ADC_Start+0x172>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	e003      	b.n	80037e2 <HAL_ADC_Start+0x17a>
 80037da:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_ADC_Start+0x1c4>)
 80037dc:	e001      	b.n	80037e2 <HAL_ADC_Start+0x17a>
 80037de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00f      	beq.n	8003810 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003800:	e006      	b.n	8003810 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800380a:	e001      	b.n	8003810 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	50000100 	.word	0x50000100
 8003820:	50000300 	.word	0x50000300
 8003824:	50000700 	.word	0x50000700
 8003828:	50000500 	.word	0x50000500
 800382c:	50000400 	.word	0x50000400

08003830 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003844:	d004      	beq.n	8003850 <HAL_ADC_Start_DMA+0x20>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5a      	ldr	r2, [pc, #360]	@ (80039b4 <HAL_ADC_Start_DMA+0x184>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_ADC_Start_DMA+0x24>
 8003850:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <HAL_ADC_Start_DMA+0x188>)
 8003852:	e000      	b.n	8003856 <HAL_ADC_Start_DMA+0x26>
 8003854:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <HAL_ADC_Start_DMA+0x18c>)
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fc58 	bl	800310c <LL_ADC_GetMultimode>
 800385c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fd1e 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 809b 	bne.w	80039a6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADC_Start_DMA+0x4e>
 800387a:	2302      	movs	r3, #2
 800387c:	e096      	b.n	80039ac <HAL_ADC_Start_DMA+0x17c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a4d      	ldr	r2, [pc, #308]	@ (80039c0 <HAL_ADC_Start_DMA+0x190>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d008      	beq.n	80038a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d002      	beq.n	80038a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b09      	cmp	r3, #9
 80038a0:	d17a      	bne.n	8003998 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 ff60 	bl	8004768 <ADC_Enable>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d16d      	bne.n	800398e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3a      	ldr	r2, [pc, #232]	@ (80039b4 <HAL_ADC_Start_DMA+0x184>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_ADC_Start_DMA+0xb4>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3b      	ldr	r2, [pc, #236]	@ (80039c4 <HAL_ADC_Start_DMA+0x194>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d002      	beq.n	80038e0 <HAL_ADC_Start_DMA+0xb0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e003      	b.n	80038e8 <HAL_ADC_Start_DMA+0xb8>
 80038e0:	4b39      	ldr	r3, [pc, #228]	@ (80039c8 <HAL_ADC_Start_DMA+0x198>)
 80038e2:	e001      	b.n	80038e8 <HAL_ADC_Start_DMA+0xb8>
 80038e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d002      	beq.n	80038f6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f023 0206 	bic.w	r2, r3, #6
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60
 800391a:	e002      	b.n	8003922 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	4a29      	ldr	r2, [pc, #164]	@ (80039cc <HAL_ADC_Start_DMA+0x19c>)
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <HAL_ADC_Start_DMA+0x1a0>)
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	4a27      	ldr	r2, [pc, #156]	@ (80039d4 <HAL_ADC_Start_DMA+0x1a4>)
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	221c      	movs	r2, #28
 8003940:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0210 	orr.w	r2, r2, #16
 8003958:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3340      	adds	r3, #64	@ 0x40
 8003974:	4619      	mov	r1, r3
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f001 fd17 	bl	80053ac <HAL_DMA_Start_IT>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fc78 	bl	800327c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800398c:	e00d      	b.n	80039aa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003996:	e008      	b.n	80039aa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039a4:	e001      	b.n	80039aa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
 80039a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	50000100 	.word	0x50000100
 80039b8:	50000300 	.word	0x50000300
 80039bc:	50000700 	.word	0x50000700
 80039c0:	50000600 	.word	0x50000600
 80039c4:	50000500 	.word	0x50000500
 80039c8:	50000400 	.word	0x50000400
 80039cc:	08004953 	.word	0x08004953
 80039d0:	08004a2b 	.word	0x08004a2b
 80039d4:	08004a47 	.word	0x08004a47

080039d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039fc:	d004      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x30>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a8e      	ldr	r2, [pc, #568]	@ (8003c3c <HAL_ADC_IRQHandler+0x264>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_IRQHandler+0x34>
 8003a08:	4b8d      	ldr	r3, [pc, #564]	@ (8003c40 <HAL_ADC_IRQHandler+0x268>)
 8003a0a:	e000      	b.n	8003a0e <HAL_ADC_IRQHandler+0x36>
 8003a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8003c44 <HAL_ADC_IRQHandler+0x26c>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fb7c 	bl	800310c <LL_ADC_GetMultimode>
 8003a14:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d017      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x78>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 f8f6 	bl	8004c34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_ADC_IRQHandler+0x8c>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8094 	beq.w	8003b98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 808e 	beq.w	8003b98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fa95 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d072      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a64      	ldr	r2, [pc, #400]	@ (8003c3c <HAL_ADC_IRQHandler+0x264>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0xea>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a65      	ldr	r2, [pc, #404]	@ (8003c48 <HAL_ADC_IRQHandler+0x270>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d002      	beq.n	8003abe <HAL_ADC_IRQHandler+0xe6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	e003      	b.n	8003ac6 <HAL_ADC_IRQHandler+0xee>
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_ADC_IRQHandler+0x274>)
 8003ac0:	e001      	b.n	8003ac6 <HAL_ADC_IRQHandler+0xee>
 8003ac2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d008      	beq.n	8003ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d002      	beq.n	8003ae0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d104      	bne.n	8003aea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	e014      	b.n	8003b14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a53      	ldr	r2, [pc, #332]	@ (8003c3c <HAL_ADC_IRQHandler+0x264>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x130>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a53      	ldr	r2, [pc, #332]	@ (8003c48 <HAL_ADC_IRQHandler+0x270>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d002      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x12c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e003      	b.n	8003b0c <HAL_ADC_IRQHandler+0x134>
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_ADC_IRQHandler+0x274>)
 8003b06:	e001      	b.n	8003b0c <HAL_ADC_IRQHandler+0x134>
 8003b08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d135      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d12e      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fbb7 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11a      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 020c 	bic.w	r2, r2, #12
 8003b4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d112      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b70:	e00b      	b.n	8003b8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f984 	bl	8003e98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	220c      	movs	r2, #12
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_ADC_IRQHandler+0x1d4>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80b3 	beq.w	8003d1e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80ad 	beq.w	8003d1e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fa30 	bl	8003046 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003be6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff f9eb 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bf2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <HAL_ADC_IRQHandler+0x264>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_ADC_IRQHandler+0x23a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a11      	ldr	r2, [pc, #68]	@ (8003c48 <HAL_ADC_IRQHandler+0x270>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d002      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x236>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_IRQHandler+0x23e>
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c4c <HAL_ADC_IRQHandler+0x274>)
 8003c10:	e001      	b.n	8003c16 <HAL_ADC_IRQHandler+0x23e>
 8003c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d008      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d002      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	d10f      	bne.n	8003c50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	e01f      	b.n	8003c7a <HAL_ADC_IRQHandler+0x2a2>
 8003c3a:	bf00      	nop
 8003c3c:	50000100 	.word	0x50000100
 8003c40:	50000300 	.word	0x50000300
 8003c44:	50000700 	.word	0x50000700
 8003c48:	50000500 	.word	0x50000500
 8003c4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a8b      	ldr	r2, [pc, #556]	@ (8003e84 <HAL_ADC_IRQHandler+0x4ac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_ADC_IRQHandler+0x296>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a8a      	ldr	r2, [pc, #552]	@ (8003e88 <HAL_ADC_IRQHandler+0x4b0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d002      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x292>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_IRQHandler+0x29a>
 8003c6a:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_ADC_IRQHandler+0x4b4>)
 8003c6c:	e001      	b.n	8003c72 <HAL_ADC_IRQHandler+0x29a>
 8003c6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d047      	beq.n	8003d10 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_ADC_IRQHandler+0x2c2>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d03f      	beq.n	8003d10 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d13a      	bne.n	8003d10 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d133      	bne.n	8003d10 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d12e      	bne.n	8003d10 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fb07 	bl	80032ca <LL_ADC_INJ_IsConversionOngoing>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11a      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d112      	bne.n	8003d10 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf6:	e00b      	b.n	8003d10 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 ff67 	bl	8004be4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2260      	movs	r2, #96	@ 0x60
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d011      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x374>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8be 	bl	8003ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <HAL_ADC_IRQHandler+0x3a4>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 ff4d 	bl	8004c0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d012      	beq.n	8003dac <HAL_ADC_IRQHandler+0x3d4>
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 ff3f 	bl	8004c20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d043      	beq.n	8003e3e <HAL_ADC_IRQHandler+0x466>
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d03e      	beq.n	8003e3e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	e021      	b.n	8003e12 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x410>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a28      	ldr	r2, [pc, #160]	@ (8003e84 <HAL_ADC_IRQHandler+0x4ac>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_IRQHandler+0x414>
 8003de8:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <HAL_ADC_IRQHandler+0x4b8>)
 8003dea:	e000      	b.n	8003dee <HAL_ADC_IRQHandler+0x416>
 8003dec:	4b29      	ldr	r3, [pc, #164]	@ (8003e94 <HAL_ADC_IRQHandler+0x4bc>)
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f99a 	bl	8003128 <LL_ADC_GetMultiDMATransfer>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfe:	e008      	b.n	8003e12 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10e      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f84f 	bl	8003ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d018      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x4a2>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e62:	f043 0208 	orr.w	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 febf 	bl	8004bf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	@ 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	50000100 	.word	0x50000100
 8003e88:	50000500 	.word	0x50000500
 8003e8c:	50000400 	.word	0x50000400
 8003e90:	50000300 	.word	0x50000300
 8003e94:	50000700 	.word	0x50000700

08003e98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0b6      	sub	sp, #216	@ 0xd8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x24>
 8003f06:	2302      	movs	r3, #2
 8003f08:	f000 bc13 	b.w	8004732 <HAL_ADC_ConfigChannel+0x84a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff f9c3 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 83f3 	bne.w	800470c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f7ff f85b 	bl	8002fee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f9b1 	bl	80032a4 <LL_ADC_REG_IsConversionOngoing>
 8003f42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f9bd 	bl	80032ca <LL_ADC_INJ_IsConversionOngoing>
 8003f50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 81d9 	bne.w	8004310 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 81d4 	bne.w	8004310 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f70:	d10f      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7ff f875 	bl	800306c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f809 	bl	8002fa2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003f90:	e00e      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7ff f864 	bl	800306c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fff9 	bl	8002fa2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	08db      	lsrs	r3, r3, #3
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d022      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6919      	ldr	r1, [r3, #16]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fe2:	f7fe ff53 	bl	8002e8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6919      	ldr	r1, [r3, #16]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fe ff9f 	bl	8002f36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <HAL_ADC_ConfigChannel+0x126>
 8004008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800400c:	e000      	b.n	8004010 <HAL_ADC_ConfigChannel+0x128>
 800400e:	2300      	movs	r3, #0
 8004010:	461a      	mov	r2, r3
 8004012:	f7fe ffab 	bl	8002f6c <LL_ADC_SetOffsetSaturation>
 8004016:	e17b      	b.n	8004310 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe ff58 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x15c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe ff4d 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	f003 021f 	and.w	r2, r3, #31
 8004042:	e01e      	b.n	8004082 <HAL_ADC_ConfigChannel+0x19a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe ff42 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800406a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e004      	b.n	8004080 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_ADC_ConfigChannel+0x1b2>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	0e9b      	lsrs	r3, r3, #26
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	e018      	b.n	80040cc <HAL_ADC_ConfigChannel+0x1e4>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e004      	b.n	80040cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d106      	bne.n	80040de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe ff11 	bl	8002f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fef5 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_ADC_ConfigChannel+0x222>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe feea 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	e01e      	b.n	8004148 <HAL_ADC_ConfigChannel+0x260>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fedf 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800412c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e004      	b.n	8004146 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800413c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x278>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	e018      	b.n	8004192 <HAL_ADC_ConfigChannel+0x2aa>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004174:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800417c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e004      	b.n	8004192 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	2101      	movs	r1, #1
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe feae 	bl	8002f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fe92 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x2e8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fe87 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 021f 	and.w	r2, r3, #31
 80041ce:	e01e      	b.n	800420e <HAL_ADC_ConfigChannel+0x326>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fe7c 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80041ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80041f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e004      	b.n	800420c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x33e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	e016      	b.n	8004254 <HAL_ADC_ConfigChannel+0x36c>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004238:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800423a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800423e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e004      	b.n	8004254 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800424a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004254:	429a      	cmp	r2, r3
 8004256:	d106      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2200      	movs	r2, #0
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe fe4d 	bl	8002f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2103      	movs	r1, #3
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fe31 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x3aa>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2103      	movs	r1, #3
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fe26 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 8004288:	4603      	mov	r3, r0
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	e017      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x3da>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2103      	movs	r1, #3
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fe1b 	bl	8002ed4 <LL_ADC_GetOffsetChannel>
 800429e:	4603      	mov	r3, r0
 80042a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_ADC_ConfigChannel+0x3f2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	0e9b      	lsrs	r3, r3, #26
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	e011      	b.n	80042fe <HAL_ADC_ConfigChannel+0x416>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80042e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80042ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80042f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	2103      	movs	r1, #3
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fdf8 	bl	8002f00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe ff8b 	bl	8003230 <LL_ADC_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 813d 	bne.w	800459c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f7fe fec8 	bl	80030c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4aa2      	ldr	r2, [pc, #648]	@ (80045c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f040 812e 	bne.w	800459c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x480>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2b09      	cmp	r3, #9
 800435e:	bf94      	ite	ls
 8004360:	2301      	movls	r3, #1
 8004362:	2300      	movhi	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e019      	b.n	800439c <HAL_ADC_ConfigChannel+0x4b4>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800437a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2b09      	cmp	r3, #9
 8004394:	bf94      	ite	ls
 8004396:	2301      	movls	r3, #1
 8004398:	2300      	movhi	r3, #0
 800439a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800439c:	2b00      	cmp	r3, #0
 800439e:	d079      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x4d4>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	3301      	adds	r3, #1
 80043b4:	069b      	lsls	r3, r3, #26
 80043b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ba:	e015      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x500>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80043d4:	2320      	movs	r3, #32
 80043d6:	e003      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80043d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	069b      	lsls	r3, r3, #26
 80043e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x520>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	3301      	adds	r3, #1
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	e017      	b.n	8004438 <HAL_ADC_ConfigChannel+0x550>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800441a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004420:	2320      	movs	r3, #32
 8004422:	e003      	b.n	800442c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	ea42 0103 	orr.w	r1, r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_ADC_ConfigChannel+0x576>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	3301      	adds	r3, #1
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	e018      	b.n	8004490 <HAL_ADC_ConfigChannel+0x5a8>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004476:	2320      	movs	r3, #32
 8004478:	e003      	b.n	8004482 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800447a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004490:	430b      	orrs	r3, r1
 8004492:	e07e      	b.n	8004592 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x5c8>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	069b      	lsls	r3, r3, #26
 80044aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ae:	e015      	b.n	80044dc <HAL_ADC_ConfigChannel+0x5f4>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e003      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	069b      	lsls	r3, r3, #26
 80044d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x614>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	3301      	adds	r3, #1
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	e017      	b.n	800452c <HAL_ADC_ConfigChannel+0x644>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	61fb      	str	r3, [r7, #28]
  return result;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004514:	2320      	movs	r3, #32
 8004516:	e003      	b.n	8004520 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	ea42 0103 	orr.w	r1, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x670>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	3301      	adds	r3, #1
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	3b1e      	subs	r3, #30
 8004550:	051b      	lsls	r3, r3, #20
 8004552:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004556:	e01b      	b.n	8004590 <HAL_ADC_ConfigChannel+0x6a8>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	613b      	str	r3, [r7, #16]
  return result;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e003      	b.n	800457c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f003 021f 	and.w	r2, r3, #31
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	3b1e      	subs	r3, #30
 800458a:	051b      	lsls	r3, r3, #20
 800458c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004596:	4619      	mov	r1, r3
 8004598:	f7fe fd68 	bl	800306c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80be 	beq.w	8004726 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b2:	d004      	beq.n	80045be <HAL_ADC_ConfigChannel+0x6d6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a04      	ldr	r2, [pc, #16]	@ (80045cc <HAL_ADC_ConfigChannel+0x6e4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10a      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x6ec>
 80045be:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80045c0:	e009      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x6ee>
 80045c2:	bf00      	nop
 80045c4:	407f0000 	.word	0x407f0000
 80045c8:	80080000 	.word	0x80080000
 80045cc:	50000100 	.word	0x50000100
 80045d0:	50000300 	.word	0x50000300
 80045d4:	4b59      	ldr	r3, [pc, #356]	@ (800473c <HAL_ADC_ConfigChannel+0x854>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fc4a 	bl	8002e70 <LL_ADC_GetCommonPathInternalCh>
 80045dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a56      	ldr	r2, [pc, #344]	@ (8004740 <HAL_ADC_ConfigChannel+0x858>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_ADC_ConfigChannel+0x70c>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a55      	ldr	r2, [pc, #340]	@ (8004744 <HAL_ADC_ConfigChannel+0x85c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d13a      	bne.n	800466a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d134      	bne.n	800466a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004608:	d005      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x72e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4e      	ldr	r2, [pc, #312]	@ (8004748 <HAL_ADC_ConfigChannel+0x860>)
 8004610:	4293      	cmp	r3, r2
 8004612:	f040 8085 	bne.w	8004720 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800461e:	d004      	beq.n	800462a <HAL_ADC_ConfigChannel+0x742>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a49      	ldr	r2, [pc, #292]	@ (800474c <HAL_ADC_ConfigChannel+0x864>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x746>
 800462a:	4a49      	ldr	r2, [pc, #292]	@ (8004750 <HAL_ADC_ConfigChannel+0x868>)
 800462c:	e000      	b.n	8004630 <HAL_ADC_ConfigChannel+0x748>
 800462e:	4a43      	ldr	r2, [pc, #268]	@ (800473c <HAL_ADC_ConfigChannel+0x854>)
 8004630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fe fc05 	bl	8002e4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004640:	4b44      	ldr	r3, [pc, #272]	@ (8004754 <HAL_ADC_ConfigChannel+0x86c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	4a44      	ldr	r2, [pc, #272]	@ (8004758 <HAL_ADC_ConfigChannel+0x870>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800465a:	e002      	b.n	8004662 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f9      	bne.n	800465c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004668:	e05a      	b.n	8004720 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3b      	ldr	r2, [pc, #236]	@ (800475c <HAL_ADC_ConfigChannel+0x874>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d125      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11f      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a31      	ldr	r2, [pc, #196]	@ (800474c <HAL_ADC_ConfigChannel+0x864>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d104      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x7ac>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a34      	ldr	r2, [pc, #208]	@ (8004760 <HAL_ADC_ConfigChannel+0x878>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d047      	beq.n	8004724 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800469c:	d004      	beq.n	80046a8 <HAL_ADC_ConfigChannel+0x7c0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2a      	ldr	r2, [pc, #168]	@ (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x7c4>
 80046a8:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <HAL_ADC_ConfigChannel+0x868>)
 80046aa:	e000      	b.n	80046ae <HAL_ADC_ConfigChannel+0x7c6>
 80046ac:	4a23      	ldr	r2, [pc, #140]	@ (800473c <HAL_ADC_ConfigChannel+0x854>)
 80046ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe fbc6 	bl	8002e4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046be:	e031      	b.n	8004724 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a27      	ldr	r2, [pc, #156]	@ (8004764 <HAL_ADC_ConfigChannel+0x87c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d12d      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d127      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046e8:	d004      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x80c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	@ (800474c <HAL_ADC_ConfigChannel+0x864>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x810>
 80046f4:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <HAL_ADC_ConfigChannel+0x868>)
 80046f6:	e000      	b.n	80046fa <HAL_ADC_ConfigChannel+0x812>
 80046f8:	4a10      	ldr	r2, [pc, #64]	@ (800473c <HAL_ADC_ConfigChannel+0x854>)
 80046fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe fba0 	bl	8002e4a <LL_ADC_SetCommonPathInternalCh>
 800470a:	e00c      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800471e:	e002      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004724:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800472e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004732:	4618      	mov	r0, r3
 8004734:	37d8      	adds	r7, #216	@ 0xd8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	50000700 	.word	0x50000700
 8004740:	c3210000 	.word	0xc3210000
 8004744:	90c00010 	.word	0x90c00010
 8004748:	50000600 	.word	0x50000600
 800474c:	50000100 	.word	0x50000100
 8004750:	50000300 	.word	0x50000300
 8004754:	20000008 	.word	0x20000008
 8004758:	053e2d63 	.word	0x053e2d63
 800475c:	c7520000 	.word	0xc7520000
 8004760:	50000500 	.word	0x50000500
 8004764:	cb840000 	.word	0xcb840000

08004768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fd59 	bl	8003230 <LL_ADC_IsEnabled>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d176      	bne.n	8004872 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <ADC_Enable+0x114>)
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e062      	b.n	8004874 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fd14 	bl	80031e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047c0:	d004      	beq.n	80047cc <ADC_Enable+0x64>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004880 <ADC_Enable+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <ADC_Enable+0x68>
 80047cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004884 <ADC_Enable+0x11c>)
 80047ce:	e000      	b.n	80047d2 <ADC_Enable+0x6a>
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <ADC_Enable+0x120>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fb4c 	bl	8002e70 <LL_ADC_GetCommonPathInternalCh>
 80047d8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e2:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <ADC_Enable+0x124>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a29      	ldr	r2, [pc, #164]	@ (8004890 <ADC_Enable+0x128>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047fc:	e002      	b.n	8004804 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3b01      	subs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f9      	bne.n	80047fe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800480a:	f7fe fadd 	bl	8002dc8 <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004810:	e028      	b.n	8004864 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fd0a 	bl	8003230 <LL_ADC_IsEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fcda 	bl	80031e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800482c:	f7fe facc 	bl	8002dc8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d914      	bls.n	8004864 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d00d      	beq.n	8004864 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e007      	b.n	8004874 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b01      	cmp	r3, #1
 8004870:	d1cf      	bne.n	8004812 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	8000003f 	.word	0x8000003f
 8004880:	50000100 	.word	0x50000100
 8004884:	50000300 	.word	0x50000300
 8004888:	50000700 	.word	0x50000700
 800488c:	20000008 	.word	0x20000008
 8004890:	053e2d63 	.word	0x053e2d63

08004894 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fcd8 	bl	8003256 <LL_ADC_IsDisableOngoing>
 80048a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe fcbf 	bl	8003230 <LL_ADC_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d047      	beq.n	8004948 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d144      	bne.n	8004948 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030d 	and.w	r3, r3, #13
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10c      	bne.n	80048e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe fc99 	bl	8003208 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2203      	movs	r2, #3
 80048dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048de:	f7fe fa73 	bl	8002dc8 <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048e4:	e029      	b.n	800493a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ea:	f043 0210 	orr.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e023      	b.n	800494a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004902:	f7fe fa61 	bl	8002dc8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d914      	bls.n	800493a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e007      	b.n	800494a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1dc      	bne.n	8004902 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004964:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004968:	2b00      	cmp	r3, #0
 800496a:	d14b      	bne.n	8004a04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fb1c 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d032      	beq.n	80049fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d12b      	bne.n	80049fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11f      	bne.n	80049fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049c8:	e018      	b.n	80049fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d111      	bne.n	80049fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f043 0201 	orr.w	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fa4b 	bl	8003e98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a02:	e00e      	b.n	8004a22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fa5f 	bl	8003ed4 <HAL_ADC_ErrorCallback>
}
 8004a16:	e004      	b.n	8004a22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fa37 	bl	8003eac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fa31 	bl	8003ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <LL_ADC_IsEnabled>:
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <LL_ADC_IsEnabled+0x18>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <LL_ADC_IsEnabled+0x1a>
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_ADC_StartCalibration>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ab2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae6:	d101      	bne.n	8004aec <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_ADC_REG_IsConversionOngoing>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_ADCEx_Calibration_Start+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e04d      	b.n	8004bd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fea5 	bl	8004894 <ADC_Disable>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d136      	bne.n	8004bc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b5c:	f023 0302 	bic.w	r3, r3, #2
 8004b60:	f043 0202 	orr.w	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff96 	bl	8004aa0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b74:	e014      	b.n	8004ba0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d90d      	bls.n	8004ba0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	f023 0312 	bic.w	r3, r3, #18
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e01b      	b.n	8004bd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff94 	bl	8004ad2 <LL_ADC_IsCalibrationOnGoing>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e2      	bne.n	8004b76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb4:	f023 0303 	bic.w	r3, r3, #3
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bc0:	e005      	b.n	8004bce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	0004de01 	.word	0x0004de01

08004be4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b0a1      	sub	sp, #132	@ 0x84
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0e7      	b.n	8004e36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c72:	2300      	movs	r3, #0
 8004c74:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c7e:	d102      	bne.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c80:	4b6f      	ldr	r3, [pc, #444]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	e009      	b.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d102      	bne.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c90:	4b6d      	ldr	r3, [pc, #436]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	e001      	b.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0be      	b.n	8004e36 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff1d 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004cc0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff17 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 80a0 	bne.w	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 809c 	bne.w	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ce4:	d004      	beq.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a55      	ldr	r2, [pc, #340]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004cf0:	4b56      	ldr	r3, [pc, #344]	@ (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004cf2:	e000      	b.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004cf4:	4b56      	ldr	r3, [pc, #344]	@ (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004cf6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d04b      	beq.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d12:	035b      	lsls	r3, r3, #13
 8004d14:	430b      	orrs	r3, r1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d24:	d004      	beq.n	8004d30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a45      	ldr	r2, [pc, #276]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10f      	bne.n	8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d34:	f7ff fea1 	bl	8004a7a <LL_ADC_IsEnabled>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4841      	ldr	r0, [pc, #260]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d3c:	f7ff fe9d 	bl	8004a7a <LL_ADC_IsEnabled>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4323      	orrs	r3, r4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e012      	b.n	8004d76 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d50:	483c      	ldr	r0, [pc, #240]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d52:	f7ff fe92 	bl	8004a7a <LL_ADC_IsEnabled>
 8004d56:	4604      	mov	r4, r0
 8004d58:	483b      	ldr	r0, [pc, #236]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d5a:	f7ff fe8e 	bl	8004a7a <LL_ADC_IsEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	431c      	orrs	r4, r3
 8004d62:	483c      	ldr	r0, [pc, #240]	@ (8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d64:	f7ff fe89 	bl	8004a7a <LL_ADC_IsEnabled>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4323      	orrs	r3, r4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d056      	beq.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	6892      	ldr	r2, [r2, #8]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	431a      	orrs	r2, r3
 8004d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d96:	e047      	b.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dac:	d004      	beq.n	8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a23      	ldr	r2, [pc, #140]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10f      	bne.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004db8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dbc:	f7ff fe5d 	bl	8004a7a <LL_ADC_IsEnabled>
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	481f      	ldr	r0, [pc, #124]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dc4:	f7ff fe59 	bl	8004a7a <LL_ADC_IsEnabled>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4323      	orrs	r3, r4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e012      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004dd8:	481a      	ldr	r0, [pc, #104]	@ (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dda:	f7ff fe4e 	bl	8004a7a <LL_ADC_IsEnabled>
 8004dde:	4604      	mov	r4, r0
 8004de0:	4819      	ldr	r0, [pc, #100]	@ (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004de2:	f7ff fe4a 	bl	8004a7a <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	431c      	orrs	r4, r3
 8004dea:	481a      	ldr	r0, [pc, #104]	@ (8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004dec:	f7ff fe45 	bl	8004a7a <LL_ADC_IsEnabled>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4323      	orrs	r3, r4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e0a:	f023 030f 	bic.w	r3, r3, #15
 8004e0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e12:	e009      	b.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e26:	e000      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3784      	adds	r7, #132	@ 0x84
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	50000100 	.word	0x50000100
 8004e44:	50000400 	.word	0x50000400
 8004e48:	50000500 	.word	0x50000500
 8004e4c:	50000300 	.word	0x50000300
 8004e50:	50000700 	.word	0x50000700
 8004e54:	50000600 	.word	0x50000600

08004e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e74:	4013      	ands	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8a:	4a04      	ldr	r2, [pc, #16]	@ (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	60d3      	str	r3, [r2, #12]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 0307 	and.w	r3, r3, #7
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db0b      	blt.n	8004ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	f003 021f 	and.w	r2, r3, #31
 8004ed4:	4907      	ldr	r1, [pc, #28]	@ (8004ef4 <__NVIC_EnableIRQ+0x38>)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2001      	movs	r0, #1
 8004ede:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	e000e100 	.word	0xe000e100

08004ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	@ (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	@ (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	@ 0x24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf28      	it	cs
 8004f6a:	2304      	movcs	r3, #4
 8004f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d902      	bls.n	8004f7c <NVIC_EncodePriority+0x30>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3b03      	subs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <NVIC_EncodePriority+0x32>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	401a      	ands	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f94:	f04f 31ff 	mov.w	r1, #4294967295
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	4313      	orrs	r3, r2
         );
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	@ 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc4:	d301      	bcc.n	8004fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00f      	b.n	8004fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff4 <SysTick_Config+0x40>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	f7ff ff8e 	bl	8004ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <SysTick_Config+0x40>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fe2:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <SysTick_Config+0x40>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	e000e010 	.word	0xe000e010

08004ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff29 	bl	8004e58 <__NVIC_SetPriorityGrouping>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	4603      	mov	r3, r0
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800501c:	f7ff ff40 	bl	8004ea0 <__NVIC_GetPriorityGrouping>
 8005020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff ff90 	bl	8004f4c <NVIC_EncodePriority>
 800502c:	4602      	mov	r2, r0
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ff5f 	bl	8004ef8 <__NVIC_SetPriority>
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff33 	bl	8004ebc <__NVIC_EnableIRQ>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffa4 	bl	8004fb4 <SysTick_Config>
 800506c:	4603      	mov	r3, r0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e054      	b.n	8005134 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7f5b      	ldrb	r3, [r3, #29]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fa24 	bl	80014e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	791b      	ldrb	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a22      	ldr	r2, [pc, #136]	@ (800513c <HAL_CRC_Init+0xc4>)
 80050b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0218 	bic.w	r2, r2, #24
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	e00c      	b.n	80050e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f834 	bl	8005140 <HAL_CRCEx_Polynomial_Set>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e028      	b.n	8005134 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	795b      	ldrb	r3, [r3, #5]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	611a      	str	r2, [r3, #16]
 80050f4:	e004      	b.n	8005100 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6912      	ldr	r2, [r2, #16]
 80050fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	04c11db7 	.word	0x04c11db7

08005140 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005150:	231f      	movs	r3, #31
 8005152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
 8005162:	e063      	b.n	800522c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005164:	bf00      	nop
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	613a      	str	r2, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <HAL_CRCEx_Polynomial_Set+0x44>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b18      	cmp	r3, #24
 8005188:	d846      	bhi.n	8005218 <HAL_CRCEx_Polynomial_Set+0xd8>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <HAL_CRCEx_Polynomial_Set+0x50>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	0800521f 	.word	0x0800521f
 8005194:	08005219 	.word	0x08005219
 8005198:	08005219 	.word	0x08005219
 800519c:	08005219 	.word	0x08005219
 80051a0:	08005219 	.word	0x08005219
 80051a4:	08005219 	.word	0x08005219
 80051a8:	08005219 	.word	0x08005219
 80051ac:	08005219 	.word	0x08005219
 80051b0:	0800520d 	.word	0x0800520d
 80051b4:	08005219 	.word	0x08005219
 80051b8:	08005219 	.word	0x08005219
 80051bc:	08005219 	.word	0x08005219
 80051c0:	08005219 	.word	0x08005219
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005219 	.word	0x08005219
 80051d0:	08005201 	.word	0x08005201
 80051d4:	08005219 	.word	0x08005219
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005219 	.word	0x08005219
 80051e4:	08005219 	.word	0x08005219
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005219 	.word	0x08005219
 80051f0:	080051f5 	.word	0x080051f5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d913      	bls.n	8005222 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80051fe:	e010      	b.n	8005222 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b07      	cmp	r3, #7
 8005204:	d90f      	bls.n	8005226 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800520a:	e00c      	b.n	8005226 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d90b      	bls.n	800522a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005216:	e008      	b.n	800522a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
        break;
 800521c:	e006      	b.n	800522c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800521e:	bf00      	nop
 8005220:	e004      	b.n	800522c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005222:	bf00      	nop
 8005224:	e002      	b.n	800522c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005226:	bf00      	nop
 8005228:	e000      	b.n	800522c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800522a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f023 0118 	bic.w	r1, r3, #24
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e08d      	b.n	800538a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	4b47      	ldr	r3, [pc, #284]	@ (8005394 <HAL_DMA_Init+0x138>)
 8005276:	429a      	cmp	r2, r3
 8005278:	d80f      	bhi.n	800529a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	4b45      	ldr	r3, [pc, #276]	@ (8005398 <HAL_DMA_Init+0x13c>)
 8005282:	4413      	add	r3, r2
 8005284:	4a45      	ldr	r2, [pc, #276]	@ (800539c <HAL_DMA_Init+0x140>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a42      	ldr	r2, [pc, #264]	@ (80053a0 <HAL_DMA_Init+0x144>)
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40
 8005298:	e00e      	b.n	80052b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	4b40      	ldr	r3, [pc, #256]	@ (80053a4 <HAL_DMA_Init+0x148>)
 80052a2:	4413      	add	r3, r2
 80052a4:	4a3d      	ldr	r2, [pc, #244]	@ (800539c <HAL_DMA_Init+0x140>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	@ (80053a8 <HAL_DMA_Init+0x14c>)
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9b6 	bl	800567c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005318:	d102      	bne.n	8005320 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005334:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_DMA_Init+0x104>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d80c      	bhi.n	8005360 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9d6 	bl	80056f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e008      	b.n	8005372 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40020407 	.word	0x40020407
 8005398:	bffdfff8 	.word	0xbffdfff8
 800539c:	cccccccd 	.word	0xcccccccd
 80053a0:	40020000 	.word	0x40020000
 80053a4:	bffdfbf8 	.word	0xbffdfbf8
 80053a8:	40020400 	.word	0x40020400

080053ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_DMA_Start_IT+0x20>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e066      	b.n	800549a <HAL_DMA_Start_IT+0xee>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d155      	bne.n	800548c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f8fb 	bl	8005600 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 020e 	orr.w	r2, r2, #14
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e00f      	b.n	8005444 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 020a 	orr.w	r2, r2, #10
 8005442:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005460:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005478:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e005      	b.n	8005498 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2204      	movs	r2, #4
 80054c4:	409a      	lsls	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d026      	beq.n	800551c <HAL_DMA_IRQHandler+0x7a>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d021      	beq.n	800551c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0204 	bic.w	r2, r2, #4
 80054f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	f003 021f 	and.w	r2, r3, #31
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2104      	movs	r1, #4
 8005504:	fa01 f202 	lsl.w	r2, r1, r2
 8005508:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d071      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800551a:	e06c      	b.n	80055f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2202      	movs	r2, #2
 8005526:	409a      	lsls	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02e      	beq.n	800558e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d029      	beq.n	800558e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 020a 	bic.w	r2, r2, #10
 8005556:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005564:	f003 021f 	and.w	r2, r3, #31
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	2102      	movs	r1, #2
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d038      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800558c:	e033      	b.n	80055f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2208      	movs	r2, #8
 8005598:	409a      	lsls	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d02a      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d025      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 020e 	bic.w	r2, r2, #14
 80055ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c0:	f003 021f 	and.w	r2, r3, #31
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f202 	lsl.w	r2, r1, r2
 80055ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
}
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005616:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	f003 021f 	and.w	r2, r3, #31
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	2101      	movs	r1, #1
 8005638:	fa01 f202 	lsl.w	r2, r1, r2
 800563c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d108      	bne.n	8005660 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800565e:	e007      	b.n	8005670 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800568c:	429a      	cmp	r2, r3
 800568e:	d802      	bhi.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e001      	b.n	800569a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005696:	4b15      	ldr	r3, [pc, #84]	@ (80056ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005698:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	3b08      	subs	r3, #8
 80056a6:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b4:	089b      	lsrs	r3, r3, #2
 80056b6:	009a      	lsls	r2, r3, #2
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a0b      	ldr	r2, [pc, #44]	@ (80056f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2201      	movs	r2, #1
 80056d0:	409a      	lsls	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40020407 	.word	0x40020407
 80056e8:	40020800 	.word	0x40020800
 80056ec:	40020820 	.word	0x40020820
 80056f0:	cccccccd 	.word	0xcccccccd
 80056f4:	40020880 	.word	0x40020880

080056f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a08      	ldr	r2, [pc, #32]	@ (800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800571a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3b01      	subs	r3, #1
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2201      	movs	r2, #1
 8005726:	409a      	lsls	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	1000823f 	.word	0x1000823f
 800573c:	40020940 	.word	0x40020940

08005740 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e147      	b.n	80059e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fb ffa8 	bl	80016bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0210 	bic.w	r2, r2, #16
 800577a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800577c:	f7fd fb24 	bl	8002dc8 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005782:	e012      	b.n	80057aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005784:	f7fd fb20 	bl	8002dc8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b0a      	cmp	r3, #10
 8005790:	d90b      	bls.n	80057aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005796:	f043 0201 	orr.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2203      	movs	r2, #3
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e11b      	b.n	80059e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d0e5      	beq.n	8005784 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057c8:	f7fd fafe 	bl	8002dc8 <HAL_GetTick>
 80057cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057ce:	e012      	b.n	80057f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057d0:	f7fd fafa 	bl	8002dc8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b0a      	cmp	r3, #10
 80057dc:	d90b      	bls.n	80057f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e2:	f043 0201 	orr.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0f5      	b.n	80059e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0e5      	beq.n	80057d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0202 	orr.w	r2, r2, #2
 8005812:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a74      	ldr	r2, [pc, #464]	@ (80059ec <HAL_FDCAN_Init+0x2ac>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d103      	bne.n	8005826 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800581e:	4a74      	ldr	r2, [pc, #464]	@ (80059f0 <HAL_FDCAN_Init+0x2b0>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d108      	bne.n	8005840 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583c:	619a      	str	r2, [r3, #24]
 800583e:	e007      	b.n	8005850 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800584e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7c5b      	ldrb	r3, [r3, #17]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d108      	bne.n	800586a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005866:	619a      	str	r2, [r3, #24]
 8005868:	e007      	b.n	800587a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005878:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7c9b      	ldrb	r3, [r3, #18]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005890:	619a      	str	r2, [r3, #24]
 8005892:	e007      	b.n	80058a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80058c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0210 	bic.w	r2, r2, #16
 80058d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0204 	orr.w	r2, r2, #4
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e02c      	b.n	800594e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d028      	beq.n	800594e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d01c      	beq.n	800593e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005912:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0210 	orr.w	r2, r2, #16
 8005922:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d110      	bne.n	800594e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0220 	orr.w	r2, r2, #32
 800593a:	619a      	str	r2, [r3, #24]
 800593c:	e007      	b.n	800594e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0220 	orr.w	r2, r2, #32
 800594c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	3b01      	subs	r3, #1
 8005954:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	3b01      	subs	r3, #1
 800595c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800595e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005966:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	3b01      	subs	r3, #1
 8005970:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005976:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005978:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005982:	d115      	bne.n	80059b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	3b01      	subs	r3, #1
 8005990:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005992:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	3b01      	subs	r3, #1
 800599a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800599c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	3b01      	subs	r3, #1
 80059a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fcc0 	bl	800634c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40006400 	.word	0x40006400
 80059f0:	40006500 	.word	0x40006500

080059f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a04:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d002      	beq.n	8005a12 <HAL_FDCAN_ConfigFilter+0x1e>
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d13d      	bne.n	8005a8e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d119      	bne.n	8005a4e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a26:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005a2e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e01d      	b.n	8005a8a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	075a      	lsls	r2, r3, #29
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	079a      	lsls	r2, r3, #30
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3304      	adds	r3, #4
 8005a82:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e006      	b.n	8005a9c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d116      	bne.n	8005af0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aca:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	431a      	orrs	r2, r3
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e006      	b.n	8005afe <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d108      	bne.n	8005b34 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	0219      	lsls	r1, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e006      	b.n	8005b42 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d109      	bne.n	8005b76 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005b70:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e006      	b.n	8005b84 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d110      	bne.n	8005bc6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e006      	b.n	8005bd4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d12c      	bne.n	8005c52 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e023      	b.n	8005c60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fbf8 	bl	8006424 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2101      	movs	r1, #1
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c40:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c44:	2201      	movs	r2, #1
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e006      	b.n	8005c60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c56:	f043 0208 	orr.w	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b08b      	sub	sp, #44	@ 0x2c
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c80:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c82:	7efb      	ldrb	r3, [r7, #27]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	f040 80e8 	bne.w	8005e5a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d137      	bne.n	8005d00 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0db      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb8:	0e1b      	lsrs	r3, r3, #24
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfe:	e036      	b.n	8005d6e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0a3      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10a      	bne.n	8005d48 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005d44:	2301      	movs	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d107      	bne.n	8005d92 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	0c9b      	lsrs	r3, r3, #18
 8005d88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	3304      	adds	r3, #4
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	0fda      	lsrs	r2, r3, #31
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	3304      	adds	r3, #4
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	e00a      	b.n	8005e2a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	441a      	add	r2, r3
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	440b      	add	r3, r1
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	3301      	adds	r3, #1
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	4a11      	ldr	r2, [pc, #68]	@ (8005e74 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d3ec      	bcc.n	8005e14 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d105      	bne.n	8005e4c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005e4a:	e004      	b.n	8005e56 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e006      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
  }
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	372c      	adds	r7, #44	@ 0x2c
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	0800eec8 	.word	0x0800eec8

08005e78 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e8a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d003      	beq.n	8005e9a <HAL_FDCAN_ActivateNotification+0x22>
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f040 80c8 	bne.w	800602a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03b      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d031      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d027      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01d      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00c      	beq.n	8005f3e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0201 	orr.w	r2, r2, #1
 8005f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d13b      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d131      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d127      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d11d      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0202 	orr.w	r2, r2, #2
 8005fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	430a      	orrs	r2, r1
 8006012:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	430a      	orrs	r2, r1
 8006024:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e006      	b.n	8006038 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
  }
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	@ 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006052:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006060:	4013      	ands	r3, r2
 8006062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006078:	4013      	ands	r3, r2
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006090:	4013      	ands	r3, r2
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800609e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	4013      	ands	r3, r2
 80060aa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80060b6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2240      	movs	r2, #64	@ 0x40
 80060ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f916 	bl	8006322 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d014      	beq.n	8006134 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006112:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4013      	ands	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800612c:	6939      	ldr	r1, [r7, #16]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8d8 	bl	80062e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006140:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8a2 	bl	800628e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006156:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f005 f9a6 	bl	800b4ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800616e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f897 	bl	80062a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00c      	beq.n	800619a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006192:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f890 	bl	80062ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80061b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f87c 	bl	80062ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f880 	bl	80062fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00c      	beq.n	800621e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006216:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f878 	bl	800630e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00f      	beq.n	8006248 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800623a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006240:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006256:	69f9      	ldr	r1, [r7, #28]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f005 f997 	bl	800b58c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f858 	bl	8006336 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006286:	bf00      	nop
 8006288:	3730      	adds	r7, #48	@ 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006354:	4b30      	ldr	r3, [pc, #192]	@ (8006418 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006356:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2f      	ldr	r2, [pc, #188]	@ (800641c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d103      	bne.n	800636a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006368:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800637a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006392:	041a      	lsls	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	061a      	lsls	r2, r3, #24
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e005      	b.n	80063fe <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3304      	adds	r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	429a      	cmp	r2, r3
 8006408:	d3f3      	bcc.n	80063f2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	4000a400 	.word	0x4000a400
 800641c:	40006800 	.word	0x40006800
 8006420:	40006c00 	.word	0x40006c00

08006424 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	@ 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006442:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800644a:	4313      	orrs	r3, r2
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	e00a      	b.n	8006466 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006458:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800645e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006464:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006470:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006476:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800647c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	4613      	mov	r3, r2
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	440b      	add	r3, r1
 8006498:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3304      	adds	r3, #4
 80064a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	3304      	adds	r3, #4
 80064b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e020      	b.n	80064fa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3303      	adds	r3, #3
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4413      	add	r3, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3302      	adds	r3, #2
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	440b      	add	r3, r1
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3301      	adds	r3, #1
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	440b      	add	r3, r1
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	440a      	add	r2, r1
 80064e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	3304      	adds	r3, #4
 80064f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3304      	adds	r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4a06      	ldr	r2, [pc, #24]	@ (8006518 <FDCAN_CopyMessageToRAM+0xf4>)
 8006500:	5cd3      	ldrb	r3, [r2, r3]
 8006502:	461a      	mov	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4293      	cmp	r3, r2
 8006508:	d3d6      	bcc.n	80064b8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	3724      	adds	r7, #36	@ 0x24
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	0800eec8 	.word	0x0800eec8

0800651c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800652a:	e15a      	b.n	80067e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	2101      	movs	r1, #1
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	fa01 f303 	lsl.w	r3, r1, r3
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 814c 	beq.w	80067dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d005      	beq.n	800655c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006558:	2b02      	cmp	r3, #2
 800655a:	d130      	bne.n	80065be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	2203      	movs	r2, #3
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4013      	ands	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006592:	2201      	movs	r2, #1
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4013      	ands	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	f003 0201 	and.w	r2, r3, #1
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d017      	beq.n	80065fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	2203      	movs	r2, #3
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4013      	ands	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d123      	bne.n	800664e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	08da      	lsrs	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3208      	adds	r2, #8
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	220f      	movs	r2, #15
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4013      	ands	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	08da      	lsrs	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3208      	adds	r2, #8
 8006648:	6939      	ldr	r1, [r7, #16]
 800664a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	2203      	movs	r2, #3
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4013      	ands	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 0203 	and.w	r2, r3, #3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80a6 	beq.w	80067dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006690:	4b5b      	ldr	r3, [pc, #364]	@ (8006800 <HAL_GPIO_Init+0x2e4>)
 8006692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006694:	4a5a      	ldr	r2, [pc, #360]	@ (8006800 <HAL_GPIO_Init+0x2e4>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6613      	str	r3, [r2, #96]	@ 0x60
 800669c:	4b58      	ldr	r3, [pc, #352]	@ (8006800 <HAL_GPIO_Init+0x2e4>)
 800669e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066a8:	4a56      	ldr	r2, [pc, #344]	@ (8006804 <HAL_GPIO_Init+0x2e8>)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	3302      	adds	r3, #2
 80066b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	220f      	movs	r2, #15
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4013      	ands	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066d2:	d01f      	beq.n	8006714 <HAL_GPIO_Init+0x1f8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006808 <HAL_GPIO_Init+0x2ec>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d019      	beq.n	8006710 <HAL_GPIO_Init+0x1f4>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a4b      	ldr	r2, [pc, #300]	@ (800680c <HAL_GPIO_Init+0x2f0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_GPIO_Init+0x1f0>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006810 <HAL_GPIO_Init+0x2f4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00d      	beq.n	8006708 <HAL_GPIO_Init+0x1ec>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a49      	ldr	r2, [pc, #292]	@ (8006814 <HAL_GPIO_Init+0x2f8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <HAL_GPIO_Init+0x1e8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a48      	ldr	r2, [pc, #288]	@ (8006818 <HAL_GPIO_Init+0x2fc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <HAL_GPIO_Init+0x1e4>
 80066fc:	2305      	movs	r3, #5
 80066fe:	e00a      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 8006700:	2306      	movs	r3, #6
 8006702:	e008      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 8006704:	2304      	movs	r3, #4
 8006706:	e006      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 8006708:	2303      	movs	r3, #3
 800670a:	e004      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 800670c:	2302      	movs	r3, #2
 800670e:	e002      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_GPIO_Init+0x1fa>
 8006714:	2300      	movs	r3, #0
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	f002 0203 	and.w	r2, r2, #3
 800671c:	0092      	lsls	r2, r2, #2
 800671e:	4093      	lsls	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006726:	4937      	ldr	r1, [pc, #220]	@ (8006804 <HAL_GPIO_Init+0x2e8>)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	089b      	lsrs	r3, r3, #2
 800672c:	3302      	adds	r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006734:	4b39      	ldr	r3, [pc, #228]	@ (800681c <HAL_GPIO_Init+0x300>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	43db      	mvns	r3, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4013      	ands	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006758:	4a30      	ldr	r2, [pc, #192]	@ (800681c <HAL_GPIO_Init+0x300>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800675e:	4b2f      	ldr	r3, [pc, #188]	@ (800681c <HAL_GPIO_Init+0x300>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	43db      	mvns	r3, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006782:	4a26      	ldr	r2, [pc, #152]	@ (800681c <HAL_GPIO_Init+0x300>)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006788:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_GPIO_Init+0x300>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	43db      	mvns	r3, r3
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4013      	ands	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <HAL_GPIO_Init+0x300>)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80067b2:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <HAL_GPIO_Init+0x300>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4013      	ands	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067d6:	4a11      	ldr	r2, [pc, #68]	@ (800681c <HAL_GPIO_Init+0x300>)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3301      	adds	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f ae9d 	bne.w	800652c <HAL_GPIO_Init+0x10>
  }
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40021000 	.word	0x40021000
 8006804:	40010000 	.word	0x40010000
 8006808:	48000400 	.word	0x48000400
 800680c:	48000800 	.word	0x48000800
 8006810:	48000c00 	.word	0x48000c00
 8006814:	48001000 	.word	0x48001000
 8006818:	48001400 	.word	0x48001400
 800681c:	40010400 	.word	0x40010400

08006820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
 800682c:	4613      	mov	r3, r2
 800682e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006830:	787b      	ldrb	r3, [r7, #1]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006836:	887a      	ldrh	r2, [r7, #2]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800683c:	e002      	b.n	8006844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4013      	ands	r3, r2
 8006868:	041a      	lsls	r2, r3, #16
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	43d9      	mvns	r1, r3
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	400b      	ands	r3, r1
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	619a      	str	r2, [r3, #24]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0be      	b.n	8006a14 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02e      	beq.n	8006940 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a4d      	ldr	r2, [pc, #308]	@ (8006a1c <HAL_HRTIM_Init+0x198>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10b      	bne.n	8006904 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80068ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006a20 <HAL_HRTIM_Init+0x19c>)
 80068ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006a20 <HAL_HRTIM_Init+0x19c>)
 80068f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80068f8:	4b49      	ldr	r3, [pc, #292]	@ (8006a20 <HAL_HRTIM_Init+0x19c>)
 80068fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006912:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006928:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fb fa29 	bl	8001d98 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d012      	beq.n	8006978 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006960:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
 800698c:	e03e      	b.n	8006a0c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800698e:	7dfa      	ldrb	r2, [r7, #23]
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3318      	adds	r3, #24
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80069a2:	7dfa      	ldrb	r2, [r7, #23]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	331c      	adds	r3, #28
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80069b6:	7dfa      	ldrb	r2, [r7, #23]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3320      	adds	r3, #32
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80069ca:	7dfa      	ldrb	r2, [r7, #23]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	1a9b      	subs	r3, r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3324      	adds	r3, #36	@ 0x24
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80069de:	7dfa      	ldrb	r2, [r7, #23]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	3328      	adds	r3, #40	@ 0x28
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80069f2:	7dfa      	ldrb	r2, [r7, #23]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3330      	adds	r3, #48	@ 0x30
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b06      	cmp	r3, #6
 8006a10:	d9bd      	bls.n	800698e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40016800 	.word	0x40016800
 8006a20:	40021000 	.word	0x40021000

08006a24 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e045      	b.n	8006ac8 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d114      	bne.n	8006a7e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0202 	bic.w	r2, r2, #2
 8006a64:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8006a7c:	e01f      	b.n	8006abe <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0202 	orr.w	r2, r2, #2
 8006a8e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8006a9a:	f023 010c 	bic.w	r1, r3, #12
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006ade:	f7fc f973 	bl	8002dc8 <HAL_GetTick>
 8006ae2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006ae4:	e014      	b.n	8006b10 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d010      	beq.n	8006b10 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fc f96b 	bl	8002dc8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2207      	movs	r2, #7
 8006b08:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e011      	b.n	8006b34 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b20:	d1e1      	bne.n	8006ae6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d101      	bne.n	8006b58 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e015      	b.n	8006b84 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d104      	bne.n	8006b70 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 ffcf 	bl	8007b0c <HRTIM_MasterBase_Config>
 8006b6e:	e004      	b.n	8006b7a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fff8 	bl	8007b6a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d101      	bne.n	8006ba8 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e1d7      	b.n	8006f58 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e1d0      	b.n	8006f58 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bce:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006bd8:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be0:	f000 816d 	beq.w	8006ebe <HAL_HRTIM_ADCTriggerConfig+0x332>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bea:	f200 818d 	bhi.w	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf4:	f000 813f 	beq.w	8006e76 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfe:	f200 8183 	bhi.w	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b80      	cmp	r3, #128	@ 0x80
 8006c06:	f000 8111 	beq.w	8006e2c <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b80      	cmp	r3, #128	@ 0x80
 8006c0e:	f200 817b 	bhi.w	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d84b      	bhi.n	8006cb0 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 8174 	beq.w	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	2b1f      	cmp	r3, #31
 8006c26:	f200 816f 	bhi.w	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8006c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006cbb 	.word	0x08006cbb
 8006c34:	08006cdf 	.word	0x08006cdf
 8006c38:	08006f09 	.word	0x08006f09
 8006c3c:	08006d05 	.word	0x08006d05
 8006c40:	08006f09 	.word	0x08006f09
 8006c44:	08006f09 	.word	0x08006f09
 8006c48:	08006f09 	.word	0x08006f09
 8006c4c:	08006d2b 	.word	0x08006d2b
 8006c50:	08006f09 	.word	0x08006f09
 8006c54:	08006f09 	.word	0x08006f09
 8006c58:	08006f09 	.word	0x08006f09
 8006c5c:	08006f09 	.word	0x08006f09
 8006c60:	08006f09 	.word	0x08006f09
 8006c64:	08006f09 	.word	0x08006f09
 8006c68:	08006f09 	.word	0x08006f09
 8006c6c:	08006d51 	.word	0x08006d51
 8006c70:	08006f09 	.word	0x08006f09
 8006c74:	08006f09 	.word	0x08006f09
 8006c78:	08006f09 	.word	0x08006f09
 8006c7c:	08006f09 	.word	0x08006f09
 8006c80:	08006f09 	.word	0x08006f09
 8006c84:	08006f09 	.word	0x08006f09
 8006c88:	08006f09 	.word	0x08006f09
 8006c8c:	08006f09 	.word	0x08006f09
 8006c90:	08006f09 	.word	0x08006f09
 8006c94:	08006f09 	.word	0x08006f09
 8006c98:	08006f09 	.word	0x08006f09
 8006c9c:	08006f09 	.word	0x08006f09
 8006ca0:	08006f09 	.word	0x08006f09
 8006ca4:	08006f09 	.word	0x08006f09
 8006ca8:	08006f09 	.word	0x08006f09
 8006cac:	08006d99 	.word	0x08006d99
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b40      	cmp	r3, #64	@ 0x40
 8006cb4:	f000 8095 	beq.w	8006de2 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8006cb8:	e126      	b.n	8006f08 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006cc0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6852      	ldr	r2, [r2, #4]
 8006cd8:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8006cdc:	e11d      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8006ce4:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6852      	ldr	r2, [r2, #4]
 8006cfe:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 8006d02:	e10a      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006d0a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	019b      	lsls	r3, r3, #6
 8006d12:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 8006d28:	e0f7      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8006d30:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	025b      	lsls	r3, r3, #9
 8006d38:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6852      	ldr	r2, [r2, #4]
 8006d4a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 8006d4e:	e0e4      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 021f 	bic.w	r2, r2, #31
 8006d78:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f003 021f 	and.w	r2, r3, #31
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006d96:	e0c0      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	0b1b      	lsrs	r3, r3, #12
 8006da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8006dc0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	015b      	lsls	r3, r3, #5
 8006dd2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006de0:	e09b      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006de8:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8006e0a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006e2a:	e076      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e32:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006e54:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006e74:	e051      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006e7c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 8006e9c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	055b      	lsls	r3, r3, #21
 8006eae:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006ebc:	e02d      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ec4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8006ee6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	069b      	lsls	r3, r3, #26
 8006ef8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006f06:	e008      	b.n	8006f1a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8006f18:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	d101      	bne.n	8006f2a <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e016      	b.n	8006f58 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b0f      	cmp	r3, #15
 8006f2e:	d805      	bhi.n	8006f3c <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 8006f3a:	e004      	b.n	8006f46 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d101      	bne.n	8006f80 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e135      	b.n	80071ec <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e12e      	b.n	80071ec <HAL_HRTIM_ADCPostScalerConfig+0x288>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa4:	f000 80f8 	beq.w	8007198 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fae:	f200 8103 	bhi.w	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb8:	f000 80de 	beq.w	8007178 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc2:	f200 80f9 	bhi.w	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b80      	cmp	r3, #128	@ 0x80
 8006fca:	f000 80c5 	beq.w	8007158 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b80      	cmp	r3, #128	@ 0x80
 8006fd2:	f200 80f1 	bhi.w	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d84b      	bhi.n	8007074 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80ea 	beq.w	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b1f      	cmp	r3, #31
 8006fea:	f200 80e5 	bhi.w	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	0800707d 	.word	0x0800707d
 8006ff8:	0800709b 	.word	0x0800709b
 8006ffc:	080071b9 	.word	0x080071b9
 8007000:	080070bb 	.word	0x080070bb
 8007004:	080071b9 	.word	0x080071b9
 8007008:	080071b9 	.word	0x080071b9
 800700c:	080071b9 	.word	0x080071b9
 8007010:	080070db 	.word	0x080070db
 8007014:	080071b9 	.word	0x080071b9
 8007018:	080071b9 	.word	0x080071b9
 800701c:	080071b9 	.word	0x080071b9
 8007020:	080071b9 	.word	0x080071b9
 8007024:	080071b9 	.word	0x080071b9
 8007028:	080071b9 	.word	0x080071b9
 800702c:	080071b9 	.word	0x080071b9
 8007030:	080070fb 	.word	0x080070fb
 8007034:	080071b9 	.word	0x080071b9
 8007038:	080071b9 	.word	0x080071b9
 800703c:	080071b9 	.word	0x080071b9
 8007040:	080071b9 	.word	0x080071b9
 8007044:	080071b9 	.word	0x080071b9
 8007048:	080071b9 	.word	0x080071b9
 800704c:	080071b9 	.word	0x080071b9
 8007050:	080071b9 	.word	0x080071b9
 8007054:	080071b9 	.word	0x080071b9
 8007058:	080071b9 	.word	0x080071b9
 800705c:	080071b9 	.word	0x080071b9
 8007060:	080071b9 	.word	0x080071b9
 8007064:	080071b9 	.word	0x080071b9
 8007068:	080071b9 	.word	0x080071b9
 800706c:	080071b9 	.word	0x080071b9
 8007070:	0800711b 	.word	0x0800711b
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b40      	cmp	r3, #64	@ 0x40
 8007078:	d05e      	beq.n	8007138 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 800707a:	e09d      	b.n	80071b8 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007084:	f023 011f 	bic.w	r1, r3, #31
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f003 021f 	and.w	r2, r3, #31
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007098:	e097      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070a2:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	019b      	lsls	r3, r3, #6
 80070aa:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070b8:	e087      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070c2:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	031b      	lsls	r3, r3, #12
 80070ca:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070d8:	e077      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80070e2:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	049b      	lsls	r3, r3, #18
 80070ea:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80070f8:	e067      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007102:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8007118:	e057      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007122:	f023 011f 	bic.w	r1, r3, #31
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f003 021f 	and.w	r2, r3, #31
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007136:	e048      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007140:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	019b      	lsls	r3, r3, #6
 8007148:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007156:	e038      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007160:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	031b      	lsls	r3, r3, #12
 8007168:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007176:	e028      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007180:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	049b      	lsls	r3, r3, #18
 8007188:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8007196:	e018      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80071a0:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	061b      	lsls	r3, r3, #24
 80071a8:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80071b6:	e008      	b.n	80071ca <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2207      	movs	r2, #7
 80071bc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 80071c8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b07      	cmp	r3, #7
 80071d4:	d101      	bne.n	80071da <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e008      	b.n	80071ec <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d101      	bne.n	8007214 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
 8007212:	e07a      	b.n	800730a <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800721e:	2302      	movs	r3, #2
 8007220:	e073      	b.n	800730a <HAL_HRTIM_WaveformTimerConfig+0x112>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b06      	cmp	r3, #6
 8007236:	d104      	bne.n	8007242 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fcd5 	bl	8007bea <HRTIM_MasterWaveform_Config>
 8007240:	e004      	b.n	800724c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 fd6c 	bl	8007d24 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4403      	add	r3, r0
 800725e:	3320      	adds	r3, #32
 8007260:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6859      	ldr	r1, [r3, #4]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4403      	add	r3, r0
 8007274:	3324      	adds	r3, #36	@ 0x24
 8007276:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6899      	ldr	r1, [r3, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4403      	add	r3, r0
 800728a:	3328      	adds	r3, #40	@ 0x28
 800728c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68d9      	ldr	r1, [r3, #12]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4403      	add	r3, r0
 80072a0:	332c      	adds	r3, #44	@ 0x2c
 80072a2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6919      	ldr	r1, [r3, #16]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4613      	mov	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	1a9b      	subs	r3, r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4403      	add	r3, r0
 80072b6:	3330      	adds	r3, #48	@ 0x30
 80072b8:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 ffff 	bl	80082c0 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d017      	beq.n	80072f8 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d113      	bne.n	80072f8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3301      	adds	r3, #1
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	4413      	add	r3, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e6:	025b      	lsls	r3, r3, #9
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	6809      	ldr	r1, [r1, #0]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	3301      	adds	r3, #1
 80072f2:	01db      	lsls	r3, r3, #7
 80072f4:	440b      	add	r3, r1
 80072f6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d101      	bne.n	800732e <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 800732a:	2302      	movs	r3, #2
 800732c:	e020      	b.n	8007370 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_HRTIM_WaveformTimerControl+0x2a>
 8007338:	2302      	movs	r3, #2
 800733a:	e019      	b.n	8007370 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fe6d 	bl	8008030 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 ffb1 	bl	80082c0 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d101      	bne.n	8007394 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8007390:	2302      	movs	r3, #2
 8007392:	e067      	b.n	8007464 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_HRTIM_DeadTimeConfig+0x2a>
 800739e:	2302      	movs	r3, #2
 80073a0:	e060      	b.n	8007464 <HAL_HRTIM_DeadTimeConfig+0xec>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80073ba:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	041a      	lsls	r2, r3, #16
 80073fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007470 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	01db      	lsls	r3, r3, #7
 8007436:	4413      	add	r3, r2
 8007438:	33b8      	adds	r3, #184	@ 0xb8
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 800743e:	4013      	ands	r3, r2
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	6811      	ldr	r1, [r2, #0]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	01db      	lsls	r3, r3, #7
 800744c:	440b      	add	r3, r1
 800744e:	33b8      	adds	r3, #184	@ 0xb8
 8007450:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	01ff0000 	.word	0x01ff0000
 8007474:	3c002000 	.word	0x3c002000

08007478 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d101      	bne.n	8007496 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
 8007494:	e157      	b.n	8007746 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e150      	b.n	8007746 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d140      	bne.n	800753c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3b01      	subs	r3, #1
 80074be:	2b07      	cmp	r3, #7
 80074c0:	d82a      	bhi.n	8007518 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e9 	.word	0x080074e9
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	08007519 	.word	0x08007519
 80074d4:	08007501 	.word	0x08007501
 80074d8:	08007519 	.word	0x08007519
 80074dc:	08007519 	.word	0x08007519
 80074e0:	08007519 	.word	0x08007519
 80074e4:	0800750d 	.word	0x0800750d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	61da      	str	r2, [r3, #28]
        break;
 80074f2:	e01a      	b.n	800752a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80074fe:	e014      	b.n	800752a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800750a:	e00e      	b.n	800752a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8007516:	e008      	b.n	800752a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2207      	movs	r2, #7
 800751c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8007528:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b07      	cmp	r3, #7
 8007534:	f040 80fe 	bne.w	8007734 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e104      	b.n	8007746 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3b01      	subs	r3, #1
 8007540:	2b07      	cmp	r3, #7
 8007542:	f200 80e3 	bhi.w	800770c <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007546:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	0800756d 	.word	0x0800756d
 8007550:	08007581 	.word	0x08007581
 8007554:	0800770d 	.word	0x0800770d
 8007558:	0800763d 	.word	0x0800763d
 800755c:	0800770d 	.word	0x0800770d
 8007560:	0800770d 	.word	0x0800770d
 8007564:	0800770d 	.word	0x0800770d
 8007568:	08007651 	.word	0x08007651
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	440b      	add	r3, r1
 800757a:	339c      	adds	r3, #156	@ 0x9c
 800757c:	601a      	str	r2, [r3, #0]
        break;
 800757e:	e0d1      	b.n	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	440b      	add	r3, r1
 800758e:	33a4      	adds	r3, #164	@ 0xa4
 8007590:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03f      	beq.n	800761a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3301      	adds	r3, #1
 80075a2:	01db      	lsls	r3, r3, #7
 80075a4:	4413      	add	r3, r2
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	6811      	ldr	r1, [r2, #0]
 80075ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3301      	adds	r3, #1
 80075b4:	01db      	lsls	r3, r3, #7
 80075b6:	440b      	add	r3, r1
 80075b8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	3301      	adds	r3, #1
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	4413      	add	r3, r2
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	6809      	ldr	r1, [r1, #0]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	3301      	adds	r3, #1
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	440b      	add	r3, r1
 80075da:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e4:	d109      	bne.n	80075fa <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	01db      	lsls	r3, r3, #7
 80075f2:	440b      	add	r3, r1
 80075f4:	339c      	adds	r3, #156	@ 0x9c
 80075f6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80075f8:	e091      	b.n	800771e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007602:	f040 808c 	bne.w	800771e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	01db      	lsls	r3, r3, #7
 8007612:	440b      	add	r3, r1
 8007614:	33a8      	adds	r3, #168	@ 0xa8
 8007616:	601a      	str	r2, [r3, #0]
         break;
 8007618:	e081      	b.n	800771e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3301      	adds	r3, #1
 8007622:	01db      	lsls	r3, r3, #7
 8007624:	4413      	add	r3, r2
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	6811      	ldr	r1, [r2, #0]
 800762c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3301      	adds	r3, #1
 8007634:	01db      	lsls	r3, r3, #7
 8007636:	440b      	add	r3, r1
 8007638:	601a      	str	r2, [r3, #0]
         break;
 800763a:	e070      	b.n	800771e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	01db      	lsls	r3, r3, #7
 8007648:	440b      	add	r3, r1
 800764a:	33a8      	adds	r3, #168	@ 0xa8
 800764c:	601a      	str	r2, [r3, #0]
        break;
 800764e:	e069      	b.n	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	440b      	add	r3, r1
 800765e:	33ac      	adds	r3, #172	@ 0xac
 8007660:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d03f      	beq.n	80076ea <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3301      	adds	r3, #1
 8007672:	01db      	lsls	r3, r3, #7
 8007674:	4413      	add	r3, r2
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	6811      	ldr	r1, [r2, #0]
 800767c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	01db      	lsls	r3, r3, #7
 8007686:	440b      	add	r3, r1
 8007688:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3301      	adds	r3, #1
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	4413      	add	r3, r2
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	6809      	ldr	r1, [r1, #0]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3301      	adds	r3, #1
 80076a8:	01db      	lsls	r3, r3, #7
 80076aa:	440b      	add	r3, r1
 80076ac:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b6:	d109      	bne.n	80076cc <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	440b      	add	r3, r1
 80076c6:	339c      	adds	r3, #156	@ 0x9c
 80076c8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80076ca:	e02a      	b.n	8007722 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076d4:	d125      	bne.n	8007722 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	01db      	lsls	r3, r3, #7
 80076e2:	440b      	add	r3, r1
 80076e4:	33a8      	adds	r3, #168	@ 0xa8
 80076e6:	601a      	str	r2, [r3, #0]
         break;
 80076e8:	e01b      	b.n	8007722 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3301      	adds	r3, #1
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	4413      	add	r3, r2
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	6811      	ldr	r1, [r2, #0]
 80076fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	3301      	adds	r3, #1
 8007704:	01db      	lsls	r3, r3, #7
 8007706:	440b      	add	r3, r1
 8007708:	601a      	str	r2, [r3, #0]
         break;
 800770a:	e00a      	b.n	8007722 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2207      	movs	r2, #7
 8007710:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 800771c:	e002      	b.n	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007722:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b07      	cmp	r3, #7
 800772e:	d101      	bne.n	8007734 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e008      	b.n	8007746 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop

08007754 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d101      	bne.n	8007772 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800776e:	2302      	movs	r3, #2
 8007770:	e01d      	b.n	80077ae <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800777c:	2302      	movs	r3, #2
 800777e:	e016      	b.n	80077ae <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fcaa 	bl	80080f0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_HRTIM_WaveformOutputStart+0x18>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e01a      	b.n	8007804 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007824:	2302      	movs	r3, #2
 8007826:	e05b      	b.n	80078e0 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 1390 	ldr.w	r1, [r3, #912]	@ 0x390
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68d9      	ldr	r1, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e022      	b.n	80078b8 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	4a1d      	ldr	r2, [pc, #116]	@ (80078ec <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d017      	beq.n	80078b2 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	01db      	lsls	r3, r3, #7
 800788a:	4413      	add	r3, r2
 800788c:	338c      	adds	r3, #140	@ 0x8c
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	7bfa      	ldrb	r2, [r7, #15]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3320      	adds	r3, #32
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6819      	ldr	r1, [r3, #0]
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	4302      	orrs	r2, r0
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	440b      	add	r3, r1
 80078ae:	338c      	adds	r3, #140	@ 0x8c
 80078b0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	3301      	adds	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d9d9      	bls.n	8007872 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;}
 80078de:	2300      	movs	r3, #0
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	20000014 	.word	0x20000014

080078f0 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2bff      	cmp	r3, #255	@ 0xff
 80078fe:	d103      	bne.n	8007908 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fd4b 	bl	800839c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8007906:	e00a      	b.n	800791e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b06      	cmp	r3, #6
 800790c:	d103      	bne.n	8007916 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fdd4 	bl	80084bc <HRTIM_Master_ISR>
}
 8007914:	e003      	b.n	800791e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fe94 	bl	8008646 <HRTIM_Timer_ISR>
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0318 	bic.w	r3, r3, #24
 8007b36:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	6852      	ldr	r2, [r2, #4]
 8007b5c:	619a      	str	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	01db      	lsls	r3, r3, #7
 8007b80:	4413      	add	r3, r2
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 0307 	bic.w	r3, r3, #7
 8007b8c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0318 	bic.w	r3, r3, #24
 8007b9e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	4413      	add	r3, r2
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	01db      	lsls	r3, r3, #7
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3394      	adds	r3, #148	@ 0x94
 8007bca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	01db      	lsls	r3, r3, #7
 8007bd8:	440b      	add	r3, r1
 8007bda:	3398      	adds	r3, #152	@ 0x98
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007c04:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0320 	bic.w	r3, r3, #32
 8007c0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c1e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d003      	beq.n	8007c30 <HRTIM_MasterWaveform_Config+0x46>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d108      	bne.n	8007c42 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c36:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f043 0320 	orr.w	r3, r3, #32
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e021      	b.n	8007c86 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d108      	bne.n	8007c5c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c50:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	e014      	b.n	8007c86 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d108      	bne.n	8007c76 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	e007      	b.n	8007c86 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0320 	bic.w	r3, r3, #32
 8007c7c:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c84:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c8c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007cb0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007cc2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007cd4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ce8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cfa:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b08b      	sub	sp, #44	@ 0x2c
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3301      	adds	r3, #1
 8007d38:	01db      	lsls	r3, r3, #7
 8007d3a:	4413      	add	r3, r2
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	6811      	ldr	r1, [r2, #0]
 8007d42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	01db      	lsls	r3, r3, #7
 8007d4c:	440b      	add	r3, r1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3301      	adds	r3, #1
 8007d58:	01db      	lsls	r3, r3, #7
 8007d5a:	4413      	add	r3, r2
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	01db      	lsls	r3, r3, #7
 8007d68:	4413      	add	r3, r2
 8007d6a:	33e8      	adds	r3, #232	@ 0xe8
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	01db      	lsls	r3, r3, #7
 8007d78:	4413      	add	r3, r2
 8007d7a:	33e4      	adds	r3, #228	@ 0xe4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8007d88:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	f023 0320 	bic.w	r3, r3, #32
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d003      	beq.n	8007dac <HRTIM_TimingUnitWaveform_Config+0x88>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d108      	bne.n	8007dbe <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007db2:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	f043 0320 	orr.w	r3, r3, #32
 8007dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dbc:	e021      	b.n	8007e02 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d108      	bne.n	8007dd8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dd6:	e014      	b.n	8007e02 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d108      	bne.n	8007df2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df0:	e007      	b.n	8007e02 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	f023 0320 	bic.w	r3, r3, #32
 8007df8:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e10:	4313      	orrs	r3, r2
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e22:	4313      	orrs	r3, r2
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e34:	4313      	orrs	r3, r2
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e46:	4313      	orrs	r3, r2
 8007e48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6c:	d103      	bne.n	8007e76 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e84:	4313      	orrs	r3, r2
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e96:	4313      	orrs	r3, r2
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8007ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eac:	4313      	orrs	r3, r2
 8007eae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007eb6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ecc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ede:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee4:	6a3a      	ldr	r2, [r7, #32]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eee:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8007ef2:	d004      	beq.n	8007efe <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8007efc:	d103      	bne.n	8007f06 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	2b40      	cmp	r3, #64	@ 0x40
 8007f04:	d108      	bne.n	8007f18 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8007f0c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f1e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d850      	bhi.n	8007fd8 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8007f36:	a201      	add	r2, pc, #4	@ (adr r2, 8007f3c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f55 	.word	0x08007f55
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f81 	.word	0x08007f81
 8007f48:	08007f97 	.word	0x08007f97
 8007f4c:	08007fad 	.word	0x08007fad
 8007f50:	08007fc3 	.word	0x08007fc3
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f5a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61fb      	str	r3, [r7, #28]
      break;
 8007f68:	e037      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f70:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61fb      	str	r3, [r7, #28]
      break;
 8007f7e:	e02c      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007f86:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	69fa      	ldr	r2, [r7, #28]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61fb      	str	r3, [r7, #28]
      break;
 8007f94:	e021      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007f9c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	61fb      	str	r3, [r7, #28]
      break;
 8007faa:	e016      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fb2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb8:	015b      	lsls	r3, r3, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61fb      	str	r3, [r7, #28]
      break;
 8007fc0:	e00b      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007fc8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	019b      	lsls	r3, r3, #6
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	61fb      	str	r3, [r7, #28]
      break;
 8007fd6:	e000      	b.n	8007fda <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8007fd8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	01db      	lsls	r3, r3, #7
 8007fe4:	4413      	add	r3, r2
 8007fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	01db      	lsls	r3, r3, #7
 8007ff2:	4413      	add	r3, r2
 8007ff4:	33e8      	adds	r3, #232	@ 0xe8
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	01db      	lsls	r3, r3, #7
 8008002:	4413      	add	r3, r2
 8008004:	33e4      	adds	r3, #228	@ 0xe4
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	01db      	lsls	r3, r3, #7
 8008012:	4413      	add	r3, r2
 8008014:	33d4      	adds	r3, #212	@ 0xd4
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008024:	bf00      	nop
 8008026:	372c      	adds	r7, #44	@ 0x2c
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	01db      	lsls	r3, r3, #7
 8008044:	4413      	add	r3, r2
 8008046:	33ec      	adds	r3, #236	@ 0xec
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008066:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008078:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800808a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d11a      	bne.n	80080d4 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f023 0304 	bic.w	r3, r3, #4
 80080a4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f023 0302 	bic.w	r3, r3, #2
 80080b6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	01db      	lsls	r3, r3, #7
 80080dc:	4413      	add	r3, r2
 80080de:	33ec      	adds	r3, #236	@ 0xec
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	601a      	str	r2, [r3, #0]

}
 80080e4:	bf00      	nop
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	@ 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	01db      	lsls	r3, r3, #7
 800810a:	4413      	add	r3, r2
 800810c:	33e4      	adds	r3, #228	@ 0xe4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	01db      	lsls	r3, r3, #7
 800811a:	4413      	add	r3, r2
 800811c:	33b8      	adds	r3, #184	@ 0xb8
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008128:	d05d      	beq.n	80081e6 <HRTIM_OutputConfig+0xf6>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008130:	d86e      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008138:	d042      	beq.n	80081c0 <HRTIM_OutputConfig+0xd0>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008140:	d866      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008148:	d04d      	beq.n	80081e6 <HRTIM_OutputConfig+0xf6>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008150:	d85e      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008158:	d032      	beq.n	80081c0 <HRTIM_OutputConfig+0xd0>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008160:	d856      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b80      	cmp	r3, #128	@ 0x80
 8008166:	d03e      	beq.n	80081e6 <HRTIM_OutputConfig+0xf6>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b80      	cmp	r3, #128	@ 0x80
 800816c:	d850      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	d025      	beq.n	80081c0 <HRTIM_OutputConfig+0xd0>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b40      	cmp	r3, #64	@ 0x40
 8008178:	d84a      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d01f      	beq.n	80081c0 <HRTIM_OutputConfig+0xd0>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d044      	beq.n	8008210 <HRTIM_OutputConfig+0x120>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b20      	cmp	r3, #32
 800818a:	d841      	bhi.n	8008210 <HRTIM_OutputConfig+0x120>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d33e      	bcc.n	8008210 <HRTIM_OutputConfig+0x120>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3b02      	subs	r3, #2
 8008196:	2201      	movs	r2, #1
 8008198:	409a      	lsls	r2, r3
 800819a:	4b48      	ldr	r3, [pc, #288]	@ (80082bc <HRTIM_OutputConfig+0x1cc>)
 800819c:	4013      	ands	r3, r2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11c      	bne.n	80081e6 <HRTIM_OutputConfig+0xf6>
 80081ac:	f244 0304 	movw	r3, #16388	@ 0x4004
 80081b0:	4013      	ands	r3, r2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d027      	beq.n	8008210 <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	01db      	lsls	r3, r3, #7
 80081cc:	440b      	add	r3, r1
 80081ce:	33bc      	adds	r3, #188	@ 0xbc
 80081d0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	01db      	lsls	r3, r3, #7
 80081de:	440b      	add	r3, r1
 80081e0:	33c0      	adds	r3, #192	@ 0xc0
 80081e2:	601a      	str	r2, [r3, #0]
      break;
 80081e4:	e015      	b.n	8008212 <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	01db      	lsls	r3, r3, #7
 80081f2:	440b      	add	r3, r1
 80081f4:	33c4      	adds	r3, #196	@ 0xc4
 80081f6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6819      	ldr	r1, [r3, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	01db      	lsls	r3, r3, #7
 8008204:	440b      	add	r3, r1
 8008206:	33c8      	adds	r3, #200	@ 0xc8
 8008208:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800820a:	2310      	movs	r3, #16
 800820c:	61bb      	str	r3, [r7, #24]
      break;
 800820e:	e000      	b.n	8008212 <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 8008210:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008212:	22fe      	movs	r2, #254	@ 0xfe
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800821a:	43db      	mvns	r3, r3
 800821c:	69fa      	ldr	r2, [r7, #28]
 800821e:	4013      	ands	r3, r2
 8008220:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	4313      	orrs	r3, r2
 8008230:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	4313      	orrs	r3, r2
 8008250:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	4313      	orrs	r3, r2
 8008260:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	4313      	orrs	r3, r2
 8008270:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d111      	bne.n	800829e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10c      	bne.n	800829e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800828a:	2b00      	cmp	r3, #0
 800828c:	d107      	bne.n	800829e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	69da      	ldr	r2, [r3, #28]
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	4313      	orrs	r3, r2
 800829c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	01db      	lsls	r3, r3, #7
 80082a6:	4413      	add	r3, r2
 80082a8:	33e4      	adds	r3, #228	@ 0xe4
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bf00      	nop
 80082b0:	3724      	adds	r7, #36	@ 0x24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40000041 	.word	0x40000041

080082c0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b06      	cmp	r3, #6
 80082ce:	d85e      	bhi.n	800838e <HRTIM_ForceRegistersUpdate+0xce>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <HRTIM_ForceRegistersUpdate+0x18>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	0800830b 	.word	0x0800830b
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008337 	.word	0x08008337
 80082e4:	0800834d 	.word	0x0800834d
 80082e8:	08008363 	.word	0x08008363
 80082ec:	08008379 	.word	0x08008379
 80082f0:	080082f5 	.word	0x080082f5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008308:	e042      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0202 	orr.w	r2, r2, #2
 800831a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800831e:	e037      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0204 	orr.w	r2, r2, #4
 8008330:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008334:	e02c      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0208 	orr.w	r2, r2, #8
 8008346:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800834a:	e021      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0210 	orr.w	r2, r2, #16
 800835c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008360:	e016      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0220 	orr.w	r2, r2, #32
 8008372:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8008376:	e00b      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008388:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800838c:	e000      	b.n	8008390 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800838e:	bf00      	nop
  }
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80083ac:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80083b6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00c      	beq.n	80083dc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff faa5 	bl	8007926 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00c      	beq.n	8008400 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2202      	movs	r2, #2
 80083f6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fa9d 	bl	800793a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2204      	movs	r2, #4
 800841a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff fa95 	bl	800794e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00c      	beq.n	8008448 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2208      	movs	r2, #8
 800843e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fa8d 	bl	8007962 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00c      	beq.n	800846c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2210      	movs	r2, #16
 8008462:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fa85 	bl	8007976 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00c      	beq.n	8008490 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2240      	movs	r2, #64	@ 0x40
 8008486:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fa7d 	bl	800798a <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fa75 	bl	800799e <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80084cc:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80084d6:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d015      	beq.n	800851e <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d010      	beq.n	800851e <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008504:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fa4a 	bl	80079b2 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800853a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fa41 	bl	80079c6 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008560:	2106      	movs	r1, #6
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fa4e 	bl	8007a04 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2202      	movs	r2, #2
 8008582:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008584:	2106      	movs	r1, #6
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fa47 	bl	8007a1a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00c      	beq.n	80085b0 <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2204      	movs	r2, #4
 80085a6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80085a8:	2106      	movs	r1, #6
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff fa40 	bl	8007a30 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2208      	movs	r2, #8
 80085ca:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80085cc:	2106      	movs	r1, #6
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fa39 	bl	8007a46 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d007      	beq.n	80085f8 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2210      	movs	r2, #16
 80085ee:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80085f0:	2106      	movs	r1, #6
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f003 ff6a 	bl	800c4cc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2220      	movs	r2, #32
 8008612:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff f9e0 	bl	80079da <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00c      	beq.n	800863e <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2240      	movs	r2, #64	@ 0x40
 8008634:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008636:	2106      	movs	r1, #6
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff f9d8 	bl	80079ee <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800863e:	bf00      	nop
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	4413      	add	r3, r2
 800865c:	3304      	adds	r3, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	01db      	lsls	r3, r3, #7
 800866a:	4413      	add	r3, r2
 800866c:	338c      	adds	r3, #140	@ 0x8c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d010      	beq.n	800869e <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	01db      	lsls	r3, r3, #7
 800868e:	4413      	add	r3, r2
 8008690:	3388      	adds	r3, #136	@ 0x88
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff f9b3 	bl	8007a04 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d010      	beq.n	80086ca <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	01db      	lsls	r3, r3, #7
 80086ba:	4413      	add	r3, r2
 80086bc:	3388      	adds	r3, #136	@ 0x88
 80086be:	2202      	movs	r2, #2
 80086c0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff f9a8 	bl	8007a1a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d010      	beq.n	80086f6 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	01db      	lsls	r3, r3, #7
 80086e6:	4413      	add	r3, r2
 80086e8:	3388      	adds	r3, #136	@ 0x88
 80086ea:	2204      	movs	r2, #4
 80086ec:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff f99d 	bl	8007a30 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	01db      	lsls	r3, r3, #7
 8008712:	4413      	add	r3, r2
 8008714:	3388      	adds	r3, #136	@ 0x88
 8008716:	2208      	movs	r2, #8
 8008718:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff f992 	bl	8007a46 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	01db      	lsls	r3, r3, #7
 800873e:	4413      	add	r3, r2
 8008740:	3388      	adds	r3, #136	@ 0x88
 8008742:	2210      	movs	r2, #16
 8008744:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f003 febf 	bl	800c4cc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	01db      	lsls	r3, r3, #7
 800876a:	4413      	add	r3, r2
 800876c:	3388      	adds	r3, #136	@ 0x88
 800876e:	2240      	movs	r2, #64	@ 0x40
 8008770:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff f93a 	bl	80079ee <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008780:	2b00      	cmp	r3, #0
 8008782:	d010      	beq.n	80087a6 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	01db      	lsls	r3, r3, #7
 8008796:	4413      	add	r3, r2
 8008798:	3388      	adds	r3, #136	@ 0x88
 800879a:	2280      	movs	r2, #128	@ 0x80
 800879c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff f95b 	bl	8007a5c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d011      	beq.n	80087d4 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	01db      	lsls	r3, r3, #7
 80087c2:	4413      	add	r3, r2
 80087c4:	3388      	adds	r3, #136	@ 0x88
 80087c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087ca:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff f94f 	bl	8007a72 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d011      	beq.n	8008802 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	01db      	lsls	r3, r3, #7
 80087f0:	4413      	add	r3, r2
 80087f2:	3388      	adds	r3, #136	@ 0x88
 80087f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087f8:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff f959 	bl	8007ab4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008808:	2b00      	cmp	r3, #0
 800880a:	d011      	beq.n	8008830 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	01db      	lsls	r3, r3, #7
 800881e:	4413      	add	r3, r2
 8008820:	3388      	adds	r3, #136	@ 0x88
 8008822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008826:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f94d 	bl	8007aca <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008836:	2b00      	cmp	r3, #0
 8008838:	d011      	beq.n	800885e <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00c      	beq.n	800885e <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	4413      	add	r3, r2
 800884e:	3388      	adds	r3, #136	@ 0x88
 8008850:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008854:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff f941 	bl	8007ae0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d011      	beq.n	800888c <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00c      	beq.n	800888c <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	01db      	lsls	r3, r3, #7
 800887a:	4413      	add	r3, r2
 800887c:	3388      	adds	r3, #136	@ 0x88
 800887e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008882:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff f935 	bl	8007af6 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d011      	beq.n	80088ba <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00c      	beq.n	80088ba <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	01db      	lsls	r3, r3, #7
 80088a8:	4413      	add	r3, r2
 80088aa:	3388      	adds	r3, #136	@ 0x88
 80088ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80088b0:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff f8f2 	bl	8007a9e <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d011      	beq.n	80088e8 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	01db      	lsls	r3, r3, #7
 80088d6:	4413      	add	r3, r2
 80088d8:	3388      	adds	r3, #136	@ 0x88
 80088da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80088de:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff f8d0 	bl	8007a88 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80088e8:	bf00      	nop
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0c0      	b.n	8008a84 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fa f994 	bl	8002c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2203      	movs	r2, #3
 8008920:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fbed 	bl	800b108 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
 8008932:	e03e      	b.n	80089b2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	440b      	add	r3, r1
 8008942:	3311      	adds	r3, #17
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008948:	7bfa      	ldrb	r2, [r7, #15]
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	440b      	add	r3, r1
 8008956:	3310      	adds	r3, #16
 8008958:	7bfa      	ldrb	r2, [r7, #15]
 800895a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800895c:	7bfa      	ldrb	r2, [r7, #15]
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	440b      	add	r3, r1
 800896a:	3313      	adds	r3, #19
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	440b      	add	r3, r1
 800897e:	3320      	adds	r3, #32
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008984:	7bfa      	ldrb	r2, [r7, #15]
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	440b      	add	r3, r1
 8008992:	3324      	adds	r3, #36	@ 0x24
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	440b      	add	r3, r1
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	3301      	adds	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	791b      	ldrb	r3, [r3, #4]
 80089b6:	7bfa      	ldrb	r2, [r7, #15]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3bb      	bcc.n	8008934 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e044      	b.n	8008a4c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80089c2:	7bfa      	ldrb	r2, [r7, #15]
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	440b      	add	r3, r1
 80089d0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80089d8:	7bfa      	ldrb	r2, [r7, #15]
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	440b      	add	r3, r1
 80089e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089ea:	7bfa      	ldrb	r2, [r7, #15]
 80089ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a04:	7bfa      	ldrb	r2, [r7, #15]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	440b      	add	r3, r1
 8008a12:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a1a:	7bfa      	ldrb	r2, [r7, #15]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	440b      	add	r3, r1
 8008a28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a30:	7bfa      	ldrb	r2, [r7, #15]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	440b      	add	r3, r1
 8008a3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	73fb      	strb	r3, [r7, #15]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d3b5      	bcc.n	80089c2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a62:	f002 fb6c 	bl	800b13e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7a9b      	ldrb	r3, [r3, #10]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d102      	bne.n	8008a82 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f805 	bl	8008a8c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f043 0302 	orr.w	r3, r3, #2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d141      	bne.n	8008b72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008aee:	4b4b      	ldr	r3, [pc, #300]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afa:	d131      	bne.n	8008b60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008afc:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b02:	4a46      	ldr	r2, [pc, #280]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b0c:	4b43      	ldr	r3, [pc, #268]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b14:	4a41      	ldr	r2, [pc, #260]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b1c:	4b40      	ldr	r3, [pc, #256]	@ (8008c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2232      	movs	r2, #50	@ 0x32
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	4a3f      	ldr	r2, [pc, #252]	@ (8008c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	0c9b      	lsrs	r3, r3, #18
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b32:	e002      	b.n	8008b3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b3a:	4b38      	ldr	r3, [pc, #224]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b46:	d102      	bne.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f2      	bne.n	8008b34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b4e:	4b33      	ldr	r3, [pc, #204]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5a:	d158      	bne.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e057      	b.n	8008c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b60:	4b2e      	ldr	r3, [pc, #184]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b66:	4a2d      	ldr	r2, [pc, #180]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b70:	e04d      	b.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b78:	d141      	bne.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b7a:	4b28      	ldr	r3, [pc, #160]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b86:	d131      	bne.n	8008bec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b88:	4b24      	ldr	r3, [pc, #144]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b8e:	4a23      	ldr	r2, [pc, #140]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b98:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2232      	movs	r2, #50	@ 0x32
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
 8008bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb8:	0c9b      	lsrs	r3, r3, #18
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bbe:	e002      	b.n	8008bc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bc6:	4b15      	ldr	r3, [pc, #84]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd2:	d102      	bne.n	8008bda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f2      	bne.n	8008bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bda:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be6:	d112      	bne.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e011      	b.n	8008c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008bfc:	e007      	b.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008bfe:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008c06:	4a05      	ldr	r2, [pc, #20]	@ (8008c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	40007000 	.word	0x40007000
 8008c20:	20000008 	.word	0x20000008
 8008c24:	431bde83 	.word	0x431bde83

08008c28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	4a04      	ldr	r2, [pc, #16]	@ (8008c44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c36:	6093      	str	r3, [r2, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40007000 	.word	0x40007000

08008c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e2fe      	b.n	8009258 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d075      	beq.n	8008d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c66:	4b97      	ldr	r3, [pc, #604]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 030c 	and.w	r3, r3, #12
 8008c6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c70:	4b94      	ldr	r3, [pc, #592]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b0c      	cmp	r3, #12
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCC_OscConfig+0x3e>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d002      	beq.n	8008c8c <HAL_RCC_OscConfig+0x44>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d10b      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c8c:	4b8d      	ldr	r3, [pc, #564]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d05b      	beq.n	8008d50 <HAL_RCC_OscConfig+0x108>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d157      	bne.n	8008d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e2d9      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cac:	d106      	bne.n	8008cbc <HAL_RCC_OscConfig+0x74>
 8008cae:	4b85      	ldr	r3, [pc, #532]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a84      	ldr	r2, [pc, #528]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	e01d      	b.n	8008cf8 <HAL_RCC_OscConfig+0xb0>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cc4:	d10c      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x98>
 8008cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a7e      	ldr	r2, [pc, #504]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a7b      	ldr	r2, [pc, #492]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	e00b      	b.n	8008cf8 <HAL_RCC_OscConfig+0xb0>
 8008ce0:	4b78      	ldr	r3, [pc, #480]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a77      	ldr	r2, [pc, #476]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	4b75      	ldr	r3, [pc, #468]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a74      	ldr	r2, [pc, #464]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d013      	beq.n	8008d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d00:	f7fa f862 	bl	8002dc8 <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d08:	f7fa f85e 	bl	8002dc8 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b64      	cmp	r3, #100	@ 0x64
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e29e      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <HAL_RCC_OscConfig+0xc0>
 8008d26:	e014      	b.n	8008d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d28:	f7fa f84e 	bl	8002dc8 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d30:	f7fa f84a 	bl	8002dc8 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b64      	cmp	r3, #100	@ 0x64
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e28a      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d42:	4b60      	ldr	r3, [pc, #384]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f0      	bne.n	8008d30 <HAL_RCC_OscConfig+0xe8>
 8008d4e:	e000      	b.n	8008d52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d075      	beq.n	8008e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d5e:	4b59      	ldr	r3, [pc, #356]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 030c 	and.w	r3, r3, #12
 8008d66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d68:	4b56      	ldr	r3, [pc, #344]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b0c      	cmp	r3, #12
 8008d76:	d102      	bne.n	8008d7e <HAL_RCC_OscConfig+0x136>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d002      	beq.n	8008d84 <HAL_RCC_OscConfig+0x13c>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d11f      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d84:	4b4f      	ldr	r3, [pc, #316]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <HAL_RCC_OscConfig+0x154>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e25d      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d9c:	4b49      	ldr	r3, [pc, #292]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	4946      	ldr	r1, [pc, #280]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008db0:	4b45      	ldr	r3, [pc, #276]	@ (8008ec8 <HAL_RCC_OscConfig+0x280>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f9 ffbb 	bl	8002d30 <HAL_InitTick>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d043      	beq.n	8008e48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e249      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d023      	beq.n	8008e14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7f9 fff6 	bl	8002dc8 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008de0:	f7f9 fff2 	bl	8002dc8 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e232      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008df2:	4b34      	ldr	r3, [pc, #208]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfe:	4b31      	ldr	r3, [pc, #196]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	061b      	lsls	r3, r3, #24
 8008e0c:	492d      	ldr	r1, [pc, #180]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	604b      	str	r3, [r1, #4]
 8008e12:	e01a      	b.n	8008e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e14:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2a      	ldr	r2, [pc, #168]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e20:	f7f9 ffd2 	bl	8002dc8 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e28:	f7f9 ffce 	bl	8002dc8 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e20e      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e3a:	4b22      	ldr	r3, [pc, #136]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x1e0>
 8008e46:	e000      	b.n	8008e4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d041      	beq.n	8008eda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01c      	beq.n	8008e98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e5e:	4b19      	ldr	r3, [pc, #100]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e64:	4a17      	ldr	r2, [pc, #92]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e66:	f043 0301 	orr.w	r3, r3, #1
 8008e6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e6e:	f7f9 ffab 	bl	8002dc8 <HAL_GetTick>
 8008e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e74:	e008      	b.n	8008e88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e76:	f7f9 ffa7 	bl	8002dc8 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e1e7      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0ef      	beq.n	8008e76 <HAL_RCC_OscConfig+0x22e>
 8008e96:	e020      	b.n	8008eda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e9e:	4a09      	ldr	r2, [pc, #36]	@ (8008ec4 <HAL_RCC_OscConfig+0x27c>)
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea8:	f7f9 ff8e 	bl	8002dc8 <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008eae:	e00d      	b.n	8008ecc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eb0:	f7f9 ff8a 	bl	8002dc8 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d906      	bls.n	8008ecc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e1ca      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
 8008ec2:	bf00      	nop
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ecc:	4b8c      	ldr	r3, [pc, #560]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1ea      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80a6 	beq.w	8009034 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008eec:	4b84      	ldr	r3, [pc, #528]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <HAL_RCC_OscConfig+0x2b4>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e000      	b.n	8008efe <HAL_RCC_OscConfig+0x2b6>
 8008efc:	2300      	movs	r3, #0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00d      	beq.n	8008f1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f02:	4b7f      	ldr	r3, [pc, #508]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f06:	4a7e      	ldr	r2, [pc, #504]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f1e:	4b79      	ldr	r3, [pc, #484]	@ (8009104 <HAL_RCC_OscConfig+0x4bc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d118      	bne.n	8008f5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f2a:	4b76      	ldr	r3, [pc, #472]	@ (8009104 <HAL_RCC_OscConfig+0x4bc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a75      	ldr	r2, [pc, #468]	@ (8009104 <HAL_RCC_OscConfig+0x4bc>)
 8008f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f36:	f7f9 ff47 	bl	8002dc8 <HAL_GetTick>
 8008f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3e:	f7f9 ff43 	bl	8002dc8 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e183      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f50:	4b6c      	ldr	r3, [pc, #432]	@ (8009104 <HAL_RCC_OscConfig+0x4bc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d108      	bne.n	8008f76 <HAL_RCC_OscConfig+0x32e>
 8008f64:	4b66      	ldr	r3, [pc, #408]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f6a:	4a65      	ldr	r2, [pc, #404]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f6c:	f043 0301 	orr.w	r3, r3, #1
 8008f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f74:	e024      	b.n	8008fc0 <HAL_RCC_OscConfig+0x378>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	d110      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x358>
 8008f7e:	4b60      	ldr	r3, [pc, #384]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f84:	4a5e      	ldr	r2, [pc, #376]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f86:	f043 0304 	orr.w	r3, r3, #4
 8008f8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f94:	4a5a      	ldr	r2, [pc, #360]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008f9e:	e00f      	b.n	8008fc0 <HAL_RCC_OscConfig+0x378>
 8008fa0:	4b57      	ldr	r3, [pc, #348]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	4a56      	ldr	r2, [pc, #344]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008fa8:	f023 0301 	bic.w	r3, r3, #1
 8008fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008fb0:	4b53      	ldr	r3, [pc, #332]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb6:	4a52      	ldr	r2, [pc, #328]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008fb8:	f023 0304 	bic.w	r3, r3, #4
 8008fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc8:	f7f9 fefe 	bl	8002dc8 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fce:	e00a      	b.n	8008fe6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fd0:	f7f9 fefa 	bl	8002dc8 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e138      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fe6:	4b46      	ldr	r3, [pc, #280]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0ed      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x388>
 8008ff4:	e015      	b.n	8009022 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff6:	f7f9 fee7 	bl	8002dc8 <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ffc:	e00a      	b.n	8009014 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ffe:	f7f9 fee3 	bl	8002dc8 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e121      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009014:	4b3a      	ldr	r3, [pc, #232]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1ed      	bne.n	8008ffe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d105      	bne.n	8009034 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009028:	4b35      	ldr	r3, [pc, #212]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 800902a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902c:	4a34      	ldr	r2, [pc, #208]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 800902e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009032:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d03c      	beq.n	80090ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01c      	beq.n	8009082 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009048:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 800904a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800904e:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8009050:	f043 0301 	orr.w	r3, r3, #1
 8009054:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009058:	f7f9 feb6 	bl	8002dc8 <HAL_GetTick>
 800905c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009060:	f7f9 feb2 	bl	8002dc8 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e0f2      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009072:	4b23      	ldr	r3, [pc, #140]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8009074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0ef      	beq.n	8009060 <HAL_RCC_OscConfig+0x418>
 8009080:	e01b      	b.n	80090ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009082:	4b1f      	ldr	r3, [pc, #124]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 8009084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 800908a:	f023 0301 	bic.w	r3, r3, #1
 800908e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009092:	f7f9 fe99 	bl	8002dc8 <HAL_GetTick>
 8009096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800909a:	f7f9 fe95 	bl	8002dc8 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e0d5      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80090ac:	4b14      	ldr	r3, [pc, #80]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 80090ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1ef      	bne.n	800909a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80c9 	beq.w	8009256 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 030c 	and.w	r3, r3, #12
 80090cc:	2b0c      	cmp	r3, #12
 80090ce:	f000 8083 	beq.w	80091d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d15e      	bne.n	8009198 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090da:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a08      	ldr	r2, [pc, #32]	@ (8009100 <HAL_RCC_OscConfig+0x4b8>)
 80090e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e6:	f7f9 fe6f 	bl	8002dc8 <HAL_GetTick>
 80090ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ec:	e00c      	b.n	8009108 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ee:	f7f9 fe6b 	bl	8002dc8 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d905      	bls.n	8009108 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e0ab      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
 8009100:	40021000 	.word	0x40021000
 8009104:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009108:	4b55      	ldr	r3, [pc, #340]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1ec      	bne.n	80090ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009114:	4b52      	ldr	r3, [pc, #328]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	4b52      	ldr	r3, [pc, #328]	@ (8009264 <HAL_RCC_OscConfig+0x61c>)
 800911a:	4013      	ands	r3, r2
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	6a11      	ldr	r1, [r2, #32]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009124:	3a01      	subs	r2, #1
 8009126:	0112      	lsls	r2, r2, #4
 8009128:	4311      	orrs	r1, r2
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800912e:	0212      	lsls	r2, r2, #8
 8009130:	4311      	orrs	r1, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009136:	0852      	lsrs	r2, r2, #1
 8009138:	3a01      	subs	r2, #1
 800913a:	0552      	lsls	r2, r2, #21
 800913c:	4311      	orrs	r1, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009142:	0852      	lsrs	r2, r2, #1
 8009144:	3a01      	subs	r2, #1
 8009146:	0652      	lsls	r2, r2, #25
 8009148:	4311      	orrs	r1, r2
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800914e:	06d2      	lsls	r2, r2, #27
 8009150:	430a      	orrs	r2, r1
 8009152:	4943      	ldr	r1, [pc, #268]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 8009154:	4313      	orrs	r3, r2
 8009156:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009158:	4b41      	ldr	r3, [pc, #260]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a40      	ldr	r2, [pc, #256]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800915e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009162:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009164:	4b3e      	ldr	r3, [pc, #248]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	4a3d      	ldr	r2, [pc, #244]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800916a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800916e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009170:	f7f9 fe2a 	bl	8002dc8 <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009178:	f7f9 fe26 	bl	8002dc8 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b02      	cmp	r3, #2
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e066      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800918a:	4b35      	ldr	r3, [pc, #212]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f0      	beq.n	8009178 <HAL_RCC_OscConfig+0x530>
 8009196:	e05e      	b.n	8009256 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009198:	4b31      	ldr	r3, [pc, #196]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a30      	ldr	r2, [pc, #192]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 800919e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7f9 fe10 	bl	8002dc8 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ac:	f7f9 fe0c 	bl	8002dc8 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e04c      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091be:	4b28      	ldr	r3, [pc, #160]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80091ca:	4b25      	ldr	r3, [pc, #148]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	4924      	ldr	r1, [pc, #144]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 80091d0:	4b25      	ldr	r3, [pc, #148]	@ (8009268 <HAL_RCC_OscConfig+0x620>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	60cb      	str	r3, [r1, #12]
 80091d6:	e03e      	b.n	8009256 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e039      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80091e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009260 <HAL_RCC_OscConfig+0x618>)
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f003 0203 	and.w	r2, r3, #3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d12c      	bne.n	8009252 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009202:	3b01      	subs	r3, #1
 8009204:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009206:	429a      	cmp	r2, r3
 8009208:	d123      	bne.n	8009252 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009214:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009216:	429a      	cmp	r2, r3
 8009218:	d11b      	bne.n	8009252 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009224:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009226:	429a      	cmp	r2, r3
 8009228:	d113      	bne.n	8009252 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	3b01      	subs	r3, #1
 8009238:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800923a:	429a      	cmp	r2, r3
 800923c:	d109      	bne.n	8009252 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009248:	085b      	lsrs	r3, r3, #1
 800924a:	3b01      	subs	r3, #1
 800924c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800924e:	429a      	cmp	r2, r3
 8009250:	d001      	beq.n	8009256 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	40021000 	.word	0x40021000
 8009264:	019f800c 	.word	0x019f800c
 8009268:	feeefffc 	.word	0xfeeefffc

0800926c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e11e      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009284:	4b91      	ldr	r3, [pc, #580]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d910      	bls.n	80092b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009292:	4b8e      	ldr	r3, [pc, #568]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f023 020f 	bic.w	r2, r3, #15
 800929a:	498c      	ldr	r1, [pc, #560]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	4313      	orrs	r3, r2
 80092a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a2:	4b8a      	ldr	r3, [pc, #552]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d001      	beq.n	80092b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e106      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d073      	beq.n	80093a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d129      	bne.n	800931c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092c8:	4b81      	ldr	r3, [pc, #516]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e0f4      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80092d8:	f000 f99e 	bl	8009618 <RCC_GetSysClockFreqFromPLLSource>
 80092dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4a7c      	ldr	r2, [pc, #496]	@ (80094d4 <HAL_RCC_ClockConfig+0x268>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d93f      	bls.n	8009366 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80092e6:	4b7a      	ldr	r3, [pc, #488]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d033      	beq.n	8009366 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d12f      	bne.n	8009366 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009306:	4b72      	ldr	r3, [pc, #456]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800930e:	4a70      	ldr	r2, [pc, #448]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009314:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009316:	2380      	movs	r3, #128	@ 0x80
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	e024      	b.n	8009366 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d107      	bne.n	8009334 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009324:	4b6a      	ldr	r3, [pc, #424]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d109      	bne.n	8009344 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e0c6      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009334:	4b66      	ldr	r3, [pc, #408]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e0be      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009344:	f000 f8ce 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 8009348:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	4a61      	ldr	r2, [pc, #388]	@ (80094d4 <HAL_RCC_ClockConfig+0x268>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d909      	bls.n	8009366 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009352:	4b5f      	ldr	r3, [pc, #380]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800935a:	4a5d      	ldr	r2, [pc, #372]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 800935c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009360:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009362:	2380      	movs	r3, #128	@ 0x80
 8009364:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009366:	4b5a      	ldr	r3, [pc, #360]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f023 0203 	bic.w	r2, r3, #3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	4957      	ldr	r1, [pc, #348]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009374:	4313      	orrs	r3, r2
 8009376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009378:	f7f9 fd26 	bl	8002dc8 <HAL_GetTick>
 800937c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800937e:	e00a      	b.n	8009396 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009380:	f7f9 fd22 	bl	8002dc8 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800938e:	4293      	cmp	r3, r2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e095      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009396:	4b4e      	ldr	r3, [pc, #312]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 020c 	and.w	r2, r3, #12
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d1eb      	bne.n	8009380 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d023      	beq.n	80093fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093c0:	4b43      	ldr	r3, [pc, #268]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	4a42      	ldr	r2, [pc, #264]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80093ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80093d8:	4b3d      	ldr	r3, [pc, #244]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093e0:	4a3b      	ldr	r2, [pc, #236]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80093e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093e8:	4b39      	ldr	r3, [pc, #228]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	4936      	ldr	r1, [pc, #216]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	608b      	str	r3, [r1, #8]
 80093fa:	e008      	b.n	800940e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b80      	cmp	r3, #128	@ 0x80
 8009400:	d105      	bne.n	800940e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009402:	4b33      	ldr	r3, [pc, #204]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	4a32      	ldr	r2, [pc, #200]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800940c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800940e:	4b2f      	ldr	r3, [pc, #188]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d21d      	bcs.n	8009458 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941c:	4b2b      	ldr	r3, [pc, #172]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f023 020f 	bic.w	r2, r3, #15
 8009424:	4929      	ldr	r1, [pc, #164]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	4313      	orrs	r3, r2
 800942a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800942c:	f7f9 fccc 	bl	8002dc8 <HAL_GetTick>
 8009430:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009432:	e00a      	b.n	800944a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009434:	f7f9 fcc8 	bl	8002dc8 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e03b      	b.n	80094c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800944a:	4b20      	ldr	r3, [pc, #128]	@ (80094cc <HAL_RCC_ClockConfig+0x260>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d1ed      	bne.n	8009434 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d008      	beq.n	8009476 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009464:	4b1a      	ldr	r3, [pc, #104]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	4917      	ldr	r1, [pc, #92]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009472:	4313      	orrs	r3, r2
 8009474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0308 	and.w	r3, r3, #8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d009      	beq.n	8009496 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009482:	4b13      	ldr	r3, [pc, #76]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	490f      	ldr	r1, [pc, #60]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 8009492:	4313      	orrs	r3, r2
 8009494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009496:	f000 f825 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 800949a:	4602      	mov	r2, r0
 800949c:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <HAL_RCC_ClockConfig+0x264>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	091b      	lsrs	r3, r3, #4
 80094a2:	f003 030f 	and.w	r3, r3, #15
 80094a6:	490c      	ldr	r1, [pc, #48]	@ (80094d8 <HAL_RCC_ClockConfig+0x26c>)
 80094a8:	5ccb      	ldrb	r3, [r1, r3]
 80094aa:	f003 031f 	and.w	r3, r3, #31
 80094ae:	fa22 f303 	lsr.w	r3, r2, r3
 80094b2:	4a0a      	ldr	r2, [pc, #40]	@ (80094dc <HAL_RCC_ClockConfig+0x270>)
 80094b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80094b6:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <HAL_RCC_ClockConfig+0x274>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f9 fc38 	bl	8002d30 <HAL_InitTick>
 80094c0:	4603      	mov	r3, r0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	40022000 	.word	0x40022000
 80094d0:	40021000 	.word	0x40021000
 80094d4:	04c4b400 	.word	0x04c4b400
 80094d8:	0800eeb0 	.word	0x0800eeb0
 80094dc:	20000008 	.word	0x20000008
 80094e0:	2000000c 	.word	0x2000000c

080094e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80094ea:	4b2c      	ldr	r3, [pc, #176]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 030c 	and.w	r3, r3, #12
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d102      	bne.n	80094fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80094f6:	4b2a      	ldr	r3, [pc, #168]	@ (80095a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	e047      	b.n	800958c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 030c 	and.w	r3, r3, #12
 8009504:	2b08      	cmp	r3, #8
 8009506:	d102      	bne.n	800950e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009508:	4b26      	ldr	r3, [pc, #152]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800950a:	613b      	str	r3, [r7, #16]
 800950c:	e03e      	b.n	800958c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800950e:	4b23      	ldr	r3, [pc, #140]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 030c 	and.w	r3, r3, #12
 8009516:	2b0c      	cmp	r3, #12
 8009518:	d136      	bne.n	8009588 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800951a:	4b20      	ldr	r3, [pc, #128]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009524:	4b1d      	ldr	r3, [pc, #116]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	091b      	lsrs	r3, r3, #4
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	3301      	adds	r3, #1
 8009530:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d10c      	bne.n	8009552 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009538:	4a1a      	ldr	r2, [pc, #104]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009540:	4a16      	ldr	r2, [pc, #88]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009542:	68d2      	ldr	r2, [r2, #12]
 8009544:	0a12      	lsrs	r2, r2, #8
 8009546:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	617b      	str	r3, [r7, #20]
      break;
 8009550:	e00c      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009552:	4a13      	ldr	r2, [pc, #76]	@ (80095a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	4a10      	ldr	r2, [pc, #64]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 800955c:	68d2      	ldr	r2, [r2, #12]
 800955e:	0a12      	lsrs	r2, r2, #8
 8009560:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	617b      	str	r3, [r7, #20]
      break;
 800956a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800956c:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <HAL_RCC_GetSysClockFreq+0xb8>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	0e5b      	lsrs	r3, r3, #25
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	3301      	adds	r3, #1
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	e001      	b.n	800958c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800958c:	693b      	ldr	r3, [r7, #16]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	40021000 	.word	0x40021000
 80095a0:	00f42400 	.word	0x00f42400
 80095a4:	02dc6c00 	.word	0x02dc6c00

080095a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095ac:	4b03      	ldr	r3, [pc, #12]	@ (80095bc <HAL_RCC_GetHCLKFreq+0x14>)
 80095ae:	681b      	ldr	r3, [r3, #0]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000008 	.word	0x20000008

080095c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80095c4:	f7ff fff0 	bl	80095a8 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4904      	ldr	r1, [pc, #16]	@ (80095e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	40021000 	.word	0x40021000
 80095e8:	0800eec0 	.word	0x0800eec0

080095ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80095f0:	f7ff ffda 	bl	80095a8 <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	0adb      	lsrs	r3, r3, #11
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4904      	ldr	r1, [pc, #16]	@ (8009614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	40021000 	.word	0x40021000
 8009614:	0800eec0 	.word	0x0800eec0

08009618 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800961e:	4b1e      	ldr	r3, [pc, #120]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009628:	4b1b      	ldr	r3, [pc, #108]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	091b      	lsrs	r3, r3, #4
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d10c      	bne.n	8009656 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800963c:	4a17      	ldr	r2, [pc, #92]	@ (800969c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	fbb2 f3f3 	udiv	r3, r2, r3
 8009644:	4a14      	ldr	r2, [pc, #80]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009646:	68d2      	ldr	r2, [r2, #12]
 8009648:	0a12      	lsrs	r2, r2, #8
 800964a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	617b      	str	r3, [r7, #20]
    break;
 8009654:	e00c      	b.n	8009670 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009656:	4a12      	ldr	r2, [pc, #72]	@ (80096a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	fbb2 f3f3 	udiv	r3, r2, r3
 800965e:	4a0e      	ldr	r2, [pc, #56]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009660:	68d2      	ldr	r2, [r2, #12]
 8009662:	0a12      	lsrs	r2, r2, #8
 8009664:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	617b      	str	r3, [r7, #20]
    break;
 800966e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009670:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	0e5b      	lsrs	r3, r3, #25
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	3301      	adds	r3, #1
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800968a:	687b      	ldr	r3, [r7, #4]
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40021000 	.word	0x40021000
 800969c:	02dc6c00 	.word	0x02dc6c00
 80096a0:	00f42400 	.word	0x00f42400

080096a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096ac:	2300      	movs	r3, #0
 80096ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b0:	2300      	movs	r3, #0
 80096b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8098 	beq.w	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096c2:	2300      	movs	r3, #0
 80096c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096c6:	4b43      	ldr	r3, [pc, #268]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10d      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096d2:	4b40      	ldr	r3, [pc, #256]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d6:	4a3f      	ldr	r2, [pc, #252]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80096de:	4b3d      	ldr	r3, [pc, #244]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096e6:	60bb      	str	r3, [r7, #8]
 80096e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ea:	2301      	movs	r3, #1
 80096ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096ee:	4b3a      	ldr	r3, [pc, #232]	@ (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a39      	ldr	r2, [pc, #228]	@ (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096fa:	f7f9 fb65 	bl	8002dc8 <HAL_GetTick>
 80096fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009700:	e009      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009702:	f7f9 fb61 	bl	8002dc8 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2b02      	cmp	r3, #2
 800970e:	d902      	bls.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	74fb      	strb	r3, [r7, #19]
        break;
 8009714:	e005      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009716:	4b30      	ldr	r3, [pc, #192]	@ (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0ef      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009722:	7cfb      	ldrb	r3, [r7, #19]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d159      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009728:	4b2a      	ldr	r3, [pc, #168]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009732:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01e      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	429a      	cmp	r2, r3
 8009742:	d019      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009744:	4b23      	ldr	r3, [pc, #140]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800974a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800974e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009750:	4b20      	ldr	r3, [pc, #128]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009756:	4a1f      	ldr	r2, [pc, #124]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800975c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009760:	4b1c      	ldr	r3, [pc, #112]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009766:	4a1b      	ldr	r2, [pc, #108]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800976c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009770:	4a18      	ldr	r2, [pc, #96]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009782:	f7f9 fb21 	bl	8002dc8 <HAL_GetTick>
 8009786:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009788:	e00b      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800978a:	f7f9 fb1d 	bl	8002dc8 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009798:	4293      	cmp	r3, r2
 800979a:	d902      	bls.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	74fb      	strb	r3, [r7, #19]
            break;
 80097a0:	e006      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a2:	4b0c      	ldr	r3, [pc, #48]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0ec      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80097b0:	7cfb      	ldrb	r3, [r7, #19]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097b6:	4b07      	ldr	r3, [pc, #28]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c4:	4903      	ldr	r1, [pc, #12]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80097cc:	e008      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ce:	7cfb      	ldrb	r3, [r7, #19]
 80097d0:	74bb      	strb	r3, [r7, #18]
 80097d2:	e005      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80097d4:	40021000 	.word	0x40021000
 80097d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097dc:	7cfb      	ldrb	r3, [r7, #19]
 80097de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097e0:	7c7b      	ldrb	r3, [r7, #17]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d105      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097e6:	4ba7      	ldr	r3, [pc, #668]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ea:	4aa6      	ldr	r2, [pc, #664]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097fe:	4ba1      	ldr	r3, [pc, #644]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009804:	f023 0203 	bic.w	r2, r3, #3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	499d      	ldr	r1, [pc, #628]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800980e:	4313      	orrs	r3, r2
 8009810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009820:	4b98      	ldr	r3, [pc, #608]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009826:	f023 020c 	bic.w	r2, r3, #12
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	4995      	ldr	r1, [pc, #596]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009830:	4313      	orrs	r3, r2
 8009832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009842:	4b90      	ldr	r3, [pc, #576]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009848:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	498c      	ldr	r1, [pc, #560]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009852:	4313      	orrs	r3, r2
 8009854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009864:	4b87      	ldr	r3, [pc, #540]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800986a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	4984      	ldr	r1, [pc, #528]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009874:	4313      	orrs	r3, r2
 8009876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0310 	and.w	r3, r3, #16
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009886:	4b7f      	ldr	r3, [pc, #508]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800988c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	497b      	ldr	r1, [pc, #492]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009896:	4313      	orrs	r3, r2
 8009898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098a8:	4b76      	ldr	r3, [pc, #472]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	4973      	ldr	r1, [pc, #460]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098ca:	4b6e      	ldr	r3, [pc, #440]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	496a      	ldr	r1, [pc, #424]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098ec:	4b65      	ldr	r3, [pc, #404]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	4962      	ldr	r1, [pc, #392]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800990e:	4b5d      	ldr	r3, [pc, #372]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009914:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991c:	4959      	ldr	r1, [pc, #356]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800991e:	4313      	orrs	r3, r2
 8009920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00a      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009930:	4b54      	ldr	r3, [pc, #336]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009932:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009936:	f023 0203 	bic.w	r2, r3, #3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	4951      	ldr	r1, [pc, #324]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009940:	4313      	orrs	r3, r2
 8009942:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009952:	4b4c      	ldr	r3, [pc, #304]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009960:	4948      	ldr	r1, [pc, #288]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009962:	4313      	orrs	r3, r2
 8009964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009970:	2b00      	cmp	r3, #0
 8009972:	d015      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009974:	4b43      	ldr	r3, [pc, #268]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009982:	4940      	ldr	r1, [pc, #256]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009984:	4313      	orrs	r3, r2
 8009986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009992:	d105      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009994:	4b3b      	ldr	r3, [pc, #236]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a3a      	ldr	r2, [pc, #232]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800999e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d015      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80099ac:	4b35      	ldr	r3, [pc, #212]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ba:	4932      	ldr	r1, [pc, #200]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ca:	d105      	bne.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d015      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099e4:	4b27      	ldr	r3, [pc, #156]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	4924      	ldr	r1, [pc, #144]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a02:	d105      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a04:	4b1f      	ldr	r3, [pc, #124]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	4a1e      	ldr	r2, [pc, #120]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d015      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a1c:	4b19      	ldr	r3, [pc, #100]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a2a:	4916      	ldr	r1, [pc, #88]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a3a:	d105      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a3c:	4b11      	ldr	r3, [pc, #68]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	4a10      	ldr	r2, [pc, #64]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d019      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a54:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a62:	4908      	ldr	r1, [pc, #32]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a72:	d109      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a74:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4a02      	ldr	r2, [pc, #8]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a7e:	60d3      	str	r3, [r2, #12]
 8009a80:	e002      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a82:	bf00      	nop
 8009a84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d015      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a94:	4b29      	ldr	r3, [pc, #164]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa2:	4926      	ldr	r1, [pc, #152]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ab2:	d105      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	4a20      	ldr	r2, [pc, #128]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009abe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d015      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009acc:	4b1b      	ldr	r3, [pc, #108]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ada:	4918      	ldr	r1, [pc, #96]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aea:	d105      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009aec:	4b13      	ldr	r3, [pc, #76]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4a12      	ldr	r2, [pc, #72]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009af6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d015      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b04:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b12:	490a      	ldr	r1, [pc, #40]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b22:	d105      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b24:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	4a04      	ldr	r2, [pc, #16]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009b30:	7cbb      	ldrb	r3, [r7, #18]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40021000 	.word	0x40021000

08009b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e09d      	b.n	8009c8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b62:	d009      	beq.n	8009b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	61da      	str	r2, [r3, #28]
 8009b6a:	e005      	b.n	8009b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f8 fb2c 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bb8:	d902      	bls.n	8009bc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e002      	b.n	8009bc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009bce:	d007      	beq.n	8009be0 <HAL_SPI_Init+0xa0>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bd8:	d002      	beq.n	8009be0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c22:	ea42 0103 	orr.w	r1, r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	f003 0204 	and.w	r2, r3, #4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4e:	f003 0308 	and.w	r3, r3, #8
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c5c:	ea42 0103 	orr.w	r1, r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e049      	b.n	8009d3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7f8 fce3 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f000 f9c3 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d001      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e054      	b.n	8009e06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a26      	ldr	r2, [pc, #152]	@ (8009e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d022      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d86:	d01d      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a22      	ldr	r2, [pc, #136]	@ (8009e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d018      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a21      	ldr	r2, [pc, #132]	@ (8009e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d013      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a1f      	ldr	r2, [pc, #124]	@ (8009e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00e      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a1e      	ldr	r2, [pc, #120]	@ (8009e24 <HAL_TIM_Base_Start_IT+0xe0>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e28 <HAL_TIM_Base_Start_IT+0xe4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <HAL_TIM_Base_Start_IT+0x80>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8009e2c <HAL_TIM_Base_Start_IT+0xe8>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d115      	bne.n	8009df0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	4b19      	ldr	r3, [pc, #100]	@ (8009e30 <HAL_TIM_Base_Start_IT+0xec>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b06      	cmp	r3, #6
 8009dd4:	d015      	beq.n	8009e02 <HAL_TIM_Base_Start_IT+0xbe>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ddc:	d011      	beq.n	8009e02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f042 0201 	orr.w	r2, r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dee:	e008      	b.n	8009e02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	e000      	b.n	8009e04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	40012c00 	.word	0x40012c00
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	40000800 	.word	0x40000800
 8009e20:	40000c00 	.word	0x40000c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40015000 	.word	0x40015000
 8009e30:	00010007 	.word	0x00010007

08009e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d101      	bne.n	8009e50 <HAL_TIM_ConfigClockSource+0x1c>
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e0f6      	b.n	800a03e <HAL_TIM_ConfigClockSource+0x20a>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009e6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a6f      	ldr	r2, [pc, #444]	@ (800a048 <HAL_TIM_ConfigClockSource+0x214>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	f000 80c1 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009e90:	4a6d      	ldr	r2, [pc, #436]	@ (800a048 <HAL_TIM_ConfigClockSource+0x214>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f200 80c6 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e98:	4a6c      	ldr	r2, [pc, #432]	@ (800a04c <HAL_TIM_ConfigClockSource+0x218>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	f000 80b9 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800a04c <HAL_TIM_ConfigClockSource+0x218>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	f200 80be 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ea8:	4a69      	ldr	r2, [pc, #420]	@ (800a050 <HAL_TIM_ConfigClockSource+0x21c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f000 80b1 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009eb0:	4a67      	ldr	r2, [pc, #412]	@ (800a050 <HAL_TIM_ConfigClockSource+0x21c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	f200 80b6 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009eb8:	4a66      	ldr	r2, [pc, #408]	@ (800a054 <HAL_TIM_ConfigClockSource+0x220>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	f000 80a9 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009ec0:	4a64      	ldr	r2, [pc, #400]	@ (800a054 <HAL_TIM_ConfigClockSource+0x220>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	f200 80ae 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ec8:	4a63      	ldr	r2, [pc, #396]	@ (800a058 <HAL_TIM_ConfigClockSource+0x224>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	f000 80a1 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009ed0:	4a61      	ldr	r2, [pc, #388]	@ (800a058 <HAL_TIM_ConfigClockSource+0x224>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	f200 80a6 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ed8:	4a60      	ldr	r2, [pc, #384]	@ (800a05c <HAL_TIM_ConfigClockSource+0x228>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	f000 8099 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009ee0:	4a5e      	ldr	r2, [pc, #376]	@ (800a05c <HAL_TIM_ConfigClockSource+0x228>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	f200 809e 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ee8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009eec:	f000 8091 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009ef0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ef4:	f200 8096 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009efc:	f000 8089 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f04:	f200 808e 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f0c:	d03e      	beq.n	8009f8c <HAL_TIM_ConfigClockSource+0x158>
 8009f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f12:	f200 8087 	bhi.w	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f1a:	f000 8086 	beq.w	800a02a <HAL_TIM_ConfigClockSource+0x1f6>
 8009f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f22:	d87f      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f24:	2b70      	cmp	r3, #112	@ 0x70
 8009f26:	d01a      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x12a>
 8009f28:	2b70      	cmp	r3, #112	@ 0x70
 8009f2a:	d87b      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f2c:	2b60      	cmp	r3, #96	@ 0x60
 8009f2e:	d050      	beq.n	8009fd2 <HAL_TIM_ConfigClockSource+0x19e>
 8009f30:	2b60      	cmp	r3, #96	@ 0x60
 8009f32:	d877      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f34:	2b50      	cmp	r3, #80	@ 0x50
 8009f36:	d03c      	beq.n	8009fb2 <HAL_TIM_ConfigClockSource+0x17e>
 8009f38:	2b50      	cmp	r3, #80	@ 0x50
 8009f3a:	d873      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f3c:	2b40      	cmp	r3, #64	@ 0x40
 8009f3e:	d058      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x1be>
 8009f40:	2b40      	cmp	r3, #64	@ 0x40
 8009f42:	d86f      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f44:	2b30      	cmp	r3, #48	@ 0x30
 8009f46:	d064      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009f48:	2b30      	cmp	r3, #48	@ 0x30
 8009f4a:	d86b      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f4c:	2b20      	cmp	r3, #32
 8009f4e:	d060      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009f50:	2b20      	cmp	r3, #32
 8009f52:	d867      	bhi.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d05c      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d05a      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x1de>
 8009f5c:	e062      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f6e:	f000 f9a7 	bl	800a2c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	609a      	str	r2, [r3, #8]
      break;
 8009f8a:	e04f      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f9c:	f000 f990 	bl	800a2c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fae:	609a      	str	r2, [r3, #8]
      break;
 8009fb0:	e03c      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f000 f902 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2150      	movs	r1, #80	@ 0x50
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f95b 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009fd0:	e02c      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f000 f921 	bl	800a226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2160      	movs	r1, #96	@ 0x60
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f94b 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 8009ff0:	e01c      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffe:	461a      	mov	r2, r3
 800a000:	f000 f8e2 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2140      	movs	r1, #64	@ 0x40
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f93b 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 800a010:	e00c      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4619      	mov	r1, r3
 800a01c:	4610      	mov	r0, r2
 800a01e:	f000 f932 	bl	800a286 <TIM_ITRx_SetConfig>
      break;
 800a022:	e003      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
      break;
 800a028:	e000      	b.n	800a02c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a02a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	00100070 	.word	0x00100070
 800a04c:	00100060 	.word	0x00100060
 800a050:	00100050 	.word	0x00100050
 800a054:	00100040 	.word	0x00100040
 800a058:	00100030 	.word	0x00100030
 800a05c:	00100020 	.word	0x00100020

0800a060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a4c      	ldr	r2, [pc, #304]	@ (800a1a4 <TIM_Base_SetConfig+0x144>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d017      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a07e:	d013      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a49      	ldr	r2, [pc, #292]	@ (800a1a8 <TIM_Base_SetConfig+0x148>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00f      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a48      	ldr	r2, [pc, #288]	@ (800a1ac <TIM_Base_SetConfig+0x14c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00b      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a47      	ldr	r2, [pc, #284]	@ (800a1b0 <TIM_Base_SetConfig+0x150>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d007      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a46      	ldr	r2, [pc, #280]	@ (800a1b4 <TIM_Base_SetConfig+0x154>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d003      	beq.n	800a0a8 <TIM_Base_SetConfig+0x48>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a45      	ldr	r2, [pc, #276]	@ (800a1b8 <TIM_Base_SetConfig+0x158>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d108      	bne.n	800a0ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a39      	ldr	r2, [pc, #228]	@ (800a1a4 <TIM_Base_SetConfig+0x144>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d023      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c8:	d01f      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a36      	ldr	r2, [pc, #216]	@ (800a1a8 <TIM_Base_SetConfig+0x148>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d01b      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a35      	ldr	r2, [pc, #212]	@ (800a1ac <TIM_Base_SetConfig+0x14c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d017      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a34      	ldr	r2, [pc, #208]	@ (800a1b0 <TIM_Base_SetConfig+0x150>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d013      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a33      	ldr	r2, [pc, #204]	@ (800a1b4 <TIM_Base_SetConfig+0x154>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00f      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a33      	ldr	r2, [pc, #204]	@ (800a1bc <TIM_Base_SetConfig+0x15c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d00b      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a32      	ldr	r2, [pc, #200]	@ (800a1c0 <TIM_Base_SetConfig+0x160>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d007      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a31      	ldr	r2, [pc, #196]	@ (800a1c4 <TIM_Base_SetConfig+0x164>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d003      	beq.n	800a10a <TIM_Base_SetConfig+0xaa>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a2c      	ldr	r2, [pc, #176]	@ (800a1b8 <TIM_Base_SetConfig+0x158>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d108      	bne.n	800a11c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4313      	orrs	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a18      	ldr	r2, [pc, #96]	@ (800a1a4 <TIM_Base_SetConfig+0x144>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d013      	beq.n	800a170 <TIM_Base_SetConfig+0x110>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b4 <TIM_Base_SetConfig+0x154>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00f      	beq.n	800a170 <TIM_Base_SetConfig+0x110>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a1a      	ldr	r2, [pc, #104]	@ (800a1bc <TIM_Base_SetConfig+0x15c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00b      	beq.n	800a170 <TIM_Base_SetConfig+0x110>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a19      	ldr	r2, [pc, #100]	@ (800a1c0 <TIM_Base_SetConfig+0x160>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d007      	beq.n	800a170 <TIM_Base_SetConfig+0x110>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a18      	ldr	r2, [pc, #96]	@ (800a1c4 <TIM_Base_SetConfig+0x164>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_Base_SetConfig+0x110>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a13      	ldr	r2, [pc, #76]	@ (800a1b8 <TIM_Base_SetConfig+0x158>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d103      	bne.n	800a178 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b01      	cmp	r3, #1
 800a188:	d105      	bne.n	800a196 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f023 0201 	bic.w	r2, r3, #1
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	611a      	str	r2, [r3, #16]
  }
}
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40012c00 	.word	0x40012c00
 800a1a8:	40000400 	.word	0x40000400
 800a1ac:	40000800 	.word	0x40000800
 800a1b0:	40000c00 	.word	0x40000c00
 800a1b4:	40013400 	.word	0x40013400
 800a1b8:	40015000 	.word	0x40015000
 800a1bc:	40014000 	.word	0x40014000
 800a1c0:	40014400 	.word	0x40014400
 800a1c4:	40014800 	.word	0x40014800

0800a1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f023 030a 	bic.w	r3, r3, #10
 800a204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	621a      	str	r2, [r3, #32]
}
 800a21a:	bf00      	nop
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a226:	b480      	push	{r7}
 800a228:	b087      	sub	sp, #28
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	f023 0210 	bic.w	r2, r3, #16
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	031b      	lsls	r3, r3, #12
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	621a      	str	r2, [r3, #32]
}
 800a27a:	bf00      	nop
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a286:	b480      	push	{r7}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	f043 0307 	orr.w	r3, r3, #7
 800a2ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	609a      	str	r2, [r3, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	021a      	lsls	r2, r3, #8
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	609a      	str	r2, [r3, #8]
}
 800a2f4:	bf00      	nop
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a314:	2302      	movs	r3, #2
 800a316:	e074      	b.n	800a402 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a34      	ldr	r2, [pc, #208]	@ (800a410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d009      	beq.n	800a356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a33      	ldr	r2, [pc, #204]	@ (800a414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d004      	beq.n	800a356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a31      	ldr	r2, [pc, #196]	@ (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d108      	bne.n	800a368 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a35c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a36e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a21      	ldr	r2, [pc, #132]	@ (800a410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d022      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a398:	d01d      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a1f      	ldr	r2, [pc, #124]	@ (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d018      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a420 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d013      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	@ (800a424 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a15      	ldr	r2, [pc, #84]	@ (800a414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d009      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a18      	ldr	r2, [pc, #96]	@ (800a428 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a11      	ldr	r2, [pc, #68]	@ (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d10c      	bne.n	800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40012c00 	.word	0x40012c00
 800a414:	40013400 	.word	0x40013400
 800a418:	40015000 	.word	0x40015000
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00
 800a428:	40014000 	.word	0x40014000

0800a42c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e042      	b.n	800a4c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7f8 fa81 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2224      	movs	r2, #36	@ 0x24
 800a45a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0201 	bic.w	r2, r2, #1
 800a46c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fb24 	bl	800aac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f825 	bl	800a4cc <UART_SetConfig>
 800a482:	4603      	mov	r3, r0
 800a484:	2b01      	cmp	r3, #1
 800a486:	d101      	bne.n	800a48c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e01b      	b.n	800a4c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a49a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f042 0201 	orr.w	r2, r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fba3 	bl	800ac08 <UART_CheckIdleState>
 800a4c2:	4603      	mov	r3, r0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d0:	b08c      	sub	sp, #48	@ 0x30
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	4baa      	ldr	r3, [pc, #680]	@ (800a7a4 <UART_SetConfig+0x2d8>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	6812      	ldr	r2, [r2, #0]
 800a502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a504:	430b      	orrs	r3, r1
 800a506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a9f      	ldr	r2, [pc, #636]	@ (800a7a8 <UART_SetConfig+0x2dc>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d004      	beq.n	800a538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a534:	4313      	orrs	r3, r2
 800a536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a542:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	6812      	ldr	r2, [r2, #0]
 800a54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a54c:	430b      	orrs	r3, r1
 800a54e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a556:	f023 010f 	bic.w	r1, r3, #15
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a90      	ldr	r2, [pc, #576]	@ (800a7ac <UART_SetConfig+0x2e0>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d125      	bne.n	800a5bc <UART_SetConfig+0xf0>
 800a570:	4b8f      	ldr	r3, [pc, #572]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a576:	f003 0303 	and.w	r3, r3, #3
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d81a      	bhi.n	800a5b4 <UART_SetConfig+0xe8>
 800a57e:	a201      	add	r2, pc, #4	@ (adr r2, 800a584 <UART_SetConfig+0xb8>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a595 	.word	0x0800a595
 800a588:	0800a5a5 	.word	0x0800a5a5
 800a58c:	0800a59d 	.word	0x0800a59d
 800a590:	0800a5ad 	.word	0x0800a5ad
 800a594:	2301      	movs	r3, #1
 800a596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59a:	e116      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a59c:	2302      	movs	r3, #2
 800a59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a2:	e112      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a5a4:	2304      	movs	r3, #4
 800a5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5aa:	e10e      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5b2:	e10a      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ba:	e106      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a7c      	ldr	r2, [pc, #496]	@ (800a7b4 <UART_SetConfig+0x2e8>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d138      	bne.n	800a638 <UART_SetConfig+0x16c>
 800a5c6:	4b7a      	ldr	r3, [pc, #488]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5cc:	f003 030c 	and.w	r3, r3, #12
 800a5d0:	2b0c      	cmp	r3, #12
 800a5d2:	d82d      	bhi.n	800a630 <UART_SetConfig+0x164>
 800a5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x110>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a611 	.word	0x0800a611
 800a5e0:	0800a631 	.word	0x0800a631
 800a5e4:	0800a631 	.word	0x0800a631
 800a5e8:	0800a631 	.word	0x0800a631
 800a5ec:	0800a621 	.word	0x0800a621
 800a5f0:	0800a631 	.word	0x0800a631
 800a5f4:	0800a631 	.word	0x0800a631
 800a5f8:	0800a631 	.word	0x0800a631
 800a5fc:	0800a619 	.word	0x0800a619
 800a600:	0800a631 	.word	0x0800a631
 800a604:	0800a631 	.word	0x0800a631
 800a608:	0800a631 	.word	0x0800a631
 800a60c:	0800a629 	.word	0x0800a629
 800a610:	2300      	movs	r3, #0
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a616:	e0d8      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a618:	2302      	movs	r3, #2
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a61e:	e0d4      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a626:	e0d0      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a62e:	e0cc      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a636:	e0c8      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a5e      	ldr	r2, [pc, #376]	@ (800a7b8 <UART_SetConfig+0x2ec>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d125      	bne.n	800a68e <UART_SetConfig+0x1c2>
 800a642:	4b5b      	ldr	r3, [pc, #364]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a648:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a64c:	2b30      	cmp	r3, #48	@ 0x30
 800a64e:	d016      	beq.n	800a67e <UART_SetConfig+0x1b2>
 800a650:	2b30      	cmp	r3, #48	@ 0x30
 800a652:	d818      	bhi.n	800a686 <UART_SetConfig+0x1ba>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d00a      	beq.n	800a66e <UART_SetConfig+0x1a2>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d814      	bhi.n	800a686 <UART_SetConfig+0x1ba>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <UART_SetConfig+0x19a>
 800a660:	2b10      	cmp	r3, #16
 800a662:	d008      	beq.n	800a676 <UART_SetConfig+0x1aa>
 800a664:	e00f      	b.n	800a686 <UART_SetConfig+0x1ba>
 800a666:	2300      	movs	r3, #0
 800a668:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66c:	e0ad      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a66e:	2302      	movs	r3, #2
 800a670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a674:	e0a9      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a676:	2304      	movs	r3, #4
 800a678:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67c:	e0a5      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a67e:	2308      	movs	r3, #8
 800a680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a684:	e0a1      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a686:	2310      	movs	r3, #16
 800a688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68c:	e09d      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a4a      	ldr	r2, [pc, #296]	@ (800a7bc <UART_SetConfig+0x2f0>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d125      	bne.n	800a6e4 <UART_SetConfig+0x218>
 800a698:	4b45      	ldr	r3, [pc, #276]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a69e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6a4:	d016      	beq.n	800a6d4 <UART_SetConfig+0x208>
 800a6a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6a8:	d818      	bhi.n	800a6dc <UART_SetConfig+0x210>
 800a6aa:	2b80      	cmp	r3, #128	@ 0x80
 800a6ac:	d00a      	beq.n	800a6c4 <UART_SetConfig+0x1f8>
 800a6ae:	2b80      	cmp	r3, #128	@ 0x80
 800a6b0:	d814      	bhi.n	800a6dc <UART_SetConfig+0x210>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <UART_SetConfig+0x1f0>
 800a6b6:	2b40      	cmp	r3, #64	@ 0x40
 800a6b8:	d008      	beq.n	800a6cc <UART_SetConfig+0x200>
 800a6ba:	e00f      	b.n	800a6dc <UART_SetConfig+0x210>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e082      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e07e      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	e07a      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6da:	e076      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e2:	e072      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a35      	ldr	r2, [pc, #212]	@ (800a7c0 <UART_SetConfig+0x2f4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d12a      	bne.n	800a744 <UART_SetConfig+0x278>
 800a6ee:	4b30      	ldr	r3, [pc, #192]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6fc:	d01a      	beq.n	800a734 <UART_SetConfig+0x268>
 800a6fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a702:	d81b      	bhi.n	800a73c <UART_SetConfig+0x270>
 800a704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a708:	d00c      	beq.n	800a724 <UART_SetConfig+0x258>
 800a70a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a70e:	d815      	bhi.n	800a73c <UART_SetConfig+0x270>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <UART_SetConfig+0x250>
 800a714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a718:	d008      	beq.n	800a72c <UART_SetConfig+0x260>
 800a71a:	e00f      	b.n	800a73c <UART_SetConfig+0x270>
 800a71c:	2300      	movs	r3, #0
 800a71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a722:	e052      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a724:	2302      	movs	r3, #2
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72a:	e04e      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a732:	e04a      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73a:	e046      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a742:	e042      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a17      	ldr	r2, [pc, #92]	@ (800a7a8 <UART_SetConfig+0x2dc>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d13a      	bne.n	800a7c4 <UART_SetConfig+0x2f8>
 800a74e:	4b18      	ldr	r3, [pc, #96]	@ (800a7b0 <UART_SetConfig+0x2e4>)
 800a750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a75c:	d01a      	beq.n	800a794 <UART_SetConfig+0x2c8>
 800a75e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a762:	d81b      	bhi.n	800a79c <UART_SetConfig+0x2d0>
 800a764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a768:	d00c      	beq.n	800a784 <UART_SetConfig+0x2b8>
 800a76a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a76e:	d815      	bhi.n	800a79c <UART_SetConfig+0x2d0>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <UART_SetConfig+0x2b0>
 800a774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a778:	d008      	beq.n	800a78c <UART_SetConfig+0x2c0>
 800a77a:	e00f      	b.n	800a79c <UART_SetConfig+0x2d0>
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a782:	e022      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a784:	2302      	movs	r3, #2
 800a786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78a:	e01e      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a78c:	2304      	movs	r3, #4
 800a78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a792:	e01a      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a794:	2308      	movs	r3, #8
 800a796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79a:	e016      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a79c:	2310      	movs	r3, #16
 800a79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7a2:	e012      	b.n	800a7ca <UART_SetConfig+0x2fe>
 800a7a4:	cfff69f3 	.word	0xcfff69f3
 800a7a8:	40008000 	.word	0x40008000
 800a7ac:	40013800 	.word	0x40013800
 800a7b0:	40021000 	.word	0x40021000
 800a7b4:	40004400 	.word	0x40004400
 800a7b8:	40004800 	.word	0x40004800
 800a7bc:	40004c00 	.word	0x40004c00
 800a7c0:	40005000 	.word	0x40005000
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4aae      	ldr	r2, [pc, #696]	@ (800aa88 <UART_SetConfig+0x5bc>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	f040 8097 	bne.w	800a904 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d823      	bhi.n	800a826 <UART_SetConfig+0x35a>
 800a7de:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <UART_SetConfig+0x318>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a827 	.word	0x0800a827
 800a7ec:	0800a811 	.word	0x0800a811
 800a7f0:	0800a827 	.word	0x0800a827
 800a7f4:	0800a817 	.word	0x0800a817
 800a7f8:	0800a827 	.word	0x0800a827
 800a7fc:	0800a827 	.word	0x0800a827
 800a800:	0800a827 	.word	0x0800a827
 800a804:	0800a81f 	.word	0x0800a81f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a808:	f7fe feda 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800a80c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a80e:	e010      	b.n	800a832 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a810:	4b9e      	ldr	r3, [pc, #632]	@ (800aa8c <UART_SetConfig+0x5c0>)
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a814:	e00d      	b.n	800a832 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a816:	f7fe fe65 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 800a81a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a81c:	e009      	b.n	800a832 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a824:	e005      	b.n	800a832 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8130 	beq.w	800aa9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	4a94      	ldr	r2, [pc, #592]	@ (800aa90 <UART_SetConfig+0x5c4>)
 800a840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a844:	461a      	mov	r2, r3
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	4613      	mov	r3, r2
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	4413      	add	r3, r2
 800a858:	69ba      	ldr	r2, [r7, #24]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d305      	bcc.n	800a86a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	429a      	cmp	r2, r3
 800a868:	d903      	bls.n	800a872 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a870:	e113      	b.n	800aa9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	2200      	movs	r2, #0
 800a876:	60bb      	str	r3, [r7, #8]
 800a878:	60fa      	str	r2, [r7, #12]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87e:	4a84      	ldr	r2, [pc, #528]	@ (800aa90 <UART_SetConfig+0x5c4>)
 800a880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a884:	b29b      	uxth	r3, r3
 800a886:	2200      	movs	r2, #0
 800a888:	603b      	str	r3, [r7, #0]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a890:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a894:	f7f6 f9b0 	bl	8000bf8 <__aeabi_uldivmod>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4610      	mov	r0, r2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f04f 0200 	mov.w	r2, #0
 800a8a4:	f04f 0300 	mov.w	r3, #0
 800a8a8:	020b      	lsls	r3, r1, #8
 800a8aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8ae:	0202      	lsls	r2, r0, #8
 800a8b0:	6979      	ldr	r1, [r7, #20]
 800a8b2:	6849      	ldr	r1, [r1, #4]
 800a8b4:	0849      	lsrs	r1, r1, #1
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	eb12 0804 	adds.w	r8, r2, r4
 800a8c0:	eb43 0905 	adc.w	r9, r3, r5
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	469a      	mov	sl, r3
 800a8cc:	4693      	mov	fp, r2
 800a8ce:	4652      	mov	r2, sl
 800a8d0:	465b      	mov	r3, fp
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	f7f6 f98f 	bl	8000bf8 <__aeabi_uldivmod>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4613      	mov	r3, r2
 800a8e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8e8:	d308      	bcc.n	800a8fc <UART_SetConfig+0x430>
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8f0:	d204      	bcs.n	800a8fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6a3a      	ldr	r2, [r7, #32]
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e0ce      	b.n	800aa9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a902:	e0ca      	b.n	800aa9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	69db      	ldr	r3, [r3, #28]
 800a908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a90c:	d166      	bne.n	800a9dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a90e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a912:	2b08      	cmp	r3, #8
 800a914:	d827      	bhi.n	800a966 <UART_SetConfig+0x49a>
 800a916:	a201      	add	r2, pc, #4	@ (adr r2, 800a91c <UART_SetConfig+0x450>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a949 	.word	0x0800a949
 800a924:	0800a951 	.word	0x0800a951
 800a928:	0800a967 	.word	0x0800a967
 800a92c:	0800a957 	.word	0x0800a957
 800a930:	0800a967 	.word	0x0800a967
 800a934:	0800a967 	.word	0x0800a967
 800a938:	0800a967 	.word	0x0800a967
 800a93c:	0800a95f 	.word	0x0800a95f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a940:	f7fe fe3e 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800a944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a946:	e014      	b.n	800a972 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a948:	f7fe fe50 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800a94c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a94e:	e010      	b.n	800a972 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a950:	4b4e      	ldr	r3, [pc, #312]	@ (800aa8c <UART_SetConfig+0x5c0>)
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a954:	e00d      	b.n	800a972 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a956:	f7fe fdc5 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 800a95a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a95c:	e009      	b.n	800a972 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a95e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a964:	e005      	b.n	800a972 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8090 	beq.w	800aa9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	4a44      	ldr	r2, [pc, #272]	@ (800aa90 <UART_SetConfig+0x5c4>)
 800a980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a984:	461a      	mov	r2, r3
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	fbb3 f3f2 	udiv	r3, r3, r2
 800a98c:	005a      	lsls	r2, r3, #1
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	085b      	lsrs	r3, r3, #1
 800a994:	441a      	add	r2, r3
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a99e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d916      	bls.n	800a9d4 <UART_SetConfig+0x508>
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9ac:	d212      	bcs.n	800a9d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	f023 030f 	bic.w	r3, r3, #15
 800a9b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	085b      	lsrs	r3, r3, #1
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	8bfb      	ldrh	r3, [r7, #30]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	8bfa      	ldrh	r2, [r7, #30]
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	e062      	b.n	800aa9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a9da:	e05e      	b.n	800aa9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d828      	bhi.n	800aa36 <UART_SetConfig+0x56a>
 800a9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a9ec <UART_SetConfig+0x520>)
 800a9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ea:	bf00      	nop
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa19 	.word	0x0800aa19
 800a9f4:	0800aa21 	.word	0x0800aa21
 800a9f8:	0800aa37 	.word	0x0800aa37
 800a9fc:	0800aa27 	.word	0x0800aa27
 800aa00:	0800aa37 	.word	0x0800aa37
 800aa04:	0800aa37 	.word	0x0800aa37
 800aa08:	0800aa37 	.word	0x0800aa37
 800aa0c:	0800aa2f 	.word	0x0800aa2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa10:	f7fe fdd6 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800aa14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa16:	e014      	b.n	800aa42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa18:	f7fe fde8 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800aa1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa1e:	e010      	b.n	800aa42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa20:	4b1a      	ldr	r3, [pc, #104]	@ (800aa8c <UART_SetConfig+0x5c0>)
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa24:	e00d      	b.n	800aa42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa26:	f7fe fd5d 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 800aa2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa2c:	e009      	b.n	800aa42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa34:	e005      	b.n	800aa42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa40:	bf00      	nop
    }

    if (pclk != 0U)
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d028      	beq.n	800aa9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	4a10      	ldr	r2, [pc, #64]	@ (800aa90 <UART_SetConfig+0x5c4>)
 800aa4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa52:	461a      	mov	r2, r3
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	441a      	add	r2, r3
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d910      	bls.n	800aa94 <UART_SetConfig+0x5c8>
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa78:	d20c      	bcs.n	800aa94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60da      	str	r2, [r3, #12]
 800aa84:	e009      	b.n	800aa9a <UART_SetConfig+0x5ce>
 800aa86:	bf00      	nop
 800aa88:	40008000 	.word	0x40008000
 800aa8c:	00f42400 	.word	0x00f42400
 800aa90:	0800eed8 	.word	0x0800eed8
      }
      else
      {
        ret = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2200      	movs	r2, #0
 800aab4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aab6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3730      	adds	r7, #48	@ 0x30
 800aabe:	46bd      	mov	sp, r7
 800aac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00a      	beq.n	800ab32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	f003 0304 	and.w	r3, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	f003 0320 	and.w	r3, r3, #32
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01a      	beq.n	800abda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abc2:	d10a      	bne.n	800abda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	605a      	str	r2, [r3, #4]
  }
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b098      	sub	sp, #96	@ 0x60
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac18:	f7f8 f8d6 	bl	8002dc8 <HAL_GetTick>
 800ac1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d12f      	bne.n	800ac8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac34:	2200      	movs	r2, #0
 800ac36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f88e 	bl	800ad5c <UART_WaitOnFlagUntilTimeout>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d022      	beq.n	800ac8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4e:	e853 3f00 	ldrex	r3, [r3]
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac6c:	e841 2300 	strex	r3, r2, [r1]
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e6      	bne.n	800ac46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e063      	b.n	800ad54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0304 	and.w	r3, r3, #4
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	d149      	bne.n	800ad2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca2:	2200      	movs	r2, #0
 800aca4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f857 	bl	800ad5c <UART_WaitOnFlagUntilTimeout>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d03c      	beq.n	800ad2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	623b      	str	r3, [r7, #32]
   return(result);
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e6      	bne.n	800acb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad06:	61fa      	str	r2, [r7, #28]
 800ad08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	69b9      	ldr	r1, [r7, #24]
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	617b      	str	r3, [r7, #20]
   return(result);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e5      	bne.n	800ace6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e012      	b.n	800ad54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3758      	adds	r7, #88	@ 0x58
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad6c:	e04f      	b.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad74:	d04b      	beq.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad76:	f7f8 f827 	bl	8002dc8 <HAL_GetTick>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d302      	bcc.n	800ad8c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e04e      	b.n	800ae2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d037      	beq.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b80      	cmp	r3, #128	@ 0x80
 800ada2:	d034      	beq.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b40      	cmp	r3, #64	@ 0x40
 800ada8:	d031      	beq.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d110      	bne.n	800adda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2208      	movs	r2, #8
 800adbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f838 	bl	800ae36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2208      	movs	r2, #8
 800adca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e029      	b.n	800ae2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ade4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ade8:	d111      	bne.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f81e 	bl	800ae36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e00f      	b.n	800ae2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69da      	ldr	r2, [r3, #28]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4013      	ands	r3, r2
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d0a0      	beq.n	800ad6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b095      	sub	sp, #84	@ 0x54
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	e853 3f00 	ldrex	r3, [r3]
 800ae4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae64:	e841 2300 	strex	r3, r2, [r1]
 800ae68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1e6      	bne.n	800ae3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae86:	f023 0301 	bic.w	r3, r3, #1
 800ae8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e3      	bne.n	800ae70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d118      	bne.n	800aee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f023 0310 	bic.w	r3, r3, #16
 800aec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aece:	61bb      	str	r3, [r7, #24]
 800aed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6979      	ldr	r1, [r7, #20]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	613b      	str	r3, [r7, #16]
   return(result);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e6      	bne.n	800aeb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aef6:	bf00      	nop
 800aef8:	3754      	adds	r7, #84	@ 0x54
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af02:	b480      	push	{r7}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af10:	2b01      	cmp	r3, #1
 800af12:	d101      	bne.n	800af18 <HAL_UARTEx_DisableFifoMode+0x16>
 800af14:	2302      	movs	r3, #2
 800af16:	e027      	b.n	800af68 <HAL_UARTEx_DisableFifoMode+0x66>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2224      	movs	r2, #36	@ 0x24
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0201 	bic.w	r2, r2, #1
 800af3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2220      	movs	r2, #32
 800af5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af88:	2302      	movs	r3, #2
 800af8a:	e02d      	b.n	800afe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2224      	movs	r2, #36	@ 0x24
 800af98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f84f 	bl	800b06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b000:	2b01      	cmp	r3, #1
 800b002:	d101      	bne.n	800b008 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b004:	2302      	movs	r3, #2
 800b006:	e02d      	b.n	800b064 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2224      	movs	r2, #36	@ 0x24
 800b014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 0201 	bic.w	r2, r2, #1
 800b02e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	430a      	orrs	r2, r1
 800b042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f811 	bl	800b06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2220      	movs	r2, #32
 800b056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b08c:	e031      	b.n	800b0f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b08e:	2308      	movs	r3, #8
 800b090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b092:	2308      	movs	r3, #8
 800b094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	0e5b      	lsrs	r3, r3, #25
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	0f5b      	lsrs	r3, r3, #29
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	f003 0307 	and.w	r3, r3, #7
 800b0b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	7b3a      	ldrb	r2, [r7, #12]
 800b0ba:	4911      	ldr	r1, [pc, #68]	@ (800b100 <UARTEx_SetNbDataToProcess+0x94>)
 800b0bc:	5c8a      	ldrb	r2, [r1, r2]
 800b0be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0c2:	7b3a      	ldrb	r2, [r7, #12]
 800b0c4:	490f      	ldr	r1, [pc, #60]	@ (800b104 <UARTEx_SetNbDataToProcess+0x98>)
 800b0c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	7b7a      	ldrb	r2, [r7, #13]
 800b0d8:	4909      	ldr	r1, [pc, #36]	@ (800b100 <UARTEx_SetNbDataToProcess+0x94>)
 800b0da:	5c8a      	ldrb	r2, [r1, r2]
 800b0dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0e0:	7b7a      	ldrb	r2, [r7, #13]
 800b0e2:	4908      	ldr	r1, [pc, #32]	@ (800b104 <UARTEx_SetNbDataToProcess+0x98>)
 800b0e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b0f2:	bf00      	nop
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	0800eef0 	.word	0x0800eef0
 800b104:	0800eef8 	.word	0x0800eef8

0800b108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b110:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b114:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	b29b      	uxth	r3, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	b29b      	uxth	r3, r3
 800b126:	4013      	ands	r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	1d3b      	adds	r3, r7, #4
 800b148:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
	...

0800b17c <_ZN11adc_manager8adc_initEPh>:
 * Also starts internal ADC calibration and begins temperature ADC readings.
 *
 * @param filters_length Pointer to an array specifying the filter window length per channel.
 * @return HAL_OK if successful.
 */
HAL_StatusTypeDef adc_manager::adc_init(uint8_t* filters_length) {
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(adc_cap_, (uint32_t*)(&adc1_samples[0][0][0]), 64);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2240      	movs	r2, #64	@ 0x40
 800b18c:	4935      	ldr	r1, [pc, #212]	@ (800b264 <_ZN11adc_manager8adc_initEPh+0xe8>)
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f8 fb4e 	bl	8003830 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(adc_bat_, (uint32_t*)(&adc2_samples[0][0][0]), 96);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2260      	movs	r2, #96	@ 0x60
 800b19a:	4933      	ldr	r1, [pc, #204]	@ (800b268 <_ZN11adc_manager8adc_initEPh+0xec>)
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7f8 fb47 	bl	8003830 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(adc_temp_, ADC_SINGLE_ENDED);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	217f      	movs	r1, #127	@ 0x7f
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7f9 fcb9 	bl	8004b20 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(adc_temp_);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f8 fa58 	bl	8003668 <HAL_ADC_Start>

	for (int i = 0; i < 5; ++i) {
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	e046      	b.n	800b24c <_ZN11adc_manager8adc_initEPh+0xd0>
		filters[i].sum = 0;
 800b1be:	4a2b      	ldr	r2, [pc, #172]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	218c      	movs	r1, #140	@ 0x8c
 800b1c4:	fb01 f303 	mul.w	r3, r1, r3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3384      	adds	r3, #132	@ 0x84
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
		filters[i].index = 0;
 800b1d0:	4a26      	ldr	r2, [pc, #152]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	218c      	movs	r1, #140	@ 0x8c
 800b1d6:	fb01 f303 	mul.w	r3, r1, r3
 800b1da:	4413      	add	r3, r2
 800b1dc:	3381      	adds	r3, #129	@ 0x81
 800b1de:	2200      	movs	r2, #0
 800b1e0:	701a      	strb	r2, [r3, #0]
		filters[i].full = 0;
 800b1e2:	4a22      	ldr	r2, [pc, #136]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	218c      	movs	r1, #140	@ 0x8c
 800b1e8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3388      	adds	r3, #136	@ 0x88
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	701a      	strb	r2, [r3, #0]
		filters[i].length = filters_length[i];
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	7818      	ldrb	r0, [r3, #0]
 800b1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	218c      	movs	r1, #140	@ 0x8c
 800b202:	fb01 f303 	mul.w	r3, r1, r3
 800b206:	4413      	add	r3, r2
 800b208:	3380      	adds	r3, #128	@ 0x80
 800b20a:	4602      	mov	r2, r0
 800b20c:	701a      	strb	r2, [r3, #0]

		for (int j = 0; j < filters[i].length; j++) {
 800b20e:	2300      	movs	r3, #0
 800b210:	60bb      	str	r3, [r7, #8]
 800b212:	e00c      	b.n	800b22e <_ZN11adc_manager8adc_initEPh+0xb2>
			filters[i].window_filter[j] = 0;  // Initialize filter window to zero
 800b214:	4915      	ldr	r1, [pc, #84]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2246      	movs	r2, #70	@ 0x46
 800b21a:	fb03 f202 	mul.w	r2, r3, r2
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4413      	add	r3, r2
 800b222:	2200      	movs	r2, #0
 800b224:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < filters[i].length; j++) {
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3301      	adds	r3, #1
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	4a0f      	ldr	r2, [pc, #60]	@ (800b26c <_ZN11adc_manager8adc_initEPh+0xf0>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	218c      	movs	r1, #140	@ 0x8c
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	4413      	add	r3, r2
 800b23a:	3380      	adds	r3, #128	@ 0x80
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	4293      	cmp	r3, r2
 800b244:	dbe6      	blt.n	800b214 <_ZN11adc_manager8adc_initEPh+0x98>
	for (int i = 0; i < 5; ++i) {
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b04      	cmp	r3, #4
 800b250:	ddb5      	ble.n	800b1be <_ZN11adc_manager8adc_initEPh+0x42>
		}
	}
	set_gains_offsets();
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f80c 	bl	800b270 <_ZN11adc_manager17set_gains_offsetsEv>
	return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20000cf0 	.word	0x20000cf0
 800b268:	20000d70 	.word	0x20000d70
 800b26c:	20000e30 	.word	0x20000e30

0800b270 <_ZN11adc_manager17set_gains_offsetsEv>:
/**
 * @brief Sets per-channel gain and offset values for ADC compensation.
 *
 * These values are used to convert raw ADC readings into physical quantities (volts, amps).
 */
void adc_manager::set_gains_offsets() {
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	adc_gains[adc_names::V_cap] = VCAP_GAIN;
 800b278:	4b11      	ldr	r3, [pc, #68]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b27a:	4a12      	ldr	r2, [pc, #72]	@ (800b2c4 <_ZN11adc_manager17set_gains_offsetsEv+0x54>)
 800b27c:	605a      	str	r2, [r3, #4]
	adc_offsets[adc_names::V_cap] = VCAP_OFFSET;
 800b27e:	4b12      	ldr	r3, [pc, #72]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b280:	4a12      	ldr	r2, [pc, #72]	@ (800b2cc <_ZN11adc_manager17set_gains_offsetsEv+0x5c>)
 800b282:	605a      	str	r2, [r3, #4]

	adc_gains[adc_names::I_cap] = ICAP_GAIN;
 800b284:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b286:	4a12      	ldr	r2, [pc, #72]	@ (800b2d0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b288:	601a      	str	r2, [r3, #0]
	adc_offsets[adc_names::I_cap] = ICAP_OFFSET;
 800b28a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b28c:	4a11      	ldr	r2, [pc, #68]	@ (800b2d4 <_ZN11adc_manager17set_gains_offsetsEv+0x64>)
 800b28e:	601a      	str	r2, [r3, #0]

	adc_gains[adc_names::V_bat] = VBAT_GAIN;
 800b290:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b292:	4a0c      	ldr	r2, [pc, #48]	@ (800b2c4 <_ZN11adc_manager17set_gains_offsetsEv+0x54>)
 800b294:	609a      	str	r2, [r3, #8]
	adc_offsets[adc_names::V_bat] = VBAT_OFFSET;
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b298:	4a0f      	ldr	r2, [pc, #60]	@ (800b2d8 <_ZN11adc_manager17set_gains_offsetsEv+0x68>)
 800b29a:	609a      	str	r2, [r3, #8]

	adc_gains[adc_names::I_chassis] = ISOURCE_GAIN;
 800b29c:	4b08      	ldr	r3, [pc, #32]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b29e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b2a0:	60da      	str	r2, [r3, #12]
	adc_offsets[adc_names::I_chassis] = ISOURCE_OFFSET;
 800b2a2:	4b09      	ldr	r3, [pc, #36]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b2a4:	4a0d      	ldr	r2, [pc, #52]	@ (800b2dc <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 800b2a6:	60da      	str	r2, [r3, #12]

	adc_gains[adc_names::I_bat] = IBAT_GAIN;
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <_ZN11adc_manager17set_gains_offsetsEv+0x50>)
 800b2aa:	4a09      	ldr	r2, [pc, #36]	@ (800b2d0 <_ZN11adc_manager17set_gains_offsetsEv+0x60>)
 800b2ac:	611a      	str	r2, [r3, #16]
	adc_offsets[adc_names::I_bat] = IBAT_OFFSET;
 800b2ae:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <_ZN11adc_manager17set_gains_offsetsEv+0x58>)
 800b2b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b2dc <_ZN11adc_manager17set_gains_offsetsEv+0x6c>)
 800b2b2:	611a      	str	r2, [r3, #16]
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	200010f8 	.word	0x200010f8
 800b2c4:	3c113c47 	.word	0x3c113c47
 800b2c8:	2000110c 	.word	0x2000110c
 800b2cc:	3f08d2ef 	.word	0x3f08d2ef
 800b2d0:	bb840840 	.word	0xbb840840
 800b2d4:	40ff4be4 	.word	0x40ff4be4
 800b2d8:	3f162fba 	.word	0x3f162fba
 800b2dc:	41004afc 	.word	0x41004afc

0800b2e0 <_Z11initCANCommP19FDCAN_HandleTypeDef>:
 * This function sets up the CAN ID filters, enables relevant interrupts,
 * configures delay compensation, and starts the FDCAN interface.
 *
 * @param fdcan_ Pointer to the FDCAN handle to initialize.
 */
void initCANComm(FDCAN_HandleTypeDef* fdcan_) {
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	@ 0x28
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	6078      	str	r0, [r7, #4]
	MX_FDCAN3_Init();
 800b2e8:	f7f6 f9a2 	bl	8001630 <MX_FDCAN3_Init>

	FDCAN_FilterTypeDef can_filter;
	can_filter.IdType = FDCAN_STANDARD_ID;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60bb      	str	r3, [r7, #8]
	can_filter.FilterIndex = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60fb      	str	r3, [r7, #12]
	can_filter.FilterType = FDCAN_FILTER_DUAL;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	613b      	str	r3, [r7, #16]
	can_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
	can_filter.FilterID1 = CAN_NODE_ID;
 800b2fc:	2367      	movs	r3, #103	@ 0x67
 800b2fe:	61bb      	str	r3, [r7, #24]
	can_filter.FilterID2 = 0x7FF;
 800b300:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b304:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7fa fb71 	bl	80059f4 <HAL_FDCAN_ConfigFilter>

	can_filter.FilterIndex = 1;
 800b312:	2301      	movs	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
	can_filter.FilterID1 = 0x7FF;
 800b316:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b31a:	61bb      	str	r3, [r7, #24]
	can_filter.FilterID2 = 0x7FF;
 800b31c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b320:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigFilter(fdcan_, &can_filter);
 800b322:	f107 0308 	add.w	r3, r7, #8
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7fa fb63 	bl	80059f4 <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_ConfigGlobalFilter(fdcan_, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 800b32e:	2300      	movs	r3, #0
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	2202      	movs	r2, #2
 800b336:	2102      	movs	r1, #2
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7fa fbb5 	bl	8005aa8 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800b33e:	2200      	movs	r2, #0
 800b340:	2101      	movs	r1, #1
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7fa fd98 	bl	8005e78 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(fdcan_, FDCAN_IT_BUS_OFF, 0);
 800b348:	2200      	movs	r2, #0
 800b34a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7fa fd92 	bl	8005e78 <HAL_FDCAN_ActivateNotification>

	HAL_FDCAN_ConfigTxDelayCompensation(fdcan_, fdcan_->Init.DataPrescaler * fdcan_->Init.DataTimeSeg1, 0);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b35c:	fb02 f303 	mul.w	r3, r2, r3
 800b360:	2200      	movs	r2, #0
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fa fbd0 	bl	8005b0a <HAL_FDCAN_ConfigTxDelayCompensation>
	HAL_FDCAN_EnableTxDelayCompensation(fdcan_);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7fa fbef 	bl	8005b4e <HAL_FDCAN_EnableTxDelayCompensation>
	HAL_FDCAN_Start(fdcan_);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7fa fc0d 	bl	8005b90 <HAL_FDCAN_Start>
}
 800b376:	bf00      	nop
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <_ZN7CANComm14txHeaderConfigEv>:
/**
 * @brief Configures the CAN transmit header for sending power/energy feedback.
 *
 * Sets data frame format, DLC size, bitrate switch, and device ID.
 */
void CANComm::txHeaderConfig() {
 800b37e:	b480      	push	{r7}
 800b380:	b083      	sub	sp, #12
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	639a      	str	r2, [r3, #56]	@ 0x38
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	641a      	str	r2, [r3, #64]	@ 0x40
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b398:	645a      	str	r2, [r3, #68]	@ 0x44
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	649a      	str	r2, [r3, #72]	@ 0x48
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	64da      	str	r2, [r3, #76]	@ 0x4c
	TxHeader.MessageMarker = 0;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	651a      	str	r2, [r3, #80]	@ 0x50
	TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2206      	movs	r2, #6
 800b3b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	635a      	str	r2, [r3, #52]	@ 0x34
	TxHeader.Identifier = DEVC_NODE_ID;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2277      	movs	r2, #119	@ 0x77
 800b3bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <_ZN7CANComm11sendMessageEv>:
 * @brief Sends a CAN message containing supercap status.
 *
 * Computes instantaneous chassis power, normalizes capacitor voltage into an 8-bit energy buffer estimate,
 * and transmits it using FDCAN.
 */
void CANComm::sendMessage() {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	txMsg.chassis_power = chassis_voltage * battery_current;
 800b3d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b494 <_ZN7CANComm11sendMessageEv+0xc8>)
 800b3d6:	ed93 7a00 	vldr	s14, [r3]
 800b3da:	4b2f      	ldr	r3, [pc, #188]	@ (800b498 <_ZN7CANComm11sendMessageEv+0xcc>)
 800b3dc:	edd3 7a00 	vldr	s15, [r3]
 800b3e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	// Compute normalized energy percentage [0.0 - 1.0]
	float cap_buffer = 0.0f;
 800b3ea:	f04f 0300 	mov.w	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]
	if (cap_voltage > SUPERCAP_MIN_VOLTAGE) {
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	@ (800b49c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b3f2:	edd3 7a00 	vldr	s15, [r3]
 800b3f6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800b3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b402:	dd1a      	ble.n	800b43a <_ZN7CANComm11sendMessageEv+0x6e>
		if (cap_voltage >= SUPERCAP_MAX_VOLTAGE)
 800b404:	4b25      	ldr	r3, [pc, #148]	@ (800b49c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b406:	edd3 7a00 	vldr	s15, [r3]
 800b40a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800b4a0 <_ZN7CANComm11sendMessageEv+0xd4>
 800b40e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b416:	db03      	blt.n	800b420 <_ZN7CANComm11sendMessageEv+0x54>
			cap_buffer = 1.0f;
 800b418:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800b41c:	60fb      	str	r3, [r7, #12]
 800b41e:	e00c      	b.n	800b43a <_ZN7CANComm11sendMessageEv+0x6e>
		else
			cap_buffer = (cap_voltage - SUPERCAP_MIN_VOLTAGE) / (SUPERCAP_MAX_VOLTAGE - SUPERCAP_MIN_VOLTAGE);
 800b420:	4b1e      	ldr	r3, [pc, #120]	@ (800b49c <_ZN7CANComm11sendMessageEv+0xd0>)
 800b422:	edd3 7a00 	vldr	s15, [r3]
 800b426:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800b42a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b42e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800b4a4 <_ZN7CANComm11sendMessageEv+0xd8>
 800b432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b436:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	txMsg.cap_energy = cap_buffer > 1.0f ? 255 : cap_buffer * 255;
 800b43a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b43e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b442:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	dd01      	ble.n	800b450 <_ZN7CANComm11sendMessageEv+0x84>
 800b44c:	22ff      	movs	r2, #255	@ 0xff
 800b44e:	e00b      	b.n	800b468 <_ZN7CANComm11sendMessageEv+0x9c>
 800b450:	edd7 7a03 	vldr	s15, [r7, #12]
 800b454:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b4a8 <_ZN7CANComm11sendMessageEv+0xdc>
 800b458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b460:	edc7 7a00 	vstr	s15, [r7]
 800b464:	783b      	ldrb	r3, [r7, #0]
 800b466:	b2da      	uxtb	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	txMsg.error = 0;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

	HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, (uint8_t *)&txMsg);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3354      	adds	r3, #84	@ 0x54
 800b484:	461a      	mov	r2, r3
 800b486:	f7fa fbab 	bl	8005be0 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20001138 	.word	0x20001138
 800b498:	20001140 	.word	0x20001140
 800b49c:	20001134 	.word	0x20001134
 800b4a0:	41cc0000 	.word	0x41cc0000
 800b4a4:	41b40000 	.word	0x41b40000
 800b4a8:	437f0000 	.word	0x437f0000

0800b4ac <HAL_FDCAN_RxFifo0Callback>:
 *  - Updating the power limit and energy buffer reference
 *
 * @param hfdcan FDCAN peripheral instance
 * @param RxFifo0ITs Interrupt source bitmask
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b08c      	sub	sp, #48	@ 0x30
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan3 && RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a2c      	ldr	r2, [pc, #176]	@ (800b56c <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d151      	bne.n	800b562 <HAL_FDCAN_RxFifo0Callback+0xb6>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d14e      	bne.n	800b562 <HAL_FDCAN_RxFifo0Callback+0xb6>
		//debug blink
		HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 800b4c4:	2140      	movs	r1, #64	@ 0x40
 800b4c6:	482a      	ldr	r0, [pc, #168]	@ (800b570 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 800b4c8:	f7fb f9c2 	bl	8006850 <HAL_GPIO_TogglePin>

		FDCAN_RxHeaderTypeDef FDCAN_RxHeader;
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &FDCAN_RxHeader, (uint8_t *)&rxMsg);
 800b4cc:	f107 0208 	add.w	r2, r7, #8
 800b4d0:	4b28      	ldr	r3, [pc, #160]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b4d2:	2140      	movs	r1, #64	@ 0x40
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fa fbc7 	bl	8005c68 <HAL_FDCAN_GetRxMessage>

		if (FDCAN_RxHeader.Identifier == CAN_NODE_ID) {
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2b67      	cmp	r3, #103	@ 0x67
 800b4de:	d140      	bne.n	800b562 <HAL_FDCAN_RxFifo0Callback+0xb6>
			static bool last_enable = true;

			if (rxMsg.reset)
 800b4e0:	4b24      	ldr	r3, [pc, #144]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <HAL_FDCAN_RxFifo0Callback+0x40>
				softwareReset();
 800b4e8:	f000 fb72 	bl	800bbd0 <_Z13softwareResetv>

			if (!rxMsg.enable_module) {
 800b4ec:	4b21      	ldr	r3, [pc, #132]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <HAL_FDCAN_RxFifo0Callback+0x56>
				enable_supercap = false;
 800b4f4:	4b20      	ldr	r3, [pc, #128]	@ (800b578 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
				supercap_controller.stop_loop();
 800b4fa:	4820      	ldr	r0, [pc, #128]	@ (800b57c <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800b4fc:	f000 fb4c 	bl	800bb98 <_ZN24supercap_control_manager9stop_loopEv>
 800b500:	e00c      	b.n	800b51c <HAL_FDCAN_RxFifo0Callback+0x70>
			}
			else if (!last_enable) {
 800b502:	4b1f      	ldr	r3, [pc, #124]	@ (800b580 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	f083 0301 	eor.w	r3, r3, #1
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <HAL_FDCAN_RxFifo0Callback+0x70>
				enable_supercap = true;
 800b510:	4b19      	ldr	r3, [pc, #100]	@ (800b578 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800b512:	2201      	movs	r2, #1
 800b514:	701a      	strb	r2, [r3, #0]
				supercap_controller.start_loop();
 800b516:	4819      	ldr	r0, [pc, #100]	@ (800b57c <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800b518:	f000 faea 	bl	800baf0 <_ZN24supercap_control_manager10start_loopEv>
			}
			last_enable = rxMsg.enable_module;
 800b51c:	4b15      	ldr	r3, [pc, #84]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	bf14      	ite	ne
 800b524:	2301      	movne	r3, #1
 800b526:	2300      	moveq	r3, #0
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	4b15      	ldr	r3, [pc, #84]	@ (800b580 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800b52c:	701a      	strb	r2, [r3, #0]

			max_chassis_power = rxMsg.pow_limit;
 800b52e:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b530:	789a      	ldrb	r2, [r3, #2]
 800b532:	4b14      	ldr	r3, [pc, #80]	@ (800b584 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800b534:	701a      	strb	r2, [r3, #0]
			supercap_controller.set_ref_chassis_power(max_chassis_power);
 800b536:	4b13      	ldr	r3, [pc, #76]	@ (800b584 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b542:	eeb0 0a67 	vmov.f32	s0, s15
 800b546:	480d      	ldr	r0, [pc, #52]	@ (800b57c <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800b548:	f000 fc87 	bl	800be5a <_ZN24supercap_control_manager21set_ref_chassis_powerEf>
			energy_buff = rxMsg.energy_buffer;
 800b54c:	4b09      	ldr	r3, [pc, #36]	@ (800b574 <HAL_FDCAN_RxFifo0Callback+0xc8>)
 800b54e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b552:	b29b      	uxth	r3, r3
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55c:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 800b55e:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 800b562:	bf00      	nop
 800b564:	3730      	adds	r7, #48	@ 0x30
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200004a8 	.word	0x200004a8
 800b570:	48000800 	.word	0x48000800
 800b574:	20001120 	.word	0x20001120
 800b578:	2000112c 	.word	0x2000112c
 800b57c:	2000060c 	.word	0x2000060c
 800b580:	20000030 	.word	0x20000030
 800b584:	20000031 	.word	0x20000031
 800b588:	20001128 	.word	0x20001128

0800b58c <HAL_FDCAN_ErrorStatusCallback>:
 * Resets the CAN peripheral and reinitializes the communication settings.
 *
 * @param hfdcan Pointer to the affected CAN instance
 * @param ErrorStatusITs Interrupt flags (unused)
 */
void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
	MX_FDCAN3_Init();        // Reset CAN peripheral
 800b596:	f7f6 f84b 	bl	8001630 <MX_FDCAN3_Init>
	initCANComm(hfdcan);     // Reapply all settings and filters
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff fea0 	bl	800b2e0 <_Z11initCANCommP19FDCAN_HandleTypeDef>
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <__NVIC_SystemReset>:
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b5ac:	f3bf 8f4f 	dsb	sy
}
 800b5b0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b5b2:	4b06      	ldr	r3, [pc, #24]	@ (800b5cc <__NVIC_SystemReset+0x24>)
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b5ba:	4904      	ldr	r1, [pc, #16]	@ (800b5cc <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b5bc:	4b04      	ldr	r3, [pc, #16]	@ (800b5d0 <__NVIC_SystemReset+0x28>)
 800b5be:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b5c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b5c2:	f3bf 8f4f 	dsb	sy
}
 800b5c6:	bf00      	nop
    __NOP();
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <__NVIC_SystemReset+0x20>
 800b5cc:	e000ed00 	.word	0xe000ed00
 800b5d0:	05fa0004 	.word	0x05fa0004

0800b5d4 <_ZN24supercap_control_manager9init_loopEv>:
 * power, current, and voltage regulation of the supercapacitor buck-boost control system.
 * It prepares the system to safely start PWM generation and transitions into active loop mode.
 *
 * @return HAL_OK if initialization was successful.
 */
HAL_StatusTypeDef supercap_control_manager::init_loop(){
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	setup_pid_controllers();
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f825 	bl	800b62c <_ZN24supercap_control_manager21setup_pid_controllersEv>
	return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <_ZL17update_pid_maxpowv>:
 *
 * This function is used internally to update the maximum allowed output and integration range
 * for the chassis power PID controller. It ensures that the controller stays within
 * competition-legal limits by capping both the integral term and final output.
 */
static inline void update_pid_maxpow(){
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
	pid[0].IntegMax = max_chassis_power - 3;
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b624 <_ZL17update_pid_maxpowv+0x38>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	3b03      	subs	r3, #3
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b628 <_ZL17update_pid_maxpowv+0x3c>)
 800b600:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid[0].OutputMax = max_chassis_power - 3;
 800b604:	4b07      	ldr	r3, [pc, #28]	@ (800b624 <_ZL17update_pid_maxpowv+0x38>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	3b03      	subs	r3, #3
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b612:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <_ZL17update_pid_maxpowv+0x3c>)
 800b614:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800b618:	bf00      	nop
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000031 	.word	0x20000031
 800b628:	20001154 	.word	0x20001154

0800b62c <_ZN24supercap_control_manager21setup_pid_controllersEv>:
 * precomputed based on real-time readings to avoid unstable startup behavior.
 *
 * If `CALIBRATION_MODE` is disabled, this also starts the PWM gates using the computed
 * initial duty ratio and marks the system as initialized.
 */
void supercap_control_manager::setup_pid_controllers(){
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	// Battery power PID
	pid[0].ArmPID_Instance.Kp = P_BATTERY_KP;
 800b634:	4b77      	ldr	r3, [pc, #476]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b636:	4a78      	ldr	r2, [pc, #480]	@ (800b818 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1ec>)
 800b638:	619a      	str	r2, [r3, #24]
	pid[0].ArmPID_Instance.Ki = P_BATTERY_KI;
 800b63a:	4b76      	ldr	r3, [pc, #472]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b63c:	4a77      	ldr	r2, [pc, #476]	@ (800b81c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f0>)
 800b63e:	61da      	str	r2, [r3, #28]
	pid[0].ArmPID_Instance.Kd = P_BATTERY_KD;
 800b640:	4b74      	ldr	r3, [pc, #464]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b642:	4a77      	ldr	r2, [pc, #476]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b644:	621a      	str	r2, [r3, #32]
	pid[0].IntegMax = max_chassis_power - 3;
 800b646:	4b77      	ldr	r3, [pc, #476]	@ (800b824 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f8>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	3b03      	subs	r3, #3
 800b64c:	ee07 3a90 	vmov	s15, r3
 800b650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b654:	4b6f      	ldr	r3, [pc, #444]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b656:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	pid[0].OutputMax = max_chassis_power - 3;
 800b65a:	4b72      	ldr	r3, [pc, #456]	@ (800b824 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f8>)
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	3b03      	subs	r3, #3
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b668:	4b6a      	ldr	r3, [pc, #424]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b66a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	pid[0].IntegMin = P_BATTERY_MIN_OUTPUT;
 800b66e:	4b69      	ldr	r3, [pc, #420]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b670:	4a6d      	ldr	r2, [pc, #436]	@ (800b828 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1fc>)
 800b672:	629a      	str	r2, [r3, #40]	@ 0x28
	pid[0].OutputMin = P_BATTERY_MIN_OUTPUT;
 800b674:	4b67      	ldr	r3, [pc, #412]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b676:	4a6c      	ldr	r2, [pc, #432]	@ (800b828 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1fc>)
 800b678:	631a      	str	r2, [r3, #48]	@ 0x30

	// Supercap current PID
	pid[2].ArmPID_Instance.Kp = I_SUPERCAP_KP;
 800b67a:	4b66      	ldr	r3, [pc, #408]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b67c:	4a6b      	ldr	r2, [pc, #428]	@ (800b82c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x200>)
 800b67e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	pid[2].ArmPID_Instance.Ki = I_SUPERCAP_KI;
 800b682:	4b64      	ldr	r3, [pc, #400]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b684:	4a6a      	ldr	r2, [pc, #424]	@ (800b830 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x204>)
 800b686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	pid[2].ArmPID_Instance.Kd = I_SUPERCAP_KD;
 800b68a:	4b62      	ldr	r3, [pc, #392]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	pid[2].IntegMax = I_SUPERCAP_INTEG_MAX;
 800b694:	4b5f      	ldr	r3, [pc, #380]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b696:	4a67      	ldr	r2, [pc, #412]	@ (800b834 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x208>)
 800b698:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	pid[2].IntegMin = I_SUPERCAP_INTEG_MIN;
 800b69c:	4b5d      	ldr	r3, [pc, #372]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b69e:	4a66      	ldr	r2, [pc, #408]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b6a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	pid[2].OutputMax = I_SUPERCAP_MAX_OUTPUT;
 800b6a4:	4b5b      	ldr	r3, [pc, #364]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6a6:	4a63      	ldr	r2, [pc, #396]	@ (800b834 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x208>)
 800b6a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	pid[2].OutputMin = I_SUPERCAP_MIN_OUTPUT;
 800b6ac:	4b59      	ldr	r3, [pc, #356]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ae:	4a62      	ldr	r2, [pc, #392]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b6b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// Supercap over-voltage limit PID
	pid[3].ArmPID_Instance.Kp = V_SUPERCAPMAX_KP;
 800b6b4:	4b57      	ldr	r3, [pc, #348]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6b6:	4a5a      	ldr	r2, [pc, #360]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b6b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	pid[3].ArmPID_Instance.Ki = V_SUPERCAPMAX_KI;
 800b6bc:	4b55      	ldr	r3, [pc, #340]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6be:	4a5f      	ldr	r2, [pc, #380]	@ (800b83c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x210>)
 800b6c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	pid[3].ArmPID_Instance.Kd = V_SUPERCAPMAX_KD;
 800b6c4:	4b53      	ldr	r3, [pc, #332]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6c6:	4a56      	ldr	r2, [pc, #344]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b6c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	pid[3].IntegMax = V_SUPERCAPMAX_INTEG_MAX;
 800b6cc:	4b51      	ldr	r3, [pc, #324]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ce:	4a5c      	ldr	r2, [pc, #368]	@ (800b840 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x214>)
 800b6d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	pid[3].IntegMin = V_SUPERCAPMAX_INTEG_MIN;
 800b6d4:	4b4f      	ldr	r3, [pc, #316]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6d6:	4a5b      	ldr	r2, [pc, #364]	@ (800b844 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x218>)
 800b6d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	pid[3].OutputMax = V_SUPERCAPMAX_MAX_OUTPUT;
 800b6dc:	4b4d      	ldr	r3, [pc, #308]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6de:	4a58      	ldr	r2, [pc, #352]	@ (800b840 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x214>)
 800b6e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	pid[3].OutputMin = V_SUPERCAPMAX_MIN_OUTPUT;
 800b6e4:	4b4b      	ldr	r3, [pc, #300]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6e6:	4a57      	ldr	r2, [pc, #348]	@ (800b844 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x218>)
 800b6e8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

	// Supercap under-voltage limit PID
	pid[4].ArmPID_Instance.Kp = V_SUPERCAPMIN_KP;
 800b6ec:	4b49      	ldr	r3, [pc, #292]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6ee:	4a4c      	ldr	r2, [pc, #304]	@ (800b820 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1f4>)
 800b6f0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	pid[4].ArmPID_Instance.Ki = V_SUPERCAPMIN_KI;
 800b6f4:	4b47      	ldr	r3, [pc, #284]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6f6:	4a51      	ldr	r2, [pc, #324]	@ (800b83c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x210>)
 800b6f8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	pid[4].ArmPID_Instance.Kd = V_SUPERCAPMIN_KD;
 800b6fc:	4b45      	ldr	r3, [pc, #276]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b6fe:	f04f 0200 	mov.w	r2, #0
 800b702:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	pid[4].IntegMax = V_SUPERCAPMIN_INTEG_MAX;
 800b706:	4b43      	ldr	r3, [pc, #268]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b708:	4a4f      	ldr	r2, [pc, #316]	@ (800b848 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x21c>)
 800b70a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	pid[4].IntegMin = V_SUPERCAPMIN_INTEG_MIN;
 800b70e:	4b41      	ldr	r3, [pc, #260]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b710:	4a49      	ldr	r2, [pc, #292]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b712:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	pid[4].OutputMax = V_SUPERCAPMIN_MAX_OUTPUT;
 800b716:	4b3f      	ldr	r3, [pc, #252]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b718:	4a4b      	ldr	r2, [pc, #300]	@ (800b848 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x21c>)
 800b71a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	pid[4].OutputMin = V_SUPERCAPMIN_MIN_OUTPUT;
 800b71e:	4b3d      	ldr	r3, [pc, #244]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b720:	4a45      	ldr	r2, [pc, #276]	@ (800b838 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x20c>)
 800b722:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	// Initialize the PID controllers with CMSIS-DSP
	arm_pid_init_f32(&(pid[0].ArmPID_Instance), 1);
 800b726:	2101      	movs	r1, #1
 800b728:	483a      	ldr	r0, [pc, #232]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b72a:	f000 ff17 	bl	800c55c <arm_pid_init_f32>
	pid[0].ArmPID_Instance.state[2] = pid[0].IntegMax;
 800b72e:	4b39      	ldr	r3, [pc, #228]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b732:	4a38      	ldr	r2, [pc, #224]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b734:	6153      	str	r3, [r2, #20]

	arm_pid_init_f32(&(pid[2].ArmPID_Instance), 1);
 800b736:	2101      	movs	r1, #1
 800b738:	4844      	ldr	r0, [pc, #272]	@ (800b84c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x220>)
 800b73a:	f000 ff0f 	bl	800c55c <arm_pid_init_f32>

	// Estimate initial duty cycle using live voltage readings to avoid unsafe startup
	HAL_Delay(100);
 800b73e:	2064      	movs	r0, #100	@ 0x64
 800b740:	f7f7 fb4e 	bl	8002de0 <HAL_Delay>
	float initDutyRatio = 15.0;
 800b744:	4b42      	ldr	r3, [pc, #264]	@ (800b850 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x224>)
 800b746:	617b      	str	r3, [r7, #20]
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 800b748:	e02b      	b.n	800b7a2 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x176>
		volatile float cap_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);//NOT TEMPERATURE IF YOU WERE WONDERING
 800b74a:	4b42      	ldr	r3, [pc, #264]	@ (800b854 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x228>)
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b756:	4b40      	ldr	r3, [pc, #256]	@ (800b858 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x22c>)
 800b758:	edd3 7a01 	vldr	s15, [r3, #4]
 800b75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b760:	4b3e      	ldr	r3, [pc, #248]	@ (800b85c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x230>)
 800b762:	edd3 7a01 	vldr	s15, [r3, #4]
 800b766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b76a:	edc7 7a03 	vstr	s15, [r7, #12]
		volatile float bat_temp = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);//NOT TEMPERATURE IF YOU WERE WONDERING
 800b76e:	4b39      	ldr	r3, [pc, #228]	@ (800b854 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x228>)
 800b770:	889b      	ldrh	r3, [r3, #4]
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b77a:	4b37      	ldr	r3, [pc, #220]	@ (800b858 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x22c>)
 800b77c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b780:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b784:	4b35      	ldr	r3, [pc, #212]	@ (800b85c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x230>)
 800b786:	edd3 7a02 	vldr	s15, [r3, #8]
 800b78a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78e:	edc7 7a02 	vstr	s15, [r7, #8]
		initDutyRatio = cap_temp / bat_temp;
 800b792:	edd7 6a03 	vldr	s13, [r7, #12]
 800b796:	ed97 7a02 	vldr	s14, [r7, #8]
 800b79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b79e:	edc7 7a05 	vstr	s15, [r7, #20]
	while (initDutyRatio >= 2.0f || initDutyRatio <= 0.0f){
 800b7a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800b7aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b2:	daca      	bge.n	800b74a <_ZN24supercap_control_manager21setup_pid_controllersEv+0x11e>
 800b7b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c0:	d9c3      	bls.n	800b74a <_ZN24supercap_control_manager21setup_pid_controllersEv+0x11e>
	}
	pid[2].ArmPID_Instance.state[2] = initDutyRatio;
 800b7c2:	4a14      	ldr	r2, [pc, #80]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	67d3      	str	r3, [r2, #124]	@ 0x7c

	// Voltage clamps
	arm_pid_init_f32(&(pid[3].ArmPID_Instance), 1);
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4825      	ldr	r0, [pc, #148]	@ (800b860 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x234>)
 800b7cc:	f000 fec6 	bl	800c55c <arm_pid_init_f32>
	pid[3].ArmPID_Instance.state[2] = pid[3].IntegMax;
 800b7d0:	4b10      	ldr	r3, [pc, #64]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7d8:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	arm_pid_init_f32(&(pid[4].ArmPID_Instance), 1);
 800b7dc:	2101      	movs	r1, #1
 800b7de:	4821      	ldr	r0, [pc, #132]	@ (800b864 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x238>)
 800b7e0:	f000 febc 	bl	800c55c <arm_pid_init_f32>
	pid[4].ArmPID_Instance.state[2] = pid[4].IntegMin;
 800b7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b814 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x1e8>)
 800b7ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4

	if(!CALIBRATION_MODE){
		HAL_StatusTypeDef status = start_gates_pwm(initDutyRatio);
 800b7f0:	ed97 0a05 	vldr	s0, [r7, #20]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fa8d 	bl	800bd14 <_ZN24supercap_control_manager15start_gates_pwmEf>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	74fb      	strb	r3, [r7, #19]
		is_init = true;
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b868 <_ZN24supercap_control_manager21setup_pid_controllersEv+0x23c>)
 800b800:	2201      	movs	r2, #1
 800b802:	701a      	strb	r2, [r3, #0]
		in_loop = true;
 800b804:	4b19      	ldr	r3, [pc, #100]	@ (800b86c <_ZN24supercap_control_manager21setup_pid_controllersEv+0x240>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
	}
}
 800b80a:	bf00      	nop
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20001154 	.word	0x20001154
 800b818:	40766666 	.word	0x40766666
 800b81c:	3d449ba6 	.word	0x3d449ba6
 800b820:	3a83126f 	.word	0x3a83126f
 800b824:	20000031 	.word	0x20000031
 800b828:	c3c80000 	.word	0xc3c80000
 800b82c:	3ca9930c 	.word	0x3ca9930c
 800b830:	3966afcd 	.word	0x3966afcd
 800b834:	3fcf7cee 	.word	0x3fcf7cee
 800b838:	3e020c4a 	.word	0x3e020c4a
 800b83c:	3b23d70a 	.word	0x3b23d70a
 800b840:	3fcccccd 	.word	0x3fcccccd
 800b844:	3f80a3d7 	.word	0x3f80a3d7
 800b848:	3e374bc7 	.word	0x3e374bc7
 800b84c:	200011bc 	.word	0x200011bc
 800b850:	41700000 	.word	0x41700000
 800b854:	200010ec 	.word	0x200010ec
 800b858:	200010f8 	.word	0x200010f8
 800b85c:	2000110c 	.word	0x2000110c
 800b860:	200011f0 	.word	0x200011f0
 800b864:	20001224 	.word	0x20001224
 800b868:	2000114e 	.word	0x2000114e
 800b86c:	2000114f 	.word	0x2000114f

0800b870 <_ZL14moving_averageR15mov_avrg_filtert>:
 *
 * @param filter The filter state structure (holds index, window buffer, etc.)
 * @param new_sample The latest ADC sample to be added to the buffer
 * @return Filtered (smoothed) 16-bit average value
 */
static inline uint16_t moving_average(mov_avrg_filter& filter, uint16_t new_sample){
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	807b      	strh	r3, [r7, #2]
	filter.sum -= filter.window_filter[filter.index];
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 800b888:	4611      	mov	r1, r2
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b890:	1a9a      	subs	r2, r3, r2
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.sum += new_sample;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b89e:	887b      	ldrh	r3, [r7, #2]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	filter.window_filter[filter.index] = new_sample;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	887a      	ldrh	r2, [r7, #2]
 800b8b4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	filter.index += 1;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if(filter.index == filter.length){
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d107      	bne.n	800b8e8 <_ZL14moving_averageR15mov_avrg_filtert+0x78>
		filter.index = 0;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		filter.full = true;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	}
	if(filter.full)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d009      	beq.n	800b906 <_ZL14moving_averageR15mov_avrg_filtert+0x96>
		return (uint16_t)(filter.sum / filter.length);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	f892 2080 	ldrb.w	r2, [r2, #128]	@ 0x80
 800b8fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b902:	b29b      	uxth	r3, r3
 800b904:	e008      	b.n	800b918 <_ZL14moving_averageR15mov_avrg_filtert+0xa8>
	else
		return (uint16_t)(filter.sum / filter.index);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	f892 2081 	ldrb.w	r2, [r2, #129]	@ 0x81
 800b912:	fbb3 f3f2 	udiv	r3, r3, r2
 800b916:	b29b      	uxth	r3, r3
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <_ZL10sample_adcv>:
 *
 * This function determines which half of the DMA double-buffer is ready for each ADC,
 * averages multiple samples per channel (to reduce noise), and applies a moving average
 * filter to smooth the data before it's used for PID control and safety checks.
 */
static inline void sample_adc(){
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
	uint8_t Cap_HalfFull, Bat_HalfFull;

	// Determine current buffer for ADC1 (cap side)
	if(__HAL_DMA_GET_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1) == SET){
 800b92a:	4b67      	ldr	r3, [pc, #412]	@ (800bac8 <_ZL10sample_adcv+0x1a4>)
 800b92c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	4b66      	ldr	r3, [pc, #408]	@ (800bacc <_ZL10sample_adcv+0x1a8>)
 800b934:	429a      	cmp	r2, r3
 800b936:	d904      	bls.n	800b942 <_ZL10sample_adcv+0x1e>
 800b938:	4b65      	ldr	r3, [pc, #404]	@ (800bad0 <_ZL10sample_adcv+0x1ac>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	e003      	b.n	800b94a <_ZL10sample_adcv+0x26>
 800b942:	4b64      	ldr	r3, [pc, #400]	@ (800bad4 <_ZL10sample_adcv+0x1b0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0304 	and.w	r3, r3, #4
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	bf0c      	ite	eq
 800b94e:	2301      	moveq	r3, #1
 800b950:	2300      	movne	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d010      	beq.n	800b97a <_ZL10sample_adcv+0x56>
		__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_HT1);
 800b958:	4b5b      	ldr	r3, [pc, #364]	@ (800bac8 <_ZL10sample_adcv+0x1a4>)
 800b95a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	4b5a      	ldr	r3, [pc, #360]	@ (800bacc <_ZL10sample_adcv+0x1a8>)
 800b962:	429a      	cmp	r2, r3
 800b964:	d903      	bls.n	800b96e <_ZL10sample_adcv+0x4a>
 800b966:	4b5a      	ldr	r3, [pc, #360]	@ (800bad0 <_ZL10sample_adcv+0x1ac>)
 800b968:	2204      	movs	r2, #4
 800b96a:	605a      	str	r2, [r3, #4]
 800b96c:	e002      	b.n	800b974 <_ZL10sample_adcv+0x50>
 800b96e:	4b59      	ldr	r3, [pc, #356]	@ (800bad4 <_ZL10sample_adcv+0x1b0>)
 800b970:	2204      	movs	r2, #4
 800b972:	605a      	str	r2, [r3, #4]
		Cap_HalfFull = ADC_FIRST_BUFFER;
 800b974:	2300      	movs	r3, #0
 800b976:	73fb      	strb	r3, [r7, #15]
 800b978:	e001      	b.n	800b97e <_ZL10sample_adcv+0x5a>
	} else {
		Cap_HalfFull = ADC_SECOND_BUFFER;
 800b97a:	2301      	movs	r3, #1
 800b97c:	73fb      	strb	r3, [r7, #15]
	}

	// Determine current buffer for ADC2 (battery side)
	if(__HAL_DMA_GET_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1) == SET) {
 800b97e:	4b56      	ldr	r3, [pc, #344]	@ (800bad8 <_ZL10sample_adcv+0x1b4>)
 800b980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	4b51      	ldr	r3, [pc, #324]	@ (800bacc <_ZL10sample_adcv+0x1a8>)
 800b988:	429a      	cmp	r2, r3
 800b98a:	d904      	bls.n	800b996 <_ZL10sample_adcv+0x72>
 800b98c:	4b50      	ldr	r3, [pc, #320]	@ (800bad0 <_ZL10sample_adcv+0x1ac>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	e003      	b.n	800b99e <_ZL10sample_adcv+0x7a>
 800b996:	4b4f      	ldr	r3, [pc, #316]	@ (800bad4 <_ZL10sample_adcv+0x1b0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2301      	moveq	r3, #1
 800b9a4:	2300      	movne	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d010      	beq.n	800b9ce <_ZL10sample_adcv+0xaa>
		__HAL_DMA_CLEAR_FLAG(hadc2.DMA_Handle, DMA_FLAG_HT1);
 800b9ac:	4b4a      	ldr	r3, [pc, #296]	@ (800bad8 <_ZL10sample_adcv+0x1b4>)
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4b45      	ldr	r3, [pc, #276]	@ (800bacc <_ZL10sample_adcv+0x1a8>)
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d903      	bls.n	800b9c2 <_ZL10sample_adcv+0x9e>
 800b9ba:	4b45      	ldr	r3, [pc, #276]	@ (800bad0 <_ZL10sample_adcv+0x1ac>)
 800b9bc:	2204      	movs	r2, #4
 800b9be:	605a      	str	r2, [r3, #4]
 800b9c0:	e002      	b.n	800b9c8 <_ZL10sample_adcv+0xa4>
 800b9c2:	4b44      	ldr	r3, [pc, #272]	@ (800bad4 <_ZL10sample_adcv+0x1b0>)
 800b9c4:	2204      	movs	r2, #4
 800b9c6:	605a      	str	r2, [r3, #4]
		Bat_HalfFull = ADC_FIRST_BUFFER;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]
 800b9cc:	e001      	b.n	800b9d2 <_ZL10sample_adcv+0xae>
	} else {
		Bat_HalfFull = ADC_SECOND_BUFFER;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	73bb      	strb	r3, [r7, #14]
	}

	uint16_t sum=0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	81bb      	strh	r3, [r7, #12]

	// Average ADC1 samples
	for(uint8_t i = 0; i < ADC1_CHANNELS; i++){
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	72fb      	strb	r3, [r7, #11]
 800b9da:	e021      	b.n	800ba20 <_ZL10sample_adcv+0xfc>
		sum = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	72bb      	strb	r3, [r7, #10]
 800b9e4:	e00f      	b.n	800ba06 <_ZL10sample_adcv+0xe2>
			sum += adc1_samples[Cap_HalfFull][j][i];
 800b9e6:	7bf9      	ldrb	r1, [r7, #15]
 800b9e8:	7aba      	ldrb	r2, [r7, #10]
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
 800b9ec:	483b      	ldr	r0, [pc, #236]	@ (800badc <_ZL10sample_adcv+0x1b8>)
 800b9ee:	0109      	lsls	r1, r1, #4
 800b9f0:	440a      	add	r2, r1
 800b9f2:	0052      	lsls	r2, r2, #1
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800b9fa:	89bb      	ldrh	r3, [r7, #12]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800ba00:	7abb      	ldrb	r3, [r7, #10]
 800ba02:	3301      	adds	r3, #1
 800ba04:	72bb      	strb	r3, [r7, #10]
 800ba06:	7abb      	ldrb	r3, [r7, #10]
 800ba08:	2b0f      	cmp	r3, #15
 800ba0a:	d9ec      	bls.n	800b9e6 <_ZL10sample_adcv+0xc2>
		}
		ADC_sampled_data[i] = (sum >> 4);
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	89ba      	ldrh	r2, [r7, #12]
 800ba10:	0912      	lsrs	r2, r2, #4
 800ba12:	b291      	uxth	r1, r2
 800ba14:	4a32      	ldr	r2, [pc, #200]	@ (800bae0 <_ZL10sample_adcv+0x1bc>)
 800ba16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < ADC1_CHANNELS; i++){
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	72fb      	strb	r3, [r7, #11]
 800ba20:	7afb      	ldrb	r3, [r7, #11]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d9da      	bls.n	800b9dc <_ZL10sample_adcv+0xb8>
	}

	// Average ADC2 samples
	for(uint8_t i = 0; i < ADC2_CHANNELS ; i++){
 800ba26:	2300      	movs	r3, #0
 800ba28:	727b      	strb	r3, [r7, #9]
 800ba2a:	e027      	b.n	800ba7c <_ZL10sample_adcv+0x158>
		sum = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800ba30:	2300      	movs	r3, #0
 800ba32:	723b      	strb	r3, [r7, #8]
 800ba34:	e014      	b.n	800ba60 <_ZL10sample_adcv+0x13c>
			sum += adc2_samples[Bat_HalfFull][j][i];
 800ba36:	7bb9      	ldrb	r1, [r7, #14]
 800ba38:	7a3b      	ldrb	r3, [r7, #8]
 800ba3a:	7a78      	ldrb	r0, [r7, #9]
 800ba3c:	4c29      	ldr	r4, [pc, #164]	@ (800bae4 <_ZL10sample_adcv+0x1c0>)
 800ba3e:	461a      	mov	r2, r3
 800ba40:	0052      	lsls	r2, r2, #1
 800ba42:	441a      	add	r2, r3
 800ba44:	460b      	mov	r3, r1
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	440b      	add	r3, r1
 800ba4a:	011b      	lsls	r3, r3, #4
 800ba4c:	4413      	add	r3, r2
 800ba4e:	4403      	add	r3, r0
 800ba50:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800ba54:	89bb      	ldrh	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	81bb      	strh	r3, [r7, #12]
		for(uint8_t j = 0; j < ADC_BUFFER_DEPTH; j++){
 800ba5a:	7a3b      	ldrb	r3, [r7, #8]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	723b      	strb	r3, [r7, #8]
 800ba60:	7a3b      	ldrb	r3, [r7, #8]
 800ba62:	2b0f      	cmp	r3, #15
 800ba64:	d9e7      	bls.n	800ba36 <_ZL10sample_adcv+0x112>
		}
		ADC_sampled_data[i + ADC1_CHANNELS] = (sum >> 4);
 800ba66:	7a7b      	ldrb	r3, [r7, #9]
 800ba68:	3302      	adds	r3, #2
 800ba6a:	89ba      	ldrh	r2, [r7, #12]
 800ba6c:	0912      	lsrs	r2, r2, #4
 800ba6e:	b291      	uxth	r1, r2
 800ba70:	4a1b      	ldr	r2, [pc, #108]	@ (800bae0 <_ZL10sample_adcv+0x1bc>)
 800ba72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < ADC2_CHANNELS ; i++){
 800ba76:	7a7b      	ldrb	r3, [r7, #9]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	727b      	strb	r3, [r7, #9]
 800ba7c:	7a7b      	ldrb	r3, [r7, #9]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d9d4      	bls.n	800ba2c <_ZL10sample_adcv+0x108>
	}

	// Apply moving average filter on all channels
	for(uint8_t i = 0; i < (ADC1_CHANNELS + ADC2_CHANNELS) ; i++)
 800ba82:	2300      	movs	r3, #0
 800ba84:	71fb      	strb	r3, [r7, #7]
 800ba86:	e016      	b.n	800bab6 <_ZL10sample_adcv+0x192>
		ADC_filtered_data[i] = moving_average(filters[i], ADC_sampled_data[i]);
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	228c      	movs	r2, #140	@ 0x8c
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	4a15      	ldr	r2, [pc, #84]	@ (800bae8 <_ZL10sample_adcv+0x1c4>)
 800ba92:	441a      	add	r2, r3
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	4912      	ldr	r1, [pc, #72]	@ (800bae0 <_ZL10sample_adcv+0x1bc>)
 800ba98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ba9c:	79fc      	ldrb	r4, [r7, #7]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4610      	mov	r0, r2
 800baa2:	f7ff fee5 	bl	800b870 <_ZL14moving_averageR15mov_avrg_filtert>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	4b10      	ldr	r3, [pc, #64]	@ (800baec <_ZL10sample_adcv+0x1c8>)
 800baac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t i = 0; i < (ADC1_CHANNELS + ADC2_CHANNELS) ; i++)
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	3301      	adds	r3, #1
 800bab4:	71fb      	strb	r3, [r7, #7]
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	2b04      	cmp	r3, #4
 800baba:	d9e5      	bls.n	800ba88 <_ZL10sample_adcv+0x164>
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd90      	pop	{r4, r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000218 	.word	0x20000218
 800bacc:	40020094 	.word	0x40020094
 800bad0:	40020400 	.word	0x40020400
 800bad4:	40020000 	.word	0x40020000
 800bad8:	20000284 	.word	0x20000284
 800badc:	20000cf0 	.word	0x20000cf0
 800bae0:	20001144 	.word	0x20001144
 800bae4:	20000d70 	.word	0x20000d70
 800bae8:	20000e30 	.word	0x20000e30
 800baec:	200010ec 	.word	0x200010ec

0800baf0 <_ZN24supercap_control_manager10start_loopEv>:
 * Only runs if not in calibration mode. Reads current capacitor and battery voltages to estimate
 * a stable initial duty cycle for the buck-boost circuit, then starts gate switching.
 *
 * @return HAL_OK if started successfully, HAL_ERROR otherwise.
 */
HAL_StatusTypeDef supercap_control_manager::start_loop(){
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	if(!CALIBRATION_MODE) {
		in_loop = true;
 800baf8:	4b18      	ldr	r3, [pc, #96]	@ (800bb5c <_ZN24supercap_control_manager10start_loopEv+0x6c>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	701a      	strb	r2, [r3, #0]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bafe:	4b18      	ldr	r3, [pc, #96]	@ (800bb60 <_ZN24supercap_control_manager10start_loopEv+0x70>)
 800bb00:	885b      	ldrh	r3, [r3, #2]
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb0a:	4b16      	ldr	r3, [pc, #88]	@ (800bb64 <_ZN24supercap_control_manager10start_loopEv+0x74>)
 800bb0c:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb14:	4b14      	ldr	r3, [pc, #80]	@ (800bb68 <_ZN24supercap_control_manager10start_loopEv+0x78>)
 800bb16:	ed93 6a01 	vldr	s12, [r3, #4]
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 800bb1a:	4b11      	ldr	r3, [pc, #68]	@ (800bb60 <_ZN24supercap_control_manager10start_loopEv+0x70>)
 800bb1c:	889b      	ldrh	r3, [r3, #4]
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb26:	4b0f      	ldr	r3, [pc, #60]	@ (800bb64 <_ZN24supercap_control_manager10start_loopEv+0x74>)
 800bb28:	edd3 7a02 	vldr	s15, [r3, #8]
 800bb2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bb30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bb34:	ee37 7a27 	vadd.f32	s14, s14, s15
		                      GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], V_bat);
 800bb38:	4b0b      	ldr	r3, [pc, #44]	@ (800bb68 <_ZN24supercap_control_manager10start_loopEv+0x78>)
 800bb3a:	edd3 7a02 	vldr	s15, [r3, #8]
		float initDutyRatio = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap) /
 800bb3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb42:	edc7 7a03 	vstr	s15, [r7, #12]
		start_gates_pwm(initDutyRatio);
 800bb46:	ed97 0a03 	vldr	s0, [r7, #12]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f8e2 	bl	800bd14 <_ZN24supercap_control_manager15start_gates_pwmEf>
		return HAL_OK;
 800bb50:	2300      	movs	r3, #0
	} else {
		return HAL_ERROR;
	}
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	2000114f 	.word	0x2000114f
 800bb60:	200010ec 	.word	0x200010ec
 800bb64:	200010f8 	.word	0x200010f8
 800bb68:	2000110c 	.word	0x2000110c

0800bb6c <_ZL14stop_gates_pwmv>:
 * @brief Disables all HRTIM PWM outputs driving the power gates.
 *
 * Forces an output disable through the HRTIM register. Used in safety shutdown and
 * during idle transitions to prevent accidental switching activity.
 */
static inline void stop_gates_pwm(){
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
	hhrtim1.Instance->sCommonRegs.ODISR |= HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 |
 800bb70:	4b08      	ldr	r3, [pc, #32]	@ (800bb94 <_ZL14stop_gates_pwmv+0x28>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f8d3 3398 	ldr.w	r3, [r3, #920]	@ 0x398
 800bb78:	4a06      	ldr	r2, [pc, #24]	@ (800bb94 <_ZL14stop_gates_pwmv+0x28>)
 800bb7a:	6812      	ldr	r2, [r2, #0]
 800bb7c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bb80:	f043 0303 	orr.w	r3, r3, #3
 800bb84:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
	                                       HRTIM_OUTPUT_TE1 | HRTIM_OUTPUT_TE2;
}
 800bb88:	bf00      	nop
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	20000510 	.word	0x20000510

0800bb98 <_ZN24supercap_control_manager9stop_loopEv>:
/**
 * @brief Halts the control loop and disables PWM gate signals.
 *
 * This is the object method version. Sets loop flags to false and stops PWM via `stop_gates_pwm`.
 */
void supercap_control_manager::stop_loop(){
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	in_loop = false;
 800bba0:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <_ZN24supercap_control_manager9stop_loopEv+0x1c>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
	stop_gates_pwm();
 800bba6:	f7ff ffe1 	bl	800bb6c <_ZL14stop_gates_pwmv>
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	2000114f 	.word	0x2000114f

0800bbb8 <_ZL9stop_loopv>:
/**
 * @brief Internal version of loop stop (non-class variant).
 *
 * Exists in addition to the class method for situations where non-member access is needed.
 */
static inline void stop_loop(){
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
	in_loop = false;
 800bbbc:	4b03      	ldr	r3, [pc, #12]	@ (800bbcc <_ZL9stop_loopv+0x14>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	701a      	strb	r2, [r3, #0]
	stop_gates_pwm();
 800bbc2:	f7ff ffd3 	bl	800bb6c <_ZL14stop_gates_pwmv>
}
 800bbc6:	bf00      	nop
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	2000114f 	.word	0x2000114f

0800bbd0 <_Z13softwareResetv>:
 * @brief Forces a software reset of the MCU.
 *
 * Used during critical fault recovery to completely reboot the board. Disables interrupts and
 * enters an infinite loop until the system reset is triggered via NVIC.
 */
void softwareReset(){
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
	stop_loop();
 800bbd4:	f7ff fff0 	bl	800bbb8 <_ZL9stop_loopv>
  __ASM volatile ("cpsid i" : : : "memory");
 800bbd8:	b672      	cpsid	i
}
 800bbda:	bf00      	nop
	__disable_irq();
	while (true)
		NVIC_SystemReset();
 800bbdc:	f7ff fce4 	bl	800b5a8 <__NVIC_SystemReset>

0800bbe0 <_ZL9idle_modev>:
 * @brief Transitions the system into idle mode safely.
 *
 * Used during safety events or power-off conditions to gracefully exit the control loop.
 * Ensures gates are off and no control loop logic executes.
 */
static inline void idle_mode(){
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
	if(current_mode != idle){
 800bbe4:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <_ZL9idle_modev+0x20>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d007      	beq.n	800bbfc <_ZL9idle_modev+0x1c>
		stop_loop();
 800bbec:	f7ff ffe4 	bl	800bbb8 <_ZL9stop_loopv>
		current_mode = idle;
 800bbf0:	4b03      	ldr	r3, [pc, #12]	@ (800bc00 <_ZL9idle_modev+0x20>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
		in_loop = false;
 800bbf6:	4b03      	ldr	r3, [pc, #12]	@ (800bc04 <_ZL9idle_modev+0x24>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
	}
}
 800bbfc:	bf00      	nop
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000032 	.word	0x20000032
 800bc04:	2000114f 	.word	0x2000114f

0800bc08 <_ZL16update_dutyCyclef>:
 * Based on the current ratio, calculates the appropriate compare values for each timer output.
 * The cap and chassis sides are controlled separately using a normalized (0.0–1.0+) input ratio.
 *
 * @param dutyRatio Desired duty ratio (V_cap / V_bat), expected to be in [0.0, 2.0]
 */
static inline void update_dutyCycle(float dutyRatio){
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	ed87 0a01 	vstr	s0, [r7, #4]
	float D_chassis, D_cap;

	// Determine each half-bridge's duty cycle
	if(dutyRatio > 0.0f && dutyRatio <= 1.0f){
 800bc12:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1e:	dd13      	ble.n	800bc48 <_ZL16update_dutyCyclef+0x40>
 800bc20:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc30:	d80a      	bhi.n	800bc48 <_ZL16update_dutyCyclef+0x40>
		D_cap = 0.9f;
 800bc32:	4b34      	ldr	r3, [pc, #208]	@ (800bd04 <_ZL16update_dutyCyclef+0xfc>)
 800bc34:	613b      	str	r3, [r7, #16]
		D_chassis = dutyRatio * 0.9f;
 800bc36:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc3a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800bd08 <_ZL16update_dutyCyclef+0x100>
 800bc3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc42:	edc7 7a05 	vstr	s15, [r7, #20]
 800bc46:	e012      	b.n	800bc6e <_ZL16update_dutyCyclef+0x66>
	} else if(dutyRatio > 1.0f){
 800bc48:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc58:	dd09      	ble.n	800bc6e <_ZL16update_dutyCyclef+0x66>
		D_chassis = 0.9f;
 800bc5a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd04 <_ZL16update_dutyCyclef+0xfc>)
 800bc5c:	617b      	str	r3, [r7, #20]
		D_cap = 0.9f / dutyRatio;
 800bc5e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bd08 <_ZL16update_dutyCyclef+0x100>
 800bc62:	ed97 7a01 	vldr	s14, [r7, #4]
 800bc66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6a:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Compute compare values for cap side (Timer A)
	uint16_t TA_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_cap);
 800bc6e:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc72:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800bd0c <_ZL16update_dutyCyclef+0x104>
 800bc76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7e:	ee17 3a90 	vmov	r3, s15
 800bc82:	81fb      	strh	r3, [r7, #14]
	uint16_t TA_CmpOffsetHalf = (uint16_t)(TA_CmpOffset / 2);
 800bc84:	89fb      	ldrh	r3, [r7, #14]
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	81bb      	strh	r3, [r7, #12]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 800bc8a:	89bb      	ldrh	r3, [r7, #12]
 800bc8c:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 800bc90:	3368      	adds	r3, #104	@ 0x68
 800bc92:	89fa      	ldrh	r2, [r7, #14]
 800bc94:	f002 0201 	and.w	r2, r2, #1
 800bc98:	1a9a      	subs	r2, r3, r2
 800bc9a:	4b1d      	ldr	r3, [pc, #116]	@ (800bd10 <_ZL16update_dutyCyclef+0x108>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	                       HRTIM_HALF_PERIOD - TA_CmpOffsetHalf - (TA_CmpOffset % 2));
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2,
 800bca2:	89bb      	ldrh	r3, [r7, #12]
 800bca4:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 800bca8:	3368      	adds	r3, #104	@ 0x68
 800bcaa:	4a19      	ldr	r2, [pc, #100]	@ (800bd10 <_ZL16update_dutyCyclef+0x108>)
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
	                       HRTIM_HALF_PERIOD + TA_CmpOffsetHalf);

	// Compute compare values for chassis side (Timer E)
	uint16_t TE_CmpOffset = (uint16_t)(HRTIM_PERIOD * D_chassis);
 800bcb2:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcb6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800bd0c <_ZL16update_dutyCyclef+0x104>
 800bcba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc2:	ee17 3a90 	vmov	r3, s15
 800bcc6:	817b      	strh	r3, [r7, #10]
	uint16_t TE_CmpOffsetHalf = (uint16_t)(TE_CmpOffset / 2);
 800bcc8:	897b      	ldrh	r3, [r7, #10]
 800bcca:	085b      	lsrs	r3, r3, #1
 800bccc:	813b      	strh	r3, [r7, #8]

	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1,
 800bcce:	893b      	ldrh	r3, [r7, #8]
 800bcd0:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 800bcd4:	3368      	adds	r3, #104	@ 0x68
 800bcd6:	897a      	ldrh	r2, [r7, #10]
 800bcd8:	f002 0201 	and.w	r2, r2, #1
 800bcdc:	1a9a      	subs	r2, r3, r2
 800bcde:	4b0c      	ldr	r3, [pc, #48]	@ (800bd10 <_ZL16update_dutyCyclef+0x108>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
	                       HRTIM_HALF_PERIOD - TE_CmpOffsetHalf - (TE_CmpOffset % 2));
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2,
 800bce6:	893b      	ldrh	r3, [r7, #8]
 800bce8:	f503 4384 	add.w	r3, r3, #16896	@ 0x4200
 800bcec:	3368      	adds	r3, #104	@ 0x68
 800bcee:	4a08      	ldr	r2, [pc, #32]	@ (800bd10 <_ZL16update_dutyCyclef+0x108>)
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	f8c2 32a4 	str.w	r3, [r2, #676]	@ 0x2a4
	                       HRTIM_HALF_PERIOD + TE_CmpOffsetHalf);
}
 800bcf6:	bf00      	nop
 800bcf8:	371c      	adds	r7, #28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	3f666666 	.word	0x3f666666
 800bd08:	3f666666 	.word	0x3f666666
 800bd0c:	4704d000 	.word	0x4704d000
 800bd10:	20000510 	.word	0x20000510

0800bd14 <_ZN24supercap_control_manager15start_gates_pwmEf>:
 * It updates the gate PWM duty cycle and starts all 4 gate signals using the STM32 HRTIM peripheral.
 *
 * @param init_duty_cycle The duty cycle to start with, based on Vcap / Vbat ratio.
 * @return HAL_OK if HRTIM started successfully.
 */
HAL_StatusTypeDef supercap_control_manager::start_gates_pwm(float init_duty_cycle){
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	ed87 0a00 	vstr	s0, [r7]
	update_dutyCycle(init_duty_cycle);
 800bd20:	ed97 0a00 	vldr	s0, [r7]
 800bd24:	f7ff ff70 	bl	800bc08 <_ZL16update_dutyCyclef>
	return HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1|HRTIM_OUTPUT_TA2|HRTIM_OUTPUT_TE1|HRTIM_OUTPUT_TE2);
 800bd28:	f240 3103 	movw	r1, #771	@ 0x303
 800bd2c:	4803      	ldr	r0, [pc, #12]	@ (800bd3c <_ZN24supercap_control_manager15start_gates_pwmEf+0x28>)
 800bd2e:	f7fb fd42 	bl	80077b6 <HAL_HRTIM_WaveformOutputStart>
 800bd32:	4603      	mov	r3, r0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000510 	.word	0x20000510

0800bd40 <_ZL7get_PIDP12LoopCtrl_PIDfff>:
 * @param ref Desired reference value (setpoint).
 * @param feedback Current feedback value (measurement).
 * @param ff_model Optional feedforward term added to the output.
 * @return Final, clamped output value from the controller.
 */
static inline float get_PID(LoopCtrl_PID* pid_struct, float ref, float feedback, float ff_model){
 800bd40:	b480      	push	{r7}
 800bd42:	b08b      	sub	sp, #44	@ 0x2c
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd4c:	edc7 0a01 	vstr	s1, [r7, #4]
 800bd50:	ed87 1a00 	vstr	s2, [r7]
	float error = ref - feedback;
 800bd54:	ed97 7a02 	vldr	s14, [r7, #8]
 800bd58:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float output = arm_pid_f32(&(pid_struct->ArmPID_Instance), error) + ff_model;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6a:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	ed93 7a00 	vldr	s14, [r3]
 800bd72:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd76:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	edd3 6a01 	vldr	s13, [r3, #4]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd86:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800bd8a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	edd3 6a02 	vldr	s13, [r3, #8]
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800bda8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdac:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800bdc4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdc8:	ed97 7a00 	vldr	s14, [r7]
 800bdcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdd0:	edc7 7a08 	vstr	s15, [r7, #32]

	if(pid_struct->ArmPID_Instance.state[2] > pid_struct->IntegMax)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bde0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde8:	dd04      	ble.n	800bdf4 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xb4>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMax;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	615a      	str	r2, [r3, #20]
 800bdf2:	e00e      	b.n	800be12 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xd2>
	else if(pid_struct->ArmPID_Instance.state[2] < pid_struct->IntegMin)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	ed93 7a05 	vldr	s14, [r3, #20]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800be00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be08:	d503      	bpl.n	800be12 <_ZL7get_PIDP12LoopCtrl_PIDfff+0xd2>
		pid_struct->ArmPID_Instance.state[2] = pid_struct->IntegMin;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	615a      	str	r2, [r3, #20]

	if(output > pid_struct->OutputMax)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800be18:	ed97 7a08 	vldr	s14, [r7, #32]
 800be1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be24:	dd02      	ble.n	800be2c <_ZL7get_PIDP12LoopCtrl_PIDfff+0xec>
		return pid_struct->OutputMax;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	e00d      	b.n	800be48 <_ZL7get_PIDP12LoopCtrl_PIDfff+0x108>
	else if(output < pid_struct->OutputMin)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800be32:	ed97 7a08 	vldr	s14, [r7, #32]
 800be36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3e:	d502      	bpl.n	800be46 <_ZL7get_PIDP12LoopCtrl_PIDfff+0x106>
		return pid_struct->OutputMin;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be44:	e000      	b.n	800be48 <_ZL7get_PIDP12LoopCtrl_PIDfff+0x108>
	else
		return output;
 800be46:	6a3b      	ldr	r3, [r7, #32]
}
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eeb0 0a67 	vmov.f32	s0, s15
 800be50:	372c      	adds	r7, #44	@ 0x2c
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <_ZN24supercap_control_manager21set_ref_chassis_powerEf>:
 * Used by the application layer to define the desired output power level that the
 * control system should regulate around.
 *
 * @param ref_power_ Desired chassis power reference in watts.
 */
void supercap_control_manager::set_ref_chassis_power(float ref_power_){
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	ed87 0a00 	vstr	s0, [r7]
	ref_power = ref_power_;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <_ZL19safety_change_levelhh>:
 * Changes the level only if escalating or recovering from a serious state.
 *
 * @param Item Index of the safety item.
 * @param Level New safety level to apply.
 */
static inline void safety_change_level(uint8_t Item, uint8_t Level){
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	460a      	mov	r2, r1
 800be82:	71fb      	strb	r3, [r7, #7]
 800be84:	4613      	mov	r3, r2
 800be86:	71bb      	strb	r3, [r7, #6]
	if((safetyItemLevel[Item] <= warning && safetyItemLevel[Item] != Level)
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	4a0f      	ldr	r2, [pc, #60]	@ (800bec8 <_ZL19safety_change_levelhh+0x50>)
 800be8c:	5cd3      	ldrb	r3, [r2, r3]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d805      	bhi.n	800be9e <_ZL19safety_change_levelhh+0x26>
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	4a0c      	ldr	r2, [pc, #48]	@ (800bec8 <_ZL19safety_change_levelhh+0x50>)
 800be96:	5cd3      	ldrb	r3, [r2, r3]
 800be98:	79ba      	ldrb	r2, [r7, #6]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d107      	bne.n	800beae <_ZL19safety_change_levelhh+0x36>
	|| (safetyItemLevel[Item] == runAway && Level == itsJoever))
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	4a09      	ldr	r2, [pc, #36]	@ (800bec8 <_ZL19safety_change_levelhh+0x50>)
 800bea2:	5cd3      	ldrb	r3, [r2, r3]
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d109      	bne.n	800bebc <_ZL19safety_change_levelhh+0x44>
 800bea8:	79bb      	ldrb	r3, [r7, #6]
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d106      	bne.n	800bebc <_ZL19safety_change_levelhh+0x44>
	{
		safetyItemLevel[Item] = Level;
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	4905      	ldr	r1, [pc, #20]	@ (800bec8 <_ZL19safety_change_levelhh+0x50>)
 800beb2:	79ba      	ldrb	r2, [r7, #6]
 800beb4:	54ca      	strb	r2, [r1, r3]
		safetyChangeTrigger = true;
 800beb6:	4b05      	ldr	r3, [pc, #20]	@ (800becc <_ZL19safety_change_levelhh+0x54>)
 800beb8:	2201      	movs	r2, #1
 800beba:	701a      	strb	r2, [r3, #0]
	}
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	2000125c 	.word	0x2000125c
 800becc:	20001150 	.word	0x20001150

0800bed0 <_ZL21safety_check_voltagesv>:
 * @brief Performs safety checks on both chassis and supercapacitor voltages.
 *
 * Uses counters for debounce behavior and disables the control loop if unsafe
 * conditions persist (too high or low voltage on either side).
 */
static inline void safety_check_voltages(){
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
	static uint16_t Vcap_counter = 0;

	static safetyLevelDef Vbat_status = safe;
	static safetyLevelDef Vcap_status = safe;

	float V_bat_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 800bed6:	4b66      	ldr	r3, [pc, #408]	@ (800c070 <_ZL21safety_check_voltagesv+0x1a0>)
 800bed8:	889b      	ldrh	r3, [r3, #4]
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bee2:	4b64      	ldr	r3, [pc, #400]	@ (800c074 <_ZL21safety_check_voltagesv+0x1a4>)
 800bee4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beec:	4b62      	ldr	r3, [pc, #392]	@ (800c078 <_ZL21safety_check_voltagesv+0x1a8>)
 800beee:	edd3 7a02 	vldr	s15, [r3, #8]
 800bef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bef6:	edc7 7a03 	vstr	s15, [r7, #12]
	float V_cap_ = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 800befa:	4b5d      	ldr	r3, [pc, #372]	@ (800c070 <_ZL21safety_check_voltagesv+0x1a0>)
 800befc:	885b      	ldrh	r3, [r3, #2]
 800befe:	ee07 3a90 	vmov	s15, r3
 800bf02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf06:	4b5b      	ldr	r3, [pc, #364]	@ (800c074 <_ZL21safety_check_voltagesv+0x1a4>)
 800bf08:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf10:	4b59      	ldr	r3, [pc, #356]	@ (800c078 <_ZL21safety_check_voltagesv+0x1a8>)
 800bf12:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf1a:	edc7 7a02 	vstr	s15, [r7, #8]

	if(V_bat_ > MAX_PMM_VOLTAGE || V_bat_ < MIN_PMM_VOLTAGE)
 800bf1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf22:	eeb3 7a0c 	vmov.f32	s14, #60	@ 0x41e00000  28.0
 800bf26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2e:	dc08      	bgt.n	800bf42 <_ZL21safety_check_voltagesv+0x72>
 800bf30:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf34:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800bf38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	d507      	bpl.n	800bf52 <_ZL21safety_check_voltagesv+0x82>
		Vbat_counter += 1000;
 800bf42:	4b4e      	ldr	r3, [pc, #312]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	4b4b      	ldr	r3, [pc, #300]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf4e:	801a      	strh	r2, [r3, #0]
 800bf50:	e009      	b.n	800bf66 <_ZL21safety_check_voltagesv+0x96>
	else if(Vbat_counter > 0)
 800bf52:	4b4a      	ldr	r3, [pc, #296]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <_ZL21safety_check_voltagesv+0x96>
		Vbat_counter--;
 800bf5a:	4b48      	ldr	r3, [pc, #288]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	4b46      	ldr	r3, [pc, #280]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf64:	801a      	strh	r2, [r3, #0]

	if(Vbat_counter == 0 && Vbat_status != safe)
 800bf66:	4b45      	ldr	r3, [pc, #276]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d107      	bne.n	800bf7e <_ZL21safety_check_voltagesv+0xae>
 800bf6e:	4b44      	ldr	r3, [pc, #272]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <_ZL21safety_check_voltagesv+0xae>
		Vbat_status = safe;
 800bf76:	4b42      	ldr	r3, [pc, #264]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	e00a      	b.n	800bf94 <_ZL21safety_check_voltagesv+0xc4>
	else if (Vbat_counter > 0 && Vbat_status != wtf)
 800bf7e:	4b3f      	ldr	r3, [pc, #252]	@ (800c07c <_ZL21safety_check_voltagesv+0x1ac>)
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d006      	beq.n	800bf94 <_ZL21safety_check_voltagesv+0xc4>
 800bf86:	4b3e      	ldr	r3, [pc, #248]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d002      	beq.n	800bf94 <_ZL21safety_check_voltagesv+0xc4>
		Vbat_status = wtf;
 800bf8e:	4b3c      	ldr	r3, [pc, #240]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800bf90:	2202      	movs	r2, #2
 800bf92:	701a      	strb	r2, [r3, #0]

	if(V_cap_ > V_SUPERCAPMAX_REF || V_cap_ < SUPERCAP_MIN_VOLTAGE) {
 800bf94:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf98:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800bf9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa4:	dc08      	bgt.n	800bfb8 <_ZL21safety_check_voltagesv+0xe8>
 800bfa6:	edd7 7a02 	vldr	s15, [r7, #8]
 800bfaa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800bfae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	d50c      	bpl.n	800bfd2 <_ZL21safety_check_voltagesv+0x102>
		if(Vcap_counter < 650)
 800bfb8:	4b32      	ldr	r3, [pc, #200]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	f240 2289 	movw	r2, #649	@ 0x289
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d810      	bhi.n	800bfe6 <_ZL21safety_check_voltagesv+0x116>
			Vcap_counter++;
 800bfc4:	4b2f      	ldr	r3, [pc, #188]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	4b2d      	ldr	r3, [pc, #180]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfce:	801a      	strh	r2, [r3, #0]
		if(Vcap_counter < 650)
 800bfd0:	e009      	b.n	800bfe6 <_ZL21safety_check_voltagesv+0x116>
	} else if(Vcap_counter > 0)
 800bfd2:	4b2c      	ldr	r3, [pc, #176]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <_ZL21safety_check_voltagesv+0x116>
		Vcap_counter--;
 800bfda:	4b2a      	ldr	r3, [pc, #168]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	4b28      	ldr	r3, [pc, #160]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfe4:	801a      	strh	r2, [r3, #0]

	if(Vcap_counter == 0 && Vcap_status != safe)
 800bfe6:	4b27      	ldr	r3, [pc, #156]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d107      	bne.n	800bffe <_ZL21safety_check_voltagesv+0x12e>
 800bfee:	4b26      	ldr	r3, [pc, #152]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <_ZL21safety_check_voltagesv+0x12e>
		Vcap_status = safe;
 800bff6:	4b24      	ldr	r3, [pc, #144]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	e00c      	b.n	800c018 <_ZL21safety_check_voltagesv+0x148>
	else if(Vcap_counter == 650 && Vcap_status != wtf)
 800bffe:	4b21      	ldr	r3, [pc, #132]	@ (800c084 <_ZL21safety_check_voltagesv+0x1b4>)
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	f240 228a 	movw	r2, #650	@ 0x28a
 800c006:	4293      	cmp	r3, r2
 800c008:	d106      	bne.n	800c018 <_ZL21safety_check_voltagesv+0x148>
 800c00a:	4b1f      	ldr	r3, [pc, #124]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d002      	beq.n	800c018 <_ZL21safety_check_voltagesv+0x148>
		Vcap_status = wtf;
 800c012:	4b1d      	ldr	r3, [pc, #116]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800c014:	2202      	movs	r2, #2
 800c016:	701a      	strb	r2, [r3, #0]

	uint8_t OutputLevel = (Vbat_status > Vcap_status ? Vbat_status : Vcap_status);
 800c018:	4b19      	ldr	r3, [pc, #100]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	4b1a      	ldr	r3, [pc, #104]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d902      	bls.n	800c02a <_ZL21safety_check_voltagesv+0x15a>
 800c024:	4b16      	ldr	r3, [pc, #88]	@ (800c080 <_ZL21safety_check_voltagesv+0x1b0>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	e001      	b.n	800c02e <_ZL21safety_check_voltagesv+0x15e>
 800c02a:	4b17      	ldr	r3, [pc, #92]	@ (800c088 <_ZL21safety_check_voltagesv+0x1b8>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]

	if(OutputLevel == safe && safetyItemLevel[voltageErr] != safe) {
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d107      	bne.n	800c046 <_ZL21safety_check_voltagesv+0x176>
 800c036:	4b15      	ldr	r3, [pc, #84]	@ (800c08c <_ZL21safety_check_voltagesv+0x1bc>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <_ZL21safety_check_voltagesv+0x176>
		safety_change_level(voltageErr, safe);
 800c03e:	2100      	movs	r1, #0
 800c040:	2000      	movs	r0, #0
 800c042:	f7ff ff19 	bl	800be78 <_ZL19safety_change_levelhh>
	}
	if(OutputLevel == wtf && safetyItemLevel[voltageErr] != wtf) {
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d10d      	bne.n	800c068 <_ZL21safety_check_voltagesv+0x198>
 800c04c:	4b0f      	ldr	r3, [pc, #60]	@ (800c08c <_ZL21safety_check_voltagesv+0x1bc>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d009      	beq.n	800c068 <_ZL21safety_check_voltagesv+0x198>
  __ASM volatile ("cpsid i" : : : "memory");
 800c054:	b672      	cpsid	i
}
 800c056:	bf00      	nop
		__disable_irq();
		idle_mode();
 800c058:	f7ff fdc2 	bl	800bbe0 <_ZL9idle_modev>
  __ASM volatile ("cpsie i" : : : "memory");
 800c05c:	b662      	cpsie	i
}
 800c05e:	bf00      	nop
		__enable_irq();
		safety_change_level(voltageErr, warning);
 800c060:	2101      	movs	r1, #1
 800c062:	2000      	movs	r0, #0
 800c064:	f7ff ff08 	bl	800be78 <_ZL19safety_change_levelhh>
	}
}
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	200010ec 	.word	0x200010ec
 800c074:	200010f8 	.word	0x200010f8
 800c078:	2000110c 	.word	0x2000110c
 800c07c:	20001264 	.word	0x20001264
 800c080:	20001268 	.word	0x20001268
 800c084:	20001266 	.word	0x20001266
 800c088:	20001269 	.word	0x20001269
 800c08c:	2000125c 	.word	0x2000125c

0800c090 <_ZL21safety_check_currentsv>:
 * If the current exceeds the defined safe limits, the system transitions into idle mode.
 *
 * Uses absolute values for current readings since direction doesn’t matter for safety.
 * Only acts if the current error hasn't already reached its most critical state.
 */
static inline void safety_check_currents(){
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
	static safetyLevelDef I_chassis_status = safe;
	static safetyLevelDef I_cap_status = safe;

	if (safetyItemLevel[currentErr] != itsJoever) {
 800c096:	4b3c      	ldr	r3, [pc, #240]	@ (800c188 <_ZL21safety_check_currentsv+0xf8>)
 800c098:	785b      	ldrb	r3, [r3, #1]
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d070      	beq.n	800c180 <_ZL21safety_check_currentsv+0xf0>
		float I_cap_  = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 800c09e:	4b3b      	ldr	r3, [pc, #236]	@ (800c18c <_ZL21safety_check_currentsv+0xfc>)
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0aa:	4b39      	ldr	r3, [pc, #228]	@ (800c190 <_ZL21safety_check_currentsv+0x100>)
 800c0ac:	edd3 7a00 	vldr	s15, [r3]
 800c0b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0b4:	4b37      	ldr	r3, [pc, #220]	@ (800c194 <_ZL21safety_check_currentsv+0x104>)
 800c0b6:	edd3 7a00 	vldr	s15, [r3]
 800c0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0be:	edc7 7a05 	vstr	s15, [r7, #20]
		float I_gateA = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_chassis], adc_names::I_chassis);
 800c0c2:	4b32      	ldr	r3, [pc, #200]	@ (800c18c <_ZL21safety_check_currentsv+0xfc>)
 800c0c4:	88db      	ldrh	r3, [r3, #6]
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0ce:	4b30      	ldr	r3, [pc, #192]	@ (800c190 <_ZL21safety_check_currentsv+0x100>)
 800c0d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c194 <_ZL21safety_check_currentsv+0x104>)
 800c0da:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e2:	edc7 7a04 	vstr	s15, [r7, #16]

		float GetIsource = fabsf(I_gateA);
 800c0e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0ea:	eef0 7ae7 	vabs.f32	s15, s15
 800c0ee:	edc7 7a03 	vstr	s15, [r7, #12]
		float GetIcap    = fabsf(I_cap_);
 800c0f2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0f6:	eef0 7ae7 	vabs.f32	s15, s15
 800c0fa:	edc7 7a02 	vstr	s15, [r7, #8]

		if (GetIsource >= SUPERCAP_CURRENT_SAFETY_MAX) I_chassis_status = wtf;
 800c0fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800c102:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800c198 <_ZL21safety_check_currentsv+0x108>
 800c106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10e:	db02      	blt.n	800c116 <_ZL21safety_check_currentsv+0x86>
 800c110:	4b22      	ldr	r3, [pc, #136]	@ (800c19c <_ZL21safety_check_currentsv+0x10c>)
 800c112:	2202      	movs	r2, #2
 800c114:	701a      	strb	r2, [r3, #0]
		if (GetIcap    >= SUPERCAP_CURRENT_SAFETY_MAX) I_cap_status = wtf;
 800c116:	edd7 7a02 	vldr	s15, [r7, #8]
 800c11a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c198 <_ZL21safety_check_currentsv+0x108>
 800c11e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c126:	db02      	blt.n	800c12e <_ZL21safety_check_currentsv+0x9e>
 800c128:	4b1d      	ldr	r3, [pc, #116]	@ (800c1a0 <_ZL21safety_check_currentsv+0x110>)
 800c12a:	2202      	movs	r2, #2
 800c12c:	701a      	strb	r2, [r3, #0]

		uint8_t OutputLevel = (I_chassis_status >= I_cap_status ? I_chassis_status : I_cap_status);
 800c12e:	4b1b      	ldr	r3, [pc, #108]	@ (800c19c <_ZL21safety_check_currentsv+0x10c>)
 800c130:	781a      	ldrb	r2, [r3, #0]
 800c132:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a0 <_ZL21safety_check_currentsv+0x110>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d302      	bcc.n	800c140 <_ZL21safety_check_currentsv+0xb0>
 800c13a:	4b18      	ldr	r3, [pc, #96]	@ (800c19c <_ZL21safety_check_currentsv+0x10c>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	e001      	b.n	800c144 <_ZL21safety_check_currentsv+0xb4>
 800c140:	4b17      	ldr	r3, [pc, #92]	@ (800c1a0 <_ZL21safety_check_currentsv+0x110>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	71fb      	strb	r3, [r7, #7]

		if (safetyItemLevel[currentErr] != OutputLevel) {
 800c146:	4b10      	ldr	r3, [pc, #64]	@ (800c188 <_ZL21safety_check_currentsv+0xf8>)
 800c148:	785b      	ldrb	r3, [r3, #1]
 800c14a:	79fa      	ldrb	r2, [r7, #7]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d017      	beq.n	800c180 <_ZL21safety_check_currentsv+0xf0>
			switch (safetyItemLevel[currentErr]) {
 800c150:	4b0d      	ldr	r3, [pc, #52]	@ (800c188 <_ZL21safety_check_currentsv+0xf8>)
 800c152:	785b      	ldrb	r3, [r3, #1]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d80d      	bhi.n	800c174 <_ZL21safety_check_currentsv+0xe4>
				case safe:
				case warning:
					switch (OutputLevel) {
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d001      	beq.n	800c162 <_ZL21safety_check_currentsv+0xd2>
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d106      	bne.n	800c170 <_ZL21safety_check_currentsv+0xe0>
  __ASM volatile ("cpsid i" : : : "memory");
 800c162:	b672      	cpsid	i
}
 800c164:	bf00      	nop
						case wtf:
						case itsJoever:
							__disable_irq();
							idle_mode();  // Enters a safe idle state to prevent hardware damage
 800c166:	f7ff fd3b 	bl	800bbe0 <_ZL9idle_modev>
  __ASM volatile ("cpsie i" : : : "memory");
 800c16a:	b662      	cpsie	i
}
 800c16c:	bf00      	nop
							__enable_irq();
							break;
 800c16e:	e000      	b.n	800c172 <_ZL21safety_check_currentsv+0xe2>
						default:
							break;
 800c170:	bf00      	nop
					}
					break;
 800c172:	e000      	b.n	800c176 <_ZL21safety_check_currentsv+0xe6>
				default:
					break;
 800c174:	bf00      	nop
			}
			safety_change_level(currentErr, OutputLevel);
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	4619      	mov	r1, r3
 800c17a:	2001      	movs	r0, #1
 800c17c:	f7ff fe7c 	bl	800be78 <_ZL19safety_change_levelhh>
		}
	}
}
 800c180:	bf00      	nop
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	2000125c 	.word	0x2000125c
 800c18c:	200010ec 	.word	0x200010ec
 800c190:	200010f8 	.word	0x200010f8
 800c194:	2000110c 	.word	0x2000110c
 800c198:	41a40000 	.word	0x41a40000
 800c19c:	2000126a 	.word	0x2000126a
 800c1a0:	2000126b 	.word	0x2000126b

0800c1a4 <_ZL17all_safety_checksv>:
/**
 * @brief Runs all safety checks for voltage and current conditions.
 *
 * Combines the voltage and current safety check routines if the system is initialized.
 */
static inline void all_safety_checks(){
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	af00      	add	r7, sp, #0
	if(is_init){
 800c1a8:	4b04      	ldr	r3, [pc, #16]	@ (800c1bc <_ZL17all_safety_checksv+0x18>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <_ZL17all_safety_checksv+0x14>
		safety_check_voltages();
 800c1b0:	f7ff fe8e 	bl	800bed0 <_ZL21safety_check_voltagesv>
		safety_check_currents();
 800c1b4:	f7ff ff6c 	bl	800c090 <_ZL21safety_check_currentsv>
	}
}
 800c1b8:	bf00      	nop
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	2000114e 	.word	0x2000114e

0800c1c0 <_ZL11loop_updatev>:
 *  - Reads filtered sensor values
 *  - Computes a desired supercap current to keep battery power below limits
 *  - Computes duty cycle through cascaded PID loops with voltage clamping
 *  - Updates PWM outputs accordingly
 */
static inline void loop_update(){
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af00      	add	r7, sp, #0
	all_safety_checks();
 800c1c6:	f7ff ffed 	bl	800c1a4 <_ZL17all_safety_checksv>

	cap_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_cap], adc_names::V_cap);
 800c1ca:	4b87      	ldr	r3, [pc, #540]	@ (800c3e8 <_ZL11loop_updatev+0x228>)
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	ee07 3a90 	vmov	s15, r3
 800c1d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1d6:	4b85      	ldr	r3, [pc, #532]	@ (800c3ec <_ZL11loop_updatev+0x22c>)
 800c1d8:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1e0:	4b83      	ldr	r3, [pc, #524]	@ (800c3f0 <_ZL11loop_updatev+0x230>)
 800c1e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1ea:	4b82      	ldr	r3, [pc, #520]	@ (800c3f4 <_ZL11loop_updatev+0x234>)
 800c1ec:	edc3 7a00 	vstr	s15, [r3]
	chassis_voltage = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::V_bat], adc_names::V_bat);
 800c1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800c3e8 <_ZL11loop_updatev+0x228>)
 800c1f2:	889b      	ldrh	r3, [r3, #4]
 800c1f4:	ee07 3a90 	vmov	s15, r3
 800c1f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1fc:	4b7b      	ldr	r3, [pc, #492]	@ (800c3ec <_ZL11loop_updatev+0x22c>)
 800c1fe:	edd3 7a02 	vldr	s15, [r3, #8]
 800c202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c206:	4b7a      	ldr	r3, [pc, #488]	@ (800c3f0 <_ZL11loop_updatev+0x230>)
 800c208:	edd3 7a02 	vldr	s15, [r3, #8]
 800c20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c210:	4b79      	ldr	r3, [pc, #484]	@ (800c3f8 <_ZL11loop_updatev+0x238>)
 800c212:	edc3 7a00 	vstr	s15, [r3]
	cap_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_cap], adc_names::I_cap);
 800c216:	4b74      	ldr	r3, [pc, #464]	@ (800c3e8 <_ZL11loop_updatev+0x228>)
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c222:	4b72      	ldr	r3, [pc, #456]	@ (800c3ec <_ZL11loop_updatev+0x22c>)
 800c224:	edd3 7a00 	vldr	s15, [r3]
 800c228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c22c:	4b70      	ldr	r3, [pc, #448]	@ (800c3f0 <_ZL11loop_updatev+0x230>)
 800c22e:	edd3 7a00 	vldr	s15, [r3]
 800c232:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c236:	4b71      	ldr	r3, [pc, #452]	@ (800c3fc <_ZL11loop_updatev+0x23c>)
 800c238:	edc3 7a00 	vstr	s15, [r3]
	battery_current = GET_COMPENSATED_ADC(ADC_filtered_data[adc_names::I_bat], adc_names::I_bat);
 800c23c:	4b6a      	ldr	r3, [pc, #424]	@ (800c3e8 <_ZL11loop_updatev+0x228>)
 800c23e:	891b      	ldrh	r3, [r3, #8]
 800c240:	ee07 3a90 	vmov	s15, r3
 800c244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c248:	4b68      	ldr	r3, [pc, #416]	@ (800c3ec <_ZL11loop_updatev+0x22c>)
 800c24a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c252:	4b67      	ldr	r3, [pc, #412]	@ (800c3f0 <_ZL11loop_updatev+0x230>)
 800c254:	edd3 7a04 	vldr	s15, [r3, #16]
 800c258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c25c:	4b68      	ldr	r3, [pc, #416]	@ (800c400 <_ZL11loop_updatev+0x240>)
 800c25e:	edc3 7a00 	vstr	s15, [r3]

	if (in_loop){
 800c262:	4b68      	ldr	r3, [pc, #416]	@ (800c404 <_ZL11loop_updatev+0x244>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 80ba 	beq.w	800c3e0 <_ZL11loop_updatev+0x220>
		update_pid_maxpow();
 800c26c:	f7ff f9be 	bl	800b5ec <_ZL17update_pid_maxpowv>

		// Estimate desired chassis power (W)
		float ref_Pchassis = get_PID(&pid[pid_names::P_bat], max_chassis_power-3, chassis_voltage * battery_current, 0);
 800c270:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <_ZL11loop_updatev+0x248>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	3b03      	subs	r3, #3
 800c276:	ee07 3a90 	vmov	s15, r3
 800c27a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c27e:	4b5e      	ldr	r3, [pc, #376]	@ (800c3f8 <_ZL11loop_updatev+0x238>)
 800c280:	ed93 7a00 	vldr	s14, [r3]
 800c284:	4b5e      	ldr	r3, [pc, #376]	@ (800c400 <_ZL11loop_updatev+0x240>)
 800c286:	edd3 7a00 	vldr	s15, [r3]
 800c28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28e:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800c40c <_ZL11loop_updatev+0x24c>
 800c292:	eef0 0a67 	vmov.f32	s1, s15
 800c296:	eeb0 0a66 	vmov.f32	s0, s13
 800c29a:	485d      	ldr	r0, [pc, #372]	@ (800c410 <_ZL11loop_updatev+0x250>)
 800c29c:	f7ff fd50 	bl	800bd40 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c2a0:	ed87 0a04 	vstr	s0, [r7, #16]

		// Estimate supercap current needed to maintain ref_Pchassis
		float temp = ref_Pchassis / cap_voltage;
 800c2a4:	4b53      	ldr	r3, [pc, #332]	@ (800c3f4 <_ZL11loop_updatev+0x234>)
 800c2a6:	ed93 7a00 	vldr	s14, [r3]
 800c2aa:	edd7 6a04 	vldr	s13, [r7, #16]
 800c2ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b2:	edc7 7a07 	vstr	s15, [r7, #28]

		// Clamp intermediate target current
		if(temp > MAX_CAP_CURRENT)
 800c2b6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2ba:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800c2be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c6:	dd02      	ble.n	800c2ce <_ZL11loop_updatev+0x10e>
			temp = MAX_CAP_CURRENT;
 800c2c8:	4b52      	ldr	r3, [pc, #328]	@ (800c414 <_ZL11loop_updatev+0x254>)
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e00a      	b.n	800c2e4 <_ZL11loop_updatev+0x124>
		else if (temp < -MAX_CAP_CURRENT)
 800c2ce:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2d2:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
 800c2d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2de:	d501      	bpl.n	800c2e4 <_ZL11loop_updatev+0x124>
			temp = -MAX_CAP_CURRENT;
 800c2e0:	4b4d      	ldr	r3, [pc, #308]	@ (800c418 <_ZL11loop_updatev+0x258>)
 800c2e2:	61fb      	str	r3, [r7, #28]

		// Refine supercap current using ESR model
		float ref_icap = ref_Pchassis / (cap_voltage + ESR_VALUE * (temp - I_supercap_last));
 800c2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800c41c <_ZL11loop_updatev+0x25c>)
 800c2e6:	edd3 7a00 	vldr	s15, [r3]
 800c2ea:	ed97 7a07 	vldr	s14, [r7, #28]
 800c2ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2f2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800c420 <_ZL11loop_updatev+0x260>
 800c2f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c3f4 <_ZL11loop_updatev+0x234>)
 800c2fc:	edd3 7a00 	vldr	s15, [r3]
 800c300:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c304:	edd7 6a04 	vldr	s13, [r7, #16]
 800c308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30c:	edc7 7a06 	vstr	s15, [r7, #24]

		// Final current clamping
		if(ref_icap > MAX_CAP_CURRENT)
 800c310:	edd7 7a06 	vldr	s15, [r7, #24]
 800c314:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800c318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c320:	dd02      	ble.n	800c328 <_ZL11loop_updatev+0x168>
			ref_icap = MAX_CAP_CURRENT;
 800c322:	4b3c      	ldr	r3, [pc, #240]	@ (800c414 <_ZL11loop_updatev+0x254>)
 800c324:	61bb      	str	r3, [r7, #24]
 800c326:	e00a      	b.n	800c33e <_ZL11loop_updatev+0x17e>
		else if(ref_icap < -MAX_CAP_CURRENT)
 800c328:	edd7 7a06 	vldr	s15, [r7, #24]
 800c32c:	eebb 7a02 	vmov.f32	s14, #178	@ 0xc1900000 -18.0
 800c330:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c338:	d501      	bpl.n	800c33e <_ZL11loop_updatev+0x17e>
			ref_icap = -MAX_CAP_CURRENT;
 800c33a:	4b37      	ldr	r3, [pc, #220]	@ (800c418 <_ZL11loop_updatev+0x258>)
 800c33c:	61bb      	str	r3, [r7, #24]

		icap_output = ref_icap;
 800c33e:	4a39      	ldr	r2, [pc, #228]	@ (800c424 <_ZL11loop_updatev+0x264>)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	6013      	str	r3, [r2, #0]
		I_supercap_last = ref_icap;
 800c344:	4a35      	ldr	r2, [pc, #212]	@ (800c41c <_ZL11loop_updatev+0x25c>)
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	6013      	str	r3, [r2, #0]

		// Cascade PID: get duty cycle from current loop
		float ref_duty_ratio = get_PID(&pid[pid_names::I_capa], ref_icap, cap_current, 0);
 800c34a:	4b2c      	ldr	r3, [pc, #176]	@ (800c3fc <_ZL11loop_updatev+0x23c>)
 800c34c:	edd3 7a00 	vldr	s15, [r3]
 800c350:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 800c40c <_ZL11loop_updatev+0x24c>
 800c354:	eef0 0a67 	vmov.f32	s1, s15
 800c358:	ed97 0a06 	vldr	s0, [r7, #24]
 800c35c:	4832      	ldr	r0, [pc, #200]	@ (800c428 <_ZL11loop_updatev+0x268>)
 800c35e:	f7ff fcef 	bl	800bd40 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c362:	ed87 0a03 	vstr	s0, [r7, #12]

		// Clamp duty cycle based on voltage thresholds
		float Vcapmax_ratio = get_PID(&pid[pid_names::V_cap_max], SUPERCAP_MAX_VOLTAGE, cap_voltage, 0);
 800c366:	4b23      	ldr	r3, [pc, #140]	@ (800c3f4 <_ZL11loop_updatev+0x234>)
 800c368:	edd3 7a00 	vldr	s15, [r3]
 800c36c:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 800c40c <_ZL11loop_updatev+0x24c>
 800c370:	eef0 0a67 	vmov.f32	s1, s15
 800c374:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800c42c <_ZL11loop_updatev+0x26c>
 800c378:	482d      	ldr	r0, [pc, #180]	@ (800c430 <_ZL11loop_updatev+0x270>)
 800c37a:	f7ff fce1 	bl	800bd40 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c37e:	ed87 0a02 	vstr	s0, [r7, #8]
		float Vcapmin_ratio = get_PID(&pid[pid_names::V_cap_min], SUPERCAP_MIN_VOLTAGE, cap_voltage, 0);
 800c382:	4b1c      	ldr	r3, [pc, #112]	@ (800c3f4 <_ZL11loop_updatev+0x234>)
 800c384:	edd3 7a00 	vldr	s15, [r3]
 800c388:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 800c40c <_ZL11loop_updatev+0x24c>
 800c38c:	eef0 0a67 	vmov.f32	s1, s15
 800c390:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800c394:	4827      	ldr	r0, [pc, #156]	@ (800c434 <_ZL11loop_updatev+0x274>)
 800c396:	f7ff fcd3 	bl	800bd40 <_ZL7get_PIDP12LoopCtrl_PIDfff>
 800c39a:	ed87 0a01 	vstr	s0, [r7, #4]

		float out_duty_ratio = 0.0;
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
		if(ref_duty_ratio > Vcapmax_ratio)
 800c3a4:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b4:	dd02      	ble.n	800c3bc <_ZL11loop_updatev+0x1fc>
			out_duty_ratio = Vcapmax_ratio;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	617b      	str	r3, [r7, #20]
 800c3ba:	e00d      	b.n	800c3d8 <_ZL11loop_updatev+0x218>
		else if (ref_duty_ratio < Vcapmin_ratio)
 800c3bc:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3cc:	d502      	bpl.n	800c3d4 <_ZL11loop_updatev+0x214>
			out_duty_ratio = Vcapmin_ratio;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	e001      	b.n	800c3d8 <_ZL11loop_updatev+0x218>
		else
			out_duty_ratio = ref_duty_ratio;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	617b      	str	r3, [r7, #20]

		update_dutyCycle(out_duty_ratio);
 800c3d8:	ed97 0a05 	vldr	s0, [r7, #20]
 800c3dc:	f7ff fc14 	bl	800bc08 <_ZL16update_dutyCyclef>
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	200010ec 	.word	0x200010ec
 800c3ec:	200010f8 	.word	0x200010f8
 800c3f0:	2000110c 	.word	0x2000110c
 800c3f4:	20001134 	.word	0x20001134
 800c3f8:	20001138 	.word	0x20001138
 800c3fc:	2000113c 	.word	0x2000113c
 800c400:	20001140 	.word	0x20001140
 800c404:	2000114f 	.word	0x2000114f
 800c408:	20000031 	.word	0x20000031
 800c40c:	00000000 	.word	0x00000000
 800c410:	20001154 	.word	0x20001154
 800c414:	41900000 	.word	0x41900000
 800c418:	c1900000 	.word	0xc1900000
 800c41c:	20001258 	.word	0x20001258
 800c420:	3e2e147b 	.word	0x3e2e147b
 800c424:	20001130 	.word	0x20001130
 800c428:	200011bc 	.word	0x200011bc
 800c42c:	41cc0000 	.word	0x41cc0000
 800c430:	200011f0 	.word	0x200011f0
 800c434:	20001224 	.word	0x20001224

0800c438 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>:
 * Clears error flags and restarts the ADC and DMA modules to restore normal operation.
 * Required to recover from transient ADC DMA overflows due to latency or missed callbacks.
 *
 * @param hadc Pointer to the ADC handle that experienced overrun.
 */
void AnalogSignal_ADCDMA_OVRRecovery(ADC_HandleTypeDef *hadc){
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
	__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2210      	movs	r2, #16
 800c446:	601a      	str	r2, [r3, #0]
	hadc->Instance->CFGR |= 0x00000001; // Enable DMA again
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68da      	ldr	r2, [r3, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0201 	orr.w	r2, r2, #1
 800c456:	60da      	str	r2, [r3, #12]

	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TE1);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	4b17      	ldr	r3, [pc, #92]	@ (800c4c0 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x88>)
 800c462:	429a      	cmp	r2, r3
 800c464:	d903      	bls.n	800c46e <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x36>
 800c466:	4b17      	ldr	r3, [pc, #92]	@ (800c4c4 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x8c>)
 800c468:	2208      	movs	r2, #8
 800c46a:	605a      	str	r2, [r3, #4]
 800c46c:	e002      	b.n	800c474 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x3c>
 800c46e:	4b16      	ldr	r3, [pc, #88]	@ (800c4c8 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x90>)
 800c470:	2208      	movs	r2, #8
 800c472:	605a      	str	r2, [r3, #4]
	hadc->DMA_Handle->Instance->CCR |= 0x00000001; // Re-enable DMA
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0201 	orr.w	r2, r2, #1
 800c486:	601a      	str	r2, [r3, #0]

	// Wait until ADC is ready again
	while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL) {
 800c488:	bf00      	nop
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b01      	cmp	r3, #1
 800c496:	bf14      	ite	ne
 800c498:	2301      	movne	r3, #1
 800c49a:	2300      	moveq	r3, #0
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1f3      	bne.n	800c48a <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef+0x52>
		// spin until ready
	}

	hadc->Instance->CR |= 0x00000004; // Start ADC again
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f042 0204 	orr.w	r2, r2, #4
 800c4b0:	609a      	str	r2, [r3, #8]
}
 800c4b2:	bf00      	nop
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	40020094 	.word	0x40020094
 800c4c4:	40020400 	.word	0x40020400
 800c4c8:	40020000 	.word	0x40020000

0800c4cc <HAL_HRTIM_RepetitionEventCallback>:
 * of current, power, and duty cycles for the supercap management system.
 *
 * @param hhrtim Pointer to the HRTIM handle (unused here).
 * @param TimerIdx Index of the timer triggering the event (unused).
 */
extern "C" void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx){
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	uint8_t ADC_OVR_Flag = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	73fb      	strb	r3, [r7, #15]

	// Check and recover ADC1 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_OVR) == 1UL) {
 800c4da:	4b1d      	ldr	r3, [pc, #116]	@ (800c550 <HAL_HRTIM_RepetitionEventCallback+0x84>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0310 	and.w	r3, r3, #16
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2301      	moveq	r3, #1
 800c4ea:	2300      	movne	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	bf0c      	ite	eq
 800c4f2:	2301      	moveq	r3, #1
 800c4f4:	2300      	movne	r3, #0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d004      	beq.n	800c506 <HAL_HRTIM_RepetitionEventCallback+0x3a>
		AnalogSignal_ADCDMA_OVRRecovery(&hadc1);
 800c4fc:	4814      	ldr	r0, [pc, #80]	@ (800c550 <HAL_HRTIM_RepetitionEventCallback+0x84>)
 800c4fe:	f7ff ff9b 	bl	800c438 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag = 1;
 800c502:	2301      	movs	r3, #1
 800c504:	73fb      	strb	r3, [r7, #15]
	}

	// Check and recover ADC2 if it overflowed
	if (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_OVR) == 1UL) {
 800c506:	4b13      	ldr	r3, [pc, #76]	@ (800c554 <HAL_HRTIM_RepetitionEventCallback+0x88>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0310 	and.w	r3, r3, #16
 800c510:	2b10      	cmp	r3, #16
 800c512:	bf0c      	ite	eq
 800c514:	2301      	moveq	r3, #1
 800c516:	2300      	movne	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	bf0c      	ite	eq
 800c51e:	2301      	moveq	r3, #1
 800c520:	2300      	movne	r3, #0
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <HAL_HRTIM_RepetitionEventCallback+0x66>
		AnalogSignal_ADCDMA_OVRRecovery(&hadc2);
 800c528:	480a      	ldr	r0, [pc, #40]	@ (800c554 <HAL_HRTIM_RepetitionEventCallback+0x88>)
 800c52a:	f7ff ff85 	bl	800c438 <_Z31AnalogSignal_ADCDMA_OVRRecoveryP17ADC_HandleTypeDef>
		ADC_OVR_Flag = 1;
 800c52e:	2301      	movs	r3, #1
 800c530:	73fb      	strb	r3, [r7, #15]
	}

	// Continue normal control loop only if no overflow occurred
	if (ADC_OVR_Flag == 0) {
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d107      	bne.n	800c548 <HAL_HRTIM_RepetitionEventCallback+0x7c>
		sample_adc();
 800c538:	f7ff f9f4 	bl	800b924 <_ZL10sample_adcv>
		if (is_init) {
 800c53c:	4b06      	ldr	r3, [pc, #24]	@ (800c558 <HAL_HRTIM_RepetitionEventCallback+0x8c>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <HAL_HRTIM_RepetitionEventCallback+0x7c>
			loop_update();  // Core of supercap control logic
 800c544:	f7ff fe3c 	bl	800c1c0 <_ZL11loop_updatev>
		}
	}
}
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20000218 	.word	0x20000218
 800c554:	20000284 	.word	0x20000284
 800c558:	2000114e 	.word	0x2000114e

0800c55c <arm_pid_init_f32>:
 800c55c:	edd0 6a08 	vldr	s13, [r0, #32]
 800c560:	edd0 7a06 	vldr	s15, [r0, #24]
 800c564:	ed90 7a07 	vldr	s14, [r0, #28]
 800c568:	edc0 6a02 	vstr	s13, [r0, #8]
 800c56c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c570:	ee36 6aa6 	vadd.f32	s12, s13, s13
 800c574:	eef1 7a67 	vneg.f32	s15, s15
 800c578:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c57c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c580:	ed80 7a00 	vstr	s14, [r0]
 800c584:	edc0 7a01 	vstr	s15, [r0, #4]
 800c588:	b901      	cbnz	r1, 800c58c <arm_pid_init_f32+0x30>
 800c58a:	4770      	bx	lr
 800c58c:	2300      	movs	r3, #0
 800c58e:	60c3      	str	r3, [r0, #12]
 800c590:	6103      	str	r3, [r0, #16]
 800c592:	6143      	str	r3, [r0, #20]
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <__cvt>:
 800c598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c59c:	ec57 6b10 	vmov	r6, r7, d0
 800c5a0:	2f00      	cmp	r7, #0
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	bfbb      	ittet	lt
 800c5aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c5ae:	461f      	movlt	r7, r3
 800c5b0:	2300      	movge	r3, #0
 800c5b2:	232d      	movlt	r3, #45	@ 0x2d
 800c5b4:	700b      	strb	r3, [r1, #0]
 800c5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c5bc:	4691      	mov	r9, r2
 800c5be:	f023 0820 	bic.w	r8, r3, #32
 800c5c2:	bfbc      	itt	lt
 800c5c4:	4632      	movlt	r2, r6
 800c5c6:	4616      	movlt	r6, r2
 800c5c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5cc:	d005      	beq.n	800c5da <__cvt+0x42>
 800c5ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c5d2:	d100      	bne.n	800c5d6 <__cvt+0x3e>
 800c5d4:	3401      	adds	r4, #1
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	e000      	b.n	800c5dc <__cvt+0x44>
 800c5da:	2103      	movs	r1, #3
 800c5dc:	ab03      	add	r3, sp, #12
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	ab02      	add	r3, sp, #8
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	ec47 6b10 	vmov	d0, r6, r7
 800c5e8:	4653      	mov	r3, sl
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	f000 fe3c 	bl	800d268 <_dtoa_r>
 800c5f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	d119      	bne.n	800c62c <__cvt+0x94>
 800c5f8:	f019 0f01 	tst.w	r9, #1
 800c5fc:	d00e      	beq.n	800c61c <__cvt+0x84>
 800c5fe:	eb00 0904 	add.w	r9, r0, r4
 800c602:	2200      	movs	r2, #0
 800c604:	2300      	movs	r3, #0
 800c606:	4630      	mov	r0, r6
 800c608:	4639      	mov	r1, r7
 800c60a:	f7f4 fa85 	bl	8000b18 <__aeabi_dcmpeq>
 800c60e:	b108      	cbz	r0, 800c614 <__cvt+0x7c>
 800c610:	f8cd 900c 	str.w	r9, [sp, #12]
 800c614:	2230      	movs	r2, #48	@ 0x30
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	454b      	cmp	r3, r9
 800c61a:	d31e      	bcc.n	800c65a <__cvt+0xc2>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c620:	1b5b      	subs	r3, r3, r5
 800c622:	4628      	mov	r0, r5
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	b004      	add	sp, #16
 800c628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c630:	eb00 0904 	add.w	r9, r0, r4
 800c634:	d1e5      	bne.n	800c602 <__cvt+0x6a>
 800c636:	7803      	ldrb	r3, [r0, #0]
 800c638:	2b30      	cmp	r3, #48	@ 0x30
 800c63a:	d10a      	bne.n	800c652 <__cvt+0xba>
 800c63c:	2200      	movs	r2, #0
 800c63e:	2300      	movs	r3, #0
 800c640:	4630      	mov	r0, r6
 800c642:	4639      	mov	r1, r7
 800c644:	f7f4 fa68 	bl	8000b18 <__aeabi_dcmpeq>
 800c648:	b918      	cbnz	r0, 800c652 <__cvt+0xba>
 800c64a:	f1c4 0401 	rsb	r4, r4, #1
 800c64e:	f8ca 4000 	str.w	r4, [sl]
 800c652:	f8da 3000 	ldr.w	r3, [sl]
 800c656:	4499      	add	r9, r3
 800c658:	e7d3      	b.n	800c602 <__cvt+0x6a>
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	9103      	str	r1, [sp, #12]
 800c65e:	701a      	strb	r2, [r3, #0]
 800c660:	e7d9      	b.n	800c616 <__cvt+0x7e>

0800c662 <__exponent>:
 800c662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c664:	2900      	cmp	r1, #0
 800c666:	bfba      	itte	lt
 800c668:	4249      	neglt	r1, r1
 800c66a:	232d      	movlt	r3, #45	@ 0x2d
 800c66c:	232b      	movge	r3, #43	@ 0x2b
 800c66e:	2909      	cmp	r1, #9
 800c670:	7002      	strb	r2, [r0, #0]
 800c672:	7043      	strb	r3, [r0, #1]
 800c674:	dd29      	ble.n	800c6ca <__exponent+0x68>
 800c676:	f10d 0307 	add.w	r3, sp, #7
 800c67a:	461d      	mov	r5, r3
 800c67c:	270a      	movs	r7, #10
 800c67e:	461a      	mov	r2, r3
 800c680:	fbb1 f6f7 	udiv	r6, r1, r7
 800c684:	fb07 1416 	mls	r4, r7, r6, r1
 800c688:	3430      	adds	r4, #48	@ 0x30
 800c68a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c68e:	460c      	mov	r4, r1
 800c690:	2c63      	cmp	r4, #99	@ 0x63
 800c692:	f103 33ff 	add.w	r3, r3, #4294967295
 800c696:	4631      	mov	r1, r6
 800c698:	dcf1      	bgt.n	800c67e <__exponent+0x1c>
 800c69a:	3130      	adds	r1, #48	@ 0x30
 800c69c:	1e94      	subs	r4, r2, #2
 800c69e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6a2:	1c41      	adds	r1, r0, #1
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	42ab      	cmp	r3, r5
 800c6a8:	d30a      	bcc.n	800c6c0 <__exponent+0x5e>
 800c6aa:	f10d 0309 	add.w	r3, sp, #9
 800c6ae:	1a9b      	subs	r3, r3, r2
 800c6b0:	42ac      	cmp	r4, r5
 800c6b2:	bf88      	it	hi
 800c6b4:	2300      	movhi	r3, #0
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	4403      	add	r3, r0
 800c6ba:	1a18      	subs	r0, r3, r0
 800c6bc:	b003      	add	sp, #12
 800c6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6c8:	e7ed      	b.n	800c6a6 <__exponent+0x44>
 800c6ca:	2330      	movs	r3, #48	@ 0x30
 800c6cc:	3130      	adds	r1, #48	@ 0x30
 800c6ce:	7083      	strb	r3, [r0, #2]
 800c6d0:	70c1      	strb	r1, [r0, #3]
 800c6d2:	1d03      	adds	r3, r0, #4
 800c6d4:	e7f1      	b.n	800c6ba <__exponent+0x58>
	...

0800c6d8 <_printf_float>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	b08d      	sub	sp, #52	@ 0x34
 800c6de:	460c      	mov	r4, r1
 800c6e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6e4:	4616      	mov	r6, r2
 800c6e6:	461f      	mov	r7, r3
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	f000 fcbb 	bl	800d064 <_localeconv_r>
 800c6ee:	6803      	ldr	r3, [r0, #0]
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7f3 fde4 	bl	80002c0 <strlen>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c700:	9005      	str	r0, [sp, #20]
 800c702:	3307      	adds	r3, #7
 800c704:	f023 0307 	bic.w	r3, r3, #7
 800c708:	f103 0208 	add.w	r2, r3, #8
 800c70c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c710:	f8d4 b000 	ldr.w	fp, [r4]
 800c714:	f8c8 2000 	str.w	r2, [r8]
 800c718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c71c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c720:	9307      	str	r3, [sp, #28]
 800c722:	f8cd 8018 	str.w	r8, [sp, #24]
 800c726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c72e:	4b9c      	ldr	r3, [pc, #624]	@ (800c9a0 <_printf_float+0x2c8>)
 800c730:	f04f 32ff 	mov.w	r2, #4294967295
 800c734:	f7f4 fa22 	bl	8000b7c <__aeabi_dcmpun>
 800c738:	bb70      	cbnz	r0, 800c798 <_printf_float+0xc0>
 800c73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c73e:	4b98      	ldr	r3, [pc, #608]	@ (800c9a0 <_printf_float+0x2c8>)
 800c740:	f04f 32ff 	mov.w	r2, #4294967295
 800c744:	f7f4 f9fc 	bl	8000b40 <__aeabi_dcmple>
 800c748:	bb30      	cbnz	r0, 800c798 <_printf_float+0xc0>
 800c74a:	2200      	movs	r2, #0
 800c74c:	2300      	movs	r3, #0
 800c74e:	4640      	mov	r0, r8
 800c750:	4649      	mov	r1, r9
 800c752:	f7f4 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 800c756:	b110      	cbz	r0, 800c75e <_printf_float+0x86>
 800c758:	232d      	movs	r3, #45	@ 0x2d
 800c75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75e:	4a91      	ldr	r2, [pc, #580]	@ (800c9a4 <_printf_float+0x2cc>)
 800c760:	4b91      	ldr	r3, [pc, #580]	@ (800c9a8 <_printf_float+0x2d0>)
 800c762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c766:	bf94      	ite	ls
 800c768:	4690      	movls	r8, r2
 800c76a:	4698      	movhi	r8, r3
 800c76c:	2303      	movs	r3, #3
 800c76e:	6123      	str	r3, [r4, #16]
 800c770:	f02b 0304 	bic.w	r3, fp, #4
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	f04f 0900 	mov.w	r9, #0
 800c77a:	9700      	str	r7, [sp, #0]
 800c77c:	4633      	mov	r3, r6
 800c77e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f000 f9d2 	bl	800cb2c <_printf_common>
 800c788:	3001      	adds	r0, #1
 800c78a:	f040 808d 	bne.w	800c8a8 <_printf_float+0x1d0>
 800c78e:	f04f 30ff 	mov.w	r0, #4294967295
 800c792:	b00d      	add	sp, #52	@ 0x34
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	4642      	mov	r2, r8
 800c79a:	464b      	mov	r3, r9
 800c79c:	4640      	mov	r0, r8
 800c79e:	4649      	mov	r1, r9
 800c7a0:	f7f4 f9ec 	bl	8000b7c <__aeabi_dcmpun>
 800c7a4:	b140      	cbz	r0, 800c7b8 <_printf_float+0xe0>
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bfbc      	itt	lt
 800c7ac:	232d      	movlt	r3, #45	@ 0x2d
 800c7ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7b2:	4a7e      	ldr	r2, [pc, #504]	@ (800c9ac <_printf_float+0x2d4>)
 800c7b4:	4b7e      	ldr	r3, [pc, #504]	@ (800c9b0 <_printf_float+0x2d8>)
 800c7b6:	e7d4      	b.n	800c762 <_printf_float+0x8a>
 800c7b8:	6863      	ldr	r3, [r4, #4]
 800c7ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c7be:	9206      	str	r2, [sp, #24]
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	d13b      	bne.n	800c83c <_printf_float+0x164>
 800c7c4:	2306      	movs	r3, #6
 800c7c6:	6063      	str	r3, [r4, #4]
 800c7c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6022      	str	r2, [r4, #0]
 800c7d0:	9303      	str	r3, [sp, #12]
 800c7d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c7d8:	ab09      	add	r3, sp, #36	@ 0x24
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	6861      	ldr	r1, [r4, #4]
 800c7de:	ec49 8b10 	vmov	d0, r8, r9
 800c7e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f7ff fed6 	bl	800c598 <__cvt>
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7f0:	2b47      	cmp	r3, #71	@ 0x47
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	d129      	bne.n	800c84a <_printf_float+0x172>
 800c7f6:	1cc8      	adds	r0, r1, #3
 800c7f8:	db02      	blt.n	800c800 <_printf_float+0x128>
 800c7fa:	6863      	ldr	r3, [r4, #4]
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	dd41      	ble.n	800c884 <_printf_float+0x1ac>
 800c800:	f1aa 0a02 	sub.w	sl, sl, #2
 800c804:	fa5f fa8a 	uxtb.w	sl, sl
 800c808:	3901      	subs	r1, #1
 800c80a:	4652      	mov	r2, sl
 800c80c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c810:	9109      	str	r1, [sp, #36]	@ 0x24
 800c812:	f7ff ff26 	bl	800c662 <__exponent>
 800c816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c818:	1813      	adds	r3, r2, r0
 800c81a:	2a01      	cmp	r2, #1
 800c81c:	4681      	mov	r9, r0
 800c81e:	6123      	str	r3, [r4, #16]
 800c820:	dc02      	bgt.n	800c828 <_printf_float+0x150>
 800c822:	6822      	ldr	r2, [r4, #0]
 800c824:	07d2      	lsls	r2, r2, #31
 800c826:	d501      	bpl.n	800c82c <_printf_float+0x154>
 800c828:	3301      	adds	r3, #1
 800c82a:	6123      	str	r3, [r4, #16]
 800c82c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c830:	2b00      	cmp	r3, #0
 800c832:	d0a2      	beq.n	800c77a <_printf_float+0xa2>
 800c834:	232d      	movs	r3, #45	@ 0x2d
 800c836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83a:	e79e      	b.n	800c77a <_printf_float+0xa2>
 800c83c:	9a06      	ldr	r2, [sp, #24]
 800c83e:	2a47      	cmp	r2, #71	@ 0x47
 800c840:	d1c2      	bne.n	800c7c8 <_printf_float+0xf0>
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1c0      	bne.n	800c7c8 <_printf_float+0xf0>
 800c846:	2301      	movs	r3, #1
 800c848:	e7bd      	b.n	800c7c6 <_printf_float+0xee>
 800c84a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c84e:	d9db      	bls.n	800c808 <_printf_float+0x130>
 800c850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c854:	d118      	bne.n	800c888 <_printf_float+0x1b0>
 800c856:	2900      	cmp	r1, #0
 800c858:	6863      	ldr	r3, [r4, #4]
 800c85a:	dd0b      	ble.n	800c874 <_printf_float+0x19c>
 800c85c:	6121      	str	r1, [r4, #16]
 800c85e:	b913      	cbnz	r3, 800c866 <_printf_float+0x18e>
 800c860:	6822      	ldr	r2, [r4, #0]
 800c862:	07d0      	lsls	r0, r2, #31
 800c864:	d502      	bpl.n	800c86c <_printf_float+0x194>
 800c866:	3301      	adds	r3, #1
 800c868:	440b      	add	r3, r1
 800c86a:	6123      	str	r3, [r4, #16]
 800c86c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c86e:	f04f 0900 	mov.w	r9, #0
 800c872:	e7db      	b.n	800c82c <_printf_float+0x154>
 800c874:	b913      	cbnz	r3, 800c87c <_printf_float+0x1a4>
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	07d2      	lsls	r2, r2, #31
 800c87a:	d501      	bpl.n	800c880 <_printf_float+0x1a8>
 800c87c:	3302      	adds	r3, #2
 800c87e:	e7f4      	b.n	800c86a <_printf_float+0x192>
 800c880:	2301      	movs	r3, #1
 800c882:	e7f2      	b.n	800c86a <_printf_float+0x192>
 800c884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c88a:	4299      	cmp	r1, r3
 800c88c:	db05      	blt.n	800c89a <_printf_float+0x1c2>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	6121      	str	r1, [r4, #16]
 800c892:	07d8      	lsls	r0, r3, #31
 800c894:	d5ea      	bpl.n	800c86c <_printf_float+0x194>
 800c896:	1c4b      	adds	r3, r1, #1
 800c898:	e7e7      	b.n	800c86a <_printf_float+0x192>
 800c89a:	2900      	cmp	r1, #0
 800c89c:	bfd4      	ite	le
 800c89e:	f1c1 0202 	rsble	r2, r1, #2
 800c8a2:	2201      	movgt	r2, #1
 800c8a4:	4413      	add	r3, r2
 800c8a6:	e7e0      	b.n	800c86a <_printf_float+0x192>
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	055a      	lsls	r2, r3, #21
 800c8ac:	d407      	bmi.n	800c8be <_printf_float+0x1e6>
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b8      	blx	r7
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d12b      	bne.n	800c914 <_printf_float+0x23c>
 800c8bc:	e767      	b.n	800c78e <_printf_float+0xb6>
 800c8be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8c2:	f240 80dd 	bls.w	800ca80 <_printf_float+0x3a8>
 800c8c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f7f4 f923 	bl	8000b18 <__aeabi_dcmpeq>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d033      	beq.n	800c93e <_printf_float+0x266>
 800c8d6:	4a37      	ldr	r2, [pc, #220]	@ (800c9b4 <_printf_float+0x2dc>)
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b8      	blx	r7
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	f43f af54 	beq.w	800c78e <_printf_float+0xb6>
 800c8e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8ea:	4543      	cmp	r3, r8
 800c8ec:	db02      	blt.n	800c8f4 <_printf_float+0x21c>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	07d8      	lsls	r0, r3, #31
 800c8f2:	d50f      	bpl.n	800c914 <_printf_float+0x23c>
 800c8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	f43f af45 	beq.w	800c78e <_printf_float+0xb6>
 800c904:	f04f 0900 	mov.w	r9, #0
 800c908:	f108 38ff 	add.w	r8, r8, #4294967295
 800c90c:	f104 0a1a 	add.w	sl, r4, #26
 800c910:	45c8      	cmp	r8, r9
 800c912:	dc09      	bgt.n	800c928 <_printf_float+0x250>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	079b      	lsls	r3, r3, #30
 800c918:	f100 8103 	bmi.w	800cb22 <_printf_float+0x44a>
 800c91c:	68e0      	ldr	r0, [r4, #12]
 800c91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c920:	4298      	cmp	r0, r3
 800c922:	bfb8      	it	lt
 800c924:	4618      	movlt	r0, r3
 800c926:	e734      	b.n	800c792 <_printf_float+0xba>
 800c928:	2301      	movs	r3, #1
 800c92a:	4652      	mov	r2, sl
 800c92c:	4631      	mov	r1, r6
 800c92e:	4628      	mov	r0, r5
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f af2b 	beq.w	800c78e <_printf_float+0xb6>
 800c938:	f109 0901 	add.w	r9, r9, #1
 800c93c:	e7e8      	b.n	800c910 <_printf_float+0x238>
 800c93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c940:	2b00      	cmp	r3, #0
 800c942:	dc39      	bgt.n	800c9b8 <_printf_float+0x2e0>
 800c944:	4a1b      	ldr	r2, [pc, #108]	@ (800c9b4 <_printf_float+0x2dc>)
 800c946:	2301      	movs	r3, #1
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	f43f af1d 	beq.w	800c78e <_printf_float+0xb6>
 800c954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c958:	ea59 0303 	orrs.w	r3, r9, r3
 800c95c:	d102      	bne.n	800c964 <_printf_float+0x28c>
 800c95e:	6823      	ldr	r3, [r4, #0]
 800c960:	07d9      	lsls	r1, r3, #31
 800c962:	d5d7      	bpl.n	800c914 <_printf_float+0x23c>
 800c964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c968:	4631      	mov	r1, r6
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b8      	blx	r7
 800c96e:	3001      	adds	r0, #1
 800c970:	f43f af0d 	beq.w	800c78e <_printf_float+0xb6>
 800c974:	f04f 0a00 	mov.w	sl, #0
 800c978:	f104 0b1a 	add.w	fp, r4, #26
 800c97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97e:	425b      	negs	r3, r3
 800c980:	4553      	cmp	r3, sl
 800c982:	dc01      	bgt.n	800c988 <_printf_float+0x2b0>
 800c984:	464b      	mov	r3, r9
 800c986:	e793      	b.n	800c8b0 <_printf_float+0x1d8>
 800c988:	2301      	movs	r3, #1
 800c98a:	465a      	mov	r2, fp
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f aefb 	beq.w	800c78e <_printf_float+0xb6>
 800c998:	f10a 0a01 	add.w	sl, sl, #1
 800c99c:	e7ee      	b.n	800c97c <_printf_float+0x2a4>
 800c99e:	bf00      	nop
 800c9a0:	7fefffff 	.word	0x7fefffff
 800c9a4:	0800ef00 	.word	0x0800ef00
 800c9a8:	0800ef04 	.word	0x0800ef04
 800c9ac:	0800ef08 	.word	0x0800ef08
 800c9b0:	0800ef0c 	.word	0x0800ef0c
 800c9b4:	0800ef10 	.word	0x0800ef10
 800c9b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9be:	4553      	cmp	r3, sl
 800c9c0:	bfa8      	it	ge
 800c9c2:	4653      	movge	r3, sl
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	4699      	mov	r9, r3
 800c9c8:	dc36      	bgt.n	800ca38 <_printf_float+0x360>
 800c9ca:	f04f 0b00 	mov.w	fp, #0
 800c9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9d2:	f104 021a 	add.w	r2, r4, #26
 800c9d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9d8:	9306      	str	r3, [sp, #24]
 800c9da:	eba3 0309 	sub.w	r3, r3, r9
 800c9de:	455b      	cmp	r3, fp
 800c9e0:	dc31      	bgt.n	800ca46 <_printf_float+0x36e>
 800c9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e4:	459a      	cmp	sl, r3
 800c9e6:	dc3a      	bgt.n	800ca5e <_printf_float+0x386>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	07da      	lsls	r2, r3, #31
 800c9ec:	d437      	bmi.n	800ca5e <_printf_float+0x386>
 800c9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f0:	ebaa 0903 	sub.w	r9, sl, r3
 800c9f4:	9b06      	ldr	r3, [sp, #24]
 800c9f6:	ebaa 0303 	sub.w	r3, sl, r3
 800c9fa:	4599      	cmp	r9, r3
 800c9fc:	bfa8      	it	ge
 800c9fe:	4699      	movge	r9, r3
 800ca00:	f1b9 0f00 	cmp.w	r9, #0
 800ca04:	dc33      	bgt.n	800ca6e <_printf_float+0x396>
 800ca06:	f04f 0800 	mov.w	r8, #0
 800ca0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca0e:	f104 0b1a 	add.w	fp, r4, #26
 800ca12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca14:	ebaa 0303 	sub.w	r3, sl, r3
 800ca18:	eba3 0309 	sub.w	r3, r3, r9
 800ca1c:	4543      	cmp	r3, r8
 800ca1e:	f77f af79 	ble.w	800c914 <_printf_float+0x23c>
 800ca22:	2301      	movs	r3, #1
 800ca24:	465a      	mov	r2, fp
 800ca26:	4631      	mov	r1, r6
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b8      	blx	r7
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	f43f aeae 	beq.w	800c78e <_printf_float+0xb6>
 800ca32:	f108 0801 	add.w	r8, r8, #1
 800ca36:	e7ec      	b.n	800ca12 <_printf_float+0x33a>
 800ca38:	4642      	mov	r2, r8
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	d1c2      	bne.n	800c9ca <_printf_float+0x2f2>
 800ca44:	e6a3      	b.n	800c78e <_printf_float+0xb6>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	9206      	str	r2, [sp, #24]
 800ca4e:	47b8      	blx	r7
 800ca50:	3001      	adds	r0, #1
 800ca52:	f43f ae9c 	beq.w	800c78e <_printf_float+0xb6>
 800ca56:	9a06      	ldr	r2, [sp, #24]
 800ca58:	f10b 0b01 	add.w	fp, fp, #1
 800ca5c:	e7bb      	b.n	800c9d6 <_printf_float+0x2fe>
 800ca5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d1c0      	bne.n	800c9ee <_printf_float+0x316>
 800ca6c:	e68f      	b.n	800c78e <_printf_float+0xb6>
 800ca6e:	9a06      	ldr	r2, [sp, #24]
 800ca70:	464b      	mov	r3, r9
 800ca72:	4442      	add	r2, r8
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d1c3      	bne.n	800ca06 <_printf_float+0x32e>
 800ca7e:	e686      	b.n	800c78e <_printf_float+0xb6>
 800ca80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca84:	f1ba 0f01 	cmp.w	sl, #1
 800ca88:	dc01      	bgt.n	800ca8e <_printf_float+0x3b6>
 800ca8a:	07db      	lsls	r3, r3, #31
 800ca8c:	d536      	bpl.n	800cafc <_printf_float+0x424>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4642      	mov	r2, r8
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae78 	beq.w	800c78e <_printf_float+0xb6>
 800ca9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caa2:	4631      	mov	r1, r6
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b8      	blx	r7
 800caa8:	3001      	adds	r0, #1
 800caaa:	f43f ae70 	beq.w	800c78e <_printf_float+0xb6>
 800caae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cab2:	2200      	movs	r2, #0
 800cab4:	2300      	movs	r3, #0
 800cab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caba:	f7f4 f82d 	bl	8000b18 <__aeabi_dcmpeq>
 800cabe:	b9c0      	cbnz	r0, 800caf2 <_printf_float+0x41a>
 800cac0:	4653      	mov	r3, sl
 800cac2:	f108 0201 	add.w	r2, r8, #1
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	d10c      	bne.n	800caea <_printf_float+0x412>
 800cad0:	e65d      	b.n	800c78e <_printf_float+0xb6>
 800cad2:	2301      	movs	r3, #1
 800cad4:	465a      	mov	r2, fp
 800cad6:	4631      	mov	r1, r6
 800cad8:	4628      	mov	r0, r5
 800cada:	47b8      	blx	r7
 800cadc:	3001      	adds	r0, #1
 800cade:	f43f ae56 	beq.w	800c78e <_printf_float+0xb6>
 800cae2:	f108 0801 	add.w	r8, r8, #1
 800cae6:	45d0      	cmp	r8, sl
 800cae8:	dbf3      	blt.n	800cad2 <_printf_float+0x3fa>
 800caea:	464b      	mov	r3, r9
 800caec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800caf0:	e6df      	b.n	800c8b2 <_printf_float+0x1da>
 800caf2:	f04f 0800 	mov.w	r8, #0
 800caf6:	f104 0b1a 	add.w	fp, r4, #26
 800cafa:	e7f4      	b.n	800cae6 <_printf_float+0x40e>
 800cafc:	2301      	movs	r3, #1
 800cafe:	4642      	mov	r2, r8
 800cb00:	e7e1      	b.n	800cac6 <_printf_float+0x3ee>
 800cb02:	2301      	movs	r3, #1
 800cb04:	464a      	mov	r2, r9
 800cb06:	4631      	mov	r1, r6
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b8      	blx	r7
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	f43f ae3e 	beq.w	800c78e <_printf_float+0xb6>
 800cb12:	f108 0801 	add.w	r8, r8, #1
 800cb16:	68e3      	ldr	r3, [r4, #12]
 800cb18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb1a:	1a5b      	subs	r3, r3, r1
 800cb1c:	4543      	cmp	r3, r8
 800cb1e:	dcf0      	bgt.n	800cb02 <_printf_float+0x42a>
 800cb20:	e6fc      	b.n	800c91c <_printf_float+0x244>
 800cb22:	f04f 0800 	mov.w	r8, #0
 800cb26:	f104 0919 	add.w	r9, r4, #25
 800cb2a:	e7f4      	b.n	800cb16 <_printf_float+0x43e>

0800cb2c <_printf_common>:
 800cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	4616      	mov	r6, r2
 800cb32:	4698      	mov	r8, r3
 800cb34:	688a      	ldr	r2, [r1, #8]
 800cb36:	690b      	ldr	r3, [r1, #16]
 800cb38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	bfb8      	it	lt
 800cb40:	4613      	movlt	r3, r2
 800cb42:	6033      	str	r3, [r6, #0]
 800cb44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb48:	4607      	mov	r7, r0
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	b10a      	cbz	r2, 800cb52 <_printf_common+0x26>
 800cb4e:	3301      	adds	r3, #1
 800cb50:	6033      	str	r3, [r6, #0]
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	0699      	lsls	r1, r3, #26
 800cb56:	bf42      	ittt	mi
 800cb58:	6833      	ldrmi	r3, [r6, #0]
 800cb5a:	3302      	addmi	r3, #2
 800cb5c:	6033      	strmi	r3, [r6, #0]
 800cb5e:	6825      	ldr	r5, [r4, #0]
 800cb60:	f015 0506 	ands.w	r5, r5, #6
 800cb64:	d106      	bne.n	800cb74 <_printf_common+0x48>
 800cb66:	f104 0a19 	add.w	sl, r4, #25
 800cb6a:	68e3      	ldr	r3, [r4, #12]
 800cb6c:	6832      	ldr	r2, [r6, #0]
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	42ab      	cmp	r3, r5
 800cb72:	dc26      	bgt.n	800cbc2 <_printf_common+0x96>
 800cb74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb78:	6822      	ldr	r2, [r4, #0]
 800cb7a:	3b00      	subs	r3, #0
 800cb7c:	bf18      	it	ne
 800cb7e:	2301      	movne	r3, #1
 800cb80:	0692      	lsls	r2, r2, #26
 800cb82:	d42b      	bmi.n	800cbdc <_printf_common+0xb0>
 800cb84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb88:	4641      	mov	r1, r8
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	47c8      	blx	r9
 800cb8e:	3001      	adds	r0, #1
 800cb90:	d01e      	beq.n	800cbd0 <_printf_common+0xa4>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	6922      	ldr	r2, [r4, #16]
 800cb96:	f003 0306 	and.w	r3, r3, #6
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	bf02      	ittt	eq
 800cb9e:	68e5      	ldreq	r5, [r4, #12]
 800cba0:	6833      	ldreq	r3, [r6, #0]
 800cba2:	1aed      	subeq	r5, r5, r3
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	bf0c      	ite	eq
 800cba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbac:	2500      	movne	r5, #0
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	bfc4      	itt	gt
 800cbb2:	1a9b      	subgt	r3, r3, r2
 800cbb4:	18ed      	addgt	r5, r5, r3
 800cbb6:	2600      	movs	r6, #0
 800cbb8:	341a      	adds	r4, #26
 800cbba:	42b5      	cmp	r5, r6
 800cbbc:	d11a      	bne.n	800cbf4 <_printf_common+0xc8>
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	e008      	b.n	800cbd4 <_printf_common+0xa8>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	4652      	mov	r2, sl
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	4638      	mov	r0, r7
 800cbca:	47c8      	blx	r9
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d103      	bne.n	800cbd8 <_printf_common+0xac>
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd8:	3501      	adds	r5, #1
 800cbda:	e7c6      	b.n	800cb6a <_printf_common+0x3e>
 800cbdc:	18e1      	adds	r1, r4, r3
 800cbde:	1c5a      	adds	r2, r3, #1
 800cbe0:	2030      	movs	r0, #48	@ 0x30
 800cbe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbe6:	4422      	add	r2, r4
 800cbe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbf0:	3302      	adds	r3, #2
 800cbf2:	e7c7      	b.n	800cb84 <_printf_common+0x58>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	4641      	mov	r1, r8
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	47c8      	blx	r9
 800cbfe:	3001      	adds	r0, #1
 800cc00:	d0e6      	beq.n	800cbd0 <_printf_common+0xa4>
 800cc02:	3601      	adds	r6, #1
 800cc04:	e7d9      	b.n	800cbba <_printf_common+0x8e>
	...

0800cc08 <_printf_i>:
 800cc08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	7e0f      	ldrb	r7, [r1, #24]
 800cc0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc10:	2f78      	cmp	r7, #120	@ 0x78
 800cc12:	4691      	mov	r9, r2
 800cc14:	4680      	mov	r8, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	469a      	mov	sl, r3
 800cc1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc1e:	d807      	bhi.n	800cc30 <_printf_i+0x28>
 800cc20:	2f62      	cmp	r7, #98	@ 0x62
 800cc22:	d80a      	bhi.n	800cc3a <_printf_i+0x32>
 800cc24:	2f00      	cmp	r7, #0
 800cc26:	f000 80d2 	beq.w	800cdce <_printf_i+0x1c6>
 800cc2a:	2f58      	cmp	r7, #88	@ 0x58
 800cc2c:	f000 80b9 	beq.w	800cda2 <_printf_i+0x19a>
 800cc30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc38:	e03a      	b.n	800ccb0 <_printf_i+0xa8>
 800cc3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc3e:	2b15      	cmp	r3, #21
 800cc40:	d8f6      	bhi.n	800cc30 <_printf_i+0x28>
 800cc42:	a101      	add	r1, pc, #4	@ (adr r1, 800cc48 <_printf_i+0x40>)
 800cc44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc48:	0800cca1 	.word	0x0800cca1
 800cc4c:	0800ccb5 	.word	0x0800ccb5
 800cc50:	0800cc31 	.word	0x0800cc31
 800cc54:	0800cc31 	.word	0x0800cc31
 800cc58:	0800cc31 	.word	0x0800cc31
 800cc5c:	0800cc31 	.word	0x0800cc31
 800cc60:	0800ccb5 	.word	0x0800ccb5
 800cc64:	0800cc31 	.word	0x0800cc31
 800cc68:	0800cc31 	.word	0x0800cc31
 800cc6c:	0800cc31 	.word	0x0800cc31
 800cc70:	0800cc31 	.word	0x0800cc31
 800cc74:	0800cdb5 	.word	0x0800cdb5
 800cc78:	0800ccdf 	.word	0x0800ccdf
 800cc7c:	0800cd6f 	.word	0x0800cd6f
 800cc80:	0800cc31 	.word	0x0800cc31
 800cc84:	0800cc31 	.word	0x0800cc31
 800cc88:	0800cdd7 	.word	0x0800cdd7
 800cc8c:	0800cc31 	.word	0x0800cc31
 800cc90:	0800ccdf 	.word	0x0800ccdf
 800cc94:	0800cc31 	.word	0x0800cc31
 800cc98:	0800cc31 	.word	0x0800cc31
 800cc9c:	0800cd77 	.word	0x0800cd77
 800cca0:	6833      	ldr	r3, [r6, #0]
 800cca2:	1d1a      	adds	r2, r3, #4
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6032      	str	r2, [r6, #0]
 800cca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e09d      	b.n	800cdf0 <_printf_i+0x1e8>
 800ccb4:	6833      	ldr	r3, [r6, #0]
 800ccb6:	6820      	ldr	r0, [r4, #0]
 800ccb8:	1d19      	adds	r1, r3, #4
 800ccba:	6031      	str	r1, [r6, #0]
 800ccbc:	0606      	lsls	r6, r0, #24
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_i+0xbc>
 800ccc0:	681d      	ldr	r5, [r3, #0]
 800ccc2:	e003      	b.n	800cccc <_printf_i+0xc4>
 800ccc4:	0645      	lsls	r5, r0, #25
 800ccc6:	d5fb      	bpl.n	800ccc0 <_printf_i+0xb8>
 800ccc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	da03      	bge.n	800ccd8 <_printf_i+0xd0>
 800ccd0:	232d      	movs	r3, #45	@ 0x2d
 800ccd2:	426d      	negs	r5, r5
 800ccd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd8:	4859      	ldr	r0, [pc, #356]	@ (800ce40 <_printf_i+0x238>)
 800ccda:	230a      	movs	r3, #10
 800ccdc:	e011      	b.n	800cd02 <_printf_i+0xfa>
 800ccde:	6821      	ldr	r1, [r4, #0]
 800cce0:	6833      	ldr	r3, [r6, #0]
 800cce2:	0608      	lsls	r0, r1, #24
 800cce4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cce8:	d402      	bmi.n	800ccf0 <_printf_i+0xe8>
 800ccea:	0649      	lsls	r1, r1, #25
 800ccec:	bf48      	it	mi
 800ccee:	b2ad      	uxthmi	r5, r5
 800ccf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccf2:	4853      	ldr	r0, [pc, #332]	@ (800ce40 <_printf_i+0x238>)
 800ccf4:	6033      	str	r3, [r6, #0]
 800ccf6:	bf14      	ite	ne
 800ccf8:	230a      	movne	r3, #10
 800ccfa:	2308      	moveq	r3, #8
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd02:	6866      	ldr	r6, [r4, #4]
 800cd04:	60a6      	str	r6, [r4, #8]
 800cd06:	2e00      	cmp	r6, #0
 800cd08:	bfa2      	ittt	ge
 800cd0a:	6821      	ldrge	r1, [r4, #0]
 800cd0c:	f021 0104 	bicge.w	r1, r1, #4
 800cd10:	6021      	strge	r1, [r4, #0]
 800cd12:	b90d      	cbnz	r5, 800cd18 <_printf_i+0x110>
 800cd14:	2e00      	cmp	r6, #0
 800cd16:	d04b      	beq.n	800cdb0 <_printf_i+0x1a8>
 800cd18:	4616      	mov	r6, r2
 800cd1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd1e:	fb03 5711 	mls	r7, r3, r1, r5
 800cd22:	5dc7      	ldrb	r7, [r0, r7]
 800cd24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd28:	462f      	mov	r7, r5
 800cd2a:	42bb      	cmp	r3, r7
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	d9f4      	bls.n	800cd1a <_printf_i+0x112>
 800cd30:	2b08      	cmp	r3, #8
 800cd32:	d10b      	bne.n	800cd4c <_printf_i+0x144>
 800cd34:	6823      	ldr	r3, [r4, #0]
 800cd36:	07df      	lsls	r7, r3, #31
 800cd38:	d508      	bpl.n	800cd4c <_printf_i+0x144>
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	6861      	ldr	r1, [r4, #4]
 800cd3e:	4299      	cmp	r1, r3
 800cd40:	bfde      	ittt	le
 800cd42:	2330      	movle	r3, #48	@ 0x30
 800cd44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd4c:	1b92      	subs	r2, r2, r6
 800cd4e:	6122      	str	r2, [r4, #16]
 800cd50:	f8cd a000 	str.w	sl, [sp]
 800cd54:	464b      	mov	r3, r9
 800cd56:	aa03      	add	r2, sp, #12
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f7ff fee6 	bl	800cb2c <_printf_common>
 800cd60:	3001      	adds	r0, #1
 800cd62:	d14a      	bne.n	800cdfa <_printf_i+0x1f2>
 800cd64:	f04f 30ff 	mov.w	r0, #4294967295
 800cd68:	b004      	add	sp, #16
 800cd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	f043 0320 	orr.w	r3, r3, #32
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	4833      	ldr	r0, [pc, #204]	@ (800ce44 <_printf_i+0x23c>)
 800cd78:	2778      	movs	r7, #120	@ 0x78
 800cd7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	6831      	ldr	r1, [r6, #0]
 800cd82:	061f      	lsls	r7, r3, #24
 800cd84:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd88:	d402      	bmi.n	800cd90 <_printf_i+0x188>
 800cd8a:	065f      	lsls	r7, r3, #25
 800cd8c:	bf48      	it	mi
 800cd8e:	b2ad      	uxthmi	r5, r5
 800cd90:	6031      	str	r1, [r6, #0]
 800cd92:	07d9      	lsls	r1, r3, #31
 800cd94:	bf44      	itt	mi
 800cd96:	f043 0320 	orrmi.w	r3, r3, #32
 800cd9a:	6023      	strmi	r3, [r4, #0]
 800cd9c:	b11d      	cbz	r5, 800cda6 <_printf_i+0x19e>
 800cd9e:	2310      	movs	r3, #16
 800cda0:	e7ac      	b.n	800ccfc <_printf_i+0xf4>
 800cda2:	4827      	ldr	r0, [pc, #156]	@ (800ce40 <_printf_i+0x238>)
 800cda4:	e7e9      	b.n	800cd7a <_printf_i+0x172>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	f023 0320 	bic.w	r3, r3, #32
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	e7f6      	b.n	800cd9e <_printf_i+0x196>
 800cdb0:	4616      	mov	r6, r2
 800cdb2:	e7bd      	b.n	800cd30 <_printf_i+0x128>
 800cdb4:	6833      	ldr	r3, [r6, #0]
 800cdb6:	6825      	ldr	r5, [r4, #0]
 800cdb8:	6961      	ldr	r1, [r4, #20]
 800cdba:	1d18      	adds	r0, r3, #4
 800cdbc:	6030      	str	r0, [r6, #0]
 800cdbe:	062e      	lsls	r6, r5, #24
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	d501      	bpl.n	800cdc8 <_printf_i+0x1c0>
 800cdc4:	6019      	str	r1, [r3, #0]
 800cdc6:	e002      	b.n	800cdce <_printf_i+0x1c6>
 800cdc8:	0668      	lsls	r0, r5, #25
 800cdca:	d5fb      	bpl.n	800cdc4 <_printf_i+0x1bc>
 800cdcc:	8019      	strh	r1, [r3, #0]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	6123      	str	r3, [r4, #16]
 800cdd2:	4616      	mov	r6, r2
 800cdd4:	e7bc      	b.n	800cd50 <_printf_i+0x148>
 800cdd6:	6833      	ldr	r3, [r6, #0]
 800cdd8:	1d1a      	adds	r2, r3, #4
 800cdda:	6032      	str	r2, [r6, #0]
 800cddc:	681e      	ldr	r6, [r3, #0]
 800cdde:	6862      	ldr	r2, [r4, #4]
 800cde0:	2100      	movs	r1, #0
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7f3 fa1c 	bl	8000220 <memchr>
 800cde8:	b108      	cbz	r0, 800cdee <_printf_i+0x1e6>
 800cdea:	1b80      	subs	r0, r0, r6
 800cdec:	6060      	str	r0, [r4, #4]
 800cdee:	6863      	ldr	r3, [r4, #4]
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdf8:	e7aa      	b.n	800cd50 <_printf_i+0x148>
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	4649      	mov	r1, r9
 800ce00:	4640      	mov	r0, r8
 800ce02:	47d0      	blx	sl
 800ce04:	3001      	adds	r0, #1
 800ce06:	d0ad      	beq.n	800cd64 <_printf_i+0x15c>
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	079b      	lsls	r3, r3, #30
 800ce0c:	d413      	bmi.n	800ce36 <_printf_i+0x22e>
 800ce0e:	68e0      	ldr	r0, [r4, #12]
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	4298      	cmp	r0, r3
 800ce14:	bfb8      	it	lt
 800ce16:	4618      	movlt	r0, r3
 800ce18:	e7a6      	b.n	800cd68 <_printf_i+0x160>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4649      	mov	r1, r9
 800ce20:	4640      	mov	r0, r8
 800ce22:	47d0      	blx	sl
 800ce24:	3001      	adds	r0, #1
 800ce26:	d09d      	beq.n	800cd64 <_printf_i+0x15c>
 800ce28:	3501      	adds	r5, #1
 800ce2a:	68e3      	ldr	r3, [r4, #12]
 800ce2c:	9903      	ldr	r1, [sp, #12]
 800ce2e:	1a5b      	subs	r3, r3, r1
 800ce30:	42ab      	cmp	r3, r5
 800ce32:	dcf2      	bgt.n	800ce1a <_printf_i+0x212>
 800ce34:	e7eb      	b.n	800ce0e <_printf_i+0x206>
 800ce36:	2500      	movs	r5, #0
 800ce38:	f104 0619 	add.w	r6, r4, #25
 800ce3c:	e7f5      	b.n	800ce2a <_printf_i+0x222>
 800ce3e:	bf00      	nop
 800ce40:	0800ef12 	.word	0x0800ef12
 800ce44:	0800ef23 	.word	0x0800ef23

0800ce48 <std>:
 800ce48:	2300      	movs	r3, #0
 800ce4a:	b510      	push	{r4, lr}
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce56:	6083      	str	r3, [r0, #8]
 800ce58:	8181      	strh	r1, [r0, #12]
 800ce5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce5c:	81c2      	strh	r2, [r0, #14]
 800ce5e:	6183      	str	r3, [r0, #24]
 800ce60:	4619      	mov	r1, r3
 800ce62:	2208      	movs	r2, #8
 800ce64:	305c      	adds	r0, #92	@ 0x5c
 800ce66:	f000 f8f4 	bl	800d052 <memset>
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <std+0x58>)
 800ce6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <std+0x5c>)
 800ce70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <std+0x60>)
 800ce74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce76:	4b0d      	ldr	r3, [pc, #52]	@ (800ceac <std+0x64>)
 800ce78:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb0 <std+0x68>)
 800ce7c:	6224      	str	r4, [r4, #32]
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	d006      	beq.n	800ce90 <std+0x48>
 800ce82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce86:	4294      	cmp	r4, r2
 800ce88:	d002      	beq.n	800ce90 <std+0x48>
 800ce8a:	33d0      	adds	r3, #208	@ 0xd0
 800ce8c:	429c      	cmp	r4, r3
 800ce8e:	d105      	bne.n	800ce9c <std+0x54>
 800ce90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce98:	f000 b958 	b.w	800d14c <__retarget_lock_init_recursive>
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	bf00      	nop
 800cea0:	0800cfcd 	.word	0x0800cfcd
 800cea4:	0800cfef 	.word	0x0800cfef
 800cea8:	0800d027 	.word	0x0800d027
 800ceac:	0800d04b 	.word	0x0800d04b
 800ceb0:	2000126c 	.word	0x2000126c

0800ceb4 <stdio_exit_handler>:
 800ceb4:	4a02      	ldr	r2, [pc, #8]	@ (800cec0 <stdio_exit_handler+0xc>)
 800ceb6:	4903      	ldr	r1, [pc, #12]	@ (800cec4 <stdio_exit_handler+0x10>)
 800ceb8:	4803      	ldr	r0, [pc, #12]	@ (800cec8 <stdio_exit_handler+0x14>)
 800ceba:	f000 b869 	b.w	800cf90 <_fwalk_sglue>
 800cebe:	bf00      	nop
 800cec0:	20000034 	.word	0x20000034
 800cec4:	0800e7fd 	.word	0x0800e7fd
 800cec8:	20000044 	.word	0x20000044

0800cecc <cleanup_stdio>:
 800cecc:	6841      	ldr	r1, [r0, #4]
 800cece:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <cleanup_stdio+0x34>)
 800ced0:	4299      	cmp	r1, r3
 800ced2:	b510      	push	{r4, lr}
 800ced4:	4604      	mov	r4, r0
 800ced6:	d001      	beq.n	800cedc <cleanup_stdio+0x10>
 800ced8:	f001 fc90 	bl	800e7fc <_fflush_r>
 800cedc:	68a1      	ldr	r1, [r4, #8]
 800cede:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <cleanup_stdio+0x38>)
 800cee0:	4299      	cmp	r1, r3
 800cee2:	d002      	beq.n	800ceea <cleanup_stdio+0x1e>
 800cee4:	4620      	mov	r0, r4
 800cee6:	f001 fc89 	bl	800e7fc <_fflush_r>
 800ceea:	68e1      	ldr	r1, [r4, #12]
 800ceec:	4b06      	ldr	r3, [pc, #24]	@ (800cf08 <cleanup_stdio+0x3c>)
 800ceee:	4299      	cmp	r1, r3
 800cef0:	d004      	beq.n	800cefc <cleanup_stdio+0x30>
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef8:	f001 bc80 	b.w	800e7fc <_fflush_r>
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	bf00      	nop
 800cf00:	2000126c 	.word	0x2000126c
 800cf04:	200012d4 	.word	0x200012d4
 800cf08:	2000133c 	.word	0x2000133c

0800cf0c <global_stdio_init.part.0>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf3c <global_stdio_init.part.0+0x30>)
 800cf10:	4c0b      	ldr	r4, [pc, #44]	@ (800cf40 <global_stdio_init.part.0+0x34>)
 800cf12:	4a0c      	ldr	r2, [pc, #48]	@ (800cf44 <global_stdio_init.part.0+0x38>)
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	4620      	mov	r0, r4
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2104      	movs	r1, #4
 800cf1c:	f7ff ff94 	bl	800ce48 <std>
 800cf20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf24:	2201      	movs	r2, #1
 800cf26:	2109      	movs	r1, #9
 800cf28:	f7ff ff8e 	bl	800ce48 <std>
 800cf2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf30:	2202      	movs	r2, #2
 800cf32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf36:	2112      	movs	r1, #18
 800cf38:	f7ff bf86 	b.w	800ce48 <std>
 800cf3c:	200013a4 	.word	0x200013a4
 800cf40:	2000126c 	.word	0x2000126c
 800cf44:	0800ceb5 	.word	0x0800ceb5

0800cf48 <__sfp_lock_acquire>:
 800cf48:	4801      	ldr	r0, [pc, #4]	@ (800cf50 <__sfp_lock_acquire+0x8>)
 800cf4a:	f000 b900 	b.w	800d14e <__retarget_lock_acquire_recursive>
 800cf4e:	bf00      	nop
 800cf50:	200013ad 	.word	0x200013ad

0800cf54 <__sfp_lock_release>:
 800cf54:	4801      	ldr	r0, [pc, #4]	@ (800cf5c <__sfp_lock_release+0x8>)
 800cf56:	f000 b8fb 	b.w	800d150 <__retarget_lock_release_recursive>
 800cf5a:	bf00      	nop
 800cf5c:	200013ad 	.word	0x200013ad

0800cf60 <__sinit>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	4604      	mov	r4, r0
 800cf64:	f7ff fff0 	bl	800cf48 <__sfp_lock_acquire>
 800cf68:	6a23      	ldr	r3, [r4, #32]
 800cf6a:	b11b      	cbz	r3, 800cf74 <__sinit+0x14>
 800cf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf70:	f7ff bff0 	b.w	800cf54 <__sfp_lock_release>
 800cf74:	4b04      	ldr	r3, [pc, #16]	@ (800cf88 <__sinit+0x28>)
 800cf76:	6223      	str	r3, [r4, #32]
 800cf78:	4b04      	ldr	r3, [pc, #16]	@ (800cf8c <__sinit+0x2c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1f5      	bne.n	800cf6c <__sinit+0xc>
 800cf80:	f7ff ffc4 	bl	800cf0c <global_stdio_init.part.0>
 800cf84:	e7f2      	b.n	800cf6c <__sinit+0xc>
 800cf86:	bf00      	nop
 800cf88:	0800cecd 	.word	0x0800cecd
 800cf8c:	200013a4 	.word	0x200013a4

0800cf90 <_fwalk_sglue>:
 800cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf94:	4607      	mov	r7, r0
 800cf96:	4688      	mov	r8, r1
 800cf98:	4614      	mov	r4, r2
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfa0:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa4:	d505      	bpl.n	800cfb2 <_fwalk_sglue+0x22>
 800cfa6:	6824      	ldr	r4, [r4, #0]
 800cfa8:	2c00      	cmp	r4, #0
 800cfaa:	d1f7      	bne.n	800cf9c <_fwalk_sglue+0xc>
 800cfac:	4630      	mov	r0, r6
 800cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d907      	bls.n	800cfc8 <_fwalk_sglue+0x38>
 800cfb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	d003      	beq.n	800cfc8 <_fwalk_sglue+0x38>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	4306      	orrs	r6, r0
 800cfc8:	3568      	adds	r5, #104	@ 0x68
 800cfca:	e7e9      	b.n	800cfa0 <_fwalk_sglue+0x10>

0800cfcc <__sread>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	460c      	mov	r4, r1
 800cfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd4:	f000 f86c 	bl	800d0b0 <_read_r>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	bfab      	itete	ge
 800cfdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfde:	89a3      	ldrhlt	r3, [r4, #12]
 800cfe0:	181b      	addge	r3, r3, r0
 800cfe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfe6:	bfac      	ite	ge
 800cfe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfea:	81a3      	strhlt	r3, [r4, #12]
 800cfec:	bd10      	pop	{r4, pc}

0800cfee <__swrite>:
 800cfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff2:	461f      	mov	r7, r3
 800cff4:	898b      	ldrh	r3, [r1, #12]
 800cff6:	05db      	lsls	r3, r3, #23
 800cff8:	4605      	mov	r5, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	4616      	mov	r6, r2
 800cffe:	d505      	bpl.n	800d00c <__swrite+0x1e>
 800d000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d004:	2302      	movs	r3, #2
 800d006:	2200      	movs	r2, #0
 800d008:	f000 f840 	bl	800d08c <_lseek_r>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	4632      	mov	r2, r6
 800d01a:	463b      	mov	r3, r7
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d022:	f000 b857 	b.w	800d0d4 <_write_r>

0800d026 <__sseek>:
 800d026:	b510      	push	{r4, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02e:	f000 f82d 	bl	800d08c <_lseek_r>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	bf15      	itete	ne
 800d038:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d03a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d03e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d042:	81a3      	strheq	r3, [r4, #12]
 800d044:	bf18      	it	ne
 800d046:	81a3      	strhne	r3, [r4, #12]
 800d048:	bd10      	pop	{r4, pc}

0800d04a <__sclose>:
 800d04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04e:	f000 b80d 	b.w	800d06c <_close_r>

0800d052 <memset>:
 800d052:	4402      	add	r2, r0
 800d054:	4603      	mov	r3, r0
 800d056:	4293      	cmp	r3, r2
 800d058:	d100      	bne.n	800d05c <memset+0xa>
 800d05a:	4770      	bx	lr
 800d05c:	f803 1b01 	strb.w	r1, [r3], #1
 800d060:	e7f9      	b.n	800d056 <memset+0x4>
	...

0800d064 <_localeconv_r>:
 800d064:	4800      	ldr	r0, [pc, #0]	@ (800d068 <_localeconv_r+0x4>)
 800d066:	4770      	bx	lr
 800d068:	20000180 	.word	0x20000180

0800d06c <_close_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d06      	ldr	r5, [pc, #24]	@ (800d088 <_close_r+0x1c>)
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	f7f5 f9e4 	bl	8002444 <_close>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	d102      	bne.n	800d086 <_close_r+0x1a>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	b103      	cbz	r3, 800d086 <_close_r+0x1a>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	200013a8 	.word	0x200013a8

0800d08c <_lseek_r>:
 800d08c:	b538      	push	{r3, r4, r5, lr}
 800d08e:	4d07      	ldr	r5, [pc, #28]	@ (800d0ac <_lseek_r+0x20>)
 800d090:	4604      	mov	r4, r0
 800d092:	4608      	mov	r0, r1
 800d094:	4611      	mov	r1, r2
 800d096:	2200      	movs	r2, #0
 800d098:	602a      	str	r2, [r5, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	f7f5 f9f9 	bl	8002492 <_lseek>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_lseek_r+0x1e>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_lseek_r+0x1e>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	200013a8 	.word	0x200013a8

0800d0b0 <_read_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	@ (800d0d0 <_read_r+0x20>)
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	602a      	str	r2, [r5, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f7f5 f987 	bl	80023d2 <_read>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_read_r+0x1e>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_read_r+0x1e>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	200013a8 	.word	0x200013a8

0800d0d4 <_write_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d07      	ldr	r5, [pc, #28]	@ (800d0f4 <_write_r+0x20>)
 800d0d8:	4604      	mov	r4, r0
 800d0da:	4608      	mov	r0, r1
 800d0dc:	4611      	mov	r1, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	602a      	str	r2, [r5, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f7f5 f992 	bl	800240c <_write>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_write_r+0x1e>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_write_r+0x1e>
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	200013a8 	.word	0x200013a8

0800d0f8 <__errno>:
 800d0f8:	4b01      	ldr	r3, [pc, #4]	@ (800d100 <__errno+0x8>)
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20000040 	.word	0x20000040

0800d104 <__libc_init_array>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	4d0d      	ldr	r5, [pc, #52]	@ (800d13c <__libc_init_array+0x38>)
 800d108:	4c0d      	ldr	r4, [pc, #52]	@ (800d140 <__libc_init_array+0x3c>)
 800d10a:	1b64      	subs	r4, r4, r5
 800d10c:	10a4      	asrs	r4, r4, #2
 800d10e:	2600      	movs	r6, #0
 800d110:	42a6      	cmp	r6, r4
 800d112:	d109      	bne.n	800d128 <__libc_init_array+0x24>
 800d114:	4d0b      	ldr	r5, [pc, #44]	@ (800d144 <__libc_init_array+0x40>)
 800d116:	4c0c      	ldr	r4, [pc, #48]	@ (800d148 <__libc_init_array+0x44>)
 800d118:	f001 febe 	bl	800ee98 <_init>
 800d11c:	1b64      	subs	r4, r4, r5
 800d11e:	10a4      	asrs	r4, r4, #2
 800d120:	2600      	movs	r6, #0
 800d122:	42a6      	cmp	r6, r4
 800d124:	d105      	bne.n	800d132 <__libc_init_array+0x2e>
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	f855 3b04 	ldr.w	r3, [r5], #4
 800d12c:	4798      	blx	r3
 800d12e:	3601      	adds	r6, #1
 800d130:	e7ee      	b.n	800d110 <__libc_init_array+0xc>
 800d132:	f855 3b04 	ldr.w	r3, [r5], #4
 800d136:	4798      	blx	r3
 800d138:	3601      	adds	r6, #1
 800d13a:	e7f2      	b.n	800d122 <__libc_init_array+0x1e>
 800d13c:	0800f278 	.word	0x0800f278
 800d140:	0800f278 	.word	0x0800f278
 800d144:	0800f278 	.word	0x0800f278
 800d148:	0800f280 	.word	0x0800f280

0800d14c <__retarget_lock_init_recursive>:
 800d14c:	4770      	bx	lr

0800d14e <__retarget_lock_acquire_recursive>:
 800d14e:	4770      	bx	lr

0800d150 <__retarget_lock_release_recursive>:
 800d150:	4770      	bx	lr

0800d152 <quorem>:
 800d152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d156:	6903      	ldr	r3, [r0, #16]
 800d158:	690c      	ldr	r4, [r1, #16]
 800d15a:	42a3      	cmp	r3, r4
 800d15c:	4607      	mov	r7, r0
 800d15e:	db7e      	blt.n	800d25e <quorem+0x10c>
 800d160:	3c01      	subs	r4, #1
 800d162:	f101 0814 	add.w	r8, r1, #20
 800d166:	00a3      	lsls	r3, r4, #2
 800d168:	f100 0514 	add.w	r5, r0, #20
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d172:	9301      	str	r3, [sp, #4]
 800d174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17c:	3301      	adds	r3, #1
 800d17e:	429a      	cmp	r2, r3
 800d180:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d184:	fbb2 f6f3 	udiv	r6, r2, r3
 800d188:	d32e      	bcc.n	800d1e8 <quorem+0x96>
 800d18a:	f04f 0a00 	mov.w	sl, #0
 800d18e:	46c4      	mov	ip, r8
 800d190:	46ae      	mov	lr, r5
 800d192:	46d3      	mov	fp, sl
 800d194:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d198:	b298      	uxth	r0, r3
 800d19a:	fb06 a000 	mla	r0, r6, r0, sl
 800d19e:	0c02      	lsrs	r2, r0, #16
 800d1a0:	0c1b      	lsrs	r3, r3, #16
 800d1a2:	fb06 2303 	mla	r3, r6, r3, r2
 800d1a6:	f8de 2000 	ldr.w	r2, [lr]
 800d1aa:	b280      	uxth	r0, r0
 800d1ac:	b292      	uxth	r2, r2
 800d1ae:	1a12      	subs	r2, r2, r0
 800d1b0:	445a      	add	r2, fp
 800d1b2:	f8de 0000 	ldr.w	r0, [lr]
 800d1b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1c4:	b292      	uxth	r2, r2
 800d1c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1ca:	45e1      	cmp	r9, ip
 800d1cc:	f84e 2b04 	str.w	r2, [lr], #4
 800d1d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1d4:	d2de      	bcs.n	800d194 <quorem+0x42>
 800d1d6:	9b00      	ldr	r3, [sp, #0]
 800d1d8:	58eb      	ldr	r3, [r5, r3]
 800d1da:	b92b      	cbnz	r3, 800d1e8 <quorem+0x96>
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	3b04      	subs	r3, #4
 800d1e0:	429d      	cmp	r5, r3
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	d32f      	bcc.n	800d246 <quorem+0xf4>
 800d1e6:	613c      	str	r4, [r7, #16]
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f001 f97b 	bl	800e4e4 <__mcmp>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	db25      	blt.n	800d23e <quorem+0xec>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1fa:	f8d1 c000 	ldr.w	ip, [r1]
 800d1fe:	fa1f fe82 	uxth.w	lr, r2
 800d202:	fa1f f38c 	uxth.w	r3, ip
 800d206:	eba3 030e 	sub.w	r3, r3, lr
 800d20a:	4403      	add	r3, r0
 800d20c:	0c12      	lsrs	r2, r2, #16
 800d20e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d212:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d216:	b29b      	uxth	r3, r3
 800d218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21c:	45c1      	cmp	r9, r8
 800d21e:	f841 3b04 	str.w	r3, [r1], #4
 800d222:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d226:	d2e6      	bcs.n	800d1f6 <quorem+0xa4>
 800d228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d22c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d230:	b922      	cbnz	r2, 800d23c <quorem+0xea>
 800d232:	3b04      	subs	r3, #4
 800d234:	429d      	cmp	r5, r3
 800d236:	461a      	mov	r2, r3
 800d238:	d30b      	bcc.n	800d252 <quorem+0x100>
 800d23a:	613c      	str	r4, [r7, #16]
 800d23c:	3601      	adds	r6, #1
 800d23e:	4630      	mov	r0, r6
 800d240:	b003      	add	sp, #12
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d246:	6812      	ldr	r2, [r2, #0]
 800d248:	3b04      	subs	r3, #4
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	d1cb      	bne.n	800d1e6 <quorem+0x94>
 800d24e:	3c01      	subs	r4, #1
 800d250:	e7c6      	b.n	800d1e0 <quorem+0x8e>
 800d252:	6812      	ldr	r2, [r2, #0]
 800d254:	3b04      	subs	r3, #4
 800d256:	2a00      	cmp	r2, #0
 800d258:	d1ef      	bne.n	800d23a <quorem+0xe8>
 800d25a:	3c01      	subs	r4, #1
 800d25c:	e7ea      	b.n	800d234 <quorem+0xe2>
 800d25e:	2000      	movs	r0, #0
 800d260:	e7ee      	b.n	800d240 <quorem+0xee>
 800d262:	0000      	movs	r0, r0
 800d264:	0000      	movs	r0, r0
	...

0800d268 <_dtoa_r>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	69c7      	ldr	r7, [r0, #28]
 800d26e:	b099      	sub	sp, #100	@ 0x64
 800d270:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d274:	ec55 4b10 	vmov	r4, r5, d0
 800d278:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d27a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d27c:	4683      	mov	fp, r0
 800d27e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d280:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d282:	b97f      	cbnz	r7, 800d2a4 <_dtoa_r+0x3c>
 800d284:	2010      	movs	r0, #16
 800d286:	f000 fdfd 	bl	800de84 <malloc>
 800d28a:	4602      	mov	r2, r0
 800d28c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d290:	b920      	cbnz	r0, 800d29c <_dtoa_r+0x34>
 800d292:	4ba7      	ldr	r3, [pc, #668]	@ (800d530 <_dtoa_r+0x2c8>)
 800d294:	21ef      	movs	r1, #239	@ 0xef
 800d296:	48a7      	ldr	r0, [pc, #668]	@ (800d534 <_dtoa_r+0x2cc>)
 800d298:	f001 faf6 	bl	800e888 <__assert_func>
 800d29c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2a0:	6007      	str	r7, [r0, #0]
 800d2a2:	60c7      	str	r7, [r0, #12]
 800d2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2a8:	6819      	ldr	r1, [r3, #0]
 800d2aa:	b159      	cbz	r1, 800d2c4 <_dtoa_r+0x5c>
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	604a      	str	r2, [r1, #4]
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	4093      	lsls	r3, r2
 800d2b4:	608b      	str	r3, [r1, #8]
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	f000 feda 	bl	800e070 <_Bfree>
 800d2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	1e2b      	subs	r3, r5, #0
 800d2c6:	bfb9      	ittee	lt
 800d2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2cc:	9303      	strlt	r3, [sp, #12]
 800d2ce:	2300      	movge	r3, #0
 800d2d0:	6033      	strge	r3, [r6, #0]
 800d2d2:	9f03      	ldr	r7, [sp, #12]
 800d2d4:	4b98      	ldr	r3, [pc, #608]	@ (800d538 <_dtoa_r+0x2d0>)
 800d2d6:	bfbc      	itt	lt
 800d2d8:	2201      	movlt	r2, #1
 800d2da:	6032      	strlt	r2, [r6, #0]
 800d2dc:	43bb      	bics	r3, r7
 800d2de:	d112      	bne.n	800d306 <_dtoa_r+0x9e>
 800d2e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	f000 854d 	beq.w	800dd8c <_dtoa_r+0xb24>
 800d2f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d54c <_dtoa_r+0x2e4>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 854f 	beq.w	800dd9c <_dtoa_r+0xb34>
 800d2fe:	f10a 0303 	add.w	r3, sl, #3
 800d302:	f000 bd49 	b.w	800dd98 <_dtoa_r+0xb30>
 800d306:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d30a:	2200      	movs	r2, #0
 800d30c:	ec51 0b17 	vmov	r0, r1, d7
 800d310:	2300      	movs	r3, #0
 800d312:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d316:	f7f3 fbff 	bl	8000b18 <__aeabi_dcmpeq>
 800d31a:	4680      	mov	r8, r0
 800d31c:	b158      	cbz	r0, 800d336 <_dtoa_r+0xce>
 800d31e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d320:	2301      	movs	r3, #1
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d326:	b113      	cbz	r3, 800d32e <_dtoa_r+0xc6>
 800d328:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d32a:	4b84      	ldr	r3, [pc, #528]	@ (800d53c <_dtoa_r+0x2d4>)
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d550 <_dtoa_r+0x2e8>
 800d332:	f000 bd33 	b.w	800dd9c <_dtoa_r+0xb34>
 800d336:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d33a:	aa16      	add	r2, sp, #88	@ 0x58
 800d33c:	a917      	add	r1, sp, #92	@ 0x5c
 800d33e:	4658      	mov	r0, fp
 800d340:	f001 f980 	bl	800e644 <__d2b>
 800d344:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d348:	4681      	mov	r9, r0
 800d34a:	2e00      	cmp	r6, #0
 800d34c:	d077      	beq.n	800d43e <_dtoa_r+0x1d6>
 800d34e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d350:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d35c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d360:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d364:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d368:	4619      	mov	r1, r3
 800d36a:	2200      	movs	r2, #0
 800d36c:	4b74      	ldr	r3, [pc, #464]	@ (800d540 <_dtoa_r+0x2d8>)
 800d36e:	f7f2 ffb3 	bl	80002d8 <__aeabi_dsub>
 800d372:	a369      	add	r3, pc, #420	@ (adr r3, 800d518 <_dtoa_r+0x2b0>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f3 f966 	bl	8000648 <__aeabi_dmul>
 800d37c:	a368      	add	r3, pc, #416	@ (adr r3, 800d520 <_dtoa_r+0x2b8>)
 800d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d382:	f7f2 ffab 	bl	80002dc <__adddf3>
 800d386:	4604      	mov	r4, r0
 800d388:	4630      	mov	r0, r6
 800d38a:	460d      	mov	r5, r1
 800d38c:	f7f3 f8f2 	bl	8000574 <__aeabi_i2d>
 800d390:	a365      	add	r3, pc, #404	@ (adr r3, 800d528 <_dtoa_r+0x2c0>)
 800d392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d396:	f7f3 f957 	bl	8000648 <__aeabi_dmul>
 800d39a:	4602      	mov	r2, r0
 800d39c:	460b      	mov	r3, r1
 800d39e:	4620      	mov	r0, r4
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	f7f2 ff9b 	bl	80002dc <__adddf3>
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	460d      	mov	r5, r1
 800d3aa:	f7f3 fbfd 	bl	8000ba8 <__aeabi_d2iz>
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	f7f3 fbb8 	bl	8000b2c <__aeabi_dcmplt>
 800d3bc:	b140      	cbz	r0, 800d3d0 <_dtoa_r+0x168>
 800d3be:	4638      	mov	r0, r7
 800d3c0:	f7f3 f8d8 	bl	8000574 <__aeabi_i2d>
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	462b      	mov	r3, r5
 800d3c8:	f7f3 fba6 	bl	8000b18 <__aeabi_dcmpeq>
 800d3cc:	b900      	cbnz	r0, 800d3d0 <_dtoa_r+0x168>
 800d3ce:	3f01      	subs	r7, #1
 800d3d0:	2f16      	cmp	r7, #22
 800d3d2:	d851      	bhi.n	800d478 <_dtoa_r+0x210>
 800d3d4:	4b5b      	ldr	r3, [pc, #364]	@ (800d544 <_dtoa_r+0x2dc>)
 800d3d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3e2:	f7f3 fba3 	bl	8000b2c <__aeabi_dcmplt>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d048      	beq.n	800d47c <_dtoa_r+0x214>
 800d3ea:	3f01      	subs	r7, #1
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3f2:	1b9b      	subs	r3, r3, r6
 800d3f4:	1e5a      	subs	r2, r3, #1
 800d3f6:	bf44      	itt	mi
 800d3f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d3fc:	2300      	movmi	r3, #0
 800d3fe:	9208      	str	r2, [sp, #32]
 800d400:	bf54      	ite	pl
 800d402:	f04f 0800 	movpl.w	r8, #0
 800d406:	9308      	strmi	r3, [sp, #32]
 800d408:	2f00      	cmp	r7, #0
 800d40a:	db39      	blt.n	800d480 <_dtoa_r+0x218>
 800d40c:	9b08      	ldr	r3, [sp, #32]
 800d40e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d410:	443b      	add	r3, r7
 800d412:	9308      	str	r3, [sp, #32]
 800d414:	2300      	movs	r3, #0
 800d416:	930a      	str	r3, [sp, #40]	@ 0x28
 800d418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41a:	2b09      	cmp	r3, #9
 800d41c:	d864      	bhi.n	800d4e8 <_dtoa_r+0x280>
 800d41e:	2b05      	cmp	r3, #5
 800d420:	bfc4      	itt	gt
 800d422:	3b04      	subgt	r3, #4
 800d424:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d428:	f1a3 0302 	sub.w	r3, r3, #2
 800d42c:	bfcc      	ite	gt
 800d42e:	2400      	movgt	r4, #0
 800d430:	2401      	movle	r4, #1
 800d432:	2b03      	cmp	r3, #3
 800d434:	d863      	bhi.n	800d4fe <_dtoa_r+0x296>
 800d436:	e8df f003 	tbb	[pc, r3]
 800d43a:	372a      	.short	0x372a
 800d43c:	5535      	.short	0x5535
 800d43e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d442:	441e      	add	r6, r3
 800d444:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d448:	2b20      	cmp	r3, #32
 800d44a:	bfc1      	itttt	gt
 800d44c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d450:	409f      	lslgt	r7, r3
 800d452:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d456:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d45a:	bfd6      	itet	le
 800d45c:	f1c3 0320 	rsble	r3, r3, #32
 800d460:	ea47 0003 	orrgt.w	r0, r7, r3
 800d464:	fa04 f003 	lslle.w	r0, r4, r3
 800d468:	f7f3 f874 	bl	8000554 <__aeabi_ui2d>
 800d46c:	2201      	movs	r2, #1
 800d46e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d472:	3e01      	subs	r6, #1
 800d474:	9214      	str	r2, [sp, #80]	@ 0x50
 800d476:	e777      	b.n	800d368 <_dtoa_r+0x100>
 800d478:	2301      	movs	r3, #1
 800d47a:	e7b8      	b.n	800d3ee <_dtoa_r+0x186>
 800d47c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d47e:	e7b7      	b.n	800d3f0 <_dtoa_r+0x188>
 800d480:	427b      	negs	r3, r7
 800d482:	930a      	str	r3, [sp, #40]	@ 0x28
 800d484:	2300      	movs	r3, #0
 800d486:	eba8 0807 	sub.w	r8, r8, r7
 800d48a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d48c:	e7c4      	b.n	800d418 <_dtoa_r+0x1b0>
 800d48e:	2300      	movs	r3, #0
 800d490:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d494:	2b00      	cmp	r3, #0
 800d496:	dc35      	bgt.n	800d504 <_dtoa_r+0x29c>
 800d498:	2301      	movs	r3, #1
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	9307      	str	r3, [sp, #28]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4a2:	e00b      	b.n	800d4bc <_dtoa_r+0x254>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e7f3      	b.n	800d490 <_dtoa_r+0x228>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ae:	18fb      	adds	r3, r7, r3
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	9307      	str	r3, [sp, #28]
 800d4b8:	bfb8      	it	lt
 800d4ba:	2301      	movlt	r3, #1
 800d4bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	2204      	movs	r2, #4
 800d4c4:	f102 0514 	add.w	r5, r2, #20
 800d4c8:	429d      	cmp	r5, r3
 800d4ca:	d91f      	bls.n	800d50c <_dtoa_r+0x2a4>
 800d4cc:	6041      	str	r1, [r0, #4]
 800d4ce:	4658      	mov	r0, fp
 800d4d0:	f000 fd8e 	bl	800dff0 <_Balloc>
 800d4d4:	4682      	mov	sl, r0
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d13c      	bne.n	800d554 <_dtoa_r+0x2ec>
 800d4da:	4b1b      	ldr	r3, [pc, #108]	@ (800d548 <_dtoa_r+0x2e0>)
 800d4dc:	4602      	mov	r2, r0
 800d4de:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4e2:	e6d8      	b.n	800d296 <_dtoa_r+0x2e>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e7e0      	b.n	800d4aa <_dtoa_r+0x242>
 800d4e8:	2401      	movs	r4, #1
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	9307      	str	r3, [sp, #28]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	2312      	movs	r3, #18
 800d4fc:	e7d0      	b.n	800d4a0 <_dtoa_r+0x238>
 800d4fe:	2301      	movs	r3, #1
 800d500:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d502:	e7f5      	b.n	800d4f0 <_dtoa_r+0x288>
 800d504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	9307      	str	r3, [sp, #28]
 800d50a:	e7d7      	b.n	800d4bc <_dtoa_r+0x254>
 800d50c:	3101      	adds	r1, #1
 800d50e:	0052      	lsls	r2, r2, #1
 800d510:	e7d8      	b.n	800d4c4 <_dtoa_r+0x25c>
 800d512:	bf00      	nop
 800d514:	f3af 8000 	nop.w
 800d518:	636f4361 	.word	0x636f4361
 800d51c:	3fd287a7 	.word	0x3fd287a7
 800d520:	8b60c8b3 	.word	0x8b60c8b3
 800d524:	3fc68a28 	.word	0x3fc68a28
 800d528:	509f79fb 	.word	0x509f79fb
 800d52c:	3fd34413 	.word	0x3fd34413
 800d530:	0800ef41 	.word	0x0800ef41
 800d534:	0800ef58 	.word	0x0800ef58
 800d538:	7ff00000 	.word	0x7ff00000
 800d53c:	0800ef11 	.word	0x0800ef11
 800d540:	3ff80000 	.word	0x3ff80000
 800d544:	0800f050 	.word	0x0800f050
 800d548:	0800efb0 	.word	0x0800efb0
 800d54c:	0800ef3d 	.word	0x0800ef3d
 800d550:	0800ef10 	.word	0x0800ef10
 800d554:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d558:	6018      	str	r0, [r3, #0]
 800d55a:	9b07      	ldr	r3, [sp, #28]
 800d55c:	2b0e      	cmp	r3, #14
 800d55e:	f200 80a4 	bhi.w	800d6aa <_dtoa_r+0x442>
 800d562:	2c00      	cmp	r4, #0
 800d564:	f000 80a1 	beq.w	800d6aa <_dtoa_r+0x442>
 800d568:	2f00      	cmp	r7, #0
 800d56a:	dd33      	ble.n	800d5d4 <_dtoa_r+0x36c>
 800d56c:	4bad      	ldr	r3, [pc, #692]	@ (800d824 <_dtoa_r+0x5bc>)
 800d56e:	f007 020f 	and.w	r2, r7, #15
 800d572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d576:	ed93 7b00 	vldr	d7, [r3]
 800d57a:	05f8      	lsls	r0, r7, #23
 800d57c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d580:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d584:	d516      	bpl.n	800d5b4 <_dtoa_r+0x34c>
 800d586:	4ba8      	ldr	r3, [pc, #672]	@ (800d828 <_dtoa_r+0x5c0>)
 800d588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d58c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d590:	f7f3 f984 	bl	800089c <__aeabi_ddiv>
 800d594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d598:	f004 040f 	and.w	r4, r4, #15
 800d59c:	2603      	movs	r6, #3
 800d59e:	4da2      	ldr	r5, [pc, #648]	@ (800d828 <_dtoa_r+0x5c0>)
 800d5a0:	b954      	cbnz	r4, 800d5b8 <_dtoa_r+0x350>
 800d5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5aa:	f7f3 f977 	bl	800089c <__aeabi_ddiv>
 800d5ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5b2:	e028      	b.n	800d606 <_dtoa_r+0x39e>
 800d5b4:	2602      	movs	r6, #2
 800d5b6:	e7f2      	b.n	800d59e <_dtoa_r+0x336>
 800d5b8:	07e1      	lsls	r1, r4, #31
 800d5ba:	d508      	bpl.n	800d5ce <_dtoa_r+0x366>
 800d5bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5c4:	f7f3 f840 	bl	8000648 <__aeabi_dmul>
 800d5c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5cc:	3601      	adds	r6, #1
 800d5ce:	1064      	asrs	r4, r4, #1
 800d5d0:	3508      	adds	r5, #8
 800d5d2:	e7e5      	b.n	800d5a0 <_dtoa_r+0x338>
 800d5d4:	f000 80d2 	beq.w	800d77c <_dtoa_r+0x514>
 800d5d8:	427c      	negs	r4, r7
 800d5da:	4b92      	ldr	r3, [pc, #584]	@ (800d824 <_dtoa_r+0x5bc>)
 800d5dc:	4d92      	ldr	r5, [pc, #584]	@ (800d828 <_dtoa_r+0x5c0>)
 800d5de:	f004 020f 	and.w	r2, r4, #15
 800d5e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5ee:	f7f3 f82b 	bl	8000648 <__aeabi_dmul>
 800d5f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5f6:	1124      	asrs	r4, r4, #4
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	2602      	movs	r6, #2
 800d5fc:	2c00      	cmp	r4, #0
 800d5fe:	f040 80b2 	bne.w	800d766 <_dtoa_r+0x4fe>
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1d3      	bne.n	800d5ae <_dtoa_r+0x346>
 800d606:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d608:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80b7 	beq.w	800d780 <_dtoa_r+0x518>
 800d612:	4b86      	ldr	r3, [pc, #536]	@ (800d82c <_dtoa_r+0x5c4>)
 800d614:	2200      	movs	r2, #0
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f3 fa87 	bl	8000b2c <__aeabi_dcmplt>
 800d61e:	2800      	cmp	r0, #0
 800d620:	f000 80ae 	beq.w	800d780 <_dtoa_r+0x518>
 800d624:	9b07      	ldr	r3, [sp, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 80aa 	beq.w	800d780 <_dtoa_r+0x518>
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	dd37      	ble.n	800d6a2 <_dtoa_r+0x43a>
 800d632:	1e7b      	subs	r3, r7, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	4620      	mov	r0, r4
 800d638:	4b7d      	ldr	r3, [pc, #500]	@ (800d830 <_dtoa_r+0x5c8>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f3 f803 	bl	8000648 <__aeabi_dmul>
 800d642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d646:	9c00      	ldr	r4, [sp, #0]
 800d648:	3601      	adds	r6, #1
 800d64a:	4630      	mov	r0, r6
 800d64c:	f7f2 ff92 	bl	8000574 <__aeabi_i2d>
 800d650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d654:	f7f2 fff8 	bl	8000648 <__aeabi_dmul>
 800d658:	4b76      	ldr	r3, [pc, #472]	@ (800d834 <_dtoa_r+0x5cc>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	f7f2 fe3e 	bl	80002dc <__adddf3>
 800d660:	4605      	mov	r5, r0
 800d662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d666:	2c00      	cmp	r4, #0
 800d668:	f040 808d 	bne.w	800d786 <_dtoa_r+0x51e>
 800d66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d670:	4b71      	ldr	r3, [pc, #452]	@ (800d838 <_dtoa_r+0x5d0>)
 800d672:	2200      	movs	r2, #0
 800d674:	f7f2 fe30 	bl	80002d8 <__aeabi_dsub>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d680:	462a      	mov	r2, r5
 800d682:	4633      	mov	r3, r6
 800d684:	f7f3 fa70 	bl	8000b68 <__aeabi_dcmpgt>
 800d688:	2800      	cmp	r0, #0
 800d68a:	f040 828b 	bne.w	800dba4 <_dtoa_r+0x93c>
 800d68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d692:	462a      	mov	r2, r5
 800d694:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d698:	f7f3 fa48 	bl	8000b2c <__aeabi_dcmplt>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	f040 8128 	bne.w	800d8f2 <_dtoa_r+0x68a>
 800d6a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d6a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d6aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f2c0 815a 	blt.w	800d966 <_dtoa_r+0x6fe>
 800d6b2:	2f0e      	cmp	r7, #14
 800d6b4:	f300 8157 	bgt.w	800d966 <_dtoa_r+0x6fe>
 800d6b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d824 <_dtoa_r+0x5bc>)
 800d6ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6be:	ed93 7b00 	vldr	d7, [r3]
 800d6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	ed8d 7b00 	vstr	d7, [sp]
 800d6ca:	da03      	bge.n	800d6d4 <_dtoa_r+0x46c>
 800d6cc:	9b07      	ldr	r3, [sp, #28]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f340 8101 	ble.w	800d8d6 <_dtoa_r+0x66e>
 800d6d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6d8:	4656      	mov	r6, sl
 800d6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f3 f8db 	bl	800089c <__aeabi_ddiv>
 800d6e6:	f7f3 fa5f 	bl	8000ba8 <__aeabi_d2iz>
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	f7f2 ff42 	bl	8000574 <__aeabi_i2d>
 800d6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6f4:	f7f2 ffa8 	bl	8000648 <__aeabi_dmul>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d704:	f7f2 fde8 	bl	80002d8 <__aeabi_dsub>
 800d708:	f806 4b01 	strb.w	r4, [r6], #1
 800d70c:	9d07      	ldr	r5, [sp, #28]
 800d70e:	eba6 040a 	sub.w	r4, r6, sl
 800d712:	42a5      	cmp	r5, r4
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	f040 8117 	bne.w	800d94a <_dtoa_r+0x6e2>
 800d71c:	f7f2 fdde 	bl	80002dc <__adddf3>
 800d720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d724:	4604      	mov	r4, r0
 800d726:	460d      	mov	r5, r1
 800d728:	f7f3 fa1e 	bl	8000b68 <__aeabi_dcmpgt>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	f040 80f9 	bne.w	800d924 <_dtoa_r+0x6bc>
 800d732:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d736:	4620      	mov	r0, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	f7f3 f9ed 	bl	8000b18 <__aeabi_dcmpeq>
 800d73e:	b118      	cbz	r0, 800d748 <_dtoa_r+0x4e0>
 800d740:	f018 0f01 	tst.w	r8, #1
 800d744:	f040 80ee 	bne.w	800d924 <_dtoa_r+0x6bc>
 800d748:	4649      	mov	r1, r9
 800d74a:	4658      	mov	r0, fp
 800d74c:	f000 fc90 	bl	800e070 <_Bfree>
 800d750:	2300      	movs	r3, #0
 800d752:	7033      	strb	r3, [r6, #0]
 800d754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d756:	3701      	adds	r7, #1
 800d758:	601f      	str	r7, [r3, #0]
 800d75a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 831d 	beq.w	800dd9c <_dtoa_r+0xb34>
 800d762:	601e      	str	r6, [r3, #0]
 800d764:	e31a      	b.n	800dd9c <_dtoa_r+0xb34>
 800d766:	07e2      	lsls	r2, r4, #31
 800d768:	d505      	bpl.n	800d776 <_dtoa_r+0x50e>
 800d76a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d76e:	f7f2 ff6b 	bl	8000648 <__aeabi_dmul>
 800d772:	3601      	adds	r6, #1
 800d774:	2301      	movs	r3, #1
 800d776:	1064      	asrs	r4, r4, #1
 800d778:	3508      	adds	r5, #8
 800d77a:	e73f      	b.n	800d5fc <_dtoa_r+0x394>
 800d77c:	2602      	movs	r6, #2
 800d77e:	e742      	b.n	800d606 <_dtoa_r+0x39e>
 800d780:	9c07      	ldr	r4, [sp, #28]
 800d782:	9704      	str	r7, [sp, #16]
 800d784:	e761      	b.n	800d64a <_dtoa_r+0x3e2>
 800d786:	4b27      	ldr	r3, [pc, #156]	@ (800d824 <_dtoa_r+0x5bc>)
 800d788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d78a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d78e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d792:	4454      	add	r4, sl
 800d794:	2900      	cmp	r1, #0
 800d796:	d053      	beq.n	800d840 <_dtoa_r+0x5d8>
 800d798:	4928      	ldr	r1, [pc, #160]	@ (800d83c <_dtoa_r+0x5d4>)
 800d79a:	2000      	movs	r0, #0
 800d79c:	f7f3 f87e 	bl	800089c <__aeabi_ddiv>
 800d7a0:	4633      	mov	r3, r6
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	f7f2 fd98 	bl	80002d8 <__aeabi_dsub>
 800d7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7ac:	4656      	mov	r6, sl
 800d7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b2:	f7f3 f9f9 	bl	8000ba8 <__aeabi_d2iz>
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	f7f2 fedc 	bl	8000574 <__aeabi_i2d>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c4:	f7f2 fd88 	bl	80002d8 <__aeabi_dsub>
 800d7c8:	3530      	adds	r5, #48	@ 0x30
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7d2:	f806 5b01 	strb.w	r5, [r6], #1
 800d7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7da:	f7f3 f9a7 	bl	8000b2c <__aeabi_dcmplt>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d171      	bne.n	800d8c6 <_dtoa_r+0x65e>
 800d7e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7e6:	4911      	ldr	r1, [pc, #68]	@ (800d82c <_dtoa_r+0x5c4>)
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	f7f2 fd75 	bl	80002d8 <__aeabi_dsub>
 800d7ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7f2:	f7f3 f99b 	bl	8000b2c <__aeabi_dcmplt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f040 8095 	bne.w	800d926 <_dtoa_r+0x6be>
 800d7fc:	42a6      	cmp	r6, r4
 800d7fe:	f43f af50 	beq.w	800d6a2 <_dtoa_r+0x43a>
 800d802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d806:	4b0a      	ldr	r3, [pc, #40]	@ (800d830 <_dtoa_r+0x5c8>)
 800d808:	2200      	movs	r2, #0
 800d80a:	f7f2 ff1d 	bl	8000648 <__aeabi_dmul>
 800d80e:	4b08      	ldr	r3, [pc, #32]	@ (800d830 <_dtoa_r+0x5c8>)
 800d810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d814:	2200      	movs	r2, #0
 800d816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d81a:	f7f2 ff15 	bl	8000648 <__aeabi_dmul>
 800d81e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d822:	e7c4      	b.n	800d7ae <_dtoa_r+0x546>
 800d824:	0800f050 	.word	0x0800f050
 800d828:	0800f028 	.word	0x0800f028
 800d82c:	3ff00000 	.word	0x3ff00000
 800d830:	40240000 	.word	0x40240000
 800d834:	401c0000 	.word	0x401c0000
 800d838:	40140000 	.word	0x40140000
 800d83c:	3fe00000 	.word	0x3fe00000
 800d840:	4631      	mov	r1, r6
 800d842:	4628      	mov	r0, r5
 800d844:	f7f2 ff00 	bl	8000648 <__aeabi_dmul>
 800d848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d84c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d84e:	4656      	mov	r6, sl
 800d850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d854:	f7f3 f9a8 	bl	8000ba8 <__aeabi_d2iz>
 800d858:	4605      	mov	r5, r0
 800d85a:	f7f2 fe8b 	bl	8000574 <__aeabi_i2d>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d866:	f7f2 fd37 	bl	80002d8 <__aeabi_dsub>
 800d86a:	3530      	adds	r5, #48	@ 0x30
 800d86c:	f806 5b01 	strb.w	r5, [r6], #1
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	42a6      	cmp	r6, r4
 800d876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d87a:	f04f 0200 	mov.w	r2, #0
 800d87e:	d124      	bne.n	800d8ca <_dtoa_r+0x662>
 800d880:	4bac      	ldr	r3, [pc, #688]	@ (800db34 <_dtoa_r+0x8cc>)
 800d882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d886:	f7f2 fd29 	bl	80002dc <__adddf3>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d892:	f7f3 f969 	bl	8000b68 <__aeabi_dcmpgt>
 800d896:	2800      	cmp	r0, #0
 800d898:	d145      	bne.n	800d926 <_dtoa_r+0x6be>
 800d89a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d89e:	49a5      	ldr	r1, [pc, #660]	@ (800db34 <_dtoa_r+0x8cc>)
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f7f2 fd19 	bl	80002d8 <__aeabi_dsub>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ae:	f7f3 f93d 	bl	8000b2c <__aeabi_dcmplt>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f43f aef5 	beq.w	800d6a2 <_dtoa_r+0x43a>
 800d8b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d8ba:	1e73      	subs	r3, r6, #1
 800d8bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8c2:	2b30      	cmp	r3, #48	@ 0x30
 800d8c4:	d0f8      	beq.n	800d8b8 <_dtoa_r+0x650>
 800d8c6:	9f04      	ldr	r7, [sp, #16]
 800d8c8:	e73e      	b.n	800d748 <_dtoa_r+0x4e0>
 800d8ca:	4b9b      	ldr	r3, [pc, #620]	@ (800db38 <_dtoa_r+0x8d0>)
 800d8cc:	f7f2 febc 	bl	8000648 <__aeabi_dmul>
 800d8d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d4:	e7bc      	b.n	800d850 <_dtoa_r+0x5e8>
 800d8d6:	d10c      	bne.n	800d8f2 <_dtoa_r+0x68a>
 800d8d8:	4b98      	ldr	r3, [pc, #608]	@ (800db3c <_dtoa_r+0x8d4>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8e0:	f7f2 feb2 	bl	8000648 <__aeabi_dmul>
 800d8e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8e8:	f7f3 f934 	bl	8000b54 <__aeabi_dcmpge>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f000 8157 	beq.w	800dba0 <_dtoa_r+0x938>
 800d8f2:	2400      	movs	r4, #0
 800d8f4:	4625      	mov	r5, r4
 800d8f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8f8:	43db      	mvns	r3, r3
 800d8fa:	9304      	str	r3, [sp, #16]
 800d8fc:	4656      	mov	r6, sl
 800d8fe:	2700      	movs	r7, #0
 800d900:	4621      	mov	r1, r4
 800d902:	4658      	mov	r0, fp
 800d904:	f000 fbb4 	bl	800e070 <_Bfree>
 800d908:	2d00      	cmp	r5, #0
 800d90a:	d0dc      	beq.n	800d8c6 <_dtoa_r+0x65e>
 800d90c:	b12f      	cbz	r7, 800d91a <_dtoa_r+0x6b2>
 800d90e:	42af      	cmp	r7, r5
 800d910:	d003      	beq.n	800d91a <_dtoa_r+0x6b2>
 800d912:	4639      	mov	r1, r7
 800d914:	4658      	mov	r0, fp
 800d916:	f000 fbab 	bl	800e070 <_Bfree>
 800d91a:	4629      	mov	r1, r5
 800d91c:	4658      	mov	r0, fp
 800d91e:	f000 fba7 	bl	800e070 <_Bfree>
 800d922:	e7d0      	b.n	800d8c6 <_dtoa_r+0x65e>
 800d924:	9704      	str	r7, [sp, #16]
 800d926:	4633      	mov	r3, r6
 800d928:	461e      	mov	r6, r3
 800d92a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d92e:	2a39      	cmp	r2, #57	@ 0x39
 800d930:	d107      	bne.n	800d942 <_dtoa_r+0x6da>
 800d932:	459a      	cmp	sl, r3
 800d934:	d1f8      	bne.n	800d928 <_dtoa_r+0x6c0>
 800d936:	9a04      	ldr	r2, [sp, #16]
 800d938:	3201      	adds	r2, #1
 800d93a:	9204      	str	r2, [sp, #16]
 800d93c:	2230      	movs	r2, #48	@ 0x30
 800d93e:	f88a 2000 	strb.w	r2, [sl]
 800d942:	781a      	ldrb	r2, [r3, #0]
 800d944:	3201      	adds	r2, #1
 800d946:	701a      	strb	r2, [r3, #0]
 800d948:	e7bd      	b.n	800d8c6 <_dtoa_r+0x65e>
 800d94a:	4b7b      	ldr	r3, [pc, #492]	@ (800db38 <_dtoa_r+0x8d0>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	f7f2 fe7b 	bl	8000648 <__aeabi_dmul>
 800d952:	2200      	movs	r2, #0
 800d954:	2300      	movs	r3, #0
 800d956:	4604      	mov	r4, r0
 800d958:	460d      	mov	r5, r1
 800d95a:	f7f3 f8dd 	bl	8000b18 <__aeabi_dcmpeq>
 800d95e:	2800      	cmp	r0, #0
 800d960:	f43f aebb 	beq.w	800d6da <_dtoa_r+0x472>
 800d964:	e6f0      	b.n	800d748 <_dtoa_r+0x4e0>
 800d966:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d968:	2a00      	cmp	r2, #0
 800d96a:	f000 80db 	beq.w	800db24 <_dtoa_r+0x8bc>
 800d96e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d970:	2a01      	cmp	r2, #1
 800d972:	f300 80bf 	bgt.w	800daf4 <_dtoa_r+0x88c>
 800d976:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d978:	2a00      	cmp	r2, #0
 800d97a:	f000 80b7 	beq.w	800daec <_dtoa_r+0x884>
 800d97e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d982:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d984:	4646      	mov	r6, r8
 800d986:	9a08      	ldr	r2, [sp, #32]
 800d988:	2101      	movs	r1, #1
 800d98a:	441a      	add	r2, r3
 800d98c:	4658      	mov	r0, fp
 800d98e:	4498      	add	r8, r3
 800d990:	9208      	str	r2, [sp, #32]
 800d992:	f000 fc21 	bl	800e1d8 <__i2b>
 800d996:	4605      	mov	r5, r0
 800d998:	b15e      	cbz	r6, 800d9b2 <_dtoa_r+0x74a>
 800d99a:	9b08      	ldr	r3, [sp, #32]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd08      	ble.n	800d9b2 <_dtoa_r+0x74a>
 800d9a0:	42b3      	cmp	r3, r6
 800d9a2:	9a08      	ldr	r2, [sp, #32]
 800d9a4:	bfa8      	it	ge
 800d9a6:	4633      	movge	r3, r6
 800d9a8:	eba8 0803 	sub.w	r8, r8, r3
 800d9ac:	1af6      	subs	r6, r6, r3
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	9308      	str	r3, [sp, #32]
 800d9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9b4:	b1f3      	cbz	r3, 800d9f4 <_dtoa_r+0x78c>
 800d9b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f000 80b7 	beq.w	800db2c <_dtoa_r+0x8c4>
 800d9be:	b18c      	cbz	r4, 800d9e4 <_dtoa_r+0x77c>
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	4658      	mov	r0, fp
 800d9c6:	f000 fcc7 	bl	800e358 <__pow5mult>
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	4658      	mov	r0, fp
 800d9d2:	f000 fc17 	bl	800e204 <__multiply>
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	9004      	str	r0, [sp, #16]
 800d9da:	4658      	mov	r0, fp
 800d9dc:	f000 fb48 	bl	800e070 <_Bfree>
 800d9e0:	9b04      	ldr	r3, [sp, #16]
 800d9e2:	4699      	mov	r9, r3
 800d9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9e6:	1b1a      	subs	r2, r3, r4
 800d9e8:	d004      	beq.n	800d9f4 <_dtoa_r+0x78c>
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	4658      	mov	r0, fp
 800d9ee:	f000 fcb3 	bl	800e358 <__pow5mult>
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	4658      	mov	r0, fp
 800d9f8:	f000 fbee 	bl	800e1d8 <__i2b>
 800d9fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9fe:	4604      	mov	r4, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 81cf 	beq.w	800dda4 <_dtoa_r+0xb3c>
 800da06:	461a      	mov	r2, r3
 800da08:	4601      	mov	r1, r0
 800da0a:	4658      	mov	r0, fp
 800da0c:	f000 fca4 	bl	800e358 <__pow5mult>
 800da10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da12:	2b01      	cmp	r3, #1
 800da14:	4604      	mov	r4, r0
 800da16:	f300 8095 	bgt.w	800db44 <_dtoa_r+0x8dc>
 800da1a:	9b02      	ldr	r3, [sp, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f040 8087 	bne.w	800db30 <_dtoa_r+0x8c8>
 800da22:	9b03      	ldr	r3, [sp, #12]
 800da24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f040 8089 	bne.w	800db40 <_dtoa_r+0x8d8>
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da34:	0d1b      	lsrs	r3, r3, #20
 800da36:	051b      	lsls	r3, r3, #20
 800da38:	b12b      	cbz	r3, 800da46 <_dtoa_r+0x7de>
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	3301      	adds	r3, #1
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	f108 0801 	add.w	r8, r8, #1
 800da44:	2301      	movs	r3, #1
 800da46:	930a      	str	r3, [sp, #40]	@ 0x28
 800da48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 81b0 	beq.w	800ddb0 <_dtoa_r+0xb48>
 800da50:	6923      	ldr	r3, [r4, #16]
 800da52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da56:	6918      	ldr	r0, [r3, #16]
 800da58:	f000 fb72 	bl	800e140 <__hi0bits>
 800da5c:	f1c0 0020 	rsb	r0, r0, #32
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	4418      	add	r0, r3
 800da64:	f010 001f 	ands.w	r0, r0, #31
 800da68:	d077      	beq.n	800db5a <_dtoa_r+0x8f2>
 800da6a:	f1c0 0320 	rsb	r3, r0, #32
 800da6e:	2b04      	cmp	r3, #4
 800da70:	dd6b      	ble.n	800db4a <_dtoa_r+0x8e2>
 800da72:	9b08      	ldr	r3, [sp, #32]
 800da74:	f1c0 001c 	rsb	r0, r0, #28
 800da78:	4403      	add	r3, r0
 800da7a:	4480      	add	r8, r0
 800da7c:	4406      	add	r6, r0
 800da7e:	9308      	str	r3, [sp, #32]
 800da80:	f1b8 0f00 	cmp.w	r8, #0
 800da84:	dd05      	ble.n	800da92 <_dtoa_r+0x82a>
 800da86:	4649      	mov	r1, r9
 800da88:	4642      	mov	r2, r8
 800da8a:	4658      	mov	r0, fp
 800da8c:	f000 fcbe 	bl	800e40c <__lshift>
 800da90:	4681      	mov	r9, r0
 800da92:	9b08      	ldr	r3, [sp, #32]
 800da94:	2b00      	cmp	r3, #0
 800da96:	dd05      	ble.n	800daa4 <_dtoa_r+0x83c>
 800da98:	4621      	mov	r1, r4
 800da9a:	461a      	mov	r2, r3
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 fcb5 	bl	800e40c <__lshift>
 800daa2:	4604      	mov	r4, r0
 800daa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d059      	beq.n	800db5e <_dtoa_r+0x8f6>
 800daaa:	4621      	mov	r1, r4
 800daac:	4648      	mov	r0, r9
 800daae:	f000 fd19 	bl	800e4e4 <__mcmp>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	da53      	bge.n	800db5e <_dtoa_r+0x8f6>
 800dab6:	1e7b      	subs	r3, r7, #1
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	4649      	mov	r1, r9
 800dabc:	2300      	movs	r3, #0
 800dabe:	220a      	movs	r2, #10
 800dac0:	4658      	mov	r0, fp
 800dac2:	f000 faf7 	bl	800e0b4 <__multadd>
 800dac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dac8:	4681      	mov	r9, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 8172 	beq.w	800ddb4 <_dtoa_r+0xb4c>
 800dad0:	2300      	movs	r3, #0
 800dad2:	4629      	mov	r1, r5
 800dad4:	220a      	movs	r2, #10
 800dad6:	4658      	mov	r0, fp
 800dad8:	f000 faec 	bl	800e0b4 <__multadd>
 800dadc:	9b00      	ldr	r3, [sp, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	4605      	mov	r5, r0
 800dae2:	dc67      	bgt.n	800dbb4 <_dtoa_r+0x94c>
 800dae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	dc41      	bgt.n	800db6e <_dtoa_r+0x906>
 800daea:	e063      	b.n	800dbb4 <_dtoa_r+0x94c>
 800daec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800daee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800daf2:	e746      	b.n	800d982 <_dtoa_r+0x71a>
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	1e5c      	subs	r4, r3, #1
 800daf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dafa:	42a3      	cmp	r3, r4
 800dafc:	bfbf      	itttt	lt
 800dafe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800db00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800db02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800db04:	1ae3      	sublt	r3, r4, r3
 800db06:	bfb4      	ite	lt
 800db08:	18d2      	addlt	r2, r2, r3
 800db0a:	1b1c      	subge	r4, r3, r4
 800db0c:	9b07      	ldr	r3, [sp, #28]
 800db0e:	bfbc      	itt	lt
 800db10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800db12:	2400      	movlt	r4, #0
 800db14:	2b00      	cmp	r3, #0
 800db16:	bfb5      	itete	lt
 800db18:	eba8 0603 	sublt.w	r6, r8, r3
 800db1c:	9b07      	ldrge	r3, [sp, #28]
 800db1e:	2300      	movlt	r3, #0
 800db20:	4646      	movge	r6, r8
 800db22:	e730      	b.n	800d986 <_dtoa_r+0x71e>
 800db24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db28:	4646      	mov	r6, r8
 800db2a:	e735      	b.n	800d998 <_dtoa_r+0x730>
 800db2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db2e:	e75c      	b.n	800d9ea <_dtoa_r+0x782>
 800db30:	2300      	movs	r3, #0
 800db32:	e788      	b.n	800da46 <_dtoa_r+0x7de>
 800db34:	3fe00000 	.word	0x3fe00000
 800db38:	40240000 	.word	0x40240000
 800db3c:	40140000 	.word	0x40140000
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	e780      	b.n	800da46 <_dtoa_r+0x7de>
 800db44:	2300      	movs	r3, #0
 800db46:	930a      	str	r3, [sp, #40]	@ 0x28
 800db48:	e782      	b.n	800da50 <_dtoa_r+0x7e8>
 800db4a:	d099      	beq.n	800da80 <_dtoa_r+0x818>
 800db4c:	9a08      	ldr	r2, [sp, #32]
 800db4e:	331c      	adds	r3, #28
 800db50:	441a      	add	r2, r3
 800db52:	4498      	add	r8, r3
 800db54:	441e      	add	r6, r3
 800db56:	9208      	str	r2, [sp, #32]
 800db58:	e792      	b.n	800da80 <_dtoa_r+0x818>
 800db5a:	4603      	mov	r3, r0
 800db5c:	e7f6      	b.n	800db4c <_dtoa_r+0x8e4>
 800db5e:	9b07      	ldr	r3, [sp, #28]
 800db60:	9704      	str	r7, [sp, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	dc20      	bgt.n	800dba8 <_dtoa_r+0x940>
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	dd1e      	ble.n	800dbac <_dtoa_r+0x944>
 800db6e:	9b00      	ldr	r3, [sp, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	f47f aec0 	bne.w	800d8f6 <_dtoa_r+0x68e>
 800db76:	4621      	mov	r1, r4
 800db78:	2205      	movs	r2, #5
 800db7a:	4658      	mov	r0, fp
 800db7c:	f000 fa9a 	bl	800e0b4 <__multadd>
 800db80:	4601      	mov	r1, r0
 800db82:	4604      	mov	r4, r0
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fcad 	bl	800e4e4 <__mcmp>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	f77f aeb3 	ble.w	800d8f6 <_dtoa_r+0x68e>
 800db90:	4656      	mov	r6, sl
 800db92:	2331      	movs	r3, #49	@ 0x31
 800db94:	f806 3b01 	strb.w	r3, [r6], #1
 800db98:	9b04      	ldr	r3, [sp, #16]
 800db9a:	3301      	adds	r3, #1
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	e6ae      	b.n	800d8fe <_dtoa_r+0x696>
 800dba0:	9c07      	ldr	r4, [sp, #28]
 800dba2:	9704      	str	r7, [sp, #16]
 800dba4:	4625      	mov	r5, r4
 800dba6:	e7f3      	b.n	800db90 <_dtoa_r+0x928>
 800dba8:	9b07      	ldr	r3, [sp, #28]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 8104 	beq.w	800ddbc <_dtoa_r+0xb54>
 800dbb4:	2e00      	cmp	r6, #0
 800dbb6:	dd05      	ble.n	800dbc4 <_dtoa_r+0x95c>
 800dbb8:	4629      	mov	r1, r5
 800dbba:	4632      	mov	r2, r6
 800dbbc:	4658      	mov	r0, fp
 800dbbe:	f000 fc25 	bl	800e40c <__lshift>
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d05a      	beq.n	800dc80 <_dtoa_r+0xa18>
 800dbca:	6869      	ldr	r1, [r5, #4]
 800dbcc:	4658      	mov	r0, fp
 800dbce:	f000 fa0f 	bl	800dff0 <_Balloc>
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	b928      	cbnz	r0, 800dbe2 <_dtoa_r+0x97a>
 800dbd6:	4b84      	ldr	r3, [pc, #528]	@ (800dde8 <_dtoa_r+0xb80>)
 800dbd8:	4602      	mov	r2, r0
 800dbda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbde:	f7ff bb5a 	b.w	800d296 <_dtoa_r+0x2e>
 800dbe2:	692a      	ldr	r2, [r5, #16]
 800dbe4:	3202      	adds	r2, #2
 800dbe6:	0092      	lsls	r2, r2, #2
 800dbe8:	f105 010c 	add.w	r1, r5, #12
 800dbec:	300c      	adds	r0, #12
 800dbee:	f000 fe3d 	bl	800e86c <memcpy>
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4658      	mov	r0, fp
 800dbf8:	f000 fc08 	bl	800e40c <__lshift>
 800dbfc:	f10a 0301 	add.w	r3, sl, #1
 800dc00:	9307      	str	r3, [sp, #28]
 800dc02:	9b00      	ldr	r3, [sp, #0]
 800dc04:	4453      	add	r3, sl
 800dc06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc08:	9b02      	ldr	r3, [sp, #8]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	462f      	mov	r7, r5
 800dc10:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc12:	4605      	mov	r5, r0
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	4621      	mov	r1, r4
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	4648      	mov	r0, r9
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	f7ff fa98 	bl	800d152 <quorem>
 800dc22:	4639      	mov	r1, r7
 800dc24:	9002      	str	r0, [sp, #8]
 800dc26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc2a:	4648      	mov	r0, r9
 800dc2c:	f000 fc5a 	bl	800e4e4 <__mcmp>
 800dc30:	462a      	mov	r2, r5
 800dc32:	9008      	str	r0, [sp, #32]
 800dc34:	4621      	mov	r1, r4
 800dc36:	4658      	mov	r0, fp
 800dc38:	f000 fc70 	bl	800e51c <__mdiff>
 800dc3c:	68c2      	ldr	r2, [r0, #12]
 800dc3e:	4606      	mov	r6, r0
 800dc40:	bb02      	cbnz	r2, 800dc84 <_dtoa_r+0xa1c>
 800dc42:	4601      	mov	r1, r0
 800dc44:	4648      	mov	r0, r9
 800dc46:	f000 fc4d 	bl	800e4e4 <__mcmp>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4658      	mov	r0, fp
 800dc50:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc52:	f000 fa0d 	bl	800e070 <_Bfree>
 800dc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc5a:	9e07      	ldr	r6, [sp, #28]
 800dc5c:	ea43 0102 	orr.w	r1, r3, r2
 800dc60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc62:	4319      	orrs	r1, r3
 800dc64:	d110      	bne.n	800dc88 <_dtoa_r+0xa20>
 800dc66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc6a:	d029      	beq.n	800dcc0 <_dtoa_r+0xa58>
 800dc6c:	9b08      	ldr	r3, [sp, #32]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dd02      	ble.n	800dc78 <_dtoa_r+0xa10>
 800dc72:	9b02      	ldr	r3, [sp, #8]
 800dc74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dc78:	9b00      	ldr	r3, [sp, #0]
 800dc7a:	f883 8000 	strb.w	r8, [r3]
 800dc7e:	e63f      	b.n	800d900 <_dtoa_r+0x698>
 800dc80:	4628      	mov	r0, r5
 800dc82:	e7bb      	b.n	800dbfc <_dtoa_r+0x994>
 800dc84:	2201      	movs	r2, #1
 800dc86:	e7e1      	b.n	800dc4c <_dtoa_r+0x9e4>
 800dc88:	9b08      	ldr	r3, [sp, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	db04      	blt.n	800dc98 <_dtoa_r+0xa30>
 800dc8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc90:	430b      	orrs	r3, r1
 800dc92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc94:	430b      	orrs	r3, r1
 800dc96:	d120      	bne.n	800dcda <_dtoa_r+0xa72>
 800dc98:	2a00      	cmp	r2, #0
 800dc9a:	dded      	ble.n	800dc78 <_dtoa_r+0xa10>
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	2201      	movs	r2, #1
 800dca0:	4658      	mov	r0, fp
 800dca2:	f000 fbb3 	bl	800e40c <__lshift>
 800dca6:	4621      	mov	r1, r4
 800dca8:	4681      	mov	r9, r0
 800dcaa:	f000 fc1b 	bl	800e4e4 <__mcmp>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	dc03      	bgt.n	800dcba <_dtoa_r+0xa52>
 800dcb2:	d1e1      	bne.n	800dc78 <_dtoa_r+0xa10>
 800dcb4:	f018 0f01 	tst.w	r8, #1
 800dcb8:	d0de      	beq.n	800dc78 <_dtoa_r+0xa10>
 800dcba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcbe:	d1d8      	bne.n	800dc72 <_dtoa_r+0xa0a>
 800dcc0:	9a00      	ldr	r2, [sp, #0]
 800dcc2:	2339      	movs	r3, #57	@ 0x39
 800dcc4:	7013      	strb	r3, [r2, #0]
 800dcc6:	4633      	mov	r3, r6
 800dcc8:	461e      	mov	r6, r3
 800dcca:	3b01      	subs	r3, #1
 800dccc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcd0:	2a39      	cmp	r2, #57	@ 0x39
 800dcd2:	d052      	beq.n	800dd7a <_dtoa_r+0xb12>
 800dcd4:	3201      	adds	r2, #1
 800dcd6:	701a      	strb	r2, [r3, #0]
 800dcd8:	e612      	b.n	800d900 <_dtoa_r+0x698>
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	dd07      	ble.n	800dcee <_dtoa_r+0xa86>
 800dcde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dce2:	d0ed      	beq.n	800dcc0 <_dtoa_r+0xa58>
 800dce4:	9a00      	ldr	r2, [sp, #0]
 800dce6:	f108 0301 	add.w	r3, r8, #1
 800dcea:	7013      	strb	r3, [r2, #0]
 800dcec:	e608      	b.n	800d900 <_dtoa_r+0x698>
 800dcee:	9b07      	ldr	r3, [sp, #28]
 800dcf0:	9a07      	ldr	r2, [sp, #28]
 800dcf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dcf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d028      	beq.n	800dd4e <_dtoa_r+0xae6>
 800dcfc:	4649      	mov	r1, r9
 800dcfe:	2300      	movs	r3, #0
 800dd00:	220a      	movs	r2, #10
 800dd02:	4658      	mov	r0, fp
 800dd04:	f000 f9d6 	bl	800e0b4 <__multadd>
 800dd08:	42af      	cmp	r7, r5
 800dd0a:	4681      	mov	r9, r0
 800dd0c:	f04f 0300 	mov.w	r3, #0
 800dd10:	f04f 020a 	mov.w	r2, #10
 800dd14:	4639      	mov	r1, r7
 800dd16:	4658      	mov	r0, fp
 800dd18:	d107      	bne.n	800dd2a <_dtoa_r+0xac2>
 800dd1a:	f000 f9cb 	bl	800e0b4 <__multadd>
 800dd1e:	4607      	mov	r7, r0
 800dd20:	4605      	mov	r5, r0
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	3301      	adds	r3, #1
 800dd26:	9307      	str	r3, [sp, #28]
 800dd28:	e774      	b.n	800dc14 <_dtoa_r+0x9ac>
 800dd2a:	f000 f9c3 	bl	800e0b4 <__multadd>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4607      	mov	r7, r0
 800dd32:	2300      	movs	r3, #0
 800dd34:	220a      	movs	r2, #10
 800dd36:	4658      	mov	r0, fp
 800dd38:	f000 f9bc 	bl	800e0b4 <__multadd>
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	e7f0      	b.n	800dd22 <_dtoa_r+0xaba>
 800dd40:	9b00      	ldr	r3, [sp, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bfcc      	ite	gt
 800dd46:	461e      	movgt	r6, r3
 800dd48:	2601      	movle	r6, #1
 800dd4a:	4456      	add	r6, sl
 800dd4c:	2700      	movs	r7, #0
 800dd4e:	4649      	mov	r1, r9
 800dd50:	2201      	movs	r2, #1
 800dd52:	4658      	mov	r0, fp
 800dd54:	f000 fb5a 	bl	800e40c <__lshift>
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4681      	mov	r9, r0
 800dd5c:	f000 fbc2 	bl	800e4e4 <__mcmp>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dcb0      	bgt.n	800dcc6 <_dtoa_r+0xa5e>
 800dd64:	d102      	bne.n	800dd6c <_dtoa_r+0xb04>
 800dd66:	f018 0f01 	tst.w	r8, #1
 800dd6a:	d1ac      	bne.n	800dcc6 <_dtoa_r+0xa5e>
 800dd6c:	4633      	mov	r3, r6
 800dd6e:	461e      	mov	r6, r3
 800dd70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd74:	2a30      	cmp	r2, #48	@ 0x30
 800dd76:	d0fa      	beq.n	800dd6e <_dtoa_r+0xb06>
 800dd78:	e5c2      	b.n	800d900 <_dtoa_r+0x698>
 800dd7a:	459a      	cmp	sl, r3
 800dd7c:	d1a4      	bne.n	800dcc8 <_dtoa_r+0xa60>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	2331      	movs	r3, #49	@ 0x31
 800dd86:	f88a 3000 	strb.w	r3, [sl]
 800dd8a:	e5b9      	b.n	800d900 <_dtoa_r+0x698>
 800dd8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ddec <_dtoa_r+0xb84>
 800dd92:	b11b      	cbz	r3, 800dd9c <_dtoa_r+0xb34>
 800dd94:	f10a 0308 	add.w	r3, sl, #8
 800dd98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	4650      	mov	r0, sl
 800dd9e:	b019      	add	sp, #100	@ 0x64
 800dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	f77f ae37 	ble.w	800da1a <_dtoa_r+0x7b2>
 800ddac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddae:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddb0:	2001      	movs	r0, #1
 800ddb2:	e655      	b.n	800da60 <_dtoa_r+0x7f8>
 800ddb4:	9b00      	ldr	r3, [sp, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f77f aed6 	ble.w	800db68 <_dtoa_r+0x900>
 800ddbc:	4656      	mov	r6, sl
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	4648      	mov	r0, r9
 800ddc2:	f7ff f9c6 	bl	800d152 <quorem>
 800ddc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddca:	f806 8b01 	strb.w	r8, [r6], #1
 800ddce:	9b00      	ldr	r3, [sp, #0]
 800ddd0:	eba6 020a 	sub.w	r2, r6, sl
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	ddb3      	ble.n	800dd40 <_dtoa_r+0xad8>
 800ddd8:	4649      	mov	r1, r9
 800ddda:	2300      	movs	r3, #0
 800dddc:	220a      	movs	r2, #10
 800ddde:	4658      	mov	r0, fp
 800dde0:	f000 f968 	bl	800e0b4 <__multadd>
 800dde4:	4681      	mov	r9, r0
 800dde6:	e7ea      	b.n	800ddbe <_dtoa_r+0xb56>
 800dde8:	0800efb0 	.word	0x0800efb0
 800ddec:	0800ef34 	.word	0x0800ef34

0800ddf0 <_free_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	2900      	cmp	r1, #0
 800ddf6:	d041      	beq.n	800de7c <_free_r+0x8c>
 800ddf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddfc:	1f0c      	subs	r4, r1, #4
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bfb8      	it	lt
 800de02:	18e4      	addlt	r4, r4, r3
 800de04:	f000 f8e8 	bl	800dfd8 <__malloc_lock>
 800de08:	4a1d      	ldr	r2, [pc, #116]	@ (800de80 <_free_r+0x90>)
 800de0a:	6813      	ldr	r3, [r2, #0]
 800de0c:	b933      	cbnz	r3, 800de1c <_free_r+0x2c>
 800de0e:	6063      	str	r3, [r4, #4]
 800de10:	6014      	str	r4, [r2, #0]
 800de12:	4628      	mov	r0, r5
 800de14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de18:	f000 b8e4 	b.w	800dfe4 <__malloc_unlock>
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	d908      	bls.n	800de32 <_free_r+0x42>
 800de20:	6820      	ldr	r0, [r4, #0]
 800de22:	1821      	adds	r1, r4, r0
 800de24:	428b      	cmp	r3, r1
 800de26:	bf01      	itttt	eq
 800de28:	6819      	ldreq	r1, [r3, #0]
 800de2a:	685b      	ldreq	r3, [r3, #4]
 800de2c:	1809      	addeq	r1, r1, r0
 800de2e:	6021      	streq	r1, [r4, #0]
 800de30:	e7ed      	b.n	800de0e <_free_r+0x1e>
 800de32:	461a      	mov	r2, r3
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	b10b      	cbz	r3, 800de3c <_free_r+0x4c>
 800de38:	42a3      	cmp	r3, r4
 800de3a:	d9fa      	bls.n	800de32 <_free_r+0x42>
 800de3c:	6811      	ldr	r1, [r2, #0]
 800de3e:	1850      	adds	r0, r2, r1
 800de40:	42a0      	cmp	r0, r4
 800de42:	d10b      	bne.n	800de5c <_free_r+0x6c>
 800de44:	6820      	ldr	r0, [r4, #0]
 800de46:	4401      	add	r1, r0
 800de48:	1850      	adds	r0, r2, r1
 800de4a:	4283      	cmp	r3, r0
 800de4c:	6011      	str	r1, [r2, #0]
 800de4e:	d1e0      	bne.n	800de12 <_free_r+0x22>
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	6053      	str	r3, [r2, #4]
 800de56:	4408      	add	r0, r1
 800de58:	6010      	str	r0, [r2, #0]
 800de5a:	e7da      	b.n	800de12 <_free_r+0x22>
 800de5c:	d902      	bls.n	800de64 <_free_r+0x74>
 800de5e:	230c      	movs	r3, #12
 800de60:	602b      	str	r3, [r5, #0]
 800de62:	e7d6      	b.n	800de12 <_free_r+0x22>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	1821      	adds	r1, r4, r0
 800de68:	428b      	cmp	r3, r1
 800de6a:	bf04      	itt	eq
 800de6c:	6819      	ldreq	r1, [r3, #0]
 800de6e:	685b      	ldreq	r3, [r3, #4]
 800de70:	6063      	str	r3, [r4, #4]
 800de72:	bf04      	itt	eq
 800de74:	1809      	addeq	r1, r1, r0
 800de76:	6021      	streq	r1, [r4, #0]
 800de78:	6054      	str	r4, [r2, #4]
 800de7a:	e7ca      	b.n	800de12 <_free_r+0x22>
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	bf00      	nop
 800de80:	200013b4 	.word	0x200013b4

0800de84 <malloc>:
 800de84:	4b02      	ldr	r3, [pc, #8]	@ (800de90 <malloc+0xc>)
 800de86:	4601      	mov	r1, r0
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f000 b825 	b.w	800ded8 <_malloc_r>
 800de8e:	bf00      	nop
 800de90:	20000040 	.word	0x20000040

0800de94 <sbrk_aligned>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	4e0f      	ldr	r6, [pc, #60]	@ (800ded4 <sbrk_aligned+0x40>)
 800de98:	460c      	mov	r4, r1
 800de9a:	6831      	ldr	r1, [r6, #0]
 800de9c:	4605      	mov	r5, r0
 800de9e:	b911      	cbnz	r1, 800dea6 <sbrk_aligned+0x12>
 800dea0:	f000 fcd4 	bl	800e84c <_sbrk_r>
 800dea4:	6030      	str	r0, [r6, #0]
 800dea6:	4621      	mov	r1, r4
 800dea8:	4628      	mov	r0, r5
 800deaa:	f000 fccf 	bl	800e84c <_sbrk_r>
 800deae:	1c43      	adds	r3, r0, #1
 800deb0:	d103      	bne.n	800deba <sbrk_aligned+0x26>
 800deb2:	f04f 34ff 	mov.w	r4, #4294967295
 800deb6:	4620      	mov	r0, r4
 800deb8:	bd70      	pop	{r4, r5, r6, pc}
 800deba:	1cc4      	adds	r4, r0, #3
 800debc:	f024 0403 	bic.w	r4, r4, #3
 800dec0:	42a0      	cmp	r0, r4
 800dec2:	d0f8      	beq.n	800deb6 <sbrk_aligned+0x22>
 800dec4:	1a21      	subs	r1, r4, r0
 800dec6:	4628      	mov	r0, r5
 800dec8:	f000 fcc0 	bl	800e84c <_sbrk_r>
 800decc:	3001      	adds	r0, #1
 800dece:	d1f2      	bne.n	800deb6 <sbrk_aligned+0x22>
 800ded0:	e7ef      	b.n	800deb2 <sbrk_aligned+0x1e>
 800ded2:	bf00      	nop
 800ded4:	200013b0 	.word	0x200013b0

0800ded8 <_malloc_r>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	1ccd      	adds	r5, r1, #3
 800dede:	f025 0503 	bic.w	r5, r5, #3
 800dee2:	3508      	adds	r5, #8
 800dee4:	2d0c      	cmp	r5, #12
 800dee6:	bf38      	it	cc
 800dee8:	250c      	movcc	r5, #12
 800deea:	2d00      	cmp	r5, #0
 800deec:	4606      	mov	r6, r0
 800deee:	db01      	blt.n	800def4 <_malloc_r+0x1c>
 800def0:	42a9      	cmp	r1, r5
 800def2:	d904      	bls.n	800defe <_malloc_r+0x26>
 800def4:	230c      	movs	r3, #12
 800def6:	6033      	str	r3, [r6, #0]
 800def8:	2000      	movs	r0, #0
 800defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfd4 <_malloc_r+0xfc>
 800df02:	f000 f869 	bl	800dfd8 <__malloc_lock>
 800df06:	f8d8 3000 	ldr.w	r3, [r8]
 800df0a:	461c      	mov	r4, r3
 800df0c:	bb44      	cbnz	r4, 800df60 <_malloc_r+0x88>
 800df0e:	4629      	mov	r1, r5
 800df10:	4630      	mov	r0, r6
 800df12:	f7ff ffbf 	bl	800de94 <sbrk_aligned>
 800df16:	1c43      	adds	r3, r0, #1
 800df18:	4604      	mov	r4, r0
 800df1a:	d158      	bne.n	800dfce <_malloc_r+0xf6>
 800df1c:	f8d8 4000 	ldr.w	r4, [r8]
 800df20:	4627      	mov	r7, r4
 800df22:	2f00      	cmp	r7, #0
 800df24:	d143      	bne.n	800dfae <_malloc_r+0xd6>
 800df26:	2c00      	cmp	r4, #0
 800df28:	d04b      	beq.n	800dfc2 <_malloc_r+0xea>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	4639      	mov	r1, r7
 800df2e:	4630      	mov	r0, r6
 800df30:	eb04 0903 	add.w	r9, r4, r3
 800df34:	f000 fc8a 	bl	800e84c <_sbrk_r>
 800df38:	4581      	cmp	r9, r0
 800df3a:	d142      	bne.n	800dfc2 <_malloc_r+0xea>
 800df3c:	6821      	ldr	r1, [r4, #0]
 800df3e:	1a6d      	subs	r5, r5, r1
 800df40:	4629      	mov	r1, r5
 800df42:	4630      	mov	r0, r6
 800df44:	f7ff ffa6 	bl	800de94 <sbrk_aligned>
 800df48:	3001      	adds	r0, #1
 800df4a:	d03a      	beq.n	800dfc2 <_malloc_r+0xea>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	442b      	add	r3, r5
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	f8d8 3000 	ldr.w	r3, [r8]
 800df56:	685a      	ldr	r2, [r3, #4]
 800df58:	bb62      	cbnz	r2, 800dfb4 <_malloc_r+0xdc>
 800df5a:	f8c8 7000 	str.w	r7, [r8]
 800df5e:	e00f      	b.n	800df80 <_malloc_r+0xa8>
 800df60:	6822      	ldr	r2, [r4, #0]
 800df62:	1b52      	subs	r2, r2, r5
 800df64:	d420      	bmi.n	800dfa8 <_malloc_r+0xd0>
 800df66:	2a0b      	cmp	r2, #11
 800df68:	d917      	bls.n	800df9a <_malloc_r+0xc2>
 800df6a:	1961      	adds	r1, r4, r5
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	6025      	str	r5, [r4, #0]
 800df70:	bf18      	it	ne
 800df72:	6059      	strne	r1, [r3, #4]
 800df74:	6863      	ldr	r3, [r4, #4]
 800df76:	bf08      	it	eq
 800df78:	f8c8 1000 	streq.w	r1, [r8]
 800df7c:	5162      	str	r2, [r4, r5]
 800df7e:	604b      	str	r3, [r1, #4]
 800df80:	4630      	mov	r0, r6
 800df82:	f000 f82f 	bl	800dfe4 <__malloc_unlock>
 800df86:	f104 000b 	add.w	r0, r4, #11
 800df8a:	1d23      	adds	r3, r4, #4
 800df8c:	f020 0007 	bic.w	r0, r0, #7
 800df90:	1ac2      	subs	r2, r0, r3
 800df92:	bf1c      	itt	ne
 800df94:	1a1b      	subne	r3, r3, r0
 800df96:	50a3      	strne	r3, [r4, r2]
 800df98:	e7af      	b.n	800defa <_malloc_r+0x22>
 800df9a:	6862      	ldr	r2, [r4, #4]
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	bf0c      	ite	eq
 800dfa0:	f8c8 2000 	streq.w	r2, [r8]
 800dfa4:	605a      	strne	r2, [r3, #4]
 800dfa6:	e7eb      	b.n	800df80 <_malloc_r+0xa8>
 800dfa8:	4623      	mov	r3, r4
 800dfaa:	6864      	ldr	r4, [r4, #4]
 800dfac:	e7ae      	b.n	800df0c <_malloc_r+0x34>
 800dfae:	463c      	mov	r4, r7
 800dfb0:	687f      	ldr	r7, [r7, #4]
 800dfb2:	e7b6      	b.n	800df22 <_malloc_r+0x4a>
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	d1fb      	bne.n	800dfb4 <_malloc_r+0xdc>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	6053      	str	r3, [r2, #4]
 800dfc0:	e7de      	b.n	800df80 <_malloc_r+0xa8>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	6033      	str	r3, [r6, #0]
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f000 f80c 	bl	800dfe4 <__malloc_unlock>
 800dfcc:	e794      	b.n	800def8 <_malloc_r+0x20>
 800dfce:	6005      	str	r5, [r0, #0]
 800dfd0:	e7d6      	b.n	800df80 <_malloc_r+0xa8>
 800dfd2:	bf00      	nop
 800dfd4:	200013b4 	.word	0x200013b4

0800dfd8 <__malloc_lock>:
 800dfd8:	4801      	ldr	r0, [pc, #4]	@ (800dfe0 <__malloc_lock+0x8>)
 800dfda:	f7ff b8b8 	b.w	800d14e <__retarget_lock_acquire_recursive>
 800dfde:	bf00      	nop
 800dfe0:	200013ac 	.word	0x200013ac

0800dfe4 <__malloc_unlock>:
 800dfe4:	4801      	ldr	r0, [pc, #4]	@ (800dfec <__malloc_unlock+0x8>)
 800dfe6:	f7ff b8b3 	b.w	800d150 <__retarget_lock_release_recursive>
 800dfea:	bf00      	nop
 800dfec:	200013ac 	.word	0x200013ac

0800dff0 <_Balloc>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	69c6      	ldr	r6, [r0, #28]
 800dff4:	4604      	mov	r4, r0
 800dff6:	460d      	mov	r5, r1
 800dff8:	b976      	cbnz	r6, 800e018 <_Balloc+0x28>
 800dffa:	2010      	movs	r0, #16
 800dffc:	f7ff ff42 	bl	800de84 <malloc>
 800e000:	4602      	mov	r2, r0
 800e002:	61e0      	str	r0, [r4, #28]
 800e004:	b920      	cbnz	r0, 800e010 <_Balloc+0x20>
 800e006:	4b18      	ldr	r3, [pc, #96]	@ (800e068 <_Balloc+0x78>)
 800e008:	4818      	ldr	r0, [pc, #96]	@ (800e06c <_Balloc+0x7c>)
 800e00a:	216b      	movs	r1, #107	@ 0x6b
 800e00c:	f000 fc3c 	bl	800e888 <__assert_func>
 800e010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e014:	6006      	str	r6, [r0, #0]
 800e016:	60c6      	str	r6, [r0, #12]
 800e018:	69e6      	ldr	r6, [r4, #28]
 800e01a:	68f3      	ldr	r3, [r6, #12]
 800e01c:	b183      	cbz	r3, 800e040 <_Balloc+0x50>
 800e01e:	69e3      	ldr	r3, [r4, #28]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e026:	b9b8      	cbnz	r0, 800e058 <_Balloc+0x68>
 800e028:	2101      	movs	r1, #1
 800e02a:	fa01 f605 	lsl.w	r6, r1, r5
 800e02e:	1d72      	adds	r2, r6, #5
 800e030:	0092      	lsls	r2, r2, #2
 800e032:	4620      	mov	r0, r4
 800e034:	f000 fc46 	bl	800e8c4 <_calloc_r>
 800e038:	b160      	cbz	r0, 800e054 <_Balloc+0x64>
 800e03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e03e:	e00e      	b.n	800e05e <_Balloc+0x6e>
 800e040:	2221      	movs	r2, #33	@ 0x21
 800e042:	2104      	movs	r1, #4
 800e044:	4620      	mov	r0, r4
 800e046:	f000 fc3d 	bl	800e8c4 <_calloc_r>
 800e04a:	69e3      	ldr	r3, [r4, #28]
 800e04c:	60f0      	str	r0, [r6, #12]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1e4      	bne.n	800e01e <_Balloc+0x2e>
 800e054:	2000      	movs	r0, #0
 800e056:	bd70      	pop	{r4, r5, r6, pc}
 800e058:	6802      	ldr	r2, [r0, #0]
 800e05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e05e:	2300      	movs	r3, #0
 800e060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e064:	e7f7      	b.n	800e056 <_Balloc+0x66>
 800e066:	bf00      	nop
 800e068:	0800ef41 	.word	0x0800ef41
 800e06c:	0800efc1 	.word	0x0800efc1

0800e070 <_Bfree>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	69c6      	ldr	r6, [r0, #28]
 800e074:	4605      	mov	r5, r0
 800e076:	460c      	mov	r4, r1
 800e078:	b976      	cbnz	r6, 800e098 <_Bfree+0x28>
 800e07a:	2010      	movs	r0, #16
 800e07c:	f7ff ff02 	bl	800de84 <malloc>
 800e080:	4602      	mov	r2, r0
 800e082:	61e8      	str	r0, [r5, #28]
 800e084:	b920      	cbnz	r0, 800e090 <_Bfree+0x20>
 800e086:	4b09      	ldr	r3, [pc, #36]	@ (800e0ac <_Bfree+0x3c>)
 800e088:	4809      	ldr	r0, [pc, #36]	@ (800e0b0 <_Bfree+0x40>)
 800e08a:	218f      	movs	r1, #143	@ 0x8f
 800e08c:	f000 fbfc 	bl	800e888 <__assert_func>
 800e090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e094:	6006      	str	r6, [r0, #0]
 800e096:	60c6      	str	r6, [r0, #12]
 800e098:	b13c      	cbz	r4, 800e0aa <_Bfree+0x3a>
 800e09a:	69eb      	ldr	r3, [r5, #28]
 800e09c:	6862      	ldr	r2, [r4, #4]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0a4:	6021      	str	r1, [r4, #0]
 800e0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	0800ef41 	.word	0x0800ef41
 800e0b0:	0800efc1 	.word	0x0800efc1

0800e0b4 <__multadd>:
 800e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b8:	690d      	ldr	r5, [r1, #16]
 800e0ba:	4607      	mov	r7, r0
 800e0bc:	460c      	mov	r4, r1
 800e0be:	461e      	mov	r6, r3
 800e0c0:	f101 0c14 	add.w	ip, r1, #20
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	f8dc 3000 	ldr.w	r3, [ip]
 800e0ca:	b299      	uxth	r1, r3
 800e0cc:	fb02 6101 	mla	r1, r2, r1, r6
 800e0d0:	0c1e      	lsrs	r6, r3, #16
 800e0d2:	0c0b      	lsrs	r3, r1, #16
 800e0d4:	fb02 3306 	mla	r3, r2, r6, r3
 800e0d8:	b289      	uxth	r1, r1
 800e0da:	3001      	adds	r0, #1
 800e0dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0e0:	4285      	cmp	r5, r0
 800e0e2:	f84c 1b04 	str.w	r1, [ip], #4
 800e0e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0ea:	dcec      	bgt.n	800e0c6 <__multadd+0x12>
 800e0ec:	b30e      	cbz	r6, 800e132 <__multadd+0x7e>
 800e0ee:	68a3      	ldr	r3, [r4, #8]
 800e0f0:	42ab      	cmp	r3, r5
 800e0f2:	dc19      	bgt.n	800e128 <__multadd+0x74>
 800e0f4:	6861      	ldr	r1, [r4, #4]
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	3101      	adds	r1, #1
 800e0fa:	f7ff ff79 	bl	800dff0 <_Balloc>
 800e0fe:	4680      	mov	r8, r0
 800e100:	b928      	cbnz	r0, 800e10e <__multadd+0x5a>
 800e102:	4602      	mov	r2, r0
 800e104:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <__multadd+0x84>)
 800e106:	480d      	ldr	r0, [pc, #52]	@ (800e13c <__multadd+0x88>)
 800e108:	21ba      	movs	r1, #186	@ 0xba
 800e10a:	f000 fbbd 	bl	800e888 <__assert_func>
 800e10e:	6922      	ldr	r2, [r4, #16]
 800e110:	3202      	adds	r2, #2
 800e112:	f104 010c 	add.w	r1, r4, #12
 800e116:	0092      	lsls	r2, r2, #2
 800e118:	300c      	adds	r0, #12
 800e11a:	f000 fba7 	bl	800e86c <memcpy>
 800e11e:	4621      	mov	r1, r4
 800e120:	4638      	mov	r0, r7
 800e122:	f7ff ffa5 	bl	800e070 <_Bfree>
 800e126:	4644      	mov	r4, r8
 800e128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e12c:	3501      	adds	r5, #1
 800e12e:	615e      	str	r6, [r3, #20]
 800e130:	6125      	str	r5, [r4, #16]
 800e132:	4620      	mov	r0, r4
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e138:	0800efb0 	.word	0x0800efb0
 800e13c:	0800efc1 	.word	0x0800efc1

0800e140 <__hi0bits>:
 800e140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e144:	4603      	mov	r3, r0
 800e146:	bf36      	itet	cc
 800e148:	0403      	lslcc	r3, r0, #16
 800e14a:	2000      	movcs	r0, #0
 800e14c:	2010      	movcc	r0, #16
 800e14e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e152:	bf3c      	itt	cc
 800e154:	021b      	lslcc	r3, r3, #8
 800e156:	3008      	addcc	r0, #8
 800e158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e15c:	bf3c      	itt	cc
 800e15e:	011b      	lslcc	r3, r3, #4
 800e160:	3004      	addcc	r0, #4
 800e162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e166:	bf3c      	itt	cc
 800e168:	009b      	lslcc	r3, r3, #2
 800e16a:	3002      	addcc	r0, #2
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	db05      	blt.n	800e17c <__hi0bits+0x3c>
 800e170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e174:	f100 0001 	add.w	r0, r0, #1
 800e178:	bf08      	it	eq
 800e17a:	2020      	moveq	r0, #32
 800e17c:	4770      	bx	lr

0800e17e <__lo0bits>:
 800e17e:	6803      	ldr	r3, [r0, #0]
 800e180:	4602      	mov	r2, r0
 800e182:	f013 0007 	ands.w	r0, r3, #7
 800e186:	d00b      	beq.n	800e1a0 <__lo0bits+0x22>
 800e188:	07d9      	lsls	r1, r3, #31
 800e18a:	d421      	bmi.n	800e1d0 <__lo0bits+0x52>
 800e18c:	0798      	lsls	r0, r3, #30
 800e18e:	bf49      	itett	mi
 800e190:	085b      	lsrmi	r3, r3, #1
 800e192:	089b      	lsrpl	r3, r3, #2
 800e194:	2001      	movmi	r0, #1
 800e196:	6013      	strmi	r3, [r2, #0]
 800e198:	bf5c      	itt	pl
 800e19a:	6013      	strpl	r3, [r2, #0]
 800e19c:	2002      	movpl	r0, #2
 800e19e:	4770      	bx	lr
 800e1a0:	b299      	uxth	r1, r3
 800e1a2:	b909      	cbnz	r1, 800e1a8 <__lo0bits+0x2a>
 800e1a4:	0c1b      	lsrs	r3, r3, #16
 800e1a6:	2010      	movs	r0, #16
 800e1a8:	b2d9      	uxtb	r1, r3
 800e1aa:	b909      	cbnz	r1, 800e1b0 <__lo0bits+0x32>
 800e1ac:	3008      	adds	r0, #8
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	0719      	lsls	r1, r3, #28
 800e1b2:	bf04      	itt	eq
 800e1b4:	091b      	lsreq	r3, r3, #4
 800e1b6:	3004      	addeq	r0, #4
 800e1b8:	0799      	lsls	r1, r3, #30
 800e1ba:	bf04      	itt	eq
 800e1bc:	089b      	lsreq	r3, r3, #2
 800e1be:	3002      	addeq	r0, #2
 800e1c0:	07d9      	lsls	r1, r3, #31
 800e1c2:	d403      	bmi.n	800e1cc <__lo0bits+0x4e>
 800e1c4:	085b      	lsrs	r3, r3, #1
 800e1c6:	f100 0001 	add.w	r0, r0, #1
 800e1ca:	d003      	beq.n	800e1d4 <__lo0bits+0x56>
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	4770      	bx	lr
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	4770      	bx	lr
 800e1d4:	2020      	movs	r0, #32
 800e1d6:	4770      	bx	lr

0800e1d8 <__i2b>:
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	460c      	mov	r4, r1
 800e1dc:	2101      	movs	r1, #1
 800e1de:	f7ff ff07 	bl	800dff0 <_Balloc>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	b928      	cbnz	r0, 800e1f2 <__i2b+0x1a>
 800e1e6:	4b05      	ldr	r3, [pc, #20]	@ (800e1fc <__i2b+0x24>)
 800e1e8:	4805      	ldr	r0, [pc, #20]	@ (800e200 <__i2b+0x28>)
 800e1ea:	f240 1145 	movw	r1, #325	@ 0x145
 800e1ee:	f000 fb4b 	bl	800e888 <__assert_func>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	6144      	str	r4, [r0, #20]
 800e1f6:	6103      	str	r3, [r0, #16]
 800e1f8:	bd10      	pop	{r4, pc}
 800e1fa:	bf00      	nop
 800e1fc:	0800efb0 	.word	0x0800efb0
 800e200:	0800efc1 	.word	0x0800efc1

0800e204 <__multiply>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4614      	mov	r4, r2
 800e20a:	690a      	ldr	r2, [r1, #16]
 800e20c:	6923      	ldr	r3, [r4, #16]
 800e20e:	429a      	cmp	r2, r3
 800e210:	bfa8      	it	ge
 800e212:	4623      	movge	r3, r4
 800e214:	460f      	mov	r7, r1
 800e216:	bfa4      	itt	ge
 800e218:	460c      	movge	r4, r1
 800e21a:	461f      	movge	r7, r3
 800e21c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e220:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e224:	68a3      	ldr	r3, [r4, #8]
 800e226:	6861      	ldr	r1, [r4, #4]
 800e228:	eb0a 0609 	add.w	r6, sl, r9
 800e22c:	42b3      	cmp	r3, r6
 800e22e:	b085      	sub	sp, #20
 800e230:	bfb8      	it	lt
 800e232:	3101      	addlt	r1, #1
 800e234:	f7ff fedc 	bl	800dff0 <_Balloc>
 800e238:	b930      	cbnz	r0, 800e248 <__multiply+0x44>
 800e23a:	4602      	mov	r2, r0
 800e23c:	4b44      	ldr	r3, [pc, #272]	@ (800e350 <__multiply+0x14c>)
 800e23e:	4845      	ldr	r0, [pc, #276]	@ (800e354 <__multiply+0x150>)
 800e240:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e244:	f000 fb20 	bl	800e888 <__assert_func>
 800e248:	f100 0514 	add.w	r5, r0, #20
 800e24c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e250:	462b      	mov	r3, r5
 800e252:	2200      	movs	r2, #0
 800e254:	4543      	cmp	r3, r8
 800e256:	d321      	bcc.n	800e29c <__multiply+0x98>
 800e258:	f107 0114 	add.w	r1, r7, #20
 800e25c:	f104 0214 	add.w	r2, r4, #20
 800e260:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e264:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e268:	9302      	str	r3, [sp, #8]
 800e26a:	1b13      	subs	r3, r2, r4
 800e26c:	3b15      	subs	r3, #21
 800e26e:	f023 0303 	bic.w	r3, r3, #3
 800e272:	3304      	adds	r3, #4
 800e274:	f104 0715 	add.w	r7, r4, #21
 800e278:	42ba      	cmp	r2, r7
 800e27a:	bf38      	it	cc
 800e27c:	2304      	movcc	r3, #4
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	9103      	str	r1, [sp, #12]
 800e284:	428b      	cmp	r3, r1
 800e286:	d80c      	bhi.n	800e2a2 <__multiply+0x9e>
 800e288:	2e00      	cmp	r6, #0
 800e28a:	dd03      	ble.n	800e294 <__multiply+0x90>
 800e28c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e290:	2b00      	cmp	r3, #0
 800e292:	d05b      	beq.n	800e34c <__multiply+0x148>
 800e294:	6106      	str	r6, [r0, #16]
 800e296:	b005      	add	sp, #20
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	f843 2b04 	str.w	r2, [r3], #4
 800e2a0:	e7d8      	b.n	800e254 <__multiply+0x50>
 800e2a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e2a6:	f1ba 0f00 	cmp.w	sl, #0
 800e2aa:	d024      	beq.n	800e2f6 <__multiply+0xf2>
 800e2ac:	f104 0e14 	add.w	lr, r4, #20
 800e2b0:	46a9      	mov	r9, r5
 800e2b2:	f04f 0c00 	mov.w	ip, #0
 800e2b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2ba:	f8d9 3000 	ldr.w	r3, [r9]
 800e2be:	fa1f fb87 	uxth.w	fp, r7
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2cc:	f8d9 7000 	ldr.w	r7, [r9]
 800e2d0:	4463      	add	r3, ip
 800e2d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2d6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2e4:	4572      	cmp	r2, lr
 800e2e6:	f849 3b04 	str.w	r3, [r9], #4
 800e2ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ee:	d8e2      	bhi.n	800e2b6 <__multiply+0xb2>
 800e2f0:	9b01      	ldr	r3, [sp, #4]
 800e2f2:	f845 c003 	str.w	ip, [r5, r3]
 800e2f6:	9b03      	ldr	r3, [sp, #12]
 800e2f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2fc:	3104      	adds	r1, #4
 800e2fe:	f1b9 0f00 	cmp.w	r9, #0
 800e302:	d021      	beq.n	800e348 <__multiply+0x144>
 800e304:	682b      	ldr	r3, [r5, #0]
 800e306:	f104 0c14 	add.w	ip, r4, #20
 800e30a:	46ae      	mov	lr, r5
 800e30c:	f04f 0a00 	mov.w	sl, #0
 800e310:	f8bc b000 	ldrh.w	fp, [ip]
 800e314:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e318:	fb09 770b 	mla	r7, r9, fp, r7
 800e31c:	4457      	add	r7, sl
 800e31e:	b29b      	uxth	r3, r3
 800e320:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e324:	f84e 3b04 	str.w	r3, [lr], #4
 800e328:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e32c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e330:	f8be 3000 	ldrh.w	r3, [lr]
 800e334:	fb09 330a 	mla	r3, r9, sl, r3
 800e338:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e33c:	4562      	cmp	r2, ip
 800e33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e342:	d8e5      	bhi.n	800e310 <__multiply+0x10c>
 800e344:	9f01      	ldr	r7, [sp, #4]
 800e346:	51eb      	str	r3, [r5, r7]
 800e348:	3504      	adds	r5, #4
 800e34a:	e799      	b.n	800e280 <__multiply+0x7c>
 800e34c:	3e01      	subs	r6, #1
 800e34e:	e79b      	b.n	800e288 <__multiply+0x84>
 800e350:	0800efb0 	.word	0x0800efb0
 800e354:	0800efc1 	.word	0x0800efc1

0800e358 <__pow5mult>:
 800e358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e35c:	4615      	mov	r5, r2
 800e35e:	f012 0203 	ands.w	r2, r2, #3
 800e362:	4607      	mov	r7, r0
 800e364:	460e      	mov	r6, r1
 800e366:	d007      	beq.n	800e378 <__pow5mult+0x20>
 800e368:	4c25      	ldr	r4, [pc, #148]	@ (800e400 <__pow5mult+0xa8>)
 800e36a:	3a01      	subs	r2, #1
 800e36c:	2300      	movs	r3, #0
 800e36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e372:	f7ff fe9f 	bl	800e0b4 <__multadd>
 800e376:	4606      	mov	r6, r0
 800e378:	10ad      	asrs	r5, r5, #2
 800e37a:	d03d      	beq.n	800e3f8 <__pow5mult+0xa0>
 800e37c:	69fc      	ldr	r4, [r7, #28]
 800e37e:	b97c      	cbnz	r4, 800e3a0 <__pow5mult+0x48>
 800e380:	2010      	movs	r0, #16
 800e382:	f7ff fd7f 	bl	800de84 <malloc>
 800e386:	4602      	mov	r2, r0
 800e388:	61f8      	str	r0, [r7, #28]
 800e38a:	b928      	cbnz	r0, 800e398 <__pow5mult+0x40>
 800e38c:	4b1d      	ldr	r3, [pc, #116]	@ (800e404 <__pow5mult+0xac>)
 800e38e:	481e      	ldr	r0, [pc, #120]	@ (800e408 <__pow5mult+0xb0>)
 800e390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e394:	f000 fa78 	bl	800e888 <__assert_func>
 800e398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e39c:	6004      	str	r4, [r0, #0]
 800e39e:	60c4      	str	r4, [r0, #12]
 800e3a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e3a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3a8:	b94c      	cbnz	r4, 800e3be <__pow5mult+0x66>
 800e3aa:	f240 2171 	movw	r1, #625	@ 0x271
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f7ff ff12 	bl	800e1d8 <__i2b>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	6003      	str	r3, [r0, #0]
 800e3be:	f04f 0900 	mov.w	r9, #0
 800e3c2:	07eb      	lsls	r3, r5, #31
 800e3c4:	d50a      	bpl.n	800e3dc <__pow5mult+0x84>
 800e3c6:	4631      	mov	r1, r6
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	f7ff ff1a 	bl	800e204 <__multiply>
 800e3d0:	4631      	mov	r1, r6
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f7ff fe4b 	bl	800e070 <_Bfree>
 800e3da:	4646      	mov	r6, r8
 800e3dc:	106d      	asrs	r5, r5, #1
 800e3de:	d00b      	beq.n	800e3f8 <__pow5mult+0xa0>
 800e3e0:	6820      	ldr	r0, [r4, #0]
 800e3e2:	b938      	cbnz	r0, 800e3f4 <__pow5mult+0x9c>
 800e3e4:	4622      	mov	r2, r4
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f7ff ff0b 	bl	800e204 <__multiply>
 800e3ee:	6020      	str	r0, [r4, #0]
 800e3f0:	f8c0 9000 	str.w	r9, [r0]
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	e7e4      	b.n	800e3c2 <__pow5mult+0x6a>
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3fe:	bf00      	nop
 800e400:	0800f01c 	.word	0x0800f01c
 800e404:	0800ef41 	.word	0x0800ef41
 800e408:	0800efc1 	.word	0x0800efc1

0800e40c <__lshift>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	460c      	mov	r4, r1
 800e412:	6849      	ldr	r1, [r1, #4]
 800e414:	6923      	ldr	r3, [r4, #16]
 800e416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	4607      	mov	r7, r0
 800e41e:	4691      	mov	r9, r2
 800e420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e424:	f108 0601 	add.w	r6, r8, #1
 800e428:	42b3      	cmp	r3, r6
 800e42a:	db0b      	blt.n	800e444 <__lshift+0x38>
 800e42c:	4638      	mov	r0, r7
 800e42e:	f7ff fddf 	bl	800dff0 <_Balloc>
 800e432:	4605      	mov	r5, r0
 800e434:	b948      	cbnz	r0, 800e44a <__lshift+0x3e>
 800e436:	4602      	mov	r2, r0
 800e438:	4b28      	ldr	r3, [pc, #160]	@ (800e4dc <__lshift+0xd0>)
 800e43a:	4829      	ldr	r0, [pc, #164]	@ (800e4e0 <__lshift+0xd4>)
 800e43c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e440:	f000 fa22 	bl	800e888 <__assert_func>
 800e444:	3101      	adds	r1, #1
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	e7ee      	b.n	800e428 <__lshift+0x1c>
 800e44a:	2300      	movs	r3, #0
 800e44c:	f100 0114 	add.w	r1, r0, #20
 800e450:	f100 0210 	add.w	r2, r0, #16
 800e454:	4618      	mov	r0, r3
 800e456:	4553      	cmp	r3, sl
 800e458:	db33      	blt.n	800e4c2 <__lshift+0xb6>
 800e45a:	6920      	ldr	r0, [r4, #16]
 800e45c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e460:	f104 0314 	add.w	r3, r4, #20
 800e464:	f019 091f 	ands.w	r9, r9, #31
 800e468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e46c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e470:	d02b      	beq.n	800e4ca <__lshift+0xbe>
 800e472:	f1c9 0e20 	rsb	lr, r9, #32
 800e476:	468a      	mov	sl, r1
 800e478:	2200      	movs	r2, #0
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	fa00 f009 	lsl.w	r0, r0, r9
 800e480:	4310      	orrs	r0, r2
 800e482:	f84a 0b04 	str.w	r0, [sl], #4
 800e486:	f853 2b04 	ldr.w	r2, [r3], #4
 800e48a:	459c      	cmp	ip, r3
 800e48c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e490:	d8f3      	bhi.n	800e47a <__lshift+0x6e>
 800e492:	ebac 0304 	sub.w	r3, ip, r4
 800e496:	3b15      	subs	r3, #21
 800e498:	f023 0303 	bic.w	r3, r3, #3
 800e49c:	3304      	adds	r3, #4
 800e49e:	f104 0015 	add.w	r0, r4, #21
 800e4a2:	4584      	cmp	ip, r0
 800e4a4:	bf38      	it	cc
 800e4a6:	2304      	movcc	r3, #4
 800e4a8:	50ca      	str	r2, [r1, r3]
 800e4aa:	b10a      	cbz	r2, 800e4b0 <__lshift+0xa4>
 800e4ac:	f108 0602 	add.w	r6, r8, #2
 800e4b0:	3e01      	subs	r6, #1
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	612e      	str	r6, [r5, #16]
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	f7ff fdda 	bl	800e070 <_Bfree>
 800e4bc:	4628      	mov	r0, r5
 800e4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	e7c5      	b.n	800e456 <__lshift+0x4a>
 800e4ca:	3904      	subs	r1, #4
 800e4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4d4:	459c      	cmp	ip, r3
 800e4d6:	d8f9      	bhi.n	800e4cc <__lshift+0xc0>
 800e4d8:	e7ea      	b.n	800e4b0 <__lshift+0xa4>
 800e4da:	bf00      	nop
 800e4dc:	0800efb0 	.word	0x0800efb0
 800e4e0:	0800efc1 	.word	0x0800efc1

0800e4e4 <__mcmp>:
 800e4e4:	690a      	ldr	r2, [r1, #16]
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6900      	ldr	r0, [r0, #16]
 800e4ea:	1a80      	subs	r0, r0, r2
 800e4ec:	b530      	push	{r4, r5, lr}
 800e4ee:	d10e      	bne.n	800e50e <__mcmp+0x2a>
 800e4f0:	3314      	adds	r3, #20
 800e4f2:	3114      	adds	r1, #20
 800e4f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e504:	4295      	cmp	r5, r2
 800e506:	d003      	beq.n	800e510 <__mcmp+0x2c>
 800e508:	d205      	bcs.n	800e516 <__mcmp+0x32>
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	bd30      	pop	{r4, r5, pc}
 800e510:	42a3      	cmp	r3, r4
 800e512:	d3f3      	bcc.n	800e4fc <__mcmp+0x18>
 800e514:	e7fb      	b.n	800e50e <__mcmp+0x2a>
 800e516:	2001      	movs	r0, #1
 800e518:	e7f9      	b.n	800e50e <__mcmp+0x2a>
	...

0800e51c <__mdiff>:
 800e51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	4689      	mov	r9, r1
 800e522:	4606      	mov	r6, r0
 800e524:	4611      	mov	r1, r2
 800e526:	4648      	mov	r0, r9
 800e528:	4614      	mov	r4, r2
 800e52a:	f7ff ffdb 	bl	800e4e4 <__mcmp>
 800e52e:	1e05      	subs	r5, r0, #0
 800e530:	d112      	bne.n	800e558 <__mdiff+0x3c>
 800e532:	4629      	mov	r1, r5
 800e534:	4630      	mov	r0, r6
 800e536:	f7ff fd5b 	bl	800dff0 <_Balloc>
 800e53a:	4602      	mov	r2, r0
 800e53c:	b928      	cbnz	r0, 800e54a <__mdiff+0x2e>
 800e53e:	4b3f      	ldr	r3, [pc, #252]	@ (800e63c <__mdiff+0x120>)
 800e540:	f240 2137 	movw	r1, #567	@ 0x237
 800e544:	483e      	ldr	r0, [pc, #248]	@ (800e640 <__mdiff+0x124>)
 800e546:	f000 f99f 	bl	800e888 <__assert_func>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e550:	4610      	mov	r0, r2
 800e552:	b003      	add	sp, #12
 800e554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e558:	bfbc      	itt	lt
 800e55a:	464b      	movlt	r3, r9
 800e55c:	46a1      	movlt	r9, r4
 800e55e:	4630      	mov	r0, r6
 800e560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e564:	bfba      	itte	lt
 800e566:	461c      	movlt	r4, r3
 800e568:	2501      	movlt	r5, #1
 800e56a:	2500      	movge	r5, #0
 800e56c:	f7ff fd40 	bl	800dff0 <_Balloc>
 800e570:	4602      	mov	r2, r0
 800e572:	b918      	cbnz	r0, 800e57c <__mdiff+0x60>
 800e574:	4b31      	ldr	r3, [pc, #196]	@ (800e63c <__mdiff+0x120>)
 800e576:	f240 2145 	movw	r1, #581	@ 0x245
 800e57a:	e7e3      	b.n	800e544 <__mdiff+0x28>
 800e57c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e580:	6926      	ldr	r6, [r4, #16]
 800e582:	60c5      	str	r5, [r0, #12]
 800e584:	f109 0310 	add.w	r3, r9, #16
 800e588:	f109 0514 	add.w	r5, r9, #20
 800e58c:	f104 0e14 	add.w	lr, r4, #20
 800e590:	f100 0b14 	add.w	fp, r0, #20
 800e594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	46d9      	mov	r9, fp
 800e5a0:	f04f 0c00 	mov.w	ip, #0
 800e5a4:	9b01      	ldr	r3, [sp, #4]
 800e5a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e5aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	fa1f f38a 	uxth.w	r3, sl
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	b283      	uxth	r3, r0
 800e5b8:	1acb      	subs	r3, r1, r3
 800e5ba:	0c00      	lsrs	r0, r0, #16
 800e5bc:	4463      	add	r3, ip
 800e5be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5cc:	4576      	cmp	r6, lr
 800e5ce:	f849 3b04 	str.w	r3, [r9], #4
 800e5d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5d6:	d8e5      	bhi.n	800e5a4 <__mdiff+0x88>
 800e5d8:	1b33      	subs	r3, r6, r4
 800e5da:	3b15      	subs	r3, #21
 800e5dc:	f023 0303 	bic.w	r3, r3, #3
 800e5e0:	3415      	adds	r4, #21
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	42a6      	cmp	r6, r4
 800e5e6:	bf38      	it	cc
 800e5e8:	2304      	movcc	r3, #4
 800e5ea:	441d      	add	r5, r3
 800e5ec:	445b      	add	r3, fp
 800e5ee:	461e      	mov	r6, r3
 800e5f0:	462c      	mov	r4, r5
 800e5f2:	4544      	cmp	r4, r8
 800e5f4:	d30e      	bcc.n	800e614 <__mdiff+0xf8>
 800e5f6:	f108 0103 	add.w	r1, r8, #3
 800e5fa:	1b49      	subs	r1, r1, r5
 800e5fc:	f021 0103 	bic.w	r1, r1, #3
 800e600:	3d03      	subs	r5, #3
 800e602:	45a8      	cmp	r8, r5
 800e604:	bf38      	it	cc
 800e606:	2100      	movcc	r1, #0
 800e608:	440b      	add	r3, r1
 800e60a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e60e:	b191      	cbz	r1, 800e636 <__mdiff+0x11a>
 800e610:	6117      	str	r7, [r2, #16]
 800e612:	e79d      	b.n	800e550 <__mdiff+0x34>
 800e614:	f854 1b04 	ldr.w	r1, [r4], #4
 800e618:	46e6      	mov	lr, ip
 800e61a:	0c08      	lsrs	r0, r1, #16
 800e61c:	fa1c fc81 	uxtah	ip, ip, r1
 800e620:	4471      	add	r1, lr
 800e622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e626:	b289      	uxth	r1, r1
 800e628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e62c:	f846 1b04 	str.w	r1, [r6], #4
 800e630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e634:	e7dd      	b.n	800e5f2 <__mdiff+0xd6>
 800e636:	3f01      	subs	r7, #1
 800e638:	e7e7      	b.n	800e60a <__mdiff+0xee>
 800e63a:	bf00      	nop
 800e63c:	0800efb0 	.word	0x0800efb0
 800e640:	0800efc1 	.word	0x0800efc1

0800e644 <__d2b>:
 800e644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e648:	460f      	mov	r7, r1
 800e64a:	2101      	movs	r1, #1
 800e64c:	ec59 8b10 	vmov	r8, r9, d0
 800e650:	4616      	mov	r6, r2
 800e652:	f7ff fccd 	bl	800dff0 <_Balloc>
 800e656:	4604      	mov	r4, r0
 800e658:	b930      	cbnz	r0, 800e668 <__d2b+0x24>
 800e65a:	4602      	mov	r2, r0
 800e65c:	4b23      	ldr	r3, [pc, #140]	@ (800e6ec <__d2b+0xa8>)
 800e65e:	4824      	ldr	r0, [pc, #144]	@ (800e6f0 <__d2b+0xac>)
 800e660:	f240 310f 	movw	r1, #783	@ 0x30f
 800e664:	f000 f910 	bl	800e888 <__assert_func>
 800e668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e66c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e670:	b10d      	cbz	r5, 800e676 <__d2b+0x32>
 800e672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	f1b8 0300 	subs.w	r3, r8, #0
 800e67c:	d023      	beq.n	800e6c6 <__d2b+0x82>
 800e67e:	4668      	mov	r0, sp
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	f7ff fd7c 	bl	800e17e <__lo0bits>
 800e686:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e68a:	b1d0      	cbz	r0, 800e6c2 <__d2b+0x7e>
 800e68c:	f1c0 0320 	rsb	r3, r0, #32
 800e690:	fa02 f303 	lsl.w	r3, r2, r3
 800e694:	430b      	orrs	r3, r1
 800e696:	40c2      	lsrs	r2, r0
 800e698:	6163      	str	r3, [r4, #20]
 800e69a:	9201      	str	r2, [sp, #4]
 800e69c:	9b01      	ldr	r3, [sp, #4]
 800e69e:	61a3      	str	r3, [r4, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	bf0c      	ite	eq
 800e6a4:	2201      	moveq	r2, #1
 800e6a6:	2202      	movne	r2, #2
 800e6a8:	6122      	str	r2, [r4, #16]
 800e6aa:	b1a5      	cbz	r5, 800e6d6 <__d2b+0x92>
 800e6ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6b0:	4405      	add	r5, r0
 800e6b2:	603d      	str	r5, [r7, #0]
 800e6b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6b8:	6030      	str	r0, [r6, #0]
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	b003      	add	sp, #12
 800e6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6c2:	6161      	str	r1, [r4, #20]
 800e6c4:	e7ea      	b.n	800e69c <__d2b+0x58>
 800e6c6:	a801      	add	r0, sp, #4
 800e6c8:	f7ff fd59 	bl	800e17e <__lo0bits>
 800e6cc:	9b01      	ldr	r3, [sp, #4]
 800e6ce:	6163      	str	r3, [r4, #20]
 800e6d0:	3020      	adds	r0, #32
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	e7e8      	b.n	800e6a8 <__d2b+0x64>
 800e6d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6de:	6038      	str	r0, [r7, #0]
 800e6e0:	6918      	ldr	r0, [r3, #16]
 800e6e2:	f7ff fd2d 	bl	800e140 <__hi0bits>
 800e6e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6ea:	e7e5      	b.n	800e6b8 <__d2b+0x74>
 800e6ec:	0800efb0 	.word	0x0800efb0
 800e6f0:	0800efc1 	.word	0x0800efc1

0800e6f4 <__sflush_r>:
 800e6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	0716      	lsls	r6, r2, #28
 800e6fe:	4605      	mov	r5, r0
 800e700:	460c      	mov	r4, r1
 800e702:	d454      	bmi.n	800e7ae <__sflush_r+0xba>
 800e704:	684b      	ldr	r3, [r1, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	dc02      	bgt.n	800e710 <__sflush_r+0x1c>
 800e70a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dd48      	ble.n	800e7a2 <__sflush_r+0xae>
 800e710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e712:	2e00      	cmp	r6, #0
 800e714:	d045      	beq.n	800e7a2 <__sflush_r+0xae>
 800e716:	2300      	movs	r3, #0
 800e718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e71c:	682f      	ldr	r7, [r5, #0]
 800e71e:	6a21      	ldr	r1, [r4, #32]
 800e720:	602b      	str	r3, [r5, #0]
 800e722:	d030      	beq.n	800e786 <__sflush_r+0x92>
 800e724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	0759      	lsls	r1, r3, #29
 800e72a:	d505      	bpl.n	800e738 <__sflush_r+0x44>
 800e72c:	6863      	ldr	r3, [r4, #4]
 800e72e:	1ad2      	subs	r2, r2, r3
 800e730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e732:	b10b      	cbz	r3, 800e738 <__sflush_r+0x44>
 800e734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e736:	1ad2      	subs	r2, r2, r3
 800e738:	2300      	movs	r3, #0
 800e73a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e73c:	6a21      	ldr	r1, [r4, #32]
 800e73e:	4628      	mov	r0, r5
 800e740:	47b0      	blx	r6
 800e742:	1c43      	adds	r3, r0, #1
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	d106      	bne.n	800e756 <__sflush_r+0x62>
 800e748:	6829      	ldr	r1, [r5, #0]
 800e74a:	291d      	cmp	r1, #29
 800e74c:	d82b      	bhi.n	800e7a6 <__sflush_r+0xb2>
 800e74e:	4a2a      	ldr	r2, [pc, #168]	@ (800e7f8 <__sflush_r+0x104>)
 800e750:	410a      	asrs	r2, r1
 800e752:	07d6      	lsls	r6, r2, #31
 800e754:	d427      	bmi.n	800e7a6 <__sflush_r+0xb2>
 800e756:	2200      	movs	r2, #0
 800e758:	6062      	str	r2, [r4, #4]
 800e75a:	04d9      	lsls	r1, r3, #19
 800e75c:	6922      	ldr	r2, [r4, #16]
 800e75e:	6022      	str	r2, [r4, #0]
 800e760:	d504      	bpl.n	800e76c <__sflush_r+0x78>
 800e762:	1c42      	adds	r2, r0, #1
 800e764:	d101      	bne.n	800e76a <__sflush_r+0x76>
 800e766:	682b      	ldr	r3, [r5, #0]
 800e768:	b903      	cbnz	r3, 800e76c <__sflush_r+0x78>
 800e76a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e76e:	602f      	str	r7, [r5, #0]
 800e770:	b1b9      	cbz	r1, 800e7a2 <__sflush_r+0xae>
 800e772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e776:	4299      	cmp	r1, r3
 800e778:	d002      	beq.n	800e780 <__sflush_r+0x8c>
 800e77a:	4628      	mov	r0, r5
 800e77c:	f7ff fb38 	bl	800ddf0 <_free_r>
 800e780:	2300      	movs	r3, #0
 800e782:	6363      	str	r3, [r4, #52]	@ 0x34
 800e784:	e00d      	b.n	800e7a2 <__sflush_r+0xae>
 800e786:	2301      	movs	r3, #1
 800e788:	4628      	mov	r0, r5
 800e78a:	47b0      	blx	r6
 800e78c:	4602      	mov	r2, r0
 800e78e:	1c50      	adds	r0, r2, #1
 800e790:	d1c9      	bne.n	800e726 <__sflush_r+0x32>
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d0c6      	beq.n	800e726 <__sflush_r+0x32>
 800e798:	2b1d      	cmp	r3, #29
 800e79a:	d001      	beq.n	800e7a0 <__sflush_r+0xac>
 800e79c:	2b16      	cmp	r3, #22
 800e79e:	d11e      	bne.n	800e7de <__sflush_r+0xea>
 800e7a0:	602f      	str	r7, [r5, #0]
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	e022      	b.n	800e7ec <__sflush_r+0xf8>
 800e7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7aa:	b21b      	sxth	r3, r3
 800e7ac:	e01b      	b.n	800e7e6 <__sflush_r+0xf2>
 800e7ae:	690f      	ldr	r7, [r1, #16]
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	d0f6      	beq.n	800e7a2 <__sflush_r+0xae>
 800e7b4:	0793      	lsls	r3, r2, #30
 800e7b6:	680e      	ldr	r6, [r1, #0]
 800e7b8:	bf08      	it	eq
 800e7ba:	694b      	ldreq	r3, [r1, #20]
 800e7bc:	600f      	str	r7, [r1, #0]
 800e7be:	bf18      	it	ne
 800e7c0:	2300      	movne	r3, #0
 800e7c2:	eba6 0807 	sub.w	r8, r6, r7
 800e7c6:	608b      	str	r3, [r1, #8]
 800e7c8:	f1b8 0f00 	cmp.w	r8, #0
 800e7cc:	dde9      	ble.n	800e7a2 <__sflush_r+0xae>
 800e7ce:	6a21      	ldr	r1, [r4, #32]
 800e7d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7d2:	4643      	mov	r3, r8
 800e7d4:	463a      	mov	r2, r7
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	47b0      	blx	r6
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	dc08      	bgt.n	800e7f0 <__sflush_r+0xfc>
 800e7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7e6:	81a3      	strh	r3, [r4, #12]
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f0:	4407      	add	r7, r0
 800e7f2:	eba8 0800 	sub.w	r8, r8, r0
 800e7f6:	e7e7      	b.n	800e7c8 <__sflush_r+0xd4>
 800e7f8:	dfbffffe 	.word	0xdfbffffe

0800e7fc <_fflush_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	690b      	ldr	r3, [r1, #16]
 800e800:	4605      	mov	r5, r0
 800e802:	460c      	mov	r4, r1
 800e804:	b913      	cbnz	r3, 800e80c <_fflush_r+0x10>
 800e806:	2500      	movs	r5, #0
 800e808:	4628      	mov	r0, r5
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	b118      	cbz	r0, 800e816 <_fflush_r+0x1a>
 800e80e:	6a03      	ldr	r3, [r0, #32]
 800e810:	b90b      	cbnz	r3, 800e816 <_fflush_r+0x1a>
 800e812:	f7fe fba5 	bl	800cf60 <__sinit>
 800e816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d0f3      	beq.n	800e806 <_fflush_r+0xa>
 800e81e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e820:	07d0      	lsls	r0, r2, #31
 800e822:	d404      	bmi.n	800e82e <_fflush_r+0x32>
 800e824:	0599      	lsls	r1, r3, #22
 800e826:	d402      	bmi.n	800e82e <_fflush_r+0x32>
 800e828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e82a:	f7fe fc90 	bl	800d14e <__retarget_lock_acquire_recursive>
 800e82e:	4628      	mov	r0, r5
 800e830:	4621      	mov	r1, r4
 800e832:	f7ff ff5f 	bl	800e6f4 <__sflush_r>
 800e836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e838:	07da      	lsls	r2, r3, #31
 800e83a:	4605      	mov	r5, r0
 800e83c:	d4e4      	bmi.n	800e808 <_fflush_r+0xc>
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	059b      	lsls	r3, r3, #22
 800e842:	d4e1      	bmi.n	800e808 <_fflush_r+0xc>
 800e844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e846:	f7fe fc83 	bl	800d150 <__retarget_lock_release_recursive>
 800e84a:	e7dd      	b.n	800e808 <_fflush_r+0xc>

0800e84c <_sbrk_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4d06      	ldr	r5, [pc, #24]	@ (800e868 <_sbrk_r+0x1c>)
 800e850:	2300      	movs	r3, #0
 800e852:	4604      	mov	r4, r0
 800e854:	4608      	mov	r0, r1
 800e856:	602b      	str	r3, [r5, #0]
 800e858:	f7f3 fe28 	bl	80024ac <_sbrk>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_sbrk_r+0x1a>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_sbrk_r+0x1a>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	200013a8 	.word	0x200013a8

0800e86c <memcpy>:
 800e86c:	440a      	add	r2, r1
 800e86e:	4291      	cmp	r1, r2
 800e870:	f100 33ff 	add.w	r3, r0, #4294967295
 800e874:	d100      	bne.n	800e878 <memcpy+0xc>
 800e876:	4770      	bx	lr
 800e878:	b510      	push	{r4, lr}
 800e87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e882:	4291      	cmp	r1, r2
 800e884:	d1f9      	bne.n	800e87a <memcpy+0xe>
 800e886:	bd10      	pop	{r4, pc}

0800e888 <__assert_func>:
 800e888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e88a:	4614      	mov	r4, r2
 800e88c:	461a      	mov	r2, r3
 800e88e:	4b09      	ldr	r3, [pc, #36]	@ (800e8b4 <__assert_func+0x2c>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4605      	mov	r5, r0
 800e894:	68d8      	ldr	r0, [r3, #12]
 800e896:	b954      	cbnz	r4, 800e8ae <__assert_func+0x26>
 800e898:	4b07      	ldr	r3, [pc, #28]	@ (800e8b8 <__assert_func+0x30>)
 800e89a:	461c      	mov	r4, r3
 800e89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8a0:	9100      	str	r1, [sp, #0]
 800e8a2:	462b      	mov	r3, r5
 800e8a4:	4905      	ldr	r1, [pc, #20]	@ (800e8bc <__assert_func+0x34>)
 800e8a6:	f000 f841 	bl	800e92c <fiprintf>
 800e8aa:	f000 f851 	bl	800e950 <abort>
 800e8ae:	4b04      	ldr	r3, [pc, #16]	@ (800e8c0 <__assert_func+0x38>)
 800e8b0:	e7f4      	b.n	800e89c <__assert_func+0x14>
 800e8b2:	bf00      	nop
 800e8b4:	20000040 	.word	0x20000040
 800e8b8:	0800f15d 	.word	0x0800f15d
 800e8bc:	0800f12f 	.word	0x0800f12f
 800e8c0:	0800f122 	.word	0x0800f122

0800e8c4 <_calloc_r>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	fba1 5402 	umull	r5, r4, r1, r2
 800e8ca:	b93c      	cbnz	r4, 800e8dc <_calloc_r+0x18>
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	f7ff fb03 	bl	800ded8 <_malloc_r>
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	b928      	cbnz	r0, 800e8e2 <_calloc_r+0x1e>
 800e8d6:	2600      	movs	r6, #0
 800e8d8:	4630      	mov	r0, r6
 800e8da:	bd70      	pop	{r4, r5, r6, pc}
 800e8dc:	220c      	movs	r2, #12
 800e8de:	6002      	str	r2, [r0, #0]
 800e8e0:	e7f9      	b.n	800e8d6 <_calloc_r+0x12>
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	f7fe fbb4 	bl	800d052 <memset>
 800e8ea:	e7f5      	b.n	800e8d8 <_calloc_r+0x14>

0800e8ec <__ascii_mbtowc>:
 800e8ec:	b082      	sub	sp, #8
 800e8ee:	b901      	cbnz	r1, 800e8f2 <__ascii_mbtowc+0x6>
 800e8f0:	a901      	add	r1, sp, #4
 800e8f2:	b142      	cbz	r2, 800e906 <__ascii_mbtowc+0x1a>
 800e8f4:	b14b      	cbz	r3, 800e90a <__ascii_mbtowc+0x1e>
 800e8f6:	7813      	ldrb	r3, [r2, #0]
 800e8f8:	600b      	str	r3, [r1, #0]
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	1e10      	subs	r0, r2, #0
 800e8fe:	bf18      	it	ne
 800e900:	2001      	movne	r0, #1
 800e902:	b002      	add	sp, #8
 800e904:	4770      	bx	lr
 800e906:	4610      	mov	r0, r2
 800e908:	e7fb      	b.n	800e902 <__ascii_mbtowc+0x16>
 800e90a:	f06f 0001 	mvn.w	r0, #1
 800e90e:	e7f8      	b.n	800e902 <__ascii_mbtowc+0x16>

0800e910 <__ascii_wctomb>:
 800e910:	4603      	mov	r3, r0
 800e912:	4608      	mov	r0, r1
 800e914:	b141      	cbz	r1, 800e928 <__ascii_wctomb+0x18>
 800e916:	2aff      	cmp	r2, #255	@ 0xff
 800e918:	d904      	bls.n	800e924 <__ascii_wctomb+0x14>
 800e91a:	228a      	movs	r2, #138	@ 0x8a
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	f04f 30ff 	mov.w	r0, #4294967295
 800e922:	4770      	bx	lr
 800e924:	700a      	strb	r2, [r1, #0]
 800e926:	2001      	movs	r0, #1
 800e928:	4770      	bx	lr
	...

0800e92c <fiprintf>:
 800e92c:	b40e      	push	{r1, r2, r3}
 800e92e:	b503      	push	{r0, r1, lr}
 800e930:	4601      	mov	r1, r0
 800e932:	ab03      	add	r3, sp, #12
 800e934:	4805      	ldr	r0, [pc, #20]	@ (800e94c <fiprintf+0x20>)
 800e936:	f853 2b04 	ldr.w	r2, [r3], #4
 800e93a:	6800      	ldr	r0, [r0, #0]
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	f000 f837 	bl	800e9b0 <_vfiprintf_r>
 800e942:	b002      	add	sp, #8
 800e944:	f85d eb04 	ldr.w	lr, [sp], #4
 800e948:	b003      	add	sp, #12
 800e94a:	4770      	bx	lr
 800e94c:	20000040 	.word	0x20000040

0800e950 <abort>:
 800e950:	b508      	push	{r3, lr}
 800e952:	2006      	movs	r0, #6
 800e954:	f000 fa00 	bl	800ed58 <raise>
 800e958:	2001      	movs	r0, #1
 800e95a:	f7f3 fd2f 	bl	80023bc <_exit>

0800e95e <__sfputc_r>:
 800e95e:	6893      	ldr	r3, [r2, #8]
 800e960:	3b01      	subs	r3, #1
 800e962:	2b00      	cmp	r3, #0
 800e964:	b410      	push	{r4}
 800e966:	6093      	str	r3, [r2, #8]
 800e968:	da08      	bge.n	800e97c <__sfputc_r+0x1e>
 800e96a:	6994      	ldr	r4, [r2, #24]
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	db01      	blt.n	800e974 <__sfputc_r+0x16>
 800e970:	290a      	cmp	r1, #10
 800e972:	d103      	bne.n	800e97c <__sfputc_r+0x1e>
 800e974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e978:	f000 b932 	b.w	800ebe0 <__swbuf_r>
 800e97c:	6813      	ldr	r3, [r2, #0]
 800e97e:	1c58      	adds	r0, r3, #1
 800e980:	6010      	str	r0, [r2, #0]
 800e982:	7019      	strb	r1, [r3, #0]
 800e984:	4608      	mov	r0, r1
 800e986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <__sfputs_r>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	4614      	mov	r4, r2
 800e994:	18d5      	adds	r5, r2, r3
 800e996:	42ac      	cmp	r4, r5
 800e998:	d101      	bne.n	800e99e <__sfputs_r+0x12>
 800e99a:	2000      	movs	r0, #0
 800e99c:	e007      	b.n	800e9ae <__sfputs_r+0x22>
 800e99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a2:	463a      	mov	r2, r7
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f7ff ffda 	bl	800e95e <__sfputc_r>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	d1f3      	bne.n	800e996 <__sfputs_r+0xa>
 800e9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	b09d      	sub	sp, #116	@ 0x74
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6a03      	ldr	r3, [r0, #32]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f7fe facc 	bl	800cf60 <__sinit>
 800e9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9ca:	07d9      	lsls	r1, r3, #31
 800e9cc:	d405      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	059a      	lsls	r2, r3, #22
 800e9d2:	d402      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9d6:	f7fe fbba 	bl	800d14e <__retarget_lock_acquire_recursive>
 800e9da:	89ab      	ldrh	r3, [r5, #12]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d501      	bpl.n	800e9e4 <_vfiprintf_r+0x34>
 800e9e0:	692b      	ldr	r3, [r5, #16]
 800e9e2:	b99b      	cbnz	r3, 800ea0c <_vfiprintf_r+0x5c>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f000 f938 	bl	800ec5c <__swsetup_r>
 800e9ec:	b170      	cbz	r0, 800ea0c <_vfiprintf_r+0x5c>
 800e9ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f0:	07dc      	lsls	r4, r3, #31
 800e9f2:	d504      	bpl.n	800e9fe <_vfiprintf_r+0x4e>
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f8:	b01d      	add	sp, #116	@ 0x74
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	0598      	lsls	r0, r3, #22
 800ea02:	d4f7      	bmi.n	800e9f4 <_vfiprintf_r+0x44>
 800ea04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea06:	f7fe fba3 	bl	800d150 <__retarget_lock_release_recursive>
 800ea0a:	e7f3      	b.n	800e9f4 <_vfiprintf_r+0x44>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea10:	2320      	movs	r3, #32
 800ea12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea1a:	2330      	movs	r3, #48	@ 0x30
 800ea1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebcc <_vfiprintf_r+0x21c>
 800ea20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea24:	f04f 0901 	mov.w	r9, #1
 800ea28:	4623      	mov	r3, r4
 800ea2a:	469a      	mov	sl, r3
 800ea2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea30:	b10a      	cbz	r2, 800ea36 <_vfiprintf_r+0x86>
 800ea32:	2a25      	cmp	r2, #37	@ 0x25
 800ea34:	d1f9      	bne.n	800ea2a <_vfiprintf_r+0x7a>
 800ea36:	ebba 0b04 	subs.w	fp, sl, r4
 800ea3a:	d00b      	beq.n	800ea54 <_vfiprintf_r+0xa4>
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	4622      	mov	r2, r4
 800ea40:	4629      	mov	r1, r5
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7ff ffa2 	bl	800e98c <__sfputs_r>
 800ea48:	3001      	adds	r0, #1
 800ea4a:	f000 80a7 	beq.w	800eb9c <_vfiprintf_r+0x1ec>
 800ea4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea50:	445a      	add	r2, fp
 800ea52:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea54:	f89a 3000 	ldrb.w	r3, [sl]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 809f 	beq.w	800eb9c <_vfiprintf_r+0x1ec>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	f04f 32ff 	mov.w	r2, #4294967295
 800ea64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea68:	f10a 0a01 	add.w	sl, sl, #1
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea74:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea76:	4654      	mov	r4, sl
 800ea78:	2205      	movs	r2, #5
 800ea7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea7e:	4853      	ldr	r0, [pc, #332]	@ (800ebcc <_vfiprintf_r+0x21c>)
 800ea80:	f7f1 fbce 	bl	8000220 <memchr>
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	b9d8      	cbnz	r0, 800eac0 <_vfiprintf_r+0x110>
 800ea88:	06d1      	lsls	r1, r2, #27
 800ea8a:	bf44      	itt	mi
 800ea8c:	2320      	movmi	r3, #32
 800ea8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea92:	0713      	lsls	r3, r2, #28
 800ea94:	bf44      	itt	mi
 800ea96:	232b      	movmi	r3, #43	@ 0x2b
 800ea98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaa2:	d015      	beq.n	800ead0 <_vfiprintf_r+0x120>
 800eaa4:	9a07      	ldr	r2, [sp, #28]
 800eaa6:	4654      	mov	r4, sl
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	f04f 0c0a 	mov.w	ip, #10
 800eaae:	4621      	mov	r1, r4
 800eab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab4:	3b30      	subs	r3, #48	@ 0x30
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d94b      	bls.n	800eb52 <_vfiprintf_r+0x1a2>
 800eaba:	b1b0      	cbz	r0, 800eaea <_vfiprintf_r+0x13a>
 800eabc:	9207      	str	r2, [sp, #28]
 800eabe:	e014      	b.n	800eaea <_vfiprintf_r+0x13a>
 800eac0:	eba0 0308 	sub.w	r3, r0, r8
 800eac4:	fa09 f303 	lsl.w	r3, r9, r3
 800eac8:	4313      	orrs	r3, r2
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	46a2      	mov	sl, r4
 800eace:	e7d2      	b.n	800ea76 <_vfiprintf_r+0xc6>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	1d19      	adds	r1, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	9103      	str	r1, [sp, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	bfbb      	ittet	lt
 800eadc:	425b      	neglt	r3, r3
 800eade:	f042 0202 	orrlt.w	r2, r2, #2
 800eae2:	9307      	strge	r3, [sp, #28]
 800eae4:	9307      	strlt	r3, [sp, #28]
 800eae6:	bfb8      	it	lt
 800eae8:	9204      	strlt	r2, [sp, #16]
 800eaea:	7823      	ldrb	r3, [r4, #0]
 800eaec:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaee:	d10a      	bne.n	800eb06 <_vfiprintf_r+0x156>
 800eaf0:	7863      	ldrb	r3, [r4, #1]
 800eaf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaf4:	d132      	bne.n	800eb5c <_vfiprintf_r+0x1ac>
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	1d1a      	adds	r2, r3, #4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	9203      	str	r2, [sp, #12]
 800eafe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb02:	3402      	adds	r4, #2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebdc <_vfiprintf_r+0x22c>
 800eb0a:	7821      	ldrb	r1, [r4, #0]
 800eb0c:	2203      	movs	r2, #3
 800eb0e:	4650      	mov	r0, sl
 800eb10:	f7f1 fb86 	bl	8000220 <memchr>
 800eb14:	b138      	cbz	r0, 800eb26 <_vfiprintf_r+0x176>
 800eb16:	9b04      	ldr	r3, [sp, #16]
 800eb18:	eba0 000a 	sub.w	r0, r0, sl
 800eb1c:	2240      	movs	r2, #64	@ 0x40
 800eb1e:	4082      	lsls	r2, r0
 800eb20:	4313      	orrs	r3, r2
 800eb22:	3401      	adds	r4, #1
 800eb24:	9304      	str	r3, [sp, #16]
 800eb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2a:	4829      	ldr	r0, [pc, #164]	@ (800ebd0 <_vfiprintf_r+0x220>)
 800eb2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb30:	2206      	movs	r2, #6
 800eb32:	f7f1 fb75 	bl	8000220 <memchr>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d03f      	beq.n	800ebba <_vfiprintf_r+0x20a>
 800eb3a:	4b26      	ldr	r3, [pc, #152]	@ (800ebd4 <_vfiprintf_r+0x224>)
 800eb3c:	bb1b      	cbnz	r3, 800eb86 <_vfiprintf_r+0x1d6>
 800eb3e:	9b03      	ldr	r3, [sp, #12]
 800eb40:	3307      	adds	r3, #7
 800eb42:	f023 0307 	bic.w	r3, r3, #7
 800eb46:	3308      	adds	r3, #8
 800eb48:	9303      	str	r3, [sp, #12]
 800eb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb4c:	443b      	add	r3, r7
 800eb4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb50:	e76a      	b.n	800ea28 <_vfiprintf_r+0x78>
 800eb52:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb56:	460c      	mov	r4, r1
 800eb58:	2001      	movs	r0, #1
 800eb5a:	e7a8      	b.n	800eaae <_vfiprintf_r+0xfe>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	3401      	adds	r4, #1
 800eb60:	9305      	str	r3, [sp, #20]
 800eb62:	4619      	mov	r1, r3
 800eb64:	f04f 0c0a 	mov.w	ip, #10
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb6e:	3a30      	subs	r2, #48	@ 0x30
 800eb70:	2a09      	cmp	r2, #9
 800eb72:	d903      	bls.n	800eb7c <_vfiprintf_r+0x1cc>
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0c6      	beq.n	800eb06 <_vfiprintf_r+0x156>
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	e7c4      	b.n	800eb06 <_vfiprintf_r+0x156>
 800eb7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb80:	4604      	mov	r4, r0
 800eb82:	2301      	movs	r3, #1
 800eb84:	e7f0      	b.n	800eb68 <_vfiprintf_r+0x1b8>
 800eb86:	ab03      	add	r3, sp, #12
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	4b12      	ldr	r3, [pc, #72]	@ (800ebd8 <_vfiprintf_r+0x228>)
 800eb8e:	a904      	add	r1, sp, #16
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7fd fda1 	bl	800c6d8 <_printf_float>
 800eb96:	4607      	mov	r7, r0
 800eb98:	1c78      	adds	r0, r7, #1
 800eb9a:	d1d6      	bne.n	800eb4a <_vfiprintf_r+0x19a>
 800eb9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb9e:	07d9      	lsls	r1, r3, #31
 800eba0:	d405      	bmi.n	800ebae <_vfiprintf_r+0x1fe>
 800eba2:	89ab      	ldrh	r3, [r5, #12]
 800eba4:	059a      	lsls	r2, r3, #22
 800eba6:	d402      	bmi.n	800ebae <_vfiprintf_r+0x1fe>
 800eba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebaa:	f7fe fad1 	bl	800d150 <__retarget_lock_release_recursive>
 800ebae:	89ab      	ldrh	r3, [r5, #12]
 800ebb0:	065b      	lsls	r3, r3, #25
 800ebb2:	f53f af1f 	bmi.w	800e9f4 <_vfiprintf_r+0x44>
 800ebb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebb8:	e71e      	b.n	800e9f8 <_vfiprintf_r+0x48>
 800ebba:	ab03      	add	r3, sp, #12
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4b05      	ldr	r3, [pc, #20]	@ (800ebd8 <_vfiprintf_r+0x228>)
 800ebc2:	a904      	add	r1, sp, #16
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f7fe f81f 	bl	800cc08 <_printf_i>
 800ebca:	e7e4      	b.n	800eb96 <_vfiprintf_r+0x1e6>
 800ebcc:	0800f25f 	.word	0x0800f25f
 800ebd0:	0800f269 	.word	0x0800f269
 800ebd4:	0800c6d9 	.word	0x0800c6d9
 800ebd8:	0800e98d 	.word	0x0800e98d
 800ebdc:	0800f265 	.word	0x0800f265

0800ebe0 <__swbuf_r>:
 800ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebe2:	460e      	mov	r6, r1
 800ebe4:	4614      	mov	r4, r2
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	b118      	cbz	r0, 800ebf2 <__swbuf_r+0x12>
 800ebea:	6a03      	ldr	r3, [r0, #32]
 800ebec:	b90b      	cbnz	r3, 800ebf2 <__swbuf_r+0x12>
 800ebee:	f7fe f9b7 	bl	800cf60 <__sinit>
 800ebf2:	69a3      	ldr	r3, [r4, #24]
 800ebf4:	60a3      	str	r3, [r4, #8]
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	071a      	lsls	r2, r3, #28
 800ebfa:	d501      	bpl.n	800ec00 <__swbuf_r+0x20>
 800ebfc:	6923      	ldr	r3, [r4, #16]
 800ebfe:	b943      	cbnz	r3, 800ec12 <__swbuf_r+0x32>
 800ec00:	4621      	mov	r1, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	f000 f82a 	bl	800ec5c <__swsetup_r>
 800ec08:	b118      	cbz	r0, 800ec12 <__swbuf_r+0x32>
 800ec0a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec0e:	4638      	mov	r0, r7
 800ec10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	6922      	ldr	r2, [r4, #16]
 800ec16:	1a98      	subs	r0, r3, r2
 800ec18:	6963      	ldr	r3, [r4, #20]
 800ec1a:	b2f6      	uxtb	r6, r6
 800ec1c:	4283      	cmp	r3, r0
 800ec1e:	4637      	mov	r7, r6
 800ec20:	dc05      	bgt.n	800ec2e <__swbuf_r+0x4e>
 800ec22:	4621      	mov	r1, r4
 800ec24:	4628      	mov	r0, r5
 800ec26:	f7ff fde9 	bl	800e7fc <_fflush_r>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d1ed      	bne.n	800ec0a <__swbuf_r+0x2a>
 800ec2e:	68a3      	ldr	r3, [r4, #8]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	60a3      	str	r3, [r4, #8]
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	1c5a      	adds	r2, r3, #1
 800ec38:	6022      	str	r2, [r4, #0]
 800ec3a:	701e      	strb	r6, [r3, #0]
 800ec3c:	6962      	ldr	r2, [r4, #20]
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d004      	beq.n	800ec4e <__swbuf_r+0x6e>
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	07db      	lsls	r3, r3, #31
 800ec48:	d5e1      	bpl.n	800ec0e <__swbuf_r+0x2e>
 800ec4a:	2e0a      	cmp	r6, #10
 800ec4c:	d1df      	bne.n	800ec0e <__swbuf_r+0x2e>
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4628      	mov	r0, r5
 800ec52:	f7ff fdd3 	bl	800e7fc <_fflush_r>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d0d9      	beq.n	800ec0e <__swbuf_r+0x2e>
 800ec5a:	e7d6      	b.n	800ec0a <__swbuf_r+0x2a>

0800ec5c <__swsetup_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4b29      	ldr	r3, [pc, #164]	@ (800ed04 <__swsetup_r+0xa8>)
 800ec60:	4605      	mov	r5, r0
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	460c      	mov	r4, r1
 800ec66:	b118      	cbz	r0, 800ec70 <__swsetup_r+0x14>
 800ec68:	6a03      	ldr	r3, [r0, #32]
 800ec6a:	b90b      	cbnz	r3, 800ec70 <__swsetup_r+0x14>
 800ec6c:	f7fe f978 	bl	800cf60 <__sinit>
 800ec70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec74:	0719      	lsls	r1, r3, #28
 800ec76:	d422      	bmi.n	800ecbe <__swsetup_r+0x62>
 800ec78:	06da      	lsls	r2, r3, #27
 800ec7a:	d407      	bmi.n	800ec8c <__swsetup_r+0x30>
 800ec7c:	2209      	movs	r2, #9
 800ec7e:	602a      	str	r2, [r5, #0]
 800ec80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec84:	81a3      	strh	r3, [r4, #12]
 800ec86:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8a:	e033      	b.n	800ecf4 <__swsetup_r+0x98>
 800ec8c:	0758      	lsls	r0, r3, #29
 800ec8e:	d512      	bpl.n	800ecb6 <__swsetup_r+0x5a>
 800ec90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec92:	b141      	cbz	r1, 800eca6 <__swsetup_r+0x4a>
 800ec94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec98:	4299      	cmp	r1, r3
 800ec9a:	d002      	beq.n	800eca2 <__swsetup_r+0x46>
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	f7ff f8a7 	bl	800ddf0 <_free_r>
 800eca2:	2300      	movs	r3, #0
 800eca4:	6363      	str	r3, [r4, #52]	@ 0x34
 800eca6:	89a3      	ldrh	r3, [r4, #12]
 800eca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ecac:	81a3      	strh	r3, [r4, #12]
 800ecae:	2300      	movs	r3, #0
 800ecb0:	6063      	str	r3, [r4, #4]
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	89a3      	ldrh	r3, [r4, #12]
 800ecb8:	f043 0308 	orr.w	r3, r3, #8
 800ecbc:	81a3      	strh	r3, [r4, #12]
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	b94b      	cbnz	r3, 800ecd6 <__swsetup_r+0x7a>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ecc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eccc:	d003      	beq.n	800ecd6 <__swsetup_r+0x7a>
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f000 f883 	bl	800eddc <__smakebuf_r>
 800ecd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecda:	f013 0201 	ands.w	r2, r3, #1
 800ecde:	d00a      	beq.n	800ecf6 <__swsetup_r+0x9a>
 800ece0:	2200      	movs	r2, #0
 800ece2:	60a2      	str	r2, [r4, #8]
 800ece4:	6962      	ldr	r2, [r4, #20]
 800ece6:	4252      	negs	r2, r2
 800ece8:	61a2      	str	r2, [r4, #24]
 800ecea:	6922      	ldr	r2, [r4, #16]
 800ecec:	b942      	cbnz	r2, 800ed00 <__swsetup_r+0xa4>
 800ecee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecf2:	d1c5      	bne.n	800ec80 <__swsetup_r+0x24>
 800ecf4:	bd38      	pop	{r3, r4, r5, pc}
 800ecf6:	0799      	lsls	r1, r3, #30
 800ecf8:	bf58      	it	pl
 800ecfa:	6962      	ldrpl	r2, [r4, #20]
 800ecfc:	60a2      	str	r2, [r4, #8]
 800ecfe:	e7f4      	b.n	800ecea <__swsetup_r+0x8e>
 800ed00:	2000      	movs	r0, #0
 800ed02:	e7f7      	b.n	800ecf4 <__swsetup_r+0x98>
 800ed04:	20000040 	.word	0x20000040

0800ed08 <_raise_r>:
 800ed08:	291f      	cmp	r1, #31
 800ed0a:	b538      	push	{r3, r4, r5, lr}
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	460c      	mov	r4, r1
 800ed10:	d904      	bls.n	800ed1c <_raise_r+0x14>
 800ed12:	2316      	movs	r3, #22
 800ed14:	6003      	str	r3, [r0, #0]
 800ed16:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed1e:	b112      	cbz	r2, 800ed26 <_raise_r+0x1e>
 800ed20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed24:	b94b      	cbnz	r3, 800ed3a <_raise_r+0x32>
 800ed26:	4628      	mov	r0, r5
 800ed28:	f000 f830 	bl	800ed8c <_getpid_r>
 800ed2c:	4622      	mov	r2, r4
 800ed2e:	4601      	mov	r1, r0
 800ed30:	4628      	mov	r0, r5
 800ed32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed36:	f000 b817 	b.w	800ed68 <_kill_r>
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d00a      	beq.n	800ed54 <_raise_r+0x4c>
 800ed3e:	1c59      	adds	r1, r3, #1
 800ed40:	d103      	bne.n	800ed4a <_raise_r+0x42>
 800ed42:	2316      	movs	r3, #22
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	2001      	movs	r0, #1
 800ed48:	e7e7      	b.n	800ed1a <_raise_r+0x12>
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed50:	4620      	mov	r0, r4
 800ed52:	4798      	blx	r3
 800ed54:	2000      	movs	r0, #0
 800ed56:	e7e0      	b.n	800ed1a <_raise_r+0x12>

0800ed58 <raise>:
 800ed58:	4b02      	ldr	r3, [pc, #8]	@ (800ed64 <raise+0xc>)
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	6818      	ldr	r0, [r3, #0]
 800ed5e:	f7ff bfd3 	b.w	800ed08 <_raise_r>
 800ed62:	bf00      	nop
 800ed64:	20000040 	.word	0x20000040

0800ed68 <_kill_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	@ (800ed88 <_kill_r+0x20>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	4611      	mov	r1, r2
 800ed74:	602b      	str	r3, [r5, #0]
 800ed76:	f7f3 fb11 	bl	800239c <_kill>
 800ed7a:	1c43      	adds	r3, r0, #1
 800ed7c:	d102      	bne.n	800ed84 <_kill_r+0x1c>
 800ed7e:	682b      	ldr	r3, [r5, #0]
 800ed80:	b103      	cbz	r3, 800ed84 <_kill_r+0x1c>
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	bf00      	nop
 800ed88:	200013a8 	.word	0x200013a8

0800ed8c <_getpid_r>:
 800ed8c:	f7f3 bafe 	b.w	800238c <_getpid>

0800ed90 <__swhatbuf_r>:
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	460c      	mov	r4, r1
 800ed94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	b096      	sub	sp, #88	@ 0x58
 800ed9c:	4615      	mov	r5, r2
 800ed9e:	461e      	mov	r6, r3
 800eda0:	da0d      	bge.n	800edbe <__swhatbuf_r+0x2e>
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eda8:	f04f 0100 	mov.w	r1, #0
 800edac:	bf14      	ite	ne
 800edae:	2340      	movne	r3, #64	@ 0x40
 800edb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edb4:	2000      	movs	r0, #0
 800edb6:	6031      	str	r1, [r6, #0]
 800edb8:	602b      	str	r3, [r5, #0]
 800edba:	b016      	add	sp, #88	@ 0x58
 800edbc:	bd70      	pop	{r4, r5, r6, pc}
 800edbe:	466a      	mov	r2, sp
 800edc0:	f000 f848 	bl	800ee54 <_fstat_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	dbec      	blt.n	800eda2 <__swhatbuf_r+0x12>
 800edc8:	9901      	ldr	r1, [sp, #4]
 800edca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edd2:	4259      	negs	r1, r3
 800edd4:	4159      	adcs	r1, r3
 800edd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edda:	e7eb      	b.n	800edb4 <__swhatbuf_r+0x24>

0800eddc <__smakebuf_r>:
 800eddc:	898b      	ldrh	r3, [r1, #12]
 800edde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ede0:	079d      	lsls	r5, r3, #30
 800ede2:	4606      	mov	r6, r0
 800ede4:	460c      	mov	r4, r1
 800ede6:	d507      	bpl.n	800edf8 <__smakebuf_r+0x1c>
 800ede8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	6123      	str	r3, [r4, #16]
 800edf0:	2301      	movs	r3, #1
 800edf2:	6163      	str	r3, [r4, #20]
 800edf4:	b003      	add	sp, #12
 800edf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edf8:	ab01      	add	r3, sp, #4
 800edfa:	466a      	mov	r2, sp
 800edfc:	f7ff ffc8 	bl	800ed90 <__swhatbuf_r>
 800ee00:	9f00      	ldr	r7, [sp, #0]
 800ee02:	4605      	mov	r5, r0
 800ee04:	4639      	mov	r1, r7
 800ee06:	4630      	mov	r0, r6
 800ee08:	f7ff f866 	bl	800ded8 <_malloc_r>
 800ee0c:	b948      	cbnz	r0, 800ee22 <__smakebuf_r+0x46>
 800ee0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee12:	059a      	lsls	r2, r3, #22
 800ee14:	d4ee      	bmi.n	800edf4 <__smakebuf_r+0x18>
 800ee16:	f023 0303 	bic.w	r3, r3, #3
 800ee1a:	f043 0302 	orr.w	r3, r3, #2
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	e7e2      	b.n	800ede8 <__smakebuf_r+0xc>
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	6020      	str	r0, [r4, #0]
 800ee26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee2a:	81a3      	strh	r3, [r4, #12]
 800ee2c:	9b01      	ldr	r3, [sp, #4]
 800ee2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee32:	b15b      	cbz	r3, 800ee4c <__smakebuf_r+0x70>
 800ee34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f000 f81d 	bl	800ee78 <_isatty_r>
 800ee3e:	b128      	cbz	r0, 800ee4c <__smakebuf_r+0x70>
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	f023 0303 	bic.w	r3, r3, #3
 800ee46:	f043 0301 	orr.w	r3, r3, #1
 800ee4a:	81a3      	strh	r3, [r4, #12]
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	431d      	orrs	r5, r3
 800ee50:	81a5      	strh	r5, [r4, #12]
 800ee52:	e7cf      	b.n	800edf4 <__smakebuf_r+0x18>

0800ee54 <_fstat_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d07      	ldr	r5, [pc, #28]	@ (800ee74 <_fstat_r+0x20>)
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	602b      	str	r3, [r5, #0]
 800ee62:	f7f3 fafb 	bl	800245c <_fstat>
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	d102      	bne.n	800ee70 <_fstat_r+0x1c>
 800ee6a:	682b      	ldr	r3, [r5, #0]
 800ee6c:	b103      	cbz	r3, 800ee70 <_fstat_r+0x1c>
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	bf00      	nop
 800ee74:	200013a8 	.word	0x200013a8

0800ee78 <_isatty_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4d06      	ldr	r5, [pc, #24]	@ (800ee94 <_isatty_r+0x1c>)
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4604      	mov	r4, r0
 800ee80:	4608      	mov	r0, r1
 800ee82:	602b      	str	r3, [r5, #0]
 800ee84:	f7f3 fafa 	bl	800247c <_isatty>
 800ee88:	1c43      	adds	r3, r0, #1
 800ee8a:	d102      	bne.n	800ee92 <_isatty_r+0x1a>
 800ee8c:	682b      	ldr	r3, [r5, #0]
 800ee8e:	b103      	cbz	r3, 800ee92 <_isatty_r+0x1a>
 800ee90:	6023      	str	r3, [r4, #0]
 800ee92:	bd38      	pop	{r3, r4, r5, pc}
 800ee94:	200013a8 	.word	0x200013a8

0800ee98 <_init>:
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9a:	bf00      	nop
 800ee9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee9e:	bc08      	pop	{r3}
 800eea0:	469e      	mov	lr, r3
 800eea2:	4770      	bx	lr

0800eea4 <_fini>:
 800eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea6:	bf00      	nop
 800eea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeaa:	bc08      	pop	{r3}
 800eeac:	469e      	mov	lr, r3
 800eeae:	4770      	bx	lr
